#line 1 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"

#line 717 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"
#pragma region Input Buffer SAL 1 compatibility macros

#line 1481 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros

#line 2900 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"


#line 2943 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"


#line 2973 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"



#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/concurrencysal.h"

#line 2991 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/sal.h"

#line 68 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 72 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
#pragma pack(push, 8 )

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/vadefs.h"

#line 28 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/vadefs.h"
#pragma pack(push, 8 )

#line 50 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/vadefs.h"
typedef   unsigned int   uintptr_t;








typedef char *  va_list;

#line 144 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/vadefs.h"
#pragma pack(pop)

#line 75 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 496 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
typedef   unsigned int   size_t;






typedef size_t rsize_t;








typedef   int            intptr_t;

#line 530 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
typedef   int            ptrdiff_t;





typedef unsigned short wchar_t;




typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 563 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
typedef int errno_t;



typedef   long __time32_t;




typedef __int64 __time64_t;







typedef __time64_t time_t;

#line 635 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
 __declspec(dllimport)  void __cdecl _invalid_parameter(   const wchar_t *,    const wchar_t *,    const wchar_t *, unsigned int, uintptr_t);

#line 641 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
__declspec(dllimport)  __declspec(noreturn)
void __cdecl _invoke_watson(   const wchar_t *,    const wchar_t *,    const wchar_t *, unsigned int, uintptr_t);

#line 2072 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;

#line 2148 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"
#pragma pack(pop)

#line 21 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"

#line 26 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma pack(push, 8 )

#line 63 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 137 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
__declspec(dllimport)  FILE * __cdecl __iob_func(void);






typedef __int64 fpos_t;

#line 175 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
  __declspec(dllimport)  int __cdecl _filbuf(   FILE * _File );
  __declspec(dllimport)  int __cdecl _flsbuf(   int _Ch,    FILE * _File);

  __declspec(dllimport)  FILE * __cdecl _fsopen(   const char * _Filename,    const char * _Mode,    int _ShFlag);

__declspec(dllimport)  void __cdecl clearerr(   FILE * _File);

  __declspec(dllimport)  errno_t __cdecl clearerr_s(   FILE * _File );

  __declspec(dllimport)  int __cdecl fclose(   FILE * _File);
  __declspec(dllimport)  int __cdecl _fcloseall(void);

  __declspec(dllimport)  FILE * __cdecl _fdopen(   int _FileHandle,    const char * _Mode);

  __declspec(dllimport)  int __cdecl feof(   FILE * _File);
  __declspec(dllimport)  int __cdecl ferror(   FILE * _File);
  __declspec(dllimport)  int __cdecl fflush(   FILE * _File);
  __declspec(dllimport)  int __cdecl fgetc(   FILE * _File);
  __declspec(dllimport)  int __cdecl _fgetchar(void);
  __declspec(dllimport)  int __cdecl fgetpos(   FILE * _File ,    fpos_t * _Pos);
  __declspec(dllimport)  char * __cdecl fgets(   char * _Buf,    int _MaxCount,    FILE * _File);

  __declspec(dllimport)  int __cdecl _fileno(   FILE * _File);

#line 204 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
  __declspec(dllimport)  char * __cdecl _tempnam(   const char * _DirName,    const char * _FilePrefix);

#line 210 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
  __declspec(dllimport)  int __cdecl _flushall(void);
    __declspec(dllimport)  FILE * __cdecl fopen(   const char * _Filename,    const char * _Mode);

  __declspec(dllimport)  errno_t __cdecl fopen_s(   FILE ** _File,    const char * _Filename,    const char * _Mode);

  __declspec(dllimport)  int __cdecl fprintf(   FILE * _File,       const char * _Format, ...);

  __declspec(dllimport)  int __cdecl fprintf_s(   FILE * _File,       const char * _Format, ...);

  __declspec(dllimport)  int __cdecl fputc(   int _Ch,    FILE * _File);
  __declspec(dllimport)  int __cdecl _fputchar(   int _Ch);
  __declspec(dllimport)  int __cdecl fputs(   const char * _Str,    FILE * _File);
  __declspec(dllimport)  size_t __cdecl fread(   void * _DstBuf,    size_t _ElementSize,    size_t _Count,    FILE * _File);

  __declspec(dllimport)  size_t __cdecl fread_s(   void * _DstBuf,    size_t _DstSize,    size_t _ElementSize,    size_t _Count,    FILE * _File);

    __declspec(dllimport)  FILE * __cdecl freopen(   const char * _Filename,    const char * _Mode,    FILE * _File);

  __declspec(dllimport)  errno_t __cdecl freopen_s(   FILE ** _File,    const char * _Filename,    const char * _Mode,    FILE * _OldFile);

    __declspec(dllimport)  int __cdecl fscanf(   FILE * _File,       const char * _Format, ...);
    __declspec(dllimport)  int __cdecl _fscanf_l(   FILE * _File,       const char * _Format,    _locale_t _Locale, ...);
#line 232 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 233 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:6530)

  __declspec(dllimport)  int __cdecl fscanf_s(   FILE * _File,       const char * _Format, ...);

  __declspec(dllimport)  int __cdecl _fscanf_s_l(   FILE * _File,       const char * _Format,    _locale_t _Locale, ...);
#line 238 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)
  __declspec(dllimport)  int __cdecl fsetpos(   FILE * _File,    const fpos_t * _Pos);
  __declspec(dllimport)  int __cdecl fseek(   FILE * _File,    long _Offset,    int _Origin);
  __declspec(dllimport)  long __cdecl ftell(   FILE * _File);

  __declspec(dllimport)  int __cdecl _fseeki64(   FILE * _File,    __int64 _Offset,    int _Origin);
  __declspec(dllimport)  __int64 __cdecl _ftelli64(   FILE * _File);

  __declspec(dllimport)  size_t __cdecl fwrite(   const void * _Str,    size_t _Size,    size_t _Count,    FILE * _File);
  __declspec(dllimport)  int __cdecl getc(   FILE * _File);
  __declspec(dllimport)  int __cdecl getchar(void);
  __declspec(dllimport)  int __cdecl _getmaxstdio(void);

__declspec(dllimport)  char * __cdecl gets_s(   char * _Buf,    rsize_t _Size);


__declspec(dllimport) char * __cdecl gets( char *_Buffer);
 int __cdecl _getw(   FILE * _File);


__declspec(dllimport)  void __cdecl perror(   const char * _ErrMsg);


  __declspec(dllimport)  int __cdecl _pclose(   FILE * _File);
  __declspec(dllimport)  FILE * __cdecl _popen(   const char * _Command,    const char * _Mode);

  __declspec(dllimport)  int __cdecl printf(      const char * _Format, ...);

  __declspec(dllimport)  int __cdecl printf_s(      const char * _Format, ...);

  __declspec(dllimport)  int __cdecl putc(   int _Ch,    FILE * _File);
  __declspec(dllimport)  int __cdecl putchar(   int _Ch);
  __declspec(dllimport)  int __cdecl puts(   const char * _Str);
  __declspec(dllimport)  int __cdecl _putw(   int _Word,    FILE * _File);


__declspec(dllimport)  int __cdecl remove(   const char * _Filename);
  __declspec(dllimport)  int __cdecl rename(   const char * _OldFilename,    const char * _NewFilename);
__declspec(dllimport)  int __cdecl _unlink(   const char * _Filename);

#line 281 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
__declspec(dllimport)  void __cdecl rewind(   FILE * _File);
  __declspec(dllimport)  int __cdecl _rmtmp(void);
    __declspec(dllimport)  int __cdecl scanf(      const char * _Format, ...);
    __declspec(dllimport)  int __cdecl _scanf_l(      const char * _Format,    _locale_t _Locale, ...);
#line 285 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 286 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:6530)

  __declspec(dllimport)  int __cdecl scanf_s(      const char * _Format, ...);

  __declspec(dllimport)  int __cdecl _scanf_s_l(      const char * _Format,    _locale_t _Locale, ...);
#line 291 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)
  __declspec(dllimport)  void __cdecl setbuf(   FILE * _File,       char * _Buffer);
  __declspec(dllimport)  int __cdecl _setmaxstdio(   int _Max);
  __declspec(dllimport)  unsigned int __cdecl _set_output_format(   unsigned int _Format);
  __declspec(dllimport)  unsigned int __cdecl _get_output_format(void);
  __declspec(dllimport)  int __cdecl setvbuf(   FILE * _File,    char * _Buf,    int _Mode,    size_t _Size);
  __declspec(dllimport)  int __cdecl _snprintf_s(   char * _DstBuf,    size_t _SizeInBytes,    size_t _MaxCount,       const char * _Format, ...);


  __declspec(dllimport)  int __cdecl sprintf_s(   char * _DstBuf,    size_t _SizeInBytes,       const char * _Format, ...);


  __declspec(dllimport)  int __cdecl _scprintf(      const char * _Format, ...);
    __declspec(dllimport)  int __cdecl sscanf(   const char * _Src,       const char * _Format, ...);
    __declspec(dllimport)  int __cdecl _sscanf_l(   const char * _Src,       const char * _Format,    _locale_t _Locale, ...);
#line 306 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 307 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:6530)

  __declspec(dllimport)  int __cdecl sscanf_s(   const char * _Src,       const char * _Format, ...);

  __declspec(dllimport)  int __cdecl _sscanf_s_l(   const char * _Src,       const char * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl _snscanf(      const char * _Src,    size_t _MaxCount,       const char * _Format, ...);
    __declspec(dllimport)  int __cdecl _snscanf_l(      const char * _Src,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _snscanf_s(      const char * _Src,    size_t _MaxCount,       const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _snscanf_s_l(      const char * _Src,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
#line 316 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)
    __declspec(dllimport)  FILE * __cdecl tmpfile(void);

  __declspec(dllimport)  errno_t __cdecl tmpfile_s(      FILE ** _File);
  __declspec(dllimport)  errno_t __cdecl tmpnam_s(   char * _Buf,    rsize_t _Size);


__declspec(dllimport) char * __cdecl tmpnam( char *_Buffer);
  __declspec(dllimport)  int __cdecl ungetc(   int _Ch,    FILE * _File);
  __declspec(dllimport)  int __cdecl vfprintf(   FILE * _File,       const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vfscanf(   FILE * _File,       const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vfprintf_s(   FILE * _File,       const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vfscanf_s(   FILE * _File,       const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vprintf(      const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vscanf(      const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vprintf_s(      const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vscanf_s(      const char * _Format, va_list _ArgList);

    __declspec(dllimport)  int __cdecl vsnprintf(   char * _DstBuf,    size_t _MaxCount,       const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vsnprintf_s(   char * _DstBuf,    size_t _DstSize,    size_t _MaxCount,       const char * _Format, va_list _ArgList);


  __declspec(dllimport)  int __cdecl _vsnprintf_s(   char * _DstBuf,    size_t _SizeInBytes,    size_t _MaxCount,       const char * _Format, va_list _ArgList);

#line 344 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 345 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:4793)
__declspec(dllimport)  int __cdecl _snprintf(     char *_Dest,   size_t _Count,     const char * _Format, ...);      __declspec(dllimport)  int __cdecl _vsnprintf(     char *_Dest,   size_t _Count,     const char * _Format, va_list _Args);
#line 347 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)

__declspec(dllimport)  int __cdecl vsprintf_s(   char * _DstBuf,    size_t _SizeInBytes,       const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vsscanf_s(const char * _Src,       const char * _Format, va_list _ArgList);


#line 354 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 355 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:4793)
__declspec(dllimport) int __cdecl sprintf( char *_Dest, const char * _Format, ...);      __declspec(dllimport) int __cdecl vsprintf( char *_Dest, const char * _Format, va_list _Args);
  __declspec(dllimport)  int __cdecl vsscanf(const char * _srcBuf,       const char * _Format, va_list _ArgList);
#line 358 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)
  __declspec(dllimport)  int __cdecl _vscprintf(      const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _snprintf_c(   char * _DstBuf,    size_t _MaxCount,       const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _vsnprintf_c(   char *_DstBuf,    size_t _MaxCount,       const char * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _fprintf_p(   FILE * _File,       const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _printf_p(      const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _sprintf_p(   char * _Dst,    size_t _MaxCount,       const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _vfprintf_p(   FILE * _File,       const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vprintf_p(      const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsprintf_p(   char * _Dst,    size_t _MaxCount,       const char * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _scprintf_p(      const char * _Format, ...);
  __declspec(dllimport)  int __cdecl _vscprintf_p(      const char * _Format, va_list _ArgList);
__declspec(dllimport)  int __cdecl _set_printf_count_output(   int _Value);
__declspec(dllimport)  int __cdecl _get_printf_count_output(void);

  __declspec(dllimport)  int __cdecl _printf_l(      const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _printf_p_l(      const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _printf_s_l(      const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vprintf_l(      const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vprintf_p_l(      const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vprintf_s_l(      const char * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _fprintf_l(   FILE * _File,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _fprintf_p_l(   FILE * _File,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _fprintf_s_l(   FILE * _File,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vfprintf_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vfprintf_p_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vfprintf_s_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);

    __declspec(dllimport)  int __cdecl _sprintf_l(      char * _DstBuf,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _sprintf_p_l(   char * _DstBuf,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _sprintf_s_l(   char * _DstBuf,    size_t _DstSize,       const char * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl _vsprintf_l(      char * _DstBuf,    const char * _Format,    _locale_t, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsprintf_p_l(   char * _DstBuf,    size_t _MaxCount,       const char* _Format,    _locale_t _Locale,  va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsprintf_s_l(   char * _DstBuf,    size_t _DstSize,       const char * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _scprintf_l(      const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _scprintf_p_l(      const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vscprintf_l(      const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vscprintf_p_l(      const char * _Format,    _locale_t _Locale, va_list _ArgList);

    __declspec(dllimport)  int __cdecl _snprintf_l(   char * _DstBuf,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _snprintf_c_l(   char * _DstBuf,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _snprintf_s_l(   char * _DstBuf,    size_t _DstSize,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl _vsnprintf_l(   char * _DstBuf,    size_t _MaxCount,       const char * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsnprintf_c_l(   char * _DstBuf,    size_t _MaxCount, const char *,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsnprintf_s_l(   char * _DstBuf,    size_t _DstSize,    size_t _MaxCount,       const char* _Format,   _locale_t _Locale, va_list _ArgList);









  __declspec(dllimport)  FILE * __cdecl _wfsopen(   const wchar_t * _Filename,    const wchar_t * _Mode,    int _ShFlag);

  __declspec(dllimport)  wint_t __cdecl fgetwc(   FILE * _File);
  __declspec(dllimport)  wint_t __cdecl _fgetwchar(void);
  __declspec(dllimport)  wint_t __cdecl fputwc(   wchar_t _Ch,    FILE * _File);
  __declspec(dllimport)  wint_t __cdecl _fputwchar(   wchar_t _Ch);
  __declspec(dllimport)  wint_t __cdecl getwc(   FILE * _File);
  __declspec(dllimport)  wint_t __cdecl getwchar(void);
  __declspec(dllimport)  wint_t __cdecl putwc(   wchar_t _Ch,    FILE * _File);
  __declspec(dllimport)  wint_t __cdecl putwchar(   wchar_t _Ch);
  __declspec(dllimport)  wint_t __cdecl ungetwc(   wint_t _Ch,    FILE * _File);

  __declspec(dllimport)  wchar_t * __cdecl fgetws(   wchar_t * _Dst,    int _SizeInWords,    FILE * _File);
  __declspec(dllimport)  int __cdecl fputws(   const wchar_t * _Str,    FILE * _File);
  __declspec(dllimport)  wchar_t * __cdecl _getws_s(   wchar_t * _Str,    size_t _SizeInWords);

__declspec(dllimport) wchar_t * __cdecl _getws( wchar_t *_String);
  __declspec(dllimport)  int __cdecl _putws(   const wchar_t * _Str);

  __declspec(dllimport)  int __cdecl fwprintf(   FILE * _File,       const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl fwprintf_s(   FILE * _File,       const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl wprintf(      const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl wprintf_s(      const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl _scwprintf(      const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl vfwprintf(   FILE * _File,       const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vfwscanf(   FILE * _File,       const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vfwprintf_s(   FILE * _File,       const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vfwscanf_s(   FILE * _File,       const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vwprintf(      const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vwscanf(      const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl vwprintf_s(      const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vwscanf_s(      const wchar_t * _Format, va_list _ArgList);



__declspec(dllimport)  int __cdecl swprintf_s(   wchar_t * _Dst,    size_t _SizeInWords,       const wchar_t * _Format, ...);



__declspec(dllimport)  int __cdecl vswprintf_s(   wchar_t * _Dst,    size_t _SizeInWords,       const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl vswscanf_s(const wchar_t * _Src,       const wchar_t * _Format, va_list _ArgList);



  __declspec(dllimport)  int __cdecl vswscanf(const wchar_t * _srcBuf,       const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _swprintf_c(   wchar_t * _DstBuf,    size_t _SizeInWords,       const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _vswprintf_c(   wchar_t * _DstBuf,    size_t _SizeInWords,       const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _snwprintf_s(   wchar_t * _DstBuf,    size_t _SizeInWords,    size_t _MaxCount,       const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl _vsnwprintf_s(   wchar_t * _DstBuf,    size_t _SizeInWords,    size_t _MaxCount,       const wchar_t * _Format, va_list _ArgList);

#line 475 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 476 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:4793)
__declspec(dllimport)  int __cdecl _snwprintf(     wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, ...);      __declspec(dllimport)  int __cdecl _vsnwprintf(     wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, va_list _Args);
#line 478 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)

  __declspec(dllimport)  int __cdecl _fwprintf_p(   FILE * _File,       const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _wprintf_p(      const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _vfwprintf_p(   FILE * _File,       const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vwprintf_p(      const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _swprintf_p(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _vswprintf_p(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _scwprintf_p(      const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _vscwprintf_p(      const wchar_t * _Format, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _wprintf_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _wprintf_p_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _wprintf_s_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vwprintf_l(      const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vwprintf_p_l(      const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vwprintf_s_l(      const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _fwprintf_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _fwprintf_p_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _fwprintf_s_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vfwprintf_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vfwprintf_p_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vfwprintf_s_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _swprintf_c_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _swprintf_p_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _swprintf_s_l(   wchar_t * _DstBuf,    size_t _DstSize,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vswprintf_c_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vswprintf_p_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vswprintf_s_l(   wchar_t * _DstBuf,    size_t _DstSize,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport)  int __cdecl _scwprintf_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _scwprintf_p_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _vscwprintf_p_l(      const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

    __declspec(dllimport)  int __cdecl _snwprintf_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _snwprintf_s_l(   wchar_t * _DstBuf,    size_t _DstSize,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl _vsnwprintf_l(   wchar_t * _DstBuf,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vsnwprintf_s_l(   wchar_t * _DstBuf,    size_t _DstSize,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

#line 531 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 532 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:4141 4996 4793)
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __declspec(dllimport)  int __cdecl _swprintf(     wchar_t *_Dest,     const wchar_t * _Format, ...);      __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __declspec(dllimport)  int __cdecl _vswprintf(     wchar_t *_Dest,     const wchar_t * _Format, va_list _Args);
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __declspec(dllimport)  int __cdecl __swprintf_l(     wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, ...);      __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __declspec(dllimport)  int __cdecl __vswprintf_l(     wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#line 535 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"

#line 34 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( push )
#line 35 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(   wchar_t * _String, size_t _Count,       const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list) ( &(_Format) )  + ( (sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1) )  ) ;
    _Ret = _vswprintf_c_l(_String, _Count, _Format,  ((void *)0) , _Arglist);
    ( _Arglist = (va_list)0 ) ;
    return _Ret;
}
#line 45 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( pop )

#line 47 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( push )
#line 48 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( disable : 4412 )
static __inline int  __cdecl  vswprintf(   wchar_t * _String, size_t _Count,       const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format,  ((void *)0) , _Ap);
}
#line 53 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( pop )

#line 58 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( push )
#line 59 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(   wchar_t * _String, size_t _Count,       const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( _Arglist = (va_list) ( &(_Plocinfo) )  + ( (sizeof(_Plocinfo) + sizeof(int) - 1) & ~(sizeof(int) - 1) )  ) ;
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 ) ;
    return _Ret;
}
#line 69 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( pop )

#line 71 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( push )
#line 72 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( disable : 4412 )
static __inline int  __cdecl  _vswprintf_l(   wchar_t * _String, size_t _Count,       const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#line 77 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/swprintf.inl"
#pragma warning( pop )

#line 539 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"

#line 555 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
  __declspec(dllimport)  wchar_t * __cdecl _wtempnam(   const wchar_t * _Directory,    const wchar_t * _FilePrefix);

#line 561 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
  __declspec(dllimport)  int __cdecl _vscwprintf(      const wchar_t * _Format, va_list _ArgList);
  __declspec(dllimport)  int __cdecl _vscwprintf_l(      const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
    __declspec(dllimport)  int __cdecl fwscanf(   FILE * _File,       const wchar_t * _Format, ...);
    __declspec(dllimport)  int __cdecl _fwscanf_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, ...);
#line 565 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(push)
#line 566 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(disable:6530)

  __declspec(dllimport)  int __cdecl fwscanf_s(   FILE * _File,       const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl _fwscanf_s_l(   FILE * _File,       const wchar_t * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl swscanf(   const wchar_t * _Src,       const wchar_t * _Format, ...);
    __declspec(dllimport)  int __cdecl _swscanf_l(   const wchar_t * _Src,       const wchar_t * _Format,    _locale_t _Locale, ...);

  __declspec(dllimport)  int __cdecl swscanf_s(   const wchar_t *_Src,       const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl _swscanf_s_l(   const wchar_t * _Src,       const wchar_t * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl _snwscanf(      const wchar_t * _Src,    size_t _MaxCount,       const wchar_t * _Format, ...);
    __declspec(dllimport)  int __cdecl _snwscanf_l(      const wchar_t * _Src,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport)  int __cdecl _snwscanf_s(      const wchar_t * _Src,    size_t _MaxCount,       const wchar_t * _Format, ...);
  __declspec(dllimport)  int __cdecl _snwscanf_s_l(      const wchar_t * _Src,    size_t _MaxCount,       const wchar_t * _Format,    _locale_t _Locale, ...);
    __declspec(dllimport)  int __cdecl wscanf(      const wchar_t * _Format, ...);
    __declspec(dllimport)  int __cdecl _wscanf_l(      const wchar_t * _Format,    _locale_t _Locale, ...);

  __declspec(dllimport)  int __cdecl wscanf_s(      const wchar_t * _Format, ...);

  __declspec(dllimport)  int __cdecl _wscanf_s_l(      const wchar_t * _Format,    _locale_t _Locale, ...);
#line 587 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma warning(pop)

  __declspec(dllimport)  FILE * __cdecl _wfdopen(   int _FileHandle ,    const wchar_t * _Mode);
    __declspec(dllimport)  FILE * __cdecl _wfopen(   const wchar_t * _Filename,    const wchar_t * _Mode);
  __declspec(dllimport)  errno_t __cdecl _wfopen_s(   FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode);
    __declspec(dllimport)  FILE * __cdecl _wfreopen(   const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);
  __declspec(dllimport)  errno_t __cdecl _wfreopen_s(   FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);



__declspec(dllimport)  void __cdecl _wperror(   const wchar_t * _ErrMsg);


  __declspec(dllimport)  FILE * __cdecl _wpopen(   const wchar_t *_Command,    const wchar_t * _Mode);

__declspec(dllimport)  int __cdecl _wremove(   const wchar_t * _Filename);
  __declspec(dllimport)  errno_t __cdecl _wtmpnam_s(   wchar_t * _DstBuf,    size_t _SizeInWords);

__declspec(dllimport) wchar_t * __cdecl _wtmpnam( wchar_t *_Buffer);

  __declspec(dllimport)  wint_t __cdecl _fgetwc_nolock(   FILE * _File);
  __declspec(dllimport)  wint_t __cdecl _fputwc_nolock(   wchar_t _Ch,    FILE * _File);
  __declspec(dllimport)  wint_t __cdecl _ungetwc_nolock(   wint_t _Ch,    FILE * _File);

#line 670 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
__declspec(dllimport)  void __cdecl _lock_file(   FILE * _File);
__declspec(dllimport)  void __cdecl _unlock_file(   FILE * _File);

  __declspec(dllimport)  int __cdecl _fclose_nolock(   FILE * _File);
  __declspec(dllimport)  int __cdecl _fflush_nolock(   FILE * _File);
  __declspec(dllimport)  size_t __cdecl _fread_nolock(   void * _DstBuf,    size_t _ElementSize,    size_t _Count,    FILE * _File);
  __declspec(dllimport)  size_t __cdecl _fread_nolock_s(   void * _DstBuf,    size_t _DstSize,    size_t _ElementSize,    size_t _Count,    FILE * _File);
  __declspec(dllimport)  int __cdecl _fseek_nolock(   FILE * _File,    long _Offset,    int _Origin);
  __declspec(dllimport)  long __cdecl _ftell_nolock(   FILE * _File);
  __declspec(dllimport)  int __cdecl _fseeki64_nolock(   FILE * _File,    __int64 _Offset,    int _Origin);
  __declspec(dllimport)  __int64 __cdecl _ftelli64_nolock(   FILE * _File);
  __declspec(dllimport)  size_t __cdecl _fwrite_nolock(   const void * _DstBuf,    size_t _Size,    size_t _Count,    FILE * _File);
  __declspec(dllimport)  int __cdecl _ungetc_nolock(   int _Ch,    FILE * _File);

#line 731 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdio.h"
#pragma pack(pop)

#line 55 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 22 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/limits.h"
#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 18 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/limits.h"

#line 23 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"

#line 28 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack(push, 8 )

#line 52 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
typedef int (__cdecl * _onexit_t)(void);

#line 75 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;

#line 102 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#line 106 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack()

#line 122 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;

#line 131 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma push_macro("long")


typedef struct {

#line 138 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
        long double x;
} _LONGDOUBLE;

#line 141 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pop_macro("long")

#line 143 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#line 147 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack()

#line 170 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  extern int __mb_cur_max;

#line 175 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  int __cdecl ___mb_cur_max_func(void);
__declspec(dllimport)  int __cdecl ___mb_cur_max_l_func(_locale_t);

#line 215 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
typedef void (__cdecl *_purecall_handler)(void);


__declspec(dllimport)  _purecall_handler __cdecl _set_purecall_handler(   _purecall_handler _Handler);
__declspec(dllimport)  _purecall_handler __cdecl _get_purecall_handler(void);

#line 235 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);


__declspec(dllimport)  _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(   _invalid_parameter_handler _Handler);
__declspec(dllimport)  _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);





__declspec(dllimport)  extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(   int _Value);
errno_t __cdecl _get_errno(   int * _Value);


__declspec(dllimport)  unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(   unsigned long _Value);
errno_t __cdecl _get_doserrno(   unsigned long * _Value);


__declspec(dllimport)    char ** __cdecl __sys_errlist(void);


__declspec(dllimport)    int * __cdecl __sys_nerr(void);





__declspec(dllimport)  int *          __cdecl __p___argc(void);
__declspec(dllimport)  char ***       __cdecl __p___argv(void);
__declspec(dllimport)  wchar_t ***    __cdecl __p___wargv(void);
__declspec(dllimport)  char ***       __cdecl __p__environ(void);
__declspec(dllimport)  wchar_t ***    __cdecl __p__wenviron(void);


__declspec(dllimport)  char **        __cdecl __p__pgmptr(void);
__declspec(dllimport)  wchar_t **     __cdecl __p__wpgmptr(void);

#line 288 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  extern int __argc;
__declspec(dllimport)  extern char ** __argv;
__declspec(dllimport)  extern wchar_t ** __wargv;

#line 306 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  extern char ** _environ;
__declspec(dllimport)  extern wchar_t ** _wenviron;



  __declspec(dllimport)  extern char * _pgmptr;
  __declspec(dllimport)  extern wchar_t * _wpgmptr;

#line 339 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
errno_t __cdecl _get_pgmptr(   char ** _Value);
errno_t __cdecl _get_wpgmptr(   wchar_t ** _Value);





  __declspec(dllimport)  extern int _fmode;

#line 353 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  errno_t __cdecl _set_fmode(   int _Mode);
__declspec(dllimport)  errno_t __cdecl _get_fmode(   int * _PMode);

#line 374 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma push_macro("exit")

__declspec(dllimport)  __declspec(noreturn) void __cdecl exit(   int _Code);
#line 377 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pop_macro("exit")
__declspec(dllimport)  __declspec(noreturn) void __cdecl _exit(   int _Code);
__declspec(dllimport)  __declspec(noreturn) void __cdecl abort(void);


__declspec(dllimport)  unsigned int __cdecl _set_abort_behavior(   unsigned int _Flags,    unsigned int _Mask);

int       __cdecl abs(   int _X);
long      __cdecl labs(   long _X);
long long __cdecl llabs(   long long _X);

        __int64    __cdecl _abs64(__int64);

#line 426 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));

  __declspec(dllimport)  double  __cdecl atof(   const char *_String);
  __declspec(dllimport)  double  __cdecl _atof_l(   const char *_String,    _locale_t _Locale);
  __declspec(dllimport)    int    __cdecl atoi(   const char *_Str);
  __declspec(dllimport)  int    __cdecl _atoi_l(   const char *_Str,    _locale_t _Locale);
  __declspec(dllimport)  long   __cdecl atol(   const char *_Str);
  __declspec(dllimport)  long   __cdecl _atol_l(   const char *_Str,    _locale_t _Locale);
  __declspec(dllimport)  long long __cdecl atoll(   const char *_Str);
  __declspec(dllimport)  long long __cdecl _atoll_l(   const char *_Str,    _locale_t _Locale);



  __declspec(dllimport)  void * __cdecl bsearch_s(   const void * _Key,    const void * _Base,
         rsize_t _NumOfElements,    rsize_t _SizeOfElements,
         int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);

  __declspec(dllimport)  void * __cdecl bsearch(   const void * _Key,    const void * _Base,
         size_t _NumOfElements,    size_t _SizeOfElements,
         int (__cdecl * _PtFuncCompare)(const void *, const void *));


__declspec(dllimport)  void __cdecl qsort_s(   void * _Base,
         rsize_t _NumOfElements,    rsize_t _SizeOfElements,
         int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);

__declspec(dllimport)  void __cdecl qsort(   void * _Base,
         size_t _NumOfElements,    size_t _SizeOfElements,
         int (__cdecl * _PtFuncCompare)(const void *, const void *));

         unsigned short __cdecl _byteswap_ushort(   unsigned short _Short);
         unsigned long  __cdecl _byteswap_ulong (   unsigned long _Long);
         unsigned __int64 __cdecl _byteswap_uint64(   unsigned __int64 _Int64);
  __declspec(dllimport)  div_t  __cdecl div(   int _Numerator,    int _Denominator);


  __declspec(dllimport)    char * __cdecl getenv(   const char * _VarName);

  __declspec(dllimport)  errno_t __cdecl getenv_s(   size_t * _ReturnSize,    char * _DstBuf,    rsize_t _DstSize,    const char * _VarName);



#line 472 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _dupenv_s(      char **_PBuffer,    size_t * _PBufferSizeInBytes,    const char * _VarName);

#line 479 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _itoa_s(   int _Value,    char * _DstBuf,    size_t _Size,    int _Radix);

__declspec(dllimport) char * __cdecl _itoa(int _Value,  char *_Dest, int _Radix);
  __declspec(dllimport)  errno_t __cdecl _i64toa_s(   __int64 _Val,    char * _DstBuf,    size_t _Size,    int _Radix);
__declspec(dllimport)    char * __cdecl _i64toa(   __int64 _Val,       char * _DstBuf,    int _Radix);
  __declspec(dllimport)  errno_t __cdecl _ui64toa_s(   unsigned __int64 _Val,    char * _DstBuf,    size_t _Size,    int _Radix);
__declspec(dllimport)    char * __cdecl _ui64toa(   unsigned __int64 _Val,       char * _DstBuf,    int _Radix);
  __declspec(dllimport)  __int64 __cdecl _atoi64(   const char * _String);
  __declspec(dllimport)  __int64 __cdecl _atoi64_l(   const char * _String,    _locale_t _Locale);
  __declspec(dllimport)  __int64 __cdecl _strtoi64(   const char * _String,       char ** _EndPtr,    int _Radix);
  __declspec(dllimport)  __int64 __cdecl _strtoi64_l(   const char * _String,       char ** _EndPtr,    int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  unsigned __int64 __cdecl _strtoui64(   const char * _String,       char ** _EndPtr,    int _Radix);
  __declspec(dllimport)  unsigned __int64 __cdecl _strtoui64_l(   const char * _String,       char ** _EndPtr,    int  _Radix,    _locale_t _Locale);
  __declspec(dllimport)  ldiv_t __cdecl ldiv(   long _Numerator,    long _Denominator);
  __declspec(dllimport)  lldiv_t __cdecl lldiv(   long long _Numerator,    long long _Denominator);

#line 515 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _ltoa_s(   long _Val,    char * _DstBuf,    size_t _Size,    int _Radix);

__declspec(dllimport) char * __cdecl _ltoa(long _Value,  char *_Dest, int _Radix);
  __declspec(dllimport)  int    __cdecl mblen(      const char * _Ch,    size_t _MaxCount);
  __declspec(dllimport)  int    __cdecl _mblen_l(      const char * _Ch,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  size_t __cdecl _mbstrlen(   const char * _Str);
  __declspec(dllimport)  size_t __cdecl _mbstrlen_l(   const char *_Str,    _locale_t _Locale);
  __declspec(dllimport)  size_t __cdecl _mbstrnlen(   const char *_Str,    size_t _MaxCount);
  __declspec(dllimport)  size_t __cdecl _mbstrnlen_l(   const char *_Str,    size_t _MaxCount,    _locale_t _Locale);
__declspec(dllimport)  int    __cdecl mbtowc(      wchar_t * _DstCh,       const char * _SrcCh,    size_t _SrcSizeInBytes);
__declspec(dllimport)  int    __cdecl _mbtowc_l(      wchar_t * _DstCh,       const char * _SrcCh,    size_t _SrcSizeInBytes,    _locale_t _Locale);
  __declspec(dllimport)  errno_t __cdecl mbstowcs_s(   size_t * _PtNumOfCharConverted,    wchar_t * _DstBuf,    size_t _SizeInWords,    const char * _SrcBuf,    size_t _MaxCount );

__declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, const char * _Source, size_t _MaxCount);

  __declspec(dllimport)  errno_t __cdecl _mbstowcs_s_l(   size_t * _PtNumOfCharConverted,    wchar_t * _DstBuf,    size_t _SizeInWords,    const char * _SrcBuf,    size_t _MaxCount,    _locale_t _Locale);

__declspec(dllimport)  size_t __cdecl _mbstowcs_l(   wchar_t *_Dest,   const char * _Source,   size_t _MaxCount,   _locale_t _Locale);

  __declspec(dllimport)  int    __cdecl rand(void);

#line 539 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  int    __cdecl _set_error_mode(   int _Mode);

__declspec(dllimport)  void   __cdecl srand(   unsigned int _Seed);
  __declspec(dllimport)  double __cdecl strtod(   const char * _Str,       char ** _EndPtr);
  __declspec(dllimport)  double __cdecl _strtod_l(   const char * _Str,       char ** _EndPtr,    _locale_t _Locale);
  __declspec(dllimport)  long   __cdecl strtol(   const char * _Str,       char ** _EndPtr,    int _Radix );
  __declspec(dllimport)  long   __cdecl _strtol_l(   const char *_Str,       char **_EndPtr,    int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  long long  __cdecl strtoll(   const char * _Str,       char ** _EndPtr,    int _Radix );
  __declspec(dllimport)  long long  __cdecl _strtoll_l(   const char * _Str,       char ** _EndPtr,    int _Radix,    _locale_t _Locale );
  __declspec(dllimport)  unsigned long __cdecl strtoul(   const char * _Str,       char ** _EndPtr,    int _Radix);
  __declspec(dllimport)  unsigned long __cdecl _strtoul_l(const char * _Str,       char **_EndPtr,    int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  unsigned long long __cdecl strtoull(   const char * _Str,       char ** _EndPtr,    int _Radix);
  __declspec(dllimport)  unsigned long long __cdecl _strtoull_l(   const char * _Str,       char ** _EndPtr,    int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  long double __cdecl strtold(   const char * _Str,       char ** _EndPtr);
  __declspec(dllimport)  long double __cdecl _strtold_l(   const char * _Str,       char ** _EndPtr,    _locale_t _Locale);
  __declspec(dllimport)  float __cdecl strtof(   const char * _Str,       char ** _EndPtr);
  __declspec(dllimport)  float __cdecl _strtof_l(   const char * _Str,       char ** _EndPtr,    _locale_t _Locale);




__declspec(dllimport)  int __cdecl system(   const char * _Command);



  __declspec(dllimport)  errno_t __cdecl _ultoa_s(   unsigned long _Val,    char * _DstBuf,    size_t _Size,    int _Radix);

__declspec(dllimport) char * __cdecl _ultoa(unsigned long _Value,  char *_Dest, int _Radix);
__declspec(dllimport)    int    __cdecl wctomb(   char * _MbCh,    wchar_t _WCh);
__declspec(dllimport)    int    __cdecl _wctomb_l(      char * _MbCh,    wchar_t _WCh,    _locale_t _Locale);

  __declspec(dllimport)  errno_t __cdecl wctomb_s(   int * _SizeConverted,    char * _MbCh,    rsize_t _SizeInBytes,    wchar_t _WCh);

  __declspec(dllimport)  errno_t __cdecl _wctomb_s_l(   int * _SizeConverted,    char * _MbCh,    size_t _SizeInBytes,    wchar_t _WCh,    _locale_t _Locale);
  __declspec(dllimport)  errno_t __cdecl wcstombs_s(   size_t * _PtNumOfCharConverted,    char * _Dst,    size_t _DstSizeInBytes,    const wchar_t * _Src,    size_t _MaxCountInBytes);

__declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, const wchar_t * _Source, size_t _MaxCount);
  __declspec(dllimport)  errno_t __cdecl _wcstombs_s_l(   size_t * _PtNumOfCharConverted,    char * _Dst,    size_t _DstSizeInBytes,    const wchar_t * _Src,    size_t _MaxCountInBytes,    _locale_t _Locale);

__declspec(dllimport)  size_t __cdecl _wcstombs_l(   char *_Dest,   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale);

#line 640 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
        __declspec(dllimport)     __declspec(noalias)   __declspec(restrict)     void * __cdecl calloc(     size_t _Count,      size_t _Size);
__declspec(dllimport)                       __declspec(noalias)                                                                              void   __cdecl free(      void * _Memory);
        __declspec(dllimport)     __declspec(noalias)   __declspec(restrict)                               void * __cdecl malloc(     size_t _Size);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                            void * __cdecl realloc(      void * _Memory,      size_t _NewSize);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                        void * __cdecl _recalloc(      void * _Memory,      size_t _Count,      size_t _Size);
__declspec(dllimport)                       __declspec(noalias)                                                                              void   __cdecl _aligned_free(      void * _Memory);
        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                               void * __cdecl _aligned_malloc(     size_t _Size,    size_t _Alignment);
        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                               void * __cdecl _aligned_offset_malloc(     size_t _Size,    size_t _Alignment,    size_t _Offset);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                               void * __cdecl _aligned_realloc(      void * _Memory,      size_t _NewSize,    size_t _Alignment);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                        void * __cdecl _aligned_recalloc(      void * _Memory,      size_t _Count,      size_t _Size,    size_t _Alignment);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                               void * __cdecl _aligned_offset_realloc(      void * _Memory,      size_t _NewSize,    size_t _Alignment,    size_t _Offset);

        __declspec(dllimport)   __declspec(noalias)   __declspec(restrict)                        void * __cdecl _aligned_offset_recalloc(      void * _Memory,      size_t _Count,      size_t _Size,    size_t _Alignment,    size_t _Offset);
  __declspec(dllimport)                                                   size_t __cdecl _aligned_msize(   void * _Memory,    size_t _Alignment,    size_t _Offset);

#line 685 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _itow_s (   int _Val,    wchar_t * _DstBuf,    size_t _SizeInWords,    int _Radix);

__declspec(dllimport) wchar_t * __cdecl _itow(int _Value,  wchar_t *_Dest, int _Radix);
  __declspec(dllimport)  errno_t __cdecl _ltow_s (   long _Val,    wchar_t * _DstBuf,    size_t _SizeInWords,    int _Radix);

__declspec(dllimport) wchar_t * __cdecl _ltow(long _Value,  wchar_t *_Dest, int _Radix);
  __declspec(dllimport)  errno_t __cdecl _ultow_s (   unsigned long _Val,    wchar_t * _DstBuf,    size_t _SizeInWords,    int _Radix);

__declspec(dllimport) wchar_t * __cdecl _ultow(unsigned long _Value,  wchar_t *_Dest, int _Radix);
  __declspec(dllimport)  double __cdecl wcstod(   const wchar_t * _Str,       wchar_t ** _EndPtr);
  __declspec(dllimport)  double __cdecl _wcstod_l(   const wchar_t *_Str,       wchar_t ** _EndPtr,    _locale_t _Locale);
  __declspec(dllimport)  long   __cdecl wcstol(   const wchar_t *_Str,       wchar_t ** _EndPtr, int _Radix);
  __declspec(dllimport)  long   __cdecl _wcstol_l(   const wchar_t *_Str,       wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  long long  __cdecl wcstoll(   const wchar_t *_Str,       wchar_t **_EndPtr, int _Radix);
  __declspec(dllimport)  long long  __cdecl _wcstoll_l(   const wchar_t *_Str,       wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  unsigned long __cdecl wcstoul(   const wchar_t *_Str,       wchar_t ** _EndPtr, int _Radix);
  __declspec(dllimport)  unsigned long __cdecl _wcstoul_l(   const wchar_t *_Str,       wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  unsigned long long __cdecl wcstoull(   const wchar_t *_Str,       wchar_t ** _EndPtr, int _Radix);
  __declspec(dllimport)  unsigned long long __cdecl _wcstoull_l(   const wchar_t *_Str,       wchar_t ** _EndPtr, int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  long double __cdecl wcstold(   const wchar_t * _Str,       wchar_t ** _EndPtr);
  __declspec(dllimport)  long double __cdecl _wcstold_l(   const wchar_t * _Str,       wchar_t ** _EndPtr,    _locale_t _Locale);
  __declspec(dllimport)  float __cdecl wcstof(   const wchar_t * _Str,       wchar_t ** _EndPtr);
  __declspec(dllimport)  float __cdecl _wcstof_l(   const wchar_t * _Str,       wchar_t ** _EndPtr,    _locale_t _Locale);



  __declspec(dllimport)    wchar_t * __cdecl _wgetenv(   const wchar_t * _VarName);
  __declspec(dllimport)  errno_t __cdecl _wgetenv_s(   size_t * _ReturnSize,    wchar_t * _DstBuf,    size_t _DstSizeInWords,    const wchar_t * _VarName);


#line 720 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _wdupenv_s(      wchar_t **_Buffer,    size_t *_BufferSizeInWords,    const wchar_t *_VarName);

#line 728 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
__declspec(dllimport)  int __cdecl _wsystem(   const wchar_t * _Command);




  __declspec(dllimport)  double __cdecl _wtof(   const wchar_t *_Str);
  __declspec(dllimport)  double __cdecl _wtof_l(   const wchar_t *_Str,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _wtoi(   const wchar_t *_Str);
  __declspec(dllimport)  int __cdecl _wtoi_l(   const wchar_t *_Str,    _locale_t _Locale);
  __declspec(dllimport)  long __cdecl _wtol(   const wchar_t *_Str);
  __declspec(dllimport)  long __cdecl _wtol_l(   const wchar_t *_Str,    _locale_t _Locale);
  __declspec(dllimport)  long long __cdecl _wtoll(   const wchar_t *_Str);
  __declspec(dllimport)  long long __cdecl _wtoll_l(   const wchar_t *_Str,    _locale_t _Locale);

  __declspec(dllimport)  errno_t __cdecl _i64tow_s(   __int64 _Val,    wchar_t * _DstBuf,    size_t _SizeInWords,    int _Radix);
__declspec(dllimport)    wchar_t * __cdecl _i64tow(   __int64 _Val,       wchar_t * _DstBuf,    int _Radix);
  __declspec(dllimport)  errno_t __cdecl _ui64tow_s(   unsigned __int64 _Val,    wchar_t * _DstBuf,    size_t _SizeInWords,    int _Radix);
__declspec(dllimport)    wchar_t * __cdecl _ui64tow(   unsigned __int64 _Val,       wchar_t * _DstBuf,    int _Radix);
  __declspec(dllimport)  __int64   __cdecl _wtoi64(   const wchar_t *_Str);
  __declspec(dllimport)  __int64   __cdecl _wtoi64_l(   const wchar_t *_Str,    _locale_t _Locale);
  __declspec(dllimport)  __int64   __cdecl _wcstoi64(   const wchar_t * _Str,       wchar_t ** _EndPtr,    int _Radix);
  __declspec(dllimport)  __int64   __cdecl _wcstoi64_l(   const wchar_t * _Str,       wchar_t ** _EndPtr,    int _Radix,    _locale_t _Locale);
  __declspec(dllimport)  unsigned __int64  __cdecl _wcstoui64(   const wchar_t * _Str,       wchar_t ** _EndPtr,    int _Radix);
  __declspec(dllimport)  unsigned __int64  __cdecl _wcstoui64_l(   const wchar_t *_Str ,       wchar_t ** _EndPtr,    int _Radix,    _locale_t _Locale);

#line 770 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  char * __cdecl _fullpath(   char * _FullPath,    const char * _Path,    size_t _SizeInBytes);

#line 778 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _ecvt_s(   char * _DstBuf,    size_t _Size,    double _Val,    int _NumOfDights,    int * _PtDec,    int * _PtSign);

  __declspec(dllimport)    char * __cdecl _ecvt(   double _Val,    int _NumOfDigits,    int * _PtDec,    int * _PtSign);
  __declspec(dllimport)  errno_t __cdecl _fcvt_s(   char * _DstBuf,    size_t _Size,    double _Val,    int _NumOfDec,    int * _PtDec,    int * _PtSign);

  __declspec(dllimport)    char * __cdecl _fcvt(   double _Val,    int _NumOfDec,    int * _PtDec,    int * _PtSign);
__declspec(dllimport)  errno_t __cdecl _gcvt_s(   char * _DstBuf,    size_t _Size,    double _Val,    int _NumOfDigits);

__declspec(dllimport)    char * __cdecl _gcvt(   double _Val,    int _NumOfDigits,       char * _DstBuf);

  __declspec(dllimport)  int __cdecl _atodbl(   _CRT_DOUBLE * _Result,    char * _Str);
  __declspec(dllimport)  int __cdecl _atoldbl(   _LDOUBLE * _Result,    char * _Str);
  __declspec(dllimport)  int __cdecl _atoflt(   _CRT_FLOAT * _Result,    const char * _Str);
  __declspec(dllimport)  int __cdecl _atodbl_l(   _CRT_DOUBLE * _Result,    char * _Str,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _atoldbl_l(   _LDOUBLE * _Result,    char * _Str,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _atoflt_l(   _CRT_FLOAT * _Result,    const char * _Str,    _locale_t _Locale);
         unsigned long __cdecl _lrotl(   unsigned long _Val,    int _Shift);
         unsigned long __cdecl _lrotr(   unsigned long _Val,    int _Shift);
  __declspec(dllimport)  errno_t   __cdecl _makepath_s(   char * _PathResult,    size_t _SizeInWords,    const char * _Drive,    const char * _Dir,    const char * _Filename,
         const char * _Ext);

__declspec(dllimport) void __cdecl _makepath( char *_Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext);

#line 826 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
        _onexit_t __cdecl _onexit(   _onexit_t _Func);

#line 834 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma warning (push)
#line 835 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma warning (disable:6540)


  __declspec(dllimport)  int    __cdecl _putenv(   const char * _EnvString);
  __declspec(dllimport)  errno_t __cdecl _putenv_s(   const char * _Name,    const char * _Value);


        unsigned int __cdecl _rotl(   unsigned int _Val,    int _Shift);
        unsigned __int64 __cdecl _rotl64(   unsigned __int64 _Val,    int _Shift);
        unsigned int __cdecl _rotr(   unsigned int _Val,    int _Shift);
        unsigned __int64 __cdecl _rotr64(   unsigned __int64 _Val,    int _Shift);
#line 846 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma warning (pop)


__declspec(dllimport)  errno_t __cdecl _searchenv_s(   const char * _Filename,    const char * _EnvVar,    char * _ResultPath,    size_t _SizeInBytes);

__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar,  char *_ResultPath);


  __declspec(dllimport)  void   __cdecl _splitpath(   const char * _FullPath,       char * _Drive,       char * _Dir,       char * _Filename,       char * _Ext);
  __declspec(dllimport)  errno_t  __cdecl _splitpath_s(   const char * _FullPath,
                 char * _Drive,    size_t _DriveSize,
                 char * _Dir,    size_t _DirSize,
                 char * _Filename,    size_t _FilenameSize,
                 char * _Ext,    size_t _ExtSize);


__declspec(dllimport)  void   __cdecl _swab(      char * _Buf1,       char * _Buf2, int _SizeInBytes);

#line 873 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  wchar_t * __cdecl _wfullpath(   wchar_t * _FullPath,    const wchar_t * _Path,    size_t _SizeInWords);

#line 879 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  errno_t __cdecl _wmakepath_s(   wchar_t * _PathResult,    size_t _SIZE,    const wchar_t * _Drive,    const wchar_t * _Dir,    const wchar_t * _Filename,
         const wchar_t * _Ext);

__declspec(dllimport) void __cdecl _wmakepath( wchar_t *_ResultPath, const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext);

#line 889 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
  __declspec(dllimport)  int    __cdecl _wputenv(   const wchar_t * _EnvString);
  __declspec(dllimport)  errno_t __cdecl _wputenv_s(   const wchar_t * _Name,    const wchar_t * _Value);
__declspec(dllimport)  errno_t __cdecl _wsearchenv_s(   const wchar_t * _Filename,    const wchar_t * _EnvVar,    wchar_t * _ResultPath,    size_t _SizeInWords);

__declspec(dllimport) void __cdecl _wsearchenv(const wchar_t * _Filename, const wchar_t * _EnvVar,  wchar_t *_ResultPath);


  __declspec(dllimport)  void   __cdecl _wsplitpath(   const wchar_t * _FullPath,       wchar_t * _Drive,       wchar_t * _Dir,       wchar_t * _Filename,       wchar_t * _Ext);
__declspec(dllimport)  errno_t __cdecl _wsplitpath_s(   const wchar_t * _FullPath,
                 wchar_t * _Drive,    size_t _DriveSize,
                 wchar_t * _Dir,    size_t _DirSize,
                 wchar_t * _Filename,    size_t _FilenameSize,
                 wchar_t * _Ext,    size_t _ExtSize);







__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))   __declspec(dllimport)  void __cdecl _seterrormode(   int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))   __declspec(dllimport)  void __cdecl _beep(   unsigned _Frequency,    unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))   __declspec(dllimport)  void __cdecl _sleep(   unsigned long _Duration);

#line 957 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdlib.h"
#pragma pack(pop)

#line 56 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 21 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"

#line 47 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
__declspec(dllimport)  void *  __cdecl _memccpy(    void * _Dst,    const void * _Src,    int _Val,    size_t _MaxCount);
  __declspec(dllimport)    void *  __cdecl memchr(    const void * _Buf ,    int _Val,    size_t _MaxCount);
  __declspec(dllimport)  int     __cdecl _memicmp(   const void * _Buf1,    const void * _Buf2,    size_t _Size);
  __declspec(dllimport)  int     __cdecl _memicmp_l(   const void * _Buf1,    const void * _Buf2,    size_t _Size,    _locale_t _Locale);
 int     __cdecl memcmp(   const void * _Buf1,    const void * _Buf2,    size_t _Size);



void *  __cdecl memcpy(   void * _Dst,    const void * _Src,    size_t _Size);

__declspec(dllimport)  errno_t  __cdecl memcpy_s(   void * _Dst,    rsize_t _DstSize,    const void * _Src,    rsize_t _MaxCount);

#line 92 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"


        void *  __cdecl memset(   void * _Dst,    int _Val,    size_t _Size);

#line 105 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
  __declspec(dllimport)  errno_t __cdecl _strset_s(   char * _Dst,    size_t _DstSize,    int _Value);

char * __cdecl _strset( char *_Dest, int _Value);

  __declspec(dllimport)  errno_t __cdecl strcpy_s(   char * _Dst,    rsize_t _SizeInBytes,    const char * _Src);


char * __cdecl strcpy( char *_Dest, const char * _Source);

  __declspec(dllimport)  errno_t __cdecl strcat_s(   char * _Dst,    rsize_t _SizeInBytes,    const char * _Src);



char * __cdecl strcat( char *_Dest, const char * _Source);

 int     __cdecl strcmp(   const char * _Str1,    const char * _Str2);
 size_t  __cdecl strlen(   const char * _Str);
  __declspec(dllimport)


size_t  __cdecl strnlen(   const char * _Str,    size_t _MaxCount);

 static __inline


size_t   __cdecl  strnlen_s(   const char * _Str,    size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}


  __declspec(dllimport)  errno_t __cdecl memmove_s(   void * _Dst,    rsize_t _DstSize,    const void * _Src,    rsize_t _MaxCount);


__declspec(dllimport)    void *  __cdecl memmove(   void * _Dst,    const void * _Src,    size_t _Size);

#line 146 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
  __declspec(dllimport)  char *  __cdecl _strdup(   const char * _Src);

#line 152 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
  __declspec(dllimport)    char *  __cdecl strchr(   const char * _Str,    int _Val);
  __declspec(dllimport)  int     __cdecl _stricmp(    const char * _Str1,     const char * _Str2);
  __declspec(dllimport)  int     __cdecl _strcmpi(    const char * _Str1,     const char * _Str2);
  __declspec(dllimport)  int     __cdecl _stricmp_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  __declspec(dllimport)  int     __cdecl strcoll(    const char * _Str1,     const  char * _Str2);
  __declspec(dllimport)  int     __cdecl _strcoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  __declspec(dllimport)  int     __cdecl _stricoll(    const char * _Str1,     const char * _Str2);
  __declspec(dllimport)  int     __cdecl _stricoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
  __declspec(dllimport)  int     __cdecl _strncoll  (   const char * _Str1,    const char * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int     __cdecl _strncoll_l(   const char * _Str1,    const char * _Str2,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  int     __cdecl _strnicoll (   const char * _Str1,    const char * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int     __cdecl _strnicoll_l(   const char * _Str1,    const char * _Str2,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  size_t  __cdecl strcspn(    const char * _Str,     const char * _Control);
    __declspec(dllimport)  char *  __cdecl _strerror(   const char * _ErrMsg);
  __declspec(dllimport)  errno_t __cdecl _strerror_s(   char * _Buf,    size_t _SizeInBytes,    const char * _ErrMsg);

    __declspec(dllimport)  char *  __cdecl strerror(   int);

  __declspec(dllimport)  errno_t __cdecl strerror_s(   char * _Buf,    size_t _SizeInBytes,    int _ErrNum);


  __declspec(dllimport)  errno_t __cdecl _strlwr_s(   char * _Str,    size_t _Size);

__declspec(dllimport) char * __cdecl _strlwr( char *_String);
  __declspec(dllimport)  errno_t __cdecl _strlwr_s_l(   char * _Str,    size_t _Size,    _locale_t _Locale);

__declspec(dllimport)  char * __cdecl _strlwr_l(   char *_String,   _locale_t _Locale);

  __declspec(dllimport)  errno_t __cdecl strncat_s(   char * _Dst,    rsize_t _SizeInBytes,    const char * _Src,    rsize_t _MaxCount);


#line 183 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(push)
#line 184 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(disable:6059)

__declspec(dllimport)  char * __cdecl strncat(   char *_Dest,   const char * _Source,   size_t _Count);
#line 187 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(pop)
  __declspec(dllimport)  int     __cdecl strncmp(   const char * _Str1,    const char * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int     __cdecl _strnicmp(   const char * _Str1,    const char * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int     __cdecl _strnicmp_l(   const char * _Str1,    const char * _Str2,    size_t _MaxCount,    _locale_t _Locale);

  __declspec(dllimport)  errno_t __cdecl strncpy_s(   char * _Dst,    rsize_t _SizeInBytes,    const char * _Src,    rsize_t _MaxCount);


__declspec(dllimport)  char * __cdecl strncpy(     char *_Dest,   const char * _Source,   size_t _Count);
  __declspec(dllimport)  errno_t __cdecl _strnset_s(   char * _Str,    size_t _SizeInBytes,    int _Val,    size_t _MaxCount);

__declspec(dllimport)  char * __cdecl _strnset(   char *_Dest,   int _Val,   size_t _Count);
  __declspec(dllimport)    char *  __cdecl strpbrk(   const char * _Str,    const char * _Control);
  __declspec(dllimport)    char *  __cdecl strrchr(   const char * _Str,    int _Ch);
__declspec(dllimport)  char *  __cdecl _strrev(   char * _Str);
  __declspec(dllimport)  size_t  __cdecl strspn(   const char * _Str,    const char * _Control);
     __declspec(dllimport)    char *  __cdecl strstr(   const char * _Str,    const char * _SubStr);
    __declspec(dllimport)  char *  __cdecl strtok(   char * _Str,    const char * _Delim);

  __declspec(dllimport)  char *  __cdecl strtok_s(   char * _Str,    const char * _Delim,       char ** _Context);

  __declspec(dllimport)  errno_t __cdecl _strupr_s(   char * _Str,    size_t _Size);

__declspec(dllimport) char * __cdecl _strupr( char *_String);
  __declspec(dllimport)  errno_t __cdecl _strupr_s_l(   char * _Str,    size_t _Size, _locale_t _Locale);

__declspec(dllimport)  char * __cdecl _strupr_l(   char *_String,   _locale_t _Locale);
  __declspec(dllimport)  size_t  __cdecl strxfrm (      char * _Dst,    const char * _Src,    size_t _MaxCount);
  __declspec(dllimport)  size_t  __cdecl _strxfrm_l(      char * _Dst,    const char * _Src,    size_t _MaxCount,    _locale_t _Locale);

#line 273 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
  __declspec(dllimport)  wchar_t * __cdecl _wcsdup(   const wchar_t * _Str);

#line 280 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
  __declspec(dllimport)  errno_t __cdecl wcscat_s(   wchar_t * _Dst,    rsize_t _SizeInWords,    const wchar_t * _Src);



__declspec(dllimport) wchar_t * __cdecl wcscat( wchar_t *_Dest, const wchar_t * _Source);



__declspec(dllimport)    wchar_t * __cdecl wcschr(   const wchar_t * _Str, wchar_t _Ch);
  __declspec(dllimport)  int __cdecl wcscmp(   const wchar_t * _Str1,    const wchar_t * _Str2);

  __declspec(dllimport)  errno_t __cdecl wcscpy_s(   wchar_t * _Dst,    rsize_t _SizeInWords,    const wchar_t * _Src);


__declspec(dllimport) wchar_t * __cdecl wcscpy( wchar_t *_Dest, const wchar_t * _Source);
  __declspec(dllimport)  size_t __cdecl wcscspn(   const wchar_t * _Str,    const wchar_t * _Control);
  __declspec(dllimport)  size_t __cdecl wcslen(   const wchar_t * _Str);
  __declspec(dllimport)


size_t __cdecl wcsnlen(   const wchar_t * _Src,    size_t _MaxCount);

 static __inline


size_t  __cdecl  wcsnlen_s(   const wchar_t * _Src,    size_t _MaxCount)
{
    return (_Src ==  ((void *)0) ) ? 0 : wcsnlen(_Src, _MaxCount);
}


  __declspec(dllimport)  errno_t __cdecl wcsncat_s(   wchar_t * _Dst,    rsize_t _SizeInWords,    const wchar_t * _Src,    rsize_t _MaxCount);


#line 314 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(push)
#line 315 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(disable:6059)
__declspec(dllimport)  wchar_t * __cdecl wcsncat(   wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
#line 317 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/string.h"
#pragma warning(pop)
  __declspec(dllimport)  int __cdecl wcsncmp(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount);

  __declspec(dllimport)  errno_t __cdecl wcsncpy_s(   wchar_t * _Dst,    rsize_t _SizeInWords,    const wchar_t * _Src,    rsize_t _MaxCount);


__declspec(dllimport)  wchar_t * __cdecl wcsncpy(     wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
  __declspec(dllimport)    wchar_t * __cdecl wcspbrk(   const wchar_t * _Str,    const wchar_t * _Control);
  __declspec(dllimport)    wchar_t * __cdecl wcsrchr(   const wchar_t * _Str,    wchar_t _Ch);
  __declspec(dllimport)  size_t __cdecl wcsspn(   const wchar_t * _Str,    const wchar_t * _Control);


__declspec(dllimport)    wchar_t * __cdecl wcsstr(   const wchar_t * _Str,    const wchar_t * _SubStr);
    __declspec(dllimport)  wchar_t * __cdecl wcstok(   wchar_t * _Str,    const wchar_t * _Delim);

  __declspec(dllimport)  wchar_t * __cdecl wcstok_s(   wchar_t * _Str,    const wchar_t * _Delim,       wchar_t ** _Context);

    __declspec(dllimport)  wchar_t * __cdecl _wcserror(   int _ErrNum);
  __declspec(dllimport)  errno_t __cdecl _wcserror_s(   wchar_t * _Buf,    size_t _SizeInWords,    int _ErrNum);

    __declspec(dllimport)  wchar_t * __cdecl __wcserror(   const wchar_t * _Str);
  __declspec(dllimport)  errno_t __cdecl __wcserror_s(   wchar_t * _Buffer,    size_t _SizeInWords,    const wchar_t * _ErrMsg);


  __declspec(dllimport)  int __cdecl _wcsicmp(   const wchar_t * _Str1,    const wchar_t * _Str2);
  __declspec(dllimport)  int __cdecl _wcsicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _wcsnicmp(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int __cdecl _wcsnicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  errno_t __cdecl _wcsnset_s(   wchar_t * _Dst,    size_t _SizeInWords,    wchar_t _Val,    size_t _MaxCount);

__declspec(dllimport)  wchar_t * __cdecl _wcsnset(   wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
__declspec(dllimport)  wchar_t * __cdecl _wcsrev(   wchar_t * _Str);
  __declspec(dllimport)  errno_t __cdecl _wcsset_s(   wchar_t * _Dst,    size_t _SizeInWords,    wchar_t _Value);

__declspec(dllimport)  wchar_t * __cdecl _wcsset(   wchar_t *_Str, wchar_t _Val);

  __declspec(dllimport)  errno_t __cdecl _wcslwr_s(   wchar_t * _Str,    size_t _SizeInWords);

__declspec(dllimport) wchar_t * __cdecl _wcslwr( wchar_t *_String);
  __declspec(dllimport)  errno_t __cdecl _wcslwr_s_l(   wchar_t * _Str,    size_t _SizeInWords,    _locale_t _Locale);

__declspec(dllimport)  wchar_t * __cdecl _wcslwr_l(   wchar_t *_String,   _locale_t _Locale);
  __declspec(dllimport)  errno_t __cdecl _wcsupr_s(   wchar_t * _Str,    size_t _Size);

__declspec(dllimport) wchar_t * __cdecl _wcsupr( wchar_t *_String);
  __declspec(dllimport)  errno_t __cdecl _wcsupr_s_l(   wchar_t * _Str,    size_t _Size,    _locale_t _Locale);

__declspec(dllimport)  wchar_t * __cdecl _wcsupr_l(   wchar_t *_String,   _locale_t _Locale);
  __declspec(dllimport)  size_t __cdecl wcsxfrm(      wchar_t * _Dst,    const wchar_t * _Src,    size_t _MaxCount);
  __declspec(dllimport)  size_t __cdecl _wcsxfrm_l(      wchar_t * _Dst,    const wchar_t *_Src,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl wcscoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
  __declspec(dllimport)  int __cdecl _wcscoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _wcsicoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
  __declspec(dllimport)  int __cdecl _wcsicoll_l(   const wchar_t * _Str1,    const wchar_t *_Str2,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _wcsncoll(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int __cdecl _wcsncoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount,    _locale_t _Locale);
  __declspec(dllimport)  int __cdecl _wcsnicoll(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount);
  __declspec(dllimport)  int __cdecl _wcsnicoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    size_t _MaxCount,    _locale_t _Locale);

#line 57 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdarg.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 21 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdarg.h"

#line 36 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdarg.h"
void  __declspec(dllimport)  __cdecl _vacopy(   va_list *,    va_list);

#line 58 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globaltypes.h"

#line 44 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globaltypes.h"
typedef signed char int8_t;
typedef signed short int int16_t;
typedef signed int int32_t;
typedef signed long long int int64_t;

typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long int uint64_t;


typedef struct uint128_s
{
   uint64_t  uint64[2];
} uint128_t;

#line 75 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globaltypes.h"
typedef uint8_t  BOOL8;


typedef uint32_t  BOOL32;


typedef uint8_t   BOOL;

#line 104 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globaltypes.h"
typedef void (*PVFV_t)(void);

#line 62 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_platformmacros.h"

#line 32 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_platformmacros.h"
typedef volatile uint32_t HW_REG;
typedef volatile uint64_t HW_REG64;
typedef uint32_t HwRegField32_t;

#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/commondefs.h"

#line 14 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelintrinsics.h"

#line 21 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelintrinsics.h"
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned long uint32;
typedef unsigned long long uint64;
typedef signed char int8;
typedef signed short int16;
typedef signed long int32;
typedef signed long long int64;



extern void _ASM(char*);


void JumpNextLink(const char *);






extern unsigned long   _core_read(unsigned long regNum);
extern void     _core_write(unsigned long value, unsigned long regNum);
extern void     _disable( void );
extern void     _disable1( void );
extern void     _disable2( void );
extern void     _enable( void );
extern void     _enable1( void );
extern void     _enable2( void );
extern unsigned long*  _interrupt_ext_addr( void );
extern void     _nop( void );
extern void     __svc( unsigned long SVC_ID );
extern signed short    _swap16(signed short);
extern signed long    _swap32(signed long);
extern void     _sr(unsigned long value, unsigned long regNum);
extern unsigned long   _lr(unsigned long regNum);
extern void     _flag(unsigned long arcFlag);
extern void     _kflag(unsigned long value);
extern void     _wevt(unsigned long value);
extern void     _seti(unsigned long value);
extern unsigned long   _clri(void);
extern unsigned long   _sync(void);


extern void     _csrr_w(unsigned long InternalOffset, unsigned long value);
extern unsigned long     _csrr_r(unsigned long InternalOffset);
extern void     _csrr_s(unsigned long InternalOffset, unsigned long value);
extern void     _csrr_c(unsigned long InternalOffset, unsigned long value);


extern unsigned long   _csrr(unsigned long Offset);
extern void            _csrw(unsigned long Offset, unsigned long val);
extern void            _csrs(unsigned long Offset, unsigned long val);
extern void            _csrc(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrw(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrs(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrc(unsigned long Offset, unsigned long val);

#line 50 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"









typedef unsigned char *LINKER_SYM;

#line 1 "d:/gitrepo/atlas3_release/_out/model/autogensource/fwprobes/supportedfwprobesdecl.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/fwprobestypes.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdint.h"

#line 1 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/crtdefs.h"

#line 7 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdint.h"

typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

#line 53 "c:/program files (x86)/microsoft visual studio 12.0/vc/include/stdint.h"
typedef long long          intmax_t;
typedef unsigned long long uintmax_t;

#line 17 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/fwprobestypes.h"




typedef uint64_t  LBA_t;
typedef int64_t   signed_LBA_t;

#line 6 "d:/gitrepo/atlas3_release/_out/model/autogensource/fwprobes/supportedfwprobesdecl.h"
void _fwProbe_accepthostsectors_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_accepthostsectors_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_acceptsectorsifmstwritten_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_acceptsectorsifmstwritten_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_addtracerange_with_3_params(const char* flag, uint32_t min, uint32_t max);

void _fwProbe_addxorprotecteddata_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_addxorprotecteddata_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);


uint32_t _fwProbe_apply_weakwl_block_with_5_params(uint32_t designator, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

void _fwProbe_applyreadthresholds_with_13_params(uint32_t Package, uint32_t bcType, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column, int32_t* fwDeltaValues, int32_t* fwProfile, int32_t fwProfileSize, uint32_t RevertOnErase);

void _fwProbe_applyreadthresholds_with_12_params(uint32_t Package, uint32_t bcType, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column, int32_t* fwDeltaValues, int32_t* fwProfile, int32_t fwProfileSize, uint32_t RevertOnErase);

void _fwProbe_bootcomplete_with_1_params(uint32_t pass);

void _fwProbe_canceldieunresponsive_with_2_params(uint32_t Package, uint32_t die);


uint32_t _fwProbe_check_with_2_params(const char* flag, uint32_t enable);
uint32_t _fwProbe_rulecheck_with_2_params(const char* flag, uint32_t enable);
uint32_t _fwProbe_checkflag_with_2_params(const char* flag, uint32_t enable);

uint32_t _fwProbe_checkiserrorinjected_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column);


uint32_t _fwProbe_checkiserrorinjected_with_6_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column);


uint32_t _fwProbe_checkoff_with_1_params(const char* flag);
uint32_t _fwProbe_rulecheckoff_with_1_params(const char* flag);
uint32_t _fwProbe_checkflagoff_with_1_params(const char* flag);

uint32_t _fwProbe_checkon_with_1_params(const char* flag);
uint32_t _fwProbe_rulecheckon_with_1_params(const char* flag);
uint32_t _fwProbe_checkflagon_with_1_params(const char* flag);

void _fwProbe_checkxorparitymatch_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_checkxorparitymatch_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);


void _fwProbe_clearerrors_with_1_params(uint32_t RemoveIllegalBlocks);


void _fwProbe_clearlbatables_with_0_params(void);

void _fwProbe_clearwrittenqueues_with_0_params(void);

void _fwProbe_closefwlog_with_0_params(void);

uint32_t _fwProbe_cputimingsuspended_with_0_params(void);


void _fwProbe_datatrackingrestore_with_2_params(void* buffer, uint32_t bufferLen);


void _fwProbe_datatrackingsave_with_2_params(void* buffer, uint32_t bufferLen);


void _fwProbe_discardhostsectors_with_2_params(uint8_t* buff, uint32_t length);

void _fwProbe_discardlbarange_with_2_params(LBA_t StartLBA, LBA_t Length);

void _fwProbe_discardmetablock_with_2_params(uint32_t MetablockNumber, uint32_t BankNumber);

void _fwProbe_discardphysicallbas_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_bics_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_bics_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_enter_read_only_mode_with_0_params(void);

void _fwProbe_fim2timeouterrorinjectremove_with_2_params(const char* command, uint32_t val);


void _fwProbe_forcedlenextlink_with_0_params(void);


void _fwProbe_forcedownload_with_0_params(void);


void _fwProbe_forceminidump_with_0_params(void);

const char * _fwProbe_fwstorage_getstring_with_1_params(const char * name);


uint64_t _fwProbe_fwstorage_getuint_with_1_params(const char * name);


void _fwProbe_fwstorage_setuint_with_2_params(const char * name, uint64_t value);


uint32_t _fwProbe_get_weakwl_block_with_4_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

uint32_t _fwProbe_getboolvar_with_1_params(const char* varName);

const char * _fwProbe_getcontrollerhwconfparam_with_1_params(const char* key);


LBA_t _fwProbe_getfirstcontrolsector_with_0_params(void);

LBA_t _fwProbe_getfirstcontrolsector_with_2_params(uint32_t dummy1, const char* dummy2);

void _fwProbe_getfwvcd_with_2_params(uint32_t index, uint32_t* value);


int32_t _fwProbe_getintvar_with_1_params(const char* varName);

LBA_t _fwProbe_getlogicalcapacity_with_0_params(void);

const char * _fwProbe_getpackagename_with_1_params(uint32_t pkg);


uint32_t _fwProbe_getramstate_with_1_params(const char* ram_name);


uint32_t _fwProbe_getramstatusmap_with_2_params(char* buffer, uint32_t length);


uint32_t _fwProbe_getsectionstart_with_2_params(uint32_t sliceNo, const char* section);

uint32_t _fwProbe_getshareduint32_with_1_params(const char* _var);


const char* _fwProbe_getstringvar_with_1_params(const char* varName);

uint32_t _fwProbe_getuintvar_with_1_params(const char* varName);

void _fwProbe_getwordlinelbas_with_9_params(LBA_t* WlLBAs_, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column, uint32_t siz);


void _fwProbe_getwordlinelbas_with_8_params(LBA_t* WlLBAs_, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column, uint32_t siz);


uint32_t _fwProbe_getwordlinestm_with_5_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Wordline);


uint32_t _fwProbe_him_probe_with_1_params_plus_varargs(uint32_t InterfaceNum, ...);

void _fwProbe_initialisexorchecks_with_2_params(uint32_t Length, uint32_t FullData);


void _fwProbe_injectdieunresponsive_with_5_params(uint32_t Package, uint32_t die, uint32_t when, uint32_t severity, uint32_t flags);


void _fwProbe_injecterror_with_14_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterror_with_13_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterrorwlbit_with_15_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterrorwlbit_with_14_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_inspect_buffer_with_4_params(const char* bufName, const unsigned char* startAddr, uint32_t len, uint32_t InterfaceNum);

void _fwProbe_invalidateblock_with_5_params(uint32_t FIM, uint32_t CE, uint32_t Die, uint32_t Plane, uint32_t Block);

void _fwProbe_invalidatemetablock_with_2_params(uint32_t MetablockNumber, uint16_t BankNumber);

uint32_t _fwProbe_ipc_overflow_check_with_4_params(const char* IpcName, const char* OverflowMode, uint32_t Index, uint32_t DoEnable);

uint32_t _fwProbe_isforcedle_with_0_params(void);


void _fwProbe_jumpnextlink_with_1_params(const char* link);


void _fwProbe_jumpnextlinkwithargs_with_1_params_plus_varargs(const char* link, ...);


void _fwProbe_jumptodle_with_0_params(void);


void _fwProbe_kernelobjectleaktest_with_0_params(void);


void _fwProbe_lbaversioninvalid_with_3_params(LBA_t lba, uint32_t partition, uint32_t length);


uint32_t _fwProbe_loadstm_with_1_params(const char* path);


void _fwProbe_modeldump_with_2_params(uint8_t* addr, uint32_t size);

void _fwProbe_modellog_with_1_params_plus_varargs(const char* format, ...);


void _fwProbe_multicheck_with_3_params(const char* type, const char* flag, uint32_t enable);

void _fwProbe_multicheckoff_with_2_params(const char* type, const char* flag);

void _fwProbe_multicheckon_with_2_params(const char* type, const char* flag);

void _fwProbe_openfwlog_with_2_params(const char * filename, const char * mode);

void _fwProbe_partition_info_with_3_params(uint32_t PartitionNumber, uint32_t SectorCount, uint32_t InterfaceNum);

void _fwProbe_physicallbaspendingaccept_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_physicallbaspendingaccept_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_pmuglitch_with_4_params(uint32_t Rail, uint32_t Voltage, uint64_t Delay, uint64_t Width);


void _fwProbe_pmusetpower_with_4_params(uint32_t Rail, uint32_t Voltage, uint64_t Delay, uint64_t Width);


void _fwProbe_portwrite_with_4_params(uint32_t Address, uint32_t DatLengthInBits, uint32_t Data, uint16_t PacketOpCode);


void _fwProbe_primeacceptance_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t sectors);

void _fwProbe_primeacceptance_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t sectors);

uint64_t _fwProbe_readregistervalueinzerotime_with_4_params(const char* busName, const char* moduleName, const char* registerName, uint16_t regIndexInArrayOfRegs);


void _fwProbe_registercontroldatamap_with_2_params(const char* Name, uint32_t ID);

void _fwProbe_registershareduint32_with_2_params(const char* _var, uint32_t val);


void _fwProbe_remapkernelirq_with_2_params(uint32_t src, uint32_t dest);


void _fwProbe_resumerandomerrorinjection_with_1_params(uint32_t reType);

uint32_t _fwProbe_savestm_with_2_params(const char* path, uint32_t handle);


const char* _fwProbe_searchregisterinzerotime_with_1_params(const char* regName);


void _fwProbe_sederrorinject_with_3_params(uint32_t Addr, uint64_t Delay, uint32_t NumBitFlips);


void _fwProbe_sedinternalerrorinject_with_3_params(uint32_t Addr, uint64_t Delay, uint32_t NumBitFlips);


void _fwProbe_set_secure_format_flag_with_2_params(uint32_t isSecureFormat, uint32_t InterfaceNum);

void _fwProbe_set_user_capacity_with_3_params(LBA_t FirstLba, LBA_t LastLba, uint32_t InterfaceNum);

void _fwProbe_setadmanalogline_with_4_params(const char* command, uint32_t line_index, uint32_t value, uint64_t duration_ns);


void _fwProbe_setblockstm_with_6_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Revert);

void _fwProbe_setblockstm_with_5_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

uint32_t _fwProbe_setboolvar_with_2_params(const char* varName, uint32_t val);

void _fwProbe_seteventbufferflush_with_2_params(const char* command, uint32_t val);


void _fwProbe_setflashtiming_with_4_params(uint32_t Package, const char* TimingName, uint32_t TimeValue, uint32_t die);

void _fwProbe_setfwvcd_with_2_params(uint32_t index, uint32_t value);


int32_t _fwProbe_setintvar_with_2_params(const char* varName, int32_t val);

void _fwProbe_setmaxeccbits_with_1_params(uint16_t Value);

void _fwProbe_setmetablockinfo_with_3_params(uint32_t PlanesPerMetablock, uint32_t Banks, uint32_t MetablocksPerFim);

void _fwProbe_setphysicalblocks_with_4_params(uint32_t MetablockNumber, uint32_t BankNumber, uint32_t ArraySize, void* PhysicalBlocks);

void _fwProbe_setphysicalsubblocks_with_4_params(uint32_t MetablockNumber, uint32_t BankNumber, uint32_t ArraySize, void* PhysicalBlocks);

void _fwProbe_setshareduint32_with_2_params(const char* var, uint32_t val);


uint32_t _fwProbe_setspecialwlstm_with_7_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, const char* Wordline, uint32_t Revert);


uint32_t _fwProbe_setstringvar_with_2_params(const char* varName, const char* val);

void _fwProbe_setsystemreprogramcheck_with_2_params(uint32_t type, uint32_t _case);

void _fwProbe_setsystemreprogramcheckparam_with_6_params(uint32_t type, uint32_t offset, uint32_t mask, uint32_t delta, int32_t* fwvalues, int32_t fwvaluesSize);

void _fwProbe_setsystemreprogramscenarios_with_2_params(uint32_t type, uint32_t numCases);

uint32_t _fwProbe_setuintvar_with_2_params(const char* varName, uint32_t val);

uint32_t _fwProbe_setwordlinestm_with_7_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Wordline, uint32_t Revert);


void _fwProbe_snowbirdinjectirqerror_with_2_params(const char* command, uint32_t val);


void _fwProbe_strictarcaddresses_with_0_params(void);

void _fwProbe_suspendrandomerrorinjection_with_1_params(uint32_t reType);

void _fwProbe_switchtoram_with_0_params(void);


void _fwProbe_testcpuexit_with_2_params(uint32_t exitcode, const char* msg);

void _fwProbe_testcpustart_with_0_params(void);

void _fwProbe_testcpustart_with_1_params(uint32_t ignored);

void _fwProbe_testexit_with_2_params_plus_varargs(uint32_t exitcode, const char* format, ...);


void _fwProbe_trace_with_2_params(const char* flag, uint32_t enable);

void _fwProbe_traceoff_with_1_params(const char* flag);

void _fwProbe_traceon_with_1_params(const char* flag);

void _fwProbe_unknown_probe_with_1_params_plus_varargs(const char* name, ...);

void _fwProbe_vcddump_with_1_params(uint32_t enable);

void _fwProbe_writecacheswreset_with_0_params(void);

void _fwProbe_writefwlog_with_1_params_plus_varargs(const char* format, ...);

void _fwProbe_xorunrollcomplete_with_10_params(void* buffer, uint32_t BufferLen, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_xorunrollcomplete_with_9_params(void* buffer, uint32_t BufferLen, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);

#line 88 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/fwportability.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/platform/fw/portability.h"

#line 16 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/fwportability.h"

#line 100 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 118 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
unsigned long _LivetIntrinsic ReadRegister(unsigned long Addr);
void   _LivetIntrinsic WriteRegister(unsigned long Addr, unsigned long value);
void   _LivetIntrinsic WriteRegisterNoUpdate(unsigned long Addr, unsigned long value);
unsigned long _LivetIntrinsic ReadRegisterPtr(void *addr);
void   _LivetIntrinsic WriteRegisterPtr(void *addr, unsigned long value);
unsigned long _LivetIntrinsic ModelToHardware(unsigned long PCaddr);
unsigned long _LivetIntrinsic HardwareToModel(unsigned long ARCaddr);
unsigned char _LivetIntrinsic ReadRegister8(unsigned long Addr);
void   _LivetIntrinsic WriteRegister8(unsigned long Addr, unsigned char value);

unsigned short _LivetIntrinsic ReadRegister16(unsigned long Addr);
void   _LivetIntrinsic WriteRegister16(unsigned long Addr, unsigned short value);
unsigned short _LivetIntrinsic ReadRegisterPtr16(void *addr);
void   _LivetIntrinsic WriteRegisterPtr16(void *addr, unsigned short value);
unsigned long long _LivetIntrinsic ReadRegister64(unsigned long Addr);
void   _LivetIntrinsic WriteRegister64(unsigned long Addr, unsigned long long value);
unsigned long long _LivetIntrinsic ReadRegisterPtr64(void* addr);
void   _LivetIntrinsic WriteRegisterPtr64(void* addr, unsigned long long value);

#line 168 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic DataTracking_SectorCreated( void * DataAddr, unsigned long long LogAddr, unsigned long NumSectors, unsigned char IsControl, const char * File, int Line );
void _LivetIntrinsic Dummy_DataTracking_SectorCreated( void * DataAddr, unsigned long long LogAddr, unsigned long NumSectors, unsigned char IsControl, void * pBufThrStruct, const char * File, int Line );
void _LivetIntrinsic DataTracking_SectorCopied( void * Source, void * Destination, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_CompareExpectedNonHostData(void * Source, unsigned long long LogAddr, const char * File, int Line);
void _LivetIntrinsic DataTracking_CompareExpected(void * Source, unsigned long long LogAddr, const char * File, int Line);
void _LivetIntrinsic DataTracking_ReleaseBuffers( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_ReleaseBytes( void * Source, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagHeader( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagSeed( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagCrc( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagEcc( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagPadOnes(void* Source, unsigned long Length, const char* File, int Line);
void _LivetIntrinsic DataTracking_TagPadZeroes(void* Source, unsigned long Length, const char* File, int Line);
void _LivetIntrinsic DataTracking_SCTPRead( void * Source, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_SCTPWrite( void * Source, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_DataErased( unsigned long long StartLBA, unsigned long long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetBitErrorRate( void * Source, unsigned long BitErrorFrac1to0, unsigned long BitErrorFrac0to1, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetEntropyValue( void * Source, unsigned char EntropyValue, const char * File, int Line );
void _LivetIntrinsic DataTracking_DefineEblock( void* parameter[], unsigned long NumFields, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetAsPaddingData( void * Addr, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_ClearPaddingData( void * Addr, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_DataCopied( void* Source, void* Destination, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_XorData( void* Source, void* Destination, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetHeaderFlag( void* Source, unsigned int Flag, const char * File, int Line );
void _LivetIntrinsic DataTracking_ClearHeaderFlag( void* Source, unsigned int Flag, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagNumEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_TagErasedEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_ReleaseNumEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_EmulateHostWrite(void * DataAddr, unsigned long long LBA, unsigned long Written, const char * File, int Line);
void _LivetIntrinsic DataTracking_CreatedSectorWritten(void * DataAddr);

#line 242 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic ModelBlock(int FromRTOS);
void _LivetIntrinsic ModelUnblock(void);
void _LivetIntrinsic LivetCpuTimedDelay(unsigned long NumClocks);






void _LivetIntrinsic LivetCpuWaitSignal(unsigned int CoreId, unsigned int TimeoutMicroSecs);
void _LivetIntrinsic LivetCpuSendSignal(void);




void _LivetIntrinsic  EnableIrq();
int  _LivetIntrinsic  DisableIrq();
int  _LivetIntrinsic  RestoreIrq(int val);
void _LivetIntrinsic  EnableFiq();
int  _LivetIntrinsic  DisableFiq();
void _LivetIntrinsic  Wfi();
void _LivetIntrinsic  Wfe();
void _LivetIntrinsic SetCPSR(unsigned int cpsr);
unsigned int _LivetIntrinsic GetCPSR();
void _LivetIntrinsic CP15RegWrite64(unsigned int opc1, unsigned int srcLo, unsigned int srcHi, unsigned int CRm);
unsigned long long _LivetIntrinsic CP15RegRead64(unsigned int opc1, unsigned int CRm);
void _LivetIntrinsic CP15RegWrite(unsigned int opc1, unsigned int src, unsigned int CRn, unsigned int CRm, unsigned int opc2);
unsigned int _LivetIntrinsic CP15RegRead(unsigned int opc1, unsigned int CRn, unsigned int CRm, unsigned int opc2);

#line 285 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic RegisterWaypoint(int EventKey, const char *EventName);
void _LivetIntrinsic _LivetZeroTime Waypoint(int EventKey, unsigned long NumArgs, ...);
void _LivetIntrinsic _LivetYield();
 extern int *WaypointMap;







void _LivetIntrinsic MediaModel_SpindleSpinUp();
void _LivetIntrinsic MediaModel_SpindleStopSpindle();
void _LivetIntrinsic MediaModel_SpindleReduceToStandbySpeed();
void _LivetIntrinsic MediaModel_SpindleRecoverFromStandbySpeed();
unsigned long _LivetIntrinsic MediaModel_SpindleGetCurrentSpeed();

unsigned long _LivetIntrinsic MediaModel_IsSpindleStopped();
unsigned long _LivetIntrinsic MediaModel_IsSpindleFullSpeed();
unsigned long _LivetIntrinsic MediaModel_IsSpindleStandby();

void _LivetIntrinsic MediaModel_HeadParkHead( unsigned long Actuator, unsigned long Tag );
void _LivetIntrinsic MediaModel_HeadMoveToTrack( unsigned long Actuator, unsigned long TrackID, unsigned long Tag );
void _LivetIntrinsic MediaModel_HeadMoveToTrackWithOffset(unsigned long Actuator, unsigned long TrackID, unsigned long Tag, short int Offset);
void _LivetIntrinsic MediaModel_HeadSwitchHead( unsigned long Actuator, unsigned long HeadID, unsigned long Tag );
void _LivetIntrinsic MediaModel_SetInhibitSID( unsigned long Actuator, unsigned long InhibitSID );

unsigned long _LivetIntrinsic MediaModel_HeadGetLastCompletedTag(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentTrack(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentHead(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentSID(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentSector(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetLastSeekStartSID(unsigned long Actuator);

void _LivetIntrinsic MediaModel_HeadAbortOperation(unsigned long Actuator, unsigned long Tag);

unsigned long _LivetIntrinsic MediaModel_HeadWriteSectors(unsigned long Actuator, unsigned long StartOffset, unsigned long NumSectors, void * DataAddr, void * MDAddr, unsigned long Tag);
unsigned long _LivetIntrinsic MediaModel_HeadReadSectors(unsigned long Actuator, unsigned long StartOffset, unsigned long NumSectors, void * DataAddr, void * MDAddr, unsigned long Tag);

void _LivetIntrinsic MediaModel_WaitForHeadCompletion(unsigned long Actuator, unsigned long Tag);
unsigned long _LivetIntrinsic MediaModel_HeadGetSIDCount(unsigned long Actuator);

void _LivetIntrinsic MediaModel_InjectError(unsigned long Head, unsigned long Track, unsigned long Sector, void* ErrorDesc);
void _LivetIntrinsic MediaModel_SetLogicalTrigger(unsigned long long LBA, unsigned long Operation, unsigned long SkipCount, void* ErrorDesc);
void _LivetIntrinsic MediaModel_InjectSeekError(unsigned long Head, unsigned int TargetTrack, void* ErrorDesc);

unsigned long _LivetIntrinsic LivetCPU_CheckDestructorReset();

#line 350 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void *LivetMemcpy(void *dst, const void *src, size_t sz);
void *LivetMemmove(void *dst, const void *src, size_t sz);
void *LivetMemset(void *dst, int val, size_t sz);
int LivetMemcmp ( const void *p1, const void *p2, size_t sz);
char * LivetStrcpy(char *dst, const char * src);
size_t LivetStrlen(const char * str);
void *LibMemcpy(void *dst, const void *src, size_t sz);
void *LibMemmove(void *dst, const void *src, size_t sz);
void *LibMemset(void *dst, int val, size_t sz);
int LibMemcmp ( const void *p1, const void *p2, size_t sz);
char * LibStrcpy(char *dst, const char * src);
size_t LibStrlen(const char * str);







int SNPRINTF(char* buffer, size_t count, char const* format, ...);
int VSNPRINTF(char* buffer, size_t count, char const* format, va_list args);

#line 419 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic HaltFileLineMsg(const char *file,int line,const char *msg);






static __inline _LivetIntrinsic void _AssertImpl(int c, const char *f, int l, const char *msg);

#line 438 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
_LivetIntrinsic void* _fwProbe(const char *cmd, ...);

#line 467 "d:/gitrepo/atlas3_release/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
typedef unsigned long long LBA_t;




static const LBA_t UNDEFINED_LBA             = ( (LBA_t)(-1)  - 1);

static const LBA_t PAD_ZEROS_SECTOR          = ( (LBA_t)(-1)  - 3);
static const LBA_t PAD_ONES_SECTOR           = ( (LBA_t)(-1)  - 4);
static const LBA_t PAD_PATTERN_SECTOR        = ( (LBA_t)(-1)  - 5);










static const LBA_t PAD_OVERWRITTEN           = ( (LBA_t)(-1)  - 16);




static const LBA_t THROW_AWAY_DATA           = ( (LBA_t)(-1)  - 21);

#line 47 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_platformmacros.h"

   extern BOOL _always_false_;

#line 77 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_platformmacros.h"
   extern void ARCSleep(unsigned long IntMask);







   void   _sr(uint32 value, uint32 regNum);
   uint32 _lr(uint32 regNum);

#line 113 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_platformmacros.h"
   extern void _ASM(char*);



   uint32_t NORM( signed int x );
   uint16_t NORMW( signed short x );


   __inline static  void EnableInt(void)
   {
      _seti(0x1F);
   }



   __inline static  uint32_t DisableInt(void)
   {
      return _clri();
   }



   __inline static  void RestoreInt(uint32_t old_posture)
   {
      _seti(old_posture);;
   }

#line 63 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_statuscoderanges.h"
#line 25 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_statuscoderanges.h"
typedef enum Status_T_Ranges_e
{
   STATUS_OK               = 0,
   STATUS_ERROR            = 1,
   STATUS_BOOT_ROM_BASE    = 0x00000010,
   STATUS_BEFS_BASE        = 0x01000000,
   STATUS_NVME_BASE        = 0x02000000,
   STATUS_FTL_BASE         = 0x03000000,
   STATUS_INFRA_BASE       = 0x04000000,
   STATUS_PS_BASE          = 0x05000000,
   STATUS_SECURITY_BASE    = 0x06000000,
   STATUS_DIAG_BASE        = 0x07000000,
}   Status_T_Ranges_t;



typedef uint32_t Status_t;

#line 64 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set.h"

#line 157 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set.h"
typedef enum
{
  SET_ALL_EVENT_DISABLE,
  SET_ROM_EVENTS,
  SET_DLE_EVENTS,
  SET_RAM_EVENTS,
  SET_TBRAM_EVENTS,
  SET_IDLE_EVENTS,
} SET_LINK_INIT_HW_EVENTS_t;


typedef enum
{
  SET_ATB_NUM_BITS_8,
  SET_ATB_NUM_BITS_4,
} SET_NUM_OF_ATB_BITS_t;









typedef struct SET_ROM_FW_FILTERS
{
  uint32_t fwGroupsATB[ 4 ];
  uint32_t fwGroupsTBRAM[ 4 ];
} SET_ROM_FW_FILTERS_t;


typedef struct SET_ROM_COREIP_ENABLE
{
  uint32_t fwGroupsATB[ 4 ];
  uint32_t fwGroupsTBRAM[ 4 ];
} SET_ROM_COREIP_ENABLE_t;






typedef enum
{
   SET_SUBMODE_RMA_ON = 3,
   SET_SUBMODE_RMA_ON_HIM,
   SET_SUBMODE_RMA_ON_FIM0,
   SET_SUBMODE_RMA_ON_FIM1,
   SET_SUBMODE_RMA_ON_FIM2,
   SET_SUBMODE_RMA_ON_FIM3,
   SET_SUBMODE_RMA_ON_FIM4,
   SET_SUBMODE_RMA_ON_FIM5,
   SET_SUBMODE_RMA_ON_FIM6,
   SET_SUBMODE_RMA_ON_FIM7,
   SET_SUBMODE_RMA_ON_PWR = 0x13,
   SET_SUBMODE_RMA_ON_HIM_PWR,
   SET_SUBMODE_RMA_ON_FIM0_PWR,
   SET_SUBMODE_RMA_ON_FIM1_PWR,
   SET_SUBMODE_RMA_ON_FIM2_PWR,
   SET_SUBMODE_RMA_ON_FIM3_PWR,
   SET_SUBMODE_RMA_ON_FIM4_PWR,
   SET_SUBMODE_RMA_ON_FIM5_PWR,
   SET_SUBMODE_RMA_ON_FIM6_PWR,
   SET_SUBMODE_RMA_ON_FIM7_PWR,
}SET_SUBMODE_RMA;




typedef enum
{
   SET_CONFIG_ATB_GROUP_ID_FILTER,
   SET_CONFIG_TBRAM_GROUP_ID_FILTER,
   SET_CONFIG_ATB_TBRAM_GROUP_ID_FILTER,
}SET_GROUP_ID_FILTER_HANDLE;



typedef enum
{
   SET_CONFIG_EVENT_HARD_RESET_ROM,
   SET_CONFIG_EVENT_SOFT_RESET_ROM,
   SET_CONFIG_EVENT_IN_DLE,
   SET_CONFIG_EVENT_IN_FLASHWARE,
   SET_CONFIG_EVENT_IN_BOOT_LOADER,
   SET_SENDING_DRIVE_SERIAL_NUM,
   SET_CONFIG_EVENT_TIMER_SYNC,
   SET_CONFIG_EVENT_DPD2_START,
   SET_CONFIG_EVENT_DPS2_END,
   SET_CONFIG_EVENT_DPS3_START,
   SET_CONFIG_EVENT_DPS3_END,
   SET_CONFIG_EVENT_IN_ROM,
   SET_CONFIG_EVENT_DPS3_1_START,
   SET_CONFIG_EVENT_DPS3_1_END,
   SET_CONFIG_EVENT_LAST
} SET_CONFIG_EVENTS_t;


typedef enum
{
   SET_ATB_LOCKED,
   SET_ATB_LISTENING,
   SET_ATB_SENDING,
} SET_ATB_STATES_t;



typedef enum
{
   SET_BC_NOT_RUNNING,
   SET_BC_USING_BANK_1,
   SET_BC_USING_BANK_2,
} SET_DUMP_TO_FADI_STATES_t;

#line 303 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set.h"
typedef struct SET_EVENT_DUMP_HEADER_s
{
   uint32_t numberOfBytesInDump;
   uint32_t status;
} SET_EVENT_DUMP_HEADER_t;





typedef struct SET_ControlBlock_s
{
   uint32_t headSig;
   const    SET_ROM_COREIP_ENABLE_t * pSETFilterConfig;
   uint32_t systemClkFreq;
   uint32_t ATBClkFreq;
   uint32_t TimeStampsClkFreq;
   uint32_t tbRamAddrStart;
   uint32_t tbRamAddrEnd;
   uint32_t tbramWraps;
   uint32_t atbSubM;
   uint32_t subMFlag;
   uint32_t rfu_1;
   uint32_t rfu_2;
   uint16_t tbRAMAddrSaved;
   uint8_t  driveState;
   uint8_t  runningState;
   uint8_t  numberOfxPlorerSyncsSent;
   uint8_t  setTsCfg;
   uint8_t  atbState;
   uint8_t  atbSendOn;
   uint8_t  internalTestMode;
   uint8_t  ts07LsbOffset;
   uint8_t  ts12LsbOffset;
   uint8_t  ts16LsbOffset;
   uint8_t  ts21LsbOffset;
   uint8_t  ts24LsbOffset;
   uint8_t  setTimerPrescaler;
   uint8_t  msts21LsbOffset;
   uint8_t  reserved1;

} SET_ControlBlock_t;

#line 402 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set.h"
void                 SET_DisableAllCFG(void);
void                 SET_EnableDEBUG_RAM(void);
void                 SET_EnableATBus(void);
void                 SET_DisableATBus(void);
void                 SET_EnableTimers(void);
void                 SET_DisableTimer(void);
void                 SET_EnableSupressionOfTimeStampWrapEvents(void);
void                 SET_ResetAll(void);
void                 SET_TS7Resolution(uint8_t lsbLocation);
void                 SET_TS12Resolution(uint32_t lsbLocation);
void                 SET_TS16Resolution(uint32_t lsbLocation);
void                 SET_TS24Resolution(uint32_t lsbLocation);
void                 SET_ActivateCPU(uint32_t cpuNum);
void                 SET_ConfigureDebugRAM(uint32_t debugRAMSize);
void                 SET_InitControlBLock(uint32_t isAfterPor,         uint32_t systemClkFreq);
void                 SET_TimeStampsScalers(uint32_t eventsGrpProfile);
void                 SET_TimeStamps(void);
void                 SET_InitATB(void);
void                 SET_SaveATBClockFreqInUse(uint32_t ATBClkFreq);
void                 SET_InitFWEventHDRIndexes(void);
void                 SET_TimerPrescaler(uint8_t prescalerValue);
void                 SET_InitFWEventHDRIndexes(void);
void                 SET_InitTBRAM(uint32_t debugRAMSize);
void                 SET_EnableAllFWEventsToRAM(BOOL enableAll);
void                 SET_EnableAllFWEventsToATB(BOOL enableAll);
void                 SET_EnableMediumFWEventsToATB(void);
void                 SET_EnableCustomFWEventsToATB(uint32_t flt_0, uint32_t flt_1, uint32_t flt_2, uint32_t flt_3);
void                 SET_SendInfo(uint32_t setLevel);
Status_t             SET_EnableFWEventGroupID(uint32_t groupID, SET_GROUP_ID_FILTER_HANDLE applyFilterTo, BOOL turnOn);
void                 SET_MainCPUThread(uint32_t thread);
void                 SET_InitHWEvents(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
Status_t             SET_InitRomHwEvents(void);
void                 SET_InitRamHwEvents(void);
uint32_t             SET_GetTSConfigurationOption(void);
void                 SET_SyncToXplorer(void);
void                 SET_ConfigureRunStateInCB(SET_CONFIG_EVENTS_t           newRunState);
SET_CONFIG_EVENTS_t  SET_ReturnRunState(void);
void                 SET_ConfigureFWATBFilters(void);
void                 SET_ConfigureCodeCoverageEventFilters(void);
void                 SET_ConfigureFWEventFilters(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
void                 SET_ConfigureAllEventFilters(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
Status_t             SET_ConfigureManyFimHwEvents(BOOL enableEvents, uint32_t fimBitMap, uint32_t eventsBitmap);
uint32_t             SET_FimHwEventsStatus(uint32_t fimIndex);
Status_t             SET_ConfigureOneFimHwEvents(BOOL enableEvents, uint32_t fimIndex, uint32_t eventsBitMap);
Status_t             SET_ConfigureOneCapHwEvents(BOOL enableEvents, uint32_t capIndex, uint64_t eventsBitMap);
Status_t             SET_ConfigureOneCamHwEvents(BOOL enableEvents, uint32_t capIndex, uint32_t eventsBitMap);
uint32_t             SET_CamHwEventsStatus(uint32_t camIndex);
Status_t             SET_ConfigureManyCapHwEvents(BOOL enableEvents, uint32_t capBitMap, uint64_t eventsBitmap);
uint32_t             SET_CapHwEventsStatus(uint32_t capIndex);
Status_t             SET_ConfigureManyCamHwEvents(BOOL enableEvents, uint32_t capBitMap, uint32_t eventsBitmap);
Status_t             SET_ConfigureDpcaHwEvents(BOOL enableEvents, uint32_t eventsBitMap);
uint32_t             SET_DpcaHwEventsStatus(void);
Status_t             SET_ConfigureDdrHwEvents(BOOL enableEvents, uint32_t eventsBitMap);
uint32_t             SET_DdrHwEventsStatus(void);
void                 SET_DefaultFimHwEvents(void);
void                 SET_DefaultFeHwEvents(void);
void                 SET_DefaultCapHwEvents(void);
void                 SET_DefaultCamHwEvents(void);
void                 SET_DefaultRsHwEvents(void);
uint32_t             SET_RsHwEventsStatus(void);
void                 SET_DefaultLdpcDecoderHwEvents(void);
void                 SET_DefaultLdpcEncoderHwEvents(void);
uint32_t             SET_LpdcDecoderHwEventsStatus(uint8_t ldpcDecInstance);
uint32_t             SET_LpdcEncoderHwEventsStatus(void);
void                 SET_DefaultDpcaHwEvents(void);
void                 SET_DefaultDdrHwEvents(void);
void                 SET_SendTimeSync(void);
void                 SET_DisableAllEvents(void);
void                 SET_SynchroWhoTime(void);
void                 SET_SynchroWhoTime_IdleStart(void);
void                 SET_SynchroWhoTime_IdleEnd(void);
void                 SET_SendPeriodicSyncInfo(void);
void                 SET_ActivateAllCPU(void);
uint32_t             SET_GetFWGroupEventsRAM(uint32_t filterRegBank);
uint32_t             SET_GetFWGroupEventsATB(uint32_t filterRegBank);
Status_t             SET_TransferTBRAMEventsToBuffer(uint32_t *pReturnBuffer, uint32_t numberOfEvents);
void                 SET_SaveTBRAMAddr(void);
void                 SET_RestoreTBRAMAddr(void);
void                 SET_InitPSSpeedUpVars(uint32_t *PS_InstanceForSET16BitsTs, uint32_t *PS_InstanceForSET16Bits, uint32_t *PS_InstanceForSET32Bits, uint32_t *PS_InstanceForSET24Bits);
void                 SET_EnableBreadCrumbsEvents(SET_GROUP_ID_FILTER_HANDLE mode);
Status_t             SET_TurnBreadCrumbsToFadiON(void);
void                 SET_EnableAlwaysOnEvents(SET_GROUP_ID_FILTER_HANDLE mode);


 void     SET_TbramThreshAddeISR(void);
void                 SET_SimulateTBRAM(uint32_t loopMultFactor);

#line 20 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventconfig.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_debug.h"

#line 20 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventconfig.h"

#line 18 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"

#line 48 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
typedef enum SET_EVENT_GROUPS_t
{



SET_EVENT_GRP_FA_CONFIG_GRP_UID,

#line 63 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_ROM_FW_SET_EVENT_GRP_UID ,

#line 73 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_DLE_FW_SET_EVENT_GRP_UID ,

#line 83 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_ERROR_LOG_SET_EVENT_GRP_UID ,

#line 96 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_CRITICAL_SET_EVENT_GRP_UID ,

#line 104 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_BREAD_CRUMBS_SET_EVENT_GRP_UID ,

#line 112 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_DEBUG_RMA_SET_EVENT_GRP_UID ,

#line 120 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_SMART_SET_EVENT_GRP_UID ,

#line 128 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_EXCEPTION_SET_EVENT_GRP_UID ,

#line 137 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID ,

#line 145 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_DEBUG_SET_EVENT_GRP_UID ,

#line 156 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_DEALLOCATE_WZ_SET_EVENT_GRP_UID ,

#line 167 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_WUC_SET_EVENT_GRP_UID ,

#line 175 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_SERIALIZATION_SET_EVENT_GRP_UID ,

#line 183 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FE_ISR_DEBUG_SET_EVENT_GRP_UID ,

#line 191 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_PMM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_SHMOO_DEBUG_SET_EVENT_GRP_UID ,

#line 207 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FE_THERMAL_THROTTLING_SET_EVENT_GRP_UID ,

#line 215 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FE_FULL_DEBUG_SET_EVENT_GRP_UID ,

#line 225 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FE_HMBC_DEBUG_SET_EVENT_GRP_UID ,

#line 235 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_HAQ_SET_EVENT_GRP_UID ,

#line 247 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_CRITICAL_SET_EVENT_GRP_UID ,

#line 255 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_BREAD_CRUMBS_SET_EVENT_GRP_UID ,

#line 263 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_DEBUG_RMA_SET_EVENT_GRP_UID ,

#line 271 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_DPA_POINTS_SET_EVENT_GRP_UID ,

#line 279 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_INFRA_PERIODIC_EVENTS_SET_EVENT_GRP_UID ,

#line 287 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_TIMING_SET_EVENT_GRP_UID ,

#line 295 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_DEBUG_SET_EVENT_GRP_UID ,

#line 309 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_CRITICAL_SET_EVENT_GRP_UID ,

#line 317 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_BREAD_CRUMBS_SET_EVENT_GRP_UID ,

#line 325 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_DEBUG_RMA_SET_EVENT_GRP_UID ,

#line 333 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_DEBUG_SET_EVENT_GRP_UID ,

#line 341 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_USAGE_4_SET_EVENT_GRP_UID ,

#line 354 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_MST_DEBUG_SET_EVENT_GRP_UID ,

#line 367 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_CRITICAL_SET_EVENT_GRP_UID ,

#line 375 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_BREAD_CRUMBS_SET_EVENT_GRP_UID ,

#line 383 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_DEBUG_RMA_SET_EVENT_GRP_UID ,

#line 391 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_SAT_SET_EVENT_GRP_UID ,

#line 399 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_FML_SET_EVENT_GRP_UID ,

#line 407 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_BMG_SET_EVENT_GRP_UID ,

#line 415 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_RLC_SET_EVENT_GRP_UID ,

#line 423 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_MTM_SET_EVENT_GRP_UID ,

#line 431 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_LOG_SET_EVENT_GRP_UID ,

#line 439 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_BKOPS_SET_EVENT_GRP_UID ,

#line 447 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_MVP_SET_EVENT_GRP_UID ,

#line 455 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_PSR_SET_EVENT_GRP_UID ,

#line 463 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_HWD_SET_EVENT_GRP_UID ,

#line 471 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID ,

#line 479 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_DALOC_SET_EVENT_GRP_UID ,

#line 487 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_OBM_SET_EVENT_GRP_UID ,

#line 495 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_RLA_SET_EVENT_GRP_UID ,

#line 503 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_RLA_DEBUG_SET_EVENT_GRP_UID ,

#line 511 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_HRF_SET_EVENT_GRP_UID ,

#line 519 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_RS_SET_EVENT_GRP_UID ,

#line 527 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_RSQ_SET_EVENT_GRP_UID ,

#line 535 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_MNT_SET_EVENT_GRP_UID ,

#line 543 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_DHM_SET_EVENT_GRP_UID ,

#line 551 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_FNVM_SET_EVENT_GRP_UID ,

#line 559 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_JBM_SET_EVENT_GRP_UID ,

#line 567 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID ,

#line 575 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_FQD_SET_EVENT_GRP_UID ,

#line 583 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_MBM_SET_EVENT_GRP_UID ,

#line 591 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_PWS_SET_EVENT_GRP_UID ,

#line 599 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_PWS_DEBUG_SET_EVENT_GRP_UID ,

#line 607 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_XORM_SET_EVENT_GRP_UID ,

#line 615 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_EI_SET_EVENT_GRP_UID ,

#line 623 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_WL_SET_EVENT_GRP_UID ,

#line 631 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_OBM_EXT_SET_EVENT_GRP_UID ,

#line 639 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_FXH_SET_EVENT_GRP_UID ,

#line 647 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_READONLY_SET_EVENT_GRP_UID ,

#line 655 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_BREAD_CRUMBS_PERF_SET_EVENT_GRP_UID ,

#line 663 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_SMART_SET_EVENT_GRP_UID ,

#line 671 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_DEBUG_RMA_PERF_SET_EVENT_GRP_UID ,

#line 680 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_RDT_SET_EVENT_GRP_UID ,

#line 688 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_USAGE_41_SET_EVENT_GRP_UID ,

#line 696 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_FOR_FULL_DEBUG_SET_EVENT_GRP_UID ,

#line 704 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
   SET_EVENT_GRP_FTL_DDR_CACHE_ACCESS_SET_EVENT_GRP_UID ,

#line 717 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_1P0V_DEBUG_SET_EVENT_GRP_UID ,

#line 725 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_CRITICAL_SET_EVENT_GRP_UID ,

#line 733 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_BREAD_CRUMBS_SET_EVENT_GRP_UID ,

#line 741 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_RMA_SET_EVENT_GRP_UID ,

#line 749 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_RSV_DRV_SET_EVENT_GRP_UID ,

#line 757 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_BULLSEYE_SET_EVENT_GRP_UID ,

#line 765 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_REGRESSION_SET_EVENT_GRP_UID ,

#line 773 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_VALIDATION_SET_EVENT_GRP_UID ,

#line 781 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_DGM_SET_EVENT_GRP_UID ,

#line 789 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_MQD_SET_EVENT_GRP_UID ,

#line 797 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_CVD_SET_EVENT_GRP_UID ,

#line 805 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_OTG_SET_EVENT_GRP_UID ,

#line 813 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_EH_SET_EVENT_GRP_UID ,

#line 821 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_CH_SET_EVENT_GRP_UID ,

#line 829 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_BOOT_MAIN_SET_EVENT_GRP_UID ,

#line 837 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_XOR_SET_EVENT_GRP_UID ,

#line 845 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_RM_SET_EVENT_GRP_UID ,

#line 853 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_RS_SET_EVENT_GRP_UID ,

#line 861 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_RLC_SET_EVENT_GRP_UID ,

#line 869 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_HW_DRV_SET_EVENT_GRP_UID ,

#line 877 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_FLGP_SET_EVENT_GRP_UID ,

#line 885 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_BBM_SET_EVENT_GRP_UID ,

#line 893 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_MISC3_SET_EVENT_GRP_UID ,

#line 901 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_3_SET_EVENT_GRP_UID ,

#line 909 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_ADM_SET_EVENT_GRP_UID ,

#line 917 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_XOR_SET_EVENT_GRP_UID ,

#line 925 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_MISC1_SET_EVENT_GRP_UID ,

#line 933 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_ADM_SET_EVENT_GRP_UID ,

#line 941 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_MISC3_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_DGM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_MQD_SET_EVENT_GRP_UID ,

#line 965 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_CVD_SET_EVENT_GRP_UID ,

#line 973 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_OTG_SET_EVENT_GRP_UID ,

#line 981 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_EH_SET_EVENT_GRP_UID ,

#line 989 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_CH_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_BOOT_MAIN_SET_EVENT_GRP_UID ,

#line 1005 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_XOR_SET_EVENT_GRP_UID ,

#line 1013 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_RM_SET_EVENT_GRP_UID ,

#line 1021 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_RS_SET_EVENT_GRP_UID ,

#line 1029 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_RLC_SET_EVENT_GRP_UID ,

#line 1037 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_HW_DRV_SET_EVENT_GRP_UID ,

#line 1045 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_FLGP_SET_EVENT_GRP_UID ,

#line 1053 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_BBM_SET_EVENT_GRP_UID ,

#line 1061 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_PERF_RFM_SET_EVENT_GRP_UID ,

#line 1069 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DST_SET_EVENT_GRP_UID ,

#line 1077 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_IFT_SET_EVENT_GRP_UID ,

#line 1085 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_IRJB_SET_EVENT_GRP_UID ,

#line 1097 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PCU_EVENTS_SET_EVENT_GRP_UID ,

#line 1110 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventgroups.h"
SET_EVENT_GRP_LLFS_SET_EVENT_GRP_UID  = 126,




SET_EVENT_GROUP_MAX,





}    SET_EVENT_GROUPS_t;

#line 21 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventdictionary.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/asic_constants.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/dllbuild/atlas3_ei.ram/softmap.h"

#line 21 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/asic_constants.h"

#line 23 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventdictionary.h"

#line 52 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventdictionary.h"
typedef enum
{
   PATH_EVENT_ROM_AON_SECOND_VECTOR_SET = 0x01,
   PATH_EVENT_ROM_AON_FIRST_VECTOR_SET,
   PATH_EVENT_ROM_BB_FOUND_VALID,
   PATH_EVENT_ROM_BB_SIG_FAILURE,
   PATH_EVENT_ROM_BB_NOT_FOUND,
   PATH_EVENT_ROM_BP_SEC_FAILURE,
   PATH_EVENT_ROM_BP_PRIMARY_FOUND,
   PATH_EVENT_ROM_BP_SECONDARY_FOUND,
   PATH_EVENT_ROM_BP_PRIMARY_FOUND_OLD_REVISION,
   PATH_EVENT_ROM_BP_SECONDARY_FOUND_OLD_REVISION,
   PATH_EVENT_ROM_EEPROM_READ_STATUS,
   PATH_EVENT_ROM_SENSE_KEY_SET,
   PATH_EVENT_ROM_GPIO_STRAP_VALUE,

   PATH_EVENT_ROM_BP_HMAC_FAIL = 0x10,
   PATH_EVENT_ROM_CMC_UART_CLOCK_FREQ,
   PATH_EVENT_ROM_CMC_UART_CLOCK,
   PATH_EVENT_ROM_CMC_UART_CLOCK_DOMAIN,
   PATH_EVENT_ROM_CMC_UART_PERIPHERAL_CLOCK,
   PATH_EVENT_ROM_CMC_TOP_FREQ_ZERO,
   PATH_EVENT_ROM_CMC_TOP_INIT_MULTI_CLOCK_DOMAIN,
   PATH_EVENT_ROM_CMC_TOP_INIT_CPU_SUB_DOMAIN,
   PATH_EVENT_ROM_CMC_TOP_INIT_ROM,
   PATH_EVENT_ROM_CMC_TOP_DEFAULT_INIT_COMPLETE,
   PATH_EVENT_ROM_CMC_TOP_TOSC_NOT_STABLE,
   PATH_EVENT_ROM_COLD_BOOT,
   PATH_EVENT_ROM_BS_RD_ERROR,
   PATH_EVENT_ROM_CVD_PARAMETER_REVERTED_DECODE,
   PATH_EVENT_ROM_DPS,
   PATH_EVENT_ROM_BOOT_OPTIONS,

   PATH_EVENT_ROM_HIGH_BER_THRESHOLD = 0x20,
   PATH_EVENT_ROM_ZERO_ERASE_THRESHOLD,
   PATH_EVENT_ROM_BP_HIGH_BER,
   PATH_EVENT_ROM_BP_READ_ERROR,
   PATH_EVENT_ROM_CE_MODE_SELECT,
   PATH_EVENT_ROM_TM_MULT,
   PATH_EVENT_ROM_TM_FIM_CYCLES,
   PATH_EVENT_ROM_LDPC_CELL_TYPE,
   PATH_EVENT_ROM_LDPC_SB,

   PATH_EVENT_ROM_FLASH_BYPASS_CHECK_ENTERED = 0x30,
   PATH_EVENT_ROM_FLASH_BYPASS_EXECUTED,
   PATH_EVENT_ROM_FLASH_CMC_CLK_CONFIGURE_BEING_EXECUTED,
   PATH_EVENT_ROM_DEBUG_DATA,
   PATH_EVENT_ROM_NPDP_TRACE_OPERATION,
   PATH_EVENT_ROM_NPDP_TRACE_STATUS,
   PATH_EVENT_ROM_DEBUG_DATA2,
   PATH_EVENT_ROM_DEBUG_DATA3,

   PATH_EVENT_ROM_HIM_MEMORY_INITD = 0x40,
   PATH_EVENT_ROM_DEVICE_CONFIG,
   PATH_EVENT_ROM_IFS_SIFS_READ,
   PATH_EVENT_ROM_FADI_PORT_ENABLED,
   PATH_EVENT_ROM_NPDP_CVD_FIRST_TRY_FAILURE,
   PATH_EVENT_ROM_NPDP_CVDROM_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_FAILED,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_BACKUP_STATUS,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_INVALID_ID,
   PATH_EVENT_ROM_NPDP_FLASH_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_FIM_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_INIT_COMPLETED,
   PATH_EVENT_ROM_NPDP_POR,

   PATH_EVENT_ROM_NPDP_READBACKUP_ID_SUCCESS = 0x50,
   PATH_EVENT_ROM_SEC_INIT,
   PATH_EVENT_ROM_SEC_BOOTSTATE,
   PATH_EVENT_ROM_SEC_FIPS_ERROR,

   PATH_EVENT_ROM_SYS_EFUSE_WORD2_FAIL = 0x60,
   PATH_EVENT_ROM_SYS_EFUSE_WORD3_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_SYSTEM_HMAC_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_SYSTEM_EK_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_SBSK_HASH_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_FAKEK_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_FASK_HASH_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_PRSK_HASH_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_CONTROL_BITS,
   PATH_EVENT_ROM_SEC_BOOT_ST_WAIT_FOR_RMA,
   PATH_EVENT_ROM_SOFT_RST_SIG_ROM_IDLE,
   PATH_EVENT_ROM_SOFT_RESET,
   PATH_EVENT_ROM_SYS_FALLBACK,
   PATH_EVENT_ROM_SYS_RUNTIME_INIT,
   PATH_EVENT_ROM_SYS_CRITICAL_INIT,
   PATH_EVENT_ROM_SYS_EFUSE_INIT_FAIL,

   PATH_EVENT_ROM_LOADER_HIGH_BER = 0x70,
   PATH_EVENT_ROM_LOADER_READ_ERROR,
   PATH_EVENT_ROM_TOSC_CALIBRATION_DONE,
   PATH_EVENT_ROM_UART_INTERFACE,
   PATH_EVENT_ROM_FADI_PORT_DISABLED,
   PATH_EVENT_ROM_UART_ROM_INITD,
   PATH_EVENT_ROM_UART_SET_CLOCK_FREQ,
   PATH_EVENT_ROM_UNKNOWN_ECC_PAGE_SIZE,
   PATH_EVENT_ROM_WARM_VECTOR_SET,

} PATH_EVENT_PARAMETER_ROM_t;

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/code_coverage.h"

#line 27 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/code_coverage.h"
extern uint32_t mp_cc_buf[];
extern uint32_t *pMPCCBuf;
extern uint32_t ps_cc_buf[];
extern uint32_t *pPSCCBuf;

void     CodeCoverageFillBuffer(uint32_t *pCCBuff, uint32_t sizeOfCCBuff);
uint16_t CodeCoverageSendOneCCBuffer(uint32_t *pCCBuff, uint32_t sizeOfCCBuff, BOOL addPSMarker);
Status_t CodeCoverageSendBuffers(void);

#line 23 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw_macros.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw.h"

#line 244 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw.h"
typedef struct _SET_FW_FILTER_REG
{
   uint32_t FILTER_ENA;
   uint32_t    RESERVE_FILTER_ENA;
}SET_FW_FILTER_REGs;

typedef enum SET_Get_FW_Filter_Bank_Idx_e
{
   SET_FW_FILTER_GROUP_BANK_0,
   SET_FW_FILTER_GROUP_BANK_1,
   SET_FW_FILTER_GROUP_BANK_2,
   SET_FW_FILTER_GROUP_BANK_3,
   SET_FW_FILTER_GROUP_BANK_TOO_MANY,
}   SET_Get_FW_Filter_Bank_Idx_t;


typedef struct _SET_EVENT_INT_VAL
{
   uint32_t EVENT_INT;
   uint32_t    RESERVE_EVENT_INT;
}SET_EVENT_INT_VALs;

typedef struct _SET_EVENT_INT_MASK
{
   uint32_t EVENT_INT;
   uint32_t    RESERVE_EVENT_INT;
}SET_EVENT_INT_MASKs;







typedef struct _SET_REGs
{
   uint32_t             SET_CFG;
   uint32_t                RESERVESET_CFG;
   uint32_t             TIMER_PRESCALE;
   uint32_t                RESERVED_TIMER_PRESCALE;
   uint32_t             TIMER_CFG_VALUE;
   uint32_t                RESERVED_TIMER_CFG_VALUE;
   SET_EVENT_INT_VALs   EVENT_INT_VAL[ 4 ];
   SET_EVENT_INT_MASKs  EVENT_INT_MASK[ 4 ];
   uint32_t             INT_STS;
   uint32_t                RESERVED_INT_STS;
   uint32_t             INT_EN;
   uint32_t                RESERVED_INT_EN;
   uint32_t             FIFO_EMPTY_STS;
   uint32_t                RESERVED_FIFO_EMPTY_STS;
   uint32_t             SW_RESET;
   uint32_t                RESERVED_SW_RESET;
   uint32_t             TS_LTI;
   uint32_t                RESERVED_TS_LTI;
   uint32_t             RAM_CFG;
   uint32_t                RESERVED_RAM_CFG;
   uint32_t             TIMER_CFG;
   uint32_t                RESERVED_TIMER_CFG;
   uint32_t             RAM_CURR_ADDR;
   uint32_t                RESERVED_RAM_CURR_ADDR;
   uint32_t             RAM_INT_TH;
   uint32_t                RESERVED_RAM_INT_TH;
   uint32_t             RAM_TYPE_EN;
   uint32_t                RESERVED_RAM_TYPE_EN;
   uint32_t             ATB_TYPE_EN;
   uint32_t                RESERVED_ATB_TYPE_EN;
   uint32_t             TIMER_LSB;
   uint32_t                RESERVED_TIMER_LSB;
   uint32_t             TIMER_MSB;
   uint32_t                RESERVED_TIME_MSB;
   uint32_t             RAM_WRAP_CTR;
   uint32_t                RESERVED_RAM_WRAP_CTR;
   uint32_t             EVENT_32_16_PREFIX_CONST;
   uint32_t                RESERVED_EVENT_32_16_PREFIX_CONST;
   uint32_t             RAM_BAD;
   uint32_t                RESERVED_RAM_BAD;
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_0_31[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_32_63[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_64_95[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_96_127[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_0_31[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_32_63[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_64_95[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_96_127[ 2 ];
   uint32_t             CPU_EN;
   uint32_t                RESERVED_CPU_EN;
   uint32_t             CPU_THREAD_MP;
   uint32_t                RESERVED_CPU_THREAD;

   uint32_t             CPU_THREAD_PS0;
   uint32_t                RESERVED_CPU_THREAD_PS0;
   uint32_t             CPU_THREAD_PS1;
   uint32_t                RESERVED_CPU_THREAD_PS1;
   uint32_t             CPU_THREAD_PCU;
   uint32_t                RESERVED_CPU_THREAD_PCU;

   uint32_t             HW_RAM_FLT;
   uint32_t                RESERVED_HW_RAM_FLT;
   uint32_t             HW_ATB_FLT;
   uint32_t                RESERVED_HW_ATB_FLT;


}SET_REGs, *pSET_REGs;

#line 393 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw.h"
typedef struct _ATB_REGs
{
   uint32_t       MODE;
   uint32_t       P_TEST;
   uint32_t       PARALLEL_OUT_0;
   uint64_t       PARALLEL_OUT_1;
   uint32_t       P2S_READY;
   uint32_t       DEBUG_CLK_SEL;
   uint32_t       IRQ_CLR;
   uint32_t       HEADER_CTRL;
   uint32_t       SP_CLOCK_DIV;
   uint32_t       ATB_PARITY;
}ATB_REGs, *pATB_REGs;

#line 428 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw.h"
void SET_InitializeTimerCount(uint64_t counterInitValue);
uint64_t SET_GetTimerCount(void);
uint32_t SET_GetDebugRAMPointer(void);

#line 25 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw_macros.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_io_defines.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_io_regs_defines_triton16plus.h"

#line 52 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_io_regs_defines_triton16plus.h"
typedef struct _SFR_IO {
    HW_REG GPIO_DS_CTRL                                 ;
    HW_REG Reserved0[7];
    HW_REG ATB_PADS_CAL_CTRL                            ;

    HW_REG TM_PADS_CAL_SM                               ;



    HW_REG TM_PADS_LV_CTRL                              ;


    HW_REG Reserved1[5];
    HW_REG FIM_IO_OE                                    ;


    HW_REG FIM_IO_IE                                    ;


    HW_REG FIM_IO_PE                                    ;


    HW_REG FIM_IO_PS                                    ;


    HW_REG FIM_IO_OUT                                   ;


    HW_REG FIM_IO_IN                                    ;


    HW_REG FIM_IO_CTRL                                  ;









}SFR_IO_t, *PSFR_IO;

#line 1787 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_io_regs_defines_triton16plus.h"
extern PSFR_IO pSFR_IO;

#line 45 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_io_defines.h"

#line 26 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hw_macros.h"





extern uint32_t  PS_Instance;
extern uint32_t  PS_InstanceForSET16BitsTs;
extern uint32_t  PS_InstanceForSET16Bits;
extern uint32_t  PS_InstanceForSET32Bits;
extern uint32_t  PS_InstanceForSET24Bits;







extern   uint32_t                *pTBRam;
extern   uint32_t                TBRamWraps;
extern   uint32_t                TBRamSim[];

#line 35 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"

#line 257 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
typedef enum
{

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"























































































































#line 29 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 37 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"






















































































































































































































































































































#line 386 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"






















#line 416 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























































































































#line 559 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2201 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"







#line 2210 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"




























































































































#line 2336 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































#line 2413 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"









#line 2424 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































#line 3253 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"












































#line 3304 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"














#line 3322 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
















































































































































































































































































































































































#line 3696 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"





























































































































































#line 3855 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"









#line 3867 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























#line 3946 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

































































































#line 4048 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"








































































































































































































































#line 4296 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































































































































































#line 4508 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"























































#line 4569 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































































































































































































#line 4816 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

























































































































































#line 4976 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"




















































#line 267 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"























































































































#line 29 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 37 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"






















































































































































































































































































































#line 386 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"






















#line 416 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























































































































#line 559 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2201 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"







#line 2210 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"




























































































































#line 2336 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































#line 2413 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"









#line 2424 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























































































































































































































































































































































































































































































































































































































































































































































































































































#line 3253 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"












































#line 3304 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"














#line 3322 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
















































































































































































































































































































































































#line 3696 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"





























































































































































#line 3855 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"









#line 3867 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"



























#line 3946 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

































































































#line 4048 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"








































































































































































































































#line 4296 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































































































































































#line 4508 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"























































#line 4569 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"











































































































































































































































#line 4816 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

























































































































































#line 4976 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"




















































#line 283 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedeventsromandllfs_t16_plus.h"
SET_EVENT_ROM_IPS_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FORCE_DWNLD_CHECKPOINT_EVENT ,
SET_EVENT_ROM_SKIP_BB_CHECKPOINT_EVENT ,
SET_EVENT_ROM_BS_RD_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_BAD_DEVICE_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FAILED_HW_INIT_NPDP_CHECKPOINT_EVENT ,
SET_EVENT_ROM_UPLOAD_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_READY_TO_JUMP_FLASHWARE_CODE_CHECKPOINT_EVENT ,




SET_EVENT_ROM_NPDP_LDPC_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_FIM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_CVDROM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_INIT_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FLASH_INIT_RESET_CHIP_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_UNRECOGN_DEVICE_ID_CHECKPOINT_EVENT ,




SET_EVENT_ROM_FE_NCR_ERR_DBL_ERR_ERZ_FROM_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_DBL_ERR_ADD_TO_FULL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_DBL_ERR_VAL_EQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_DBL_ERR_OUT_OF_RNG_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_DBL_ERR_NO_Q_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_ILL_ACCS_SQ_ERR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_ILL_ACCS_IRQ_UN_SUP_SZ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_NCR_ERR_ILL_ACCS_RO_REG_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_HFWR_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_NCR_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_SVCI_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CC_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_PCIE_WRAP_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_NEW_CMD_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CSTS_RDY_SET_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CSTS_RDY_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HFWR_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_SVCI_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_NO_CMPL_DESC_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_NO_MDT_DESC_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_MDT_DESC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_CMPL_DESC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_IRAM_INIT_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HFWR_BSY_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HNVME_IDLE_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HNVME_TRANS_ERR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_FATAL_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_SUBMISSION_QUEUE_CREATED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_COMPLETION_QUEUE_CREATED_CHECKPOINT_EVENT ,




SET_EVENT_ROM_FADI_HIM_HW_EVENT_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FADI_CLOCK_TIMER_DIV_ROM_CHECKPOINT_EVENT ,


SET_EVENT_ROM_SEC_BOOT_LOG_CHECKPOINT_EVENT ,


SET_EVENT_ROM_SYS_PATH_EVENT_CHECKPOINT_EVENT ,







SET_EVENT_LLFS_EVENT_0_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_1_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_2_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_3_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_4_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_5_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_6_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_7_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_8_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_9_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_10_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_11_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_12_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_13_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_14_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_15_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_16_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_17_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_18_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_19_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_20_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_21_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_22_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_23_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_24_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_25_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_26_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_27_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_28_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_29_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_30_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_31_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_32_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_33_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_34_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_35_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_36_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_37_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_38_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_39_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_40_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_41_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_42_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_43_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_44_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_45_CHECKPOINT_EVENT ,
SET_EVENT_LLFS_EVENT_46_CHECKPOINT_EVENT ,

#line 29 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"

#line 37 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_INFRA_XPLORER_QA_CNTR_0_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_XPLORER_QA_TIME_0_CHECKPOINT_EVENT ,




SET_EVENT_INFRA_FADI_ISOLATION_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_FADI_INIT_DEVBA_CONVERSION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_UPDATING_GBB_LIST_FOR_ISOLATION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PSREQUEST_ISOLATION_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_READING_FROM_ISOLATED_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PRINT_PBLOCK_CHECKPOINT_EVENT ,




SET_EVENT_INFRA_IFS_FFU_IN_DL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_START_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_WR2FS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_TGT_INFORMER_A_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TGT_INFORMER_B_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TGT_FATAL_DPA_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TGT_STOP_DPA_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TGT_JIC_DPA_CHECKPOINT_EVENT ,

SET_EVENT_FADI_INTEGRITY_TEST_COUNTER_CHECKPOINT_EVENT ,
SET_EVENT_FADI_INTEGRITY_DELAY_CHECKPOINT_EVENT ,



SET_EVENT_DLE_FLASH_ID_MISMATCH_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FIM_DETECTION_ERROR_1_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NUMBER_OF_GOOD_FIMS_CHECKPOINT_EVENT ,
SET_EVENT_DLE_DIE_DETECTION_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FIM_DETECTION_ERROR_2_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CHIP_DETECTION_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FORMAT_DIE_SEARCH_LOOP_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FORMAT_NPDP_POR_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FORMAT_START_MEDIA_DISCOVERY_CHECKPOINT_EVENT ,
SET_EVENT_DLE_FORMAT_END_MEDIA_DISCOVERY_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CURRENT_FLASH_ID_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_DLE_PACKAGE_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_DLE_PACKAGE_ACCEPTED_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_DLE_PACKAGE_MISSING_PAYLOAD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_DLE_PACKAGE_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_STRING_ITERATOR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_USERROM_ITERATOR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_WORDLINE_ITERATOR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_USERROM_READ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_USERROM_READ_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_USERROM_READ_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MORPHEUS_NPDP_READ_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CFG_MAN_INIT_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CFG_MAN_GT_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CFG_MAN_PK_DATA_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CFG_MAN_DLE_INIT_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_READ_BEGIN_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_READ_TRANSFER_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_READ_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_RAW_READ_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_RAW_READ_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_READ_SENSE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_CVD_ROM_DIRECT_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_CVD_DLE_DIRECT_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_GET_BER_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_GET_BER_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_HW_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_FW_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_NAND_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_SEQ_START_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_SEQ_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_BIT_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_BIT_COUNT_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SCAN_DEVICE_BEGIN_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SCAN_DEVICE_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SCAN_DEVICE_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_DIAG_READ_RAW_BEGIN_CHECKPOINT_EVENT ,
SET_EVENT_DLE_DIAG_READ_RAW_END_CHECKPOINT_EVENT ,
SET_EVENT_MST_DLE_NPDP_FIM_READ_SENSE_CHECKPOINT_EVENT ,
SET_EVENT_MST_DLE_NPDP_FIM_READ_TRANSFER_CHECKPOINT_EVENT ,
SET_EVENT_DLE_NPDP_FIM_STATUS_FUSE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MBBT_INIT_END_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MBBT_HANDLE_BAD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MBBT_PROCESS_BAD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MBBT_FOUND_BAD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_MBBT_ADD_BAD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_INCONSISTENT_DATA_CHECKPOINT_EVENT ,
SET_EVENT_DLE_BOOT_BLK_GOOD_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_DLE_BOOT_BLK_SEARCH_CHECKPOINT_EVENT ,
SET_EVENT_DLE_BOOT_BLK_FAIL_ALLOC_CHECKPOINT_EVENT ,

SET_EVENT_DLE_BOOT_BLK_FAIL_TEST_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SWAP_REMOVE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SWAP_ADD_CHECKPOINT_EVENT ,
SET_EVENT_DLE_IGNORE_BB_CHECKPOINT_EVENT ,
SET_EVENT_DLE_ACTUAL_FLASH_ID_CHECKPOINT_EVENT ,

SET_EVENT_DLE_REPROGRAM_BUID_CHECKPOINT_EVENT ,
SET_EVENT_DLE_READ_BUID_SUCCESS_CHECKPOINT_EVENT ,




SET_EVENT_DLE_CONNECTIVITY_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_DLE_CONNECTIVITY_DETAILS_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_000_MRPH_DLE_INIT_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_001_MRPH_DLE_INIT_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_002_MRPH_UROM_ITER_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_003_DIAG_TS_UROM_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_004_DIAG_CMP_TS_PAYLOAD_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_005_MRPH_READ_INPUT_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_006_MRPH_FILL_TABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_007_MRPH_UROM_CLEAN_16K_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_008_MRPH_UROM_CLEAN_2K_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_009_MRPH_IS_FLAG_SET_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_010_MRPH_FREE_BUFFERS_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_011_MRPH_NPDP_BUFFER_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_012_MRPH_FW_FORMAT_VER_VALUE_VER_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_013_MRPH_PROCESS_DLE_PCK_HDR_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_014_MRPH_NAND_MT_VERSION_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_015_MRPH_FFU_PARSE_PCK_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_016_MRPH_FFU_PARSE_PCK_CLN_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_017_MRPH_UROM_FORMAT_VER_VALUE_VER_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_018_MRPH_DLE_INIT_FAIL_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_019_MRPH_UROM_ITER_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_020_MRPH_READ_MRPH_NO_PAYLOAD_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_021_MRPH_READ_MRPH_NO_BUFFER_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_022_MRPH_READ_MRPH_SIZE_MISMATCH_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_023_MRPH_READ_MRPH_NO_TBL_ENTRY_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_024_MRPH_NAND_MT_VERSION_BUF_ALLOC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_025_MRPH_NAND_MT_VERSION_NOT_FOUND_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_026_MRPH_NAND_MT_VERSION_CAP_PER_CE_IDX_MM_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_027_MRPH_NAND_MT_VERSION_PAYLOAD_NOT_FOUND_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_028_MRPH_DLE_PROCESS_PCK_FFU_RD_OLD_TBL_EN_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_029_MRPH_DLE_PROCESS_PCK_FFU_NO_IN_FLUF_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_030_MRPH_DLE_PROCESS_PCK_FFU_RD_NEW_TBL_EN_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_031_DIAG_CMP_TS_PAYLOAD_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_032_MRPH_DLE_PROCESS_PACKAGE_IS_UPDATE_NEEDED_CHECKPOINT_EVENT ,

SET_EVENT_PS_MRPH_033_MRPH_NAND_MT_VERSION_MRPH_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_034_MRPH_NAND_MT_VERSION_MRPH_READ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_MRPH_035_MRPH_NAND_MT_VERSION_STATUS_OK_CHECKPOINT_EVENT ,



SET_EVENT_INFRA_DLE_USERROM_CHECKPOINT_EVENT ,





SET_EVENT_INFRA_BOODLOADER_START_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BOODLOADER_FAILED_GO_BACK_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BOODLOADER_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BOODLOADER_BACK_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_JUMP_TO_FLASHWARE_CHECKPOINT_EVENT ,


SET_EVENT_CONFIG_ATB_FLT_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_FS_DIR_SYNC_GSD_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_FS_DIR_SYNC_FAILURE_GSD_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_FS_DIR_SYNC_REPAIR_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_FS_DIR_SYNC_FAILURE_REPAIR_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_SEND_INFRA_PS_TRACK_MESSAGE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_SEND_INFRA_PS_NON_TRACK_MESSAGE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_QUEUE_FULL_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_QUEUE_MAILBOX_FULL_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_WAIT_COMPLETION_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MSG_COMPLETION_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_INFRA_MSG_RECEIVE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MSG_COMPLETION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MBOX_VALID_CNT_ISR_CHECKPOINT_EVENT ,


SET_EVENT_FADI_CLOCK_TIMER_PRESCALER_CHECKPOINT_EVENT ,
SET_EVENT_SET_STATUS_GET_FILTERS_VALUES_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ATB_FILTERS_SETTINGS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_TBRAM_FILTERS_SETTINGS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_FOR_RDT_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_FOR_RMA_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_ALL_OFF_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_ALL_ON_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_MED_ON_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_CUST_ON_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FILTERS_FOR_BREAD_CRUMBS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FMU_INDEXES_CHECKPOINT_EVENT ,
SET_EVENT_FADI_RTFADI_SAMPLE_PROCESS_EVENT ,   SET_EVENT_FADI_RTFADI_SAMPLE_PROCESS_EVENT_END ,
SET_EVENT_FADI_TEST_BC_IN_FAT_ASS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_WRITE_FMU_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_READ_FMU_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_READ_FMU_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_ERASE_BLOCK_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_UGSD_TER_DMC_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_NEW_EVENT_IN_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_NEW_EVENT_TIMERWRAP_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_NEW_EVENT_IN_DMA_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_NEW_EVENT_START_DMA_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_NEW_EVENT_OUT_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_MEM_XFER_START_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_MEM_XFER_END_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_DUMP_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_AON_OVERFLOW_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_FLUSH_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_BUFFER_FLUSH_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_OVERFLOW_DURING_DUMPING_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_BUFFER_SANITY_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FWT_EVENT_PARAMS_CHECKPOINT_EVENT ,


SET_EVENT_FADI_ERRORLOG_REPLACED_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_WARNING_SEVERITY_FULL_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_PS_MSG_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_PS_MSG_REQUEST_FAILURE_CHECKPOINT_EVENT ,

SET_EVENT_FADI_ERRORLOG_ENTRY_DROPPED_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_ENTRY_CODE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_ENTRY_DETAILS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_PS_ENTRY_CODE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_WRITE_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_ERRORLOG_WRITE_POSTPONE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FAT_ASS_POST_EL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FAT_ASS_PS_REQ_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FAT_ASS_LLFS_REQ_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FLUSH_BOOTPAGE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FLUSH_BOOTPAGE_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_PS_ERRORLOG_SUBMITED_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_SEARCH_ERASED_FMU_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_TEST_ERASE_MESSAGE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_UGSD_RECOVERY_DEFECT_CHECKPOINT_EVENT ,

SET_EVENT_FADI_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_HANDLING_START_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_HANDLING_QUEUE_AVAILABLE_CHECKPOINT_EVENT ,


SET_EVENT_FADI_SET_INIT_EXEC_CHECKPOINT_EVENT ,
SET_EVENT_FADI_SET_POST_CMC_PLL_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_FIND_LOST_FMU_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_UGSD_READ_LAST_FMU_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_UGSD_RECOVERY_NOT_NEED_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_UGSD_FOOTER_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_INIT_FMU_LOST_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_MANAGER_INIT_RECOVERED_UGSD_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DUMP_ENQUEUE_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_SYSTEM_BUFFER_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_SYSTEM_BUFFER_FREE_CHECKPOINT_EVENT ,


SET_EVENT_FADI_MNT_STATE_UGSD_BML_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_FADI_MTM_SEND_REQ_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_LOG_WRITING_LOG_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_FADI_PS_XOR_ZONE_END_CHECKPOINT_EVENT ,
SET_EVENT_FADI_XOR_PARITY_LOC_CHECKPOINT_EVENT ,
SET_EVENT_FADI_PS_XOR_WRITE_PAR_PAGES_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FTL_RLC_CYCLE_TERMINATE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FTL_RLC_COPY_FMUS_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FTL_RLC_SOURCE_BLOCK_SELECTED_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FAD_DATA_WRITE_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FADI_FAD_DATA_ERASE_NEW_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_FADI_GPIO_TRIGGER_OUT_CHECKPOINT_EVENT ,
SET_EVENT_FADI_DEBUG_BIG_DUMP_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_IFS_IN_WRITE_FILE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_IN_WRITE_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_COMPACTION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_IN_COMPAC_START_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_IN_COMPAC_END_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_IN_BOOTPAGE_WR_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_POSTPONE_SCHEDULED_WORK_PMM_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_PEC_STAT_FOR_BB_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_PEC_STAT_FOR_PB_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_IFS_PEC_STAT_FOR_FB_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_NPDP_LDPC_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NPDP_FIM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NPDP_CVDROM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NPDP_INIT_COMPLETED_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_DUMP_WRITE_PROGRAM_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUMP_ERASE_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUMP_START_DUMP_FMU_CHECKPOINT_EVENT ,
SET_EVENT_FWT_DUMP_DATA_LOST_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_DRAM_VREF_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DRAM_LOAD_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_LOAD_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_DRVR_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DRAM_DMA_LOAD_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_DMA_LOAD_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_DMA_SET_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_DMA_SET_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_DMA_FMU_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DRAM_DMA_READ_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_DMA_READ_PROCESS_EVENT_END ,

#line 386 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_INFRA_SCALING_CMC_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TT_LEVEL_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_GET_VIR_RS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DYNAMIC_BASELINE_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_THERMAL_GET_VIR_RS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_THERMAL_GET_WC_CC_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_THERMAL_SET_WC_CC_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_DRAM_PWR_DOWN_ENTRY_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_PWR_DOWN_ENTRY_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_PWR_DOWN_EXIT_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_PWR_DOWN_EXIT_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_DLE_INIT_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_DLE_INIT_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_BLLNK_INIT_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_BLLNK_INIT_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_RAM_INIT_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_RAM_INIT_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_INDEX_PROCESS_EVENT ,   SET_EVENT_INFRA_DRAM_INDEX_PROCESS_EVENT_END ,

SET_EVENT_INFRA_DDR_INIT_DRIVER_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_INIT_DRIVER_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_INIT_TRAINING_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_INIT_TRAINING_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_INIT_PARITY_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_INIT_PARITY_PROCESS_EVENT_END ,
SET_EVENT_INFRA_SENSOR_ADJ_CHECKPOINT_EVENT ,

#line 416 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_INFRA_DDR_WRITE_LEVELING_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_WRITE_LEVELING_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_DQS_GATE_TRAINING_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_DQS_GATE_TRAINING_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_WRITE_LEVELING_ADJ_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_WRITE_LEVELING_ADJ_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_WAITING_SELF_REFRESH_PROCESS_EVENT ,   SET_EVENT_INFRA_DDR_WAITING_SELF_REFRESH_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DRAM_DDR_CAPACITY_API_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_PHASE_INIT_TIMING_PROCESS_EVENT ,   SET_EVENT_INFRA_PHASE_INIT_TIMING_PROCESS_EVENT_END ,
SET_EVENT_INFRA_DDR_TIMING_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_DDR_START_PARITY_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DDR_END_PARITY_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PCU_I2C_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_I2C_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_I2C_FWRETRY_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_I2C_HWRETRY_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_MSG_RECEIVED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_HANDLE_INTR_EVENTS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_FE_PMM_TIMER_MSG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_FE_PMM_TIMER_EXPIRED_MSG_SENT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_SMB_AON_ISR_CHECKPOINT_EVENT ,
SET_EVENT_PCU_CPU_AON_ISR_CHECKPOINT_EVENT ,
SET_EVENT_PCU_CTT_ISR_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_INIT_BEGIN_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_INIT_END_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_ISR_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_ISR_DONE_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_RX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_TX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_UART_PCU_FRAMING_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SMB_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_HW_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_FEATURE_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_FF_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_RX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_TX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_SLAVE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_SLAVE_EVENT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_RECOVER_STATE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_SET_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ACK_NACK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_STOP_STNOK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_ABRT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_RX_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_STOP_DET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_1_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_2_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_3_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_4_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_5_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_6_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_7_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVME_DATA_8_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ISR_PEC_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ARB_SET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_ARB_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_DUPLICATE_TX_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MSG_SEND_1_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MSG_SEND_2_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MSG_SEND_ABORT_STOP_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MCTP_BUFFER_FULL_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MCTP_BUFFER_PUSH_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_MCTP_ERROR_CODE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_SET_RX_CONTROL_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_CLEAR_MIFLAG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_ACCUMULATE_OVF_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_NVMEMI_PACKET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_PCU_TX_ERROR_CHECKPOINT_EVENT ,


SET_EVENT_SMB_PCU_VPD_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PCU_RTOS_MUTEX_ASSOC_HW_MUTEX_LOCK_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PCU_RTOS_MUTEX_ASSOC_HW_MUTEX_UNLOCK_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PCU_WRONG_NUM_SET_EVENT_PARAMS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_DEBUG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_DEBUG_ALL_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PCU_TIMER_UNSYNC_TS_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PCU_PMM_ACTIVE_IDLE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_PMM_ACTIVE_IDLE_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_PMM_ACTIVE_IDLE_NON_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_PMM_DDR_IDLE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_PMM_DDR_IDLE_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCU_PMM_DDR_IDLE_EXIT_CHECKPOINT_EVENT ,


SET_EVENT_FE_PCU_EI_BREAK_WAKEUP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCU_PROCESS_HOST_WAKEUP_CHECKPOINT_EVENT ,


SET_EVENT_PLP_INIT_ASSERTED_CHECKPOINT_EVENT ,
SET_EVENT_PLP_INIT_DEASSERTED_CHECKPOINT_EVENT ,
SET_EVENT_PLP_FBCK_ASSERTED_CHECKPOINT_EVENT ,
SET_EVENT_PLP_FBCK_DEASSERTED_CHECKPOINT_EVENT ,
SET_EVENT_PLP_START_CHECKPOINT_EVENT ,
SET_EVENT_PLP_END_CHECKPOINT_EVENT ,
SET_EVENT_PLP_FINISH_CHECKPOINT_EVENT ,
SET_EVENT_PLP_RESET_CHECKPOINT_EVENT ,
SET_EVENT_PLP_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_PLP_DISABLE_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_TIMING_CHECKPOINT_EVENT ,
SET_EVENT_UPDATED_THERMAL_THROTTLING_CHECKPOINT_EVENT ,
SET_EVENT_UPDATED_THERMAL_SUBSYSTEM_THROTTLING_CHECKPOINT_EVENT ,
SET_EVENT_PS_TM_HANDLE_NAND_TEMP_MSG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_NONNAND_TEMPERATURE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_NAND_TEMPERATURE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TIMER_SERVICES_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_ENABLE_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DISABLE_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_READ_SMART_TEMP_CHECKPOINT_EVENT ,

#line 559 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_INFRA_CHANGE_OVERTEMP_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CHANGE_UNDERTEMP_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_THRESHOLD_SET_FEAT_CHECKPOINT_EVENT ,

SET_EVENT_NHTEC_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_TEMP_SR_TIME_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_READ_EFUSE_ROOM_HOT_VAL_CHECKPOINT_EVENT ,
SET_EVENT_DLE_SET_BUID_ENABLE_BIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DEFAULT_CALIBRATION_VAL_CHECKPOINT_EVENT ,
SET_EVENT_LPM_OFFSET_CHECKPOINT_EVENT ,
SET_EVENT_NHTEC_COLD_BOOT_CHECKPOINT_EVENT ,
SET_EVENT_UPDATED_NAND_SAMPLING_RATE_CHECKPOINT_EVENT ,
SET_EVENT_NHTEC_INIT_ETT_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_NHTEC_INIT_TMT3_CHECKPOINT_EVENT ,
SET_EVENT_OEM_MAX_POWER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_READ_TICK_CHECKPOINT_EVENT ,
SET_EVENT_DOEC_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_PRE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_TT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_DYNAMIC_BASELINE_ASIC_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_READ_TYPE_CHECKPOINT_EVENT ,





SET_EVENT_INFRA_MAIN_CPU_PM_LPM_PHYSICAL_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MAIN_CPU_PM_LPM_PHYSICAL_SEQUENCE_PROCESS_EVENT ,   SET_EVENT_INFRA_MAIN_CPU_PM_LPM_PHYSICAL_SEQUENCE_PROCESS_EVENT_END ,

SET_EVENT_INFRA_PMM_SET_START_RFM_FLAG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_INIT_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_IDLE_MODE_ENTRY_PROCESS_EVENT ,   SET_EVENT_INFRA_PMM_IDLE_MODE_ENTRY_PROCESS_EVENT_END ,
SET_EVENT_INFRA_PMM_IDLE_MODE_EXITED_PROCESS_EVENT ,   SET_EVENT_INFRA_PMM_IDLE_MODE_EXITED_PROCESS_EVENT_END ,
SET_EVENT_INFRA_PMM_INFRA_SW_HDLR_MSG_EXECUTED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_INFRA_SW_HDLR_MSG_Q_NOT_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_INFRA_PMM_SEND_MSG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_REPORT_PST_STATUS_TO_FE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FFU_B4_SHUTDOWN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ISSUE_PST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXEC_RESET_ACTIVATE_RFM_START_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_WAKEUP_PST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ABORT_PST_EXECUTION_SEQUENCE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_WAKEUP_PST_EXECUTION_SEQUENCE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_RESET_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_RESET_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_PST_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_PST_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ABORTPST_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_WAKEUPPST_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ABORTPST_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_WAKEUPPST_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DETECTED_ABORTPST_IN_PCU_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DETECTED_ABORTPST_IN_DPDM_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_CLOCK_DOWN_FRQ_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_CLOCK_UP_FRQ_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_10869_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_3308_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_CFG_INIT_POST_RTOS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_INIT_BT_COMPLTE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_READ_CACHED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_WRITE_CACHED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_READ_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_DPS2_MEM_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_DPS2_RETAIN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_DPS2_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_READ_COMMON_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_READ_UNCACHED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_GET_SET_LEN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_CFG_WRITE_UNCACHED_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_PMM_ISSUE_ABORT_PST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DETECTED_ABORTPST_IN_PS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DELAYED_ABORTPST_BY_PS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_CALL_ME_WHEN_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_COMPLETE_PST_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_RESET_FE_PARAMS_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PMM_SKIP_START_RFM_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ERROR_START_RFM_TIMER_BY_INDEX_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_SET_START_RFM_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_START_RFM_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_SKIP_SENDING_START_RFM_MSG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_NOTIFY_START_RFM_TO_PS_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PMM_ACTIVE_IDLE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ACTIVE_IDLE_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ACTIVE_IDLE_NON_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ACTIVE_IDLE_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_ACTIVE_IDLE_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_DDR_IDLE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_DDR_IDLE_INIT_TAKEDWN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_DDR_IDLE_ENTRY_PROCESS_EVENT ,   SET_EVENT_INFRA_PMM_DDR_IDLE_ENTRY_PROCESS_EVENT_END ,
SET_EVENT_INFRA_PMM_DDR_IDLE_EXIT_PROCESS_EVENT ,   SET_EVENT_INFRA_PMM_DDR_IDLE_EXIT_PROCESS_EVENT_END ,



SET_EVENT_INFRA_INIT_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_SYSTEM_COLDBOOTED_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS2_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS3_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS3_1_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_CK1_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_CK2_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_CK3_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_CK4_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS2_JUMP_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS2_JUMP_Done_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS_WAKE_SRC_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PMM_FWAI_PS_ENTER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FWAI_PS_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FWAI_MP_ENTER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FWAI_MP_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FWAI_THERMAL_REENTER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FWAI_DDR_NOT_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_FW_ACTIVE_IDLE_START_TIMER_CHECKPOINT_EVENT ,



SET_EVENT_MP_CODE_COVERAGE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_CODE_COVERAGE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_SUMMARY_CODE_COVERAGE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_START_CODE_COVERAGE_SEND_CHECKPOINT_EVENT ,
SET_EVENT_END_CODE_COVERAGE_SEND_CHECKPOINT_EVENT ,


SET_EVENT_DPS_INFRA_DPS_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_DPS_INFRA_DPS_PERST_LINKDOWN_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_PMM_SEND_MSG_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_SEND_FIRST_BARRIER_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_SEND_SECOND_BARRIER_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CK1_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CK2_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CK3_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CK4_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_EXECUTE_PST_CK5_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_PMM_BARRIER_MAILBOX_COMPLETION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_BARRIER_MAILBOX_COMPLETION_FREE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PMM_BARRIER_MAILBOX_COMPLETION_RECEIVED_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_I2C_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_I2C_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_I2C_FWRETRY_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_I2C_HWRETRY_COUNT_CHECKPOINT_EVENT ,


SET_EVENT_THERMAL_THROTTLING_SHUTDOWN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_TSD_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TM_TSD_DELAY_STARTED_CHECKPOINT_EVENT ,


SET_EVENT_CMC_CLOCKS_AT_APLL0_CHECKPOINT_EVENT ,


SET_EVENT_UART_ISR_CHECKPOINT_EVENT ,
SET_EVENT_UART_ISR_DONE_CHECKPOINT_EVENT ,
SET_EVENT_UART_RX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_UART_TX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_UART_FRAMING_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_UART_INIT_BEGIN_CHECKPOINT_EVENT ,
SET_EVENT_UART_INIT_END_CHECKPOINT_EVENT ,
SET_EVENT_UART_INIT_DONE_CHECKPOINT_EVENT ,


SET_EVENT_SMB_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_HW_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_FEATURE_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_FF_CHECKPOINT_EVENT ,
SET_EVENT_SMB_RX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_TX_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_SLAVE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_SLAVE_EVENT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_MPC_CONTROL_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_INIT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_START_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_CHECKPOINT_EVENT ,
SET_EVENT_SMB_THREAD_END_CHECKPOINT_EVENT ,
SET_EVENT_SMB_RECOVER_STATE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_SET_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_SMB_SET_TIMER_BGN_CHECKPOINT_EVENT ,
SET_EVENT_SMB_CFG_SEND_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ACK_NACK_CHECKPOINT_EVENT ,

SET_EVENT_SMB_STOP_STNOK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_ABRT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_RX_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_STOP_DET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_1_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_2_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_3_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_4_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_5_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_6_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_7_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVME_DATA_8_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ISR_PEC_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ARB_SET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_ARB_CLEAR_CHECKPOINT_EVENT ,


SET_EVENT_SMB_NVMEMI_MIC_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_CTRL_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MIMSG_EVENT_SEND_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MIMSG_EVENT_PROCESS_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RECEIVE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RECEIVE_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RES_1_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RES_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RES_2_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_RTR_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_RTR_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MI_CONF_EVENT_PROCESS_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_TX_MSG_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_RX_BUF_OVERLAP_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MCTP_BUFFER_POP_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MSG_CHECK_TO_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_MPRR_TEST_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_STOP_MSG_BY_RESET_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_DEQUEU_MIMSG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_STOPPAIR_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_SMB_RESET_ASSERT_PROCESS_EVENT ,   SET_EVENT_SMB_NVMEMI_SMB_RESET_ASSERT_PROCESS_EVENT_END ,
SET_EVENT_SMB_NVMEMI_NOT_SUPPORT_MSG_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_SET_RX_CONTROL_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_CLEAR_MIFLAG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_SET_MIFLAG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_GET_MIFLAG_CHECKPOINT_EVENT ,
SET_EVENT_SMB_NVMEMI_NEW_CMD_IN_REPLAY_CHECKPOINT_EVENT ,


SET_EVENT_UART_USR_REG_VAL_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_DUI_PROCESS_PAYLOAD_HEADER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_STATIC_UNIT_INFO_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_USERROM_INFO_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_NAND_PARAMETERS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_FFU_HISTORY_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_MANUFACTURING_SECTOR_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_BBM_DATA_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_ERROR_STATISTICS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_WRITE_AMPLIFICATION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_SMART_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_FE_INFO_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_ERROR_LOG_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_TRACE_CRUMBS_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_DICT_FILE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_XML_FILE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_SEC_DATA_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_DUI_PROCESS_RESPONSE_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_SCTP_COMMAND_PHASE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_SCTP_COMMAND_TT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_SCTP_COMMAND_READ_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_SCTP_COMMAND_WRITE_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_MUTEX_LOCKED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MUTEX_UNLOCKED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_RTOS_MUTEX_ASSOC_HW_MUTEX_LOCK_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_RTOS_MUTEX_ASSOC_HW_MUTEX_UNLOCK_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MPC_SWI0_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MPC_SWI1_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MPC_SWI2_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_MPC_SWI3_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_BULLSEYE_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BULLSEYE_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BULLSEYE_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_BULLSEYE_GETPID_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_TELEMETRY_SNAPSHOT_OP_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TELEMETRY_STORE_SECTION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TELEMETRY_FETCH_SECTION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TELEMETRY_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_TELEMETRY_CREATE_PAGE_CHECKPOINT_EVENT ,


SET_EVENT_INFRA_COREDUMP_FORMAT_HEADER_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_FORMAT_REGION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_SAVE_IMMU_REGION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_SAVE_FORMATTED_BUF_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_SAVE_NEXT_IMMU_REGION_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_IMMU_REGION_DONE_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_COREDUMP_CHECKSUM_INTEGRITY_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_CIT_TIMER_CALLBACK_CHECKPOINT_EVENT ,






SET_EVENT_PS_FIM_ISR_CRITICAL_ERROR_CHECKPOINT_EVENT ,


SET_EVENT_PS_EH_REH_START_RECOVERY_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_REH_REREAD_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_BES5_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_BES7_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_SB0_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_SB1_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_SB2_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_SB2_DLA_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_XOR_START_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_REH_READ_ERASED_PAGE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_READ_FLASH_FILL_PAGE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_REPORT_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_SEND_DMC_READ_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_BES5_SKIPPED_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_BES7_SKIPPED_CHECKPOINT_EVENT ,



SET_EVENT_PS_PERF_RFM_PERIODIC_TRIGGER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_ISOLATION_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_REFRESH_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_REFRESH_PART_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_OPERATION_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_ISOLATION_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_PERF_RFM_ISOLATION_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_RFM_REFRESH_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_PERF_RFM_REFRESH_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_RFM_ABORT_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_PERF_RFM_ABORT_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_RFM_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_ISOLATION_RETRIGGER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_CHECK_IF_REFRESH_REQUIRED_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_RFM_FOCE_GO_BACK_TO_IDLE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_REH_DECODER_UECC_ISR_PROCESS_EVENT ,   SET_EVENT_PS_EH_REH_DECODER_UECC_ISR_PROCESS_EVENT_END ,
SET_EVENT_PS_EH_REH_DECODER_DRAM_ISR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_DECODER_SVCI_ISR_CHECKPOINT_EVENT ,


SET_EVENT_PS_SUSPEND_REH_4_XOR_CHECKPOINT_EVENT ,
SET_EVENT_PS_START_NON_EXCEPT_GRACEFUL_HALT_CHECKPOINT_EVENT ,


SET_EVENT_PS_EH_REH_OTG_NOOP_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_OTG_NOOP_BEFORE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_OTG_NOOP_AFTER_CHECKPOINT_EVENT ,


SET_EVENT_PS_EH_REH_DECODER_UECC_ISR_DB_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_DECODER_UECC_ISR_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_DECODER_UECC_DISCARD_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_START_DP_CLEAN_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_STOP_DP_CLEAN_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_BARRIER_RECEIVE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_COMPLETION_RECEIVE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_UPDATE_DESC_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_UPDATE_DESC_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_UPDATE_REQ_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_UPDATE_REQ_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_SEND_FTL_EXCP_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_REC_FTL_ACK_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_CVD_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_REMOVE_Q_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_ALLOC_RSV_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_RELEASE_RSV_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_SET_SECT_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_BES_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_CVD_READ_DIST_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_CVD_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_RELEASE_CAM_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_ADJUST_LIST_PTR_CONTROL_READ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_COMPLETION_SB2_NON_HOST_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_UNRECOVERABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_EH_REH_BES_OVERFLOW_CHECKPOINT_EVENT ,



SET_EVENT_EI_UECC_CHECKPOINT_EVENT ,
SET_EVENT_EI_EF_CHECKPOINT_EVENT ,
SET_EVENT_EI_PF_CHECKPOINT_EVENT ,
SET_EVENT_EI_WA_CHECKPOINT_EVENT ,
SET_EVENT_EI_EA_CHECKPOINT_EVENT ,
SET_EVENT_EI_DST_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_INJECTED_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_SKIP_EI_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_UECC_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_REINJECT_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_SAVE_INJECT_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_REDUCE_LEVEL_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_SECONDARY_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_EI_EPWR_SECONDARY_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_MP_SGD_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_MP_SGD_DIE_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_MP_SGD_REQ_RELEASE_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_REH_BIGDUMP_NULLMESSAGEPTR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_REH_PS_DEBUG_ASSERT_ON_STOPONUECC_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_SET_EVENT_PS_DEBUG_STOPONFAILURE_EF_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_SET_EVENT_PS_DEBUG_STOPONFAILURE_PF_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_SET_EVENT_PS_DEBUG_STOPONFAILURE_FIM_EXCP_CHECKPOINT_EVENT ,

SET_EVENT_PS_EI_IRJB_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_IRJB_ORIG_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_REH_XOR_BIN_MARK_HDR_UECC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_REH_XOR_MARK_HDR_UECC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_REH_SW_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_LDPC_ISR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_LDPC_ISR_2_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_ADD_TO_EX_Q_CHECKPOINT_EVENT ,


SET_EVENT_PS_EH_PF_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_EH_PF_EVENT_PROCESS_EVENT_END ,
SET_EVENT_BBM_REPLACE_CHECKPOINT_EVENT ,
SET_EVENT_BLOCK_ISOLATE_CHECKPOINT_EVENT ,
SET_EVENT_WAY_POINT_PF_CHECKPOINT_EVENT ,
SET_EVENT_PF_DECOMMISSION_CHECKPOINT_EVENT ,

SET_EVENT_PF_EH_NESTED_EF_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_NESTED_PF_CHECKPOINT_EVENT ,



SET_EVENT_PS_EH_PF_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_PRECHECK_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_SKIP_PRECHECK_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_PRECHECK_READ_CHECKPOINT_EVENT ,
SET_EVENT_BBM_SUBMIT_BAD_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_PRECHECK_READ_HIGH_BER_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_SKIP_P2P_DISTURB_HANDLE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_PF_MARK_HEADER_UECC_PF_CHECKPOINT_EVENT ,

SET_EVENT_PF_EH_NESTED_EF_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_SEND_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_SEND_READ_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_CHECK_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_SEND_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_NESTED_PF_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_PF_EH_NESTED_LATCH_PF_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_HOST_UECC_EI_COMP_CHECKPOINT_EVENT ,
SET_EVENT_HOST_EF_EI_COMP_CHECKPOINT_EVENT ,
SET_EVENT_HOST_PF_EI_COMP_CHECKPOINT_EVENT ,
SET_EVENT_HOST_PF_EI_COMP_4_XOR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_IV_UPDATE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_IV_UPDATE_STATE_EPWR_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_IV_UPDATE_STATE_COMPLETE_INJECT_CHECKPOINT_EVENT ,
SET_EVENT_PS_EI_IV_CHECK_STATE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_PF_EPWR_BER_READ_CHECKPOINT_EVENT ,
SET_EVENT_PF_CH_SEND_CHECKPOINT_EVENT ,
SET_EVENT_PF_CH_REPLY_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_VIRTUAL_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_PAUSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EPWR_INIT_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_ORGREQ_INTERNAL_REPLY_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_ORGREQ_EXTERNAL_REPLY_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_EPWR_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_EH_EPWR_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_EPWR_STOPONFAILURE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_EF_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_EH_EF_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_EH_EF_EVENT_RETIRE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_RELINK_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_NESTED_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_DECOMMISSION_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_FINAL_STATE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_EF_SET_STATE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_EF_ALL_ID_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_NO_DECOM_SKIP_RELINK_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_OTHER_PS_XOR_SUPPORT_DURING_EH_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EXIT_OTHER_PS_XOR_SUPPORT_DURING_EH_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_OTHER_PS_XOR_SUPPORT_DURING_XOR_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_XOR_SKIP_OPEN_QUEUE_FOR_BBM_SECERASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_CHECK_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_ERASE_BLOCK_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_GET_DIE_NPARAM_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_REH_PF_EF_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_OPTASK_REVIVE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_DGM_SHUTDOWN_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EF_RESET_DIE_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_EF_ERASE_FAIL_NO_DECOM_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EXCP_Q_EMPTY_IFT_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_EXCP_Q_MAX_CHECKPOINT_EVENT ,

SET_EVENT_REH_XOR_WAIT_PF_EH_CHECKPOINT_EVENT ,
SET_EVENT_PFEH_SUSPEND_TO_SUPPORT_OTHER_PS_XOR_CHECKPOINT_EVENT ,
SET_EVENT_READ_PF_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_READ_PF_LATCH_PAGE_CHECKPOINT_EVENT ,

SET_EVENT_PS_LOG_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_LOG_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_LOG_FILLED_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_LOG_FILLED_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_EI_SGD_CHECKPOINT_EVENT ,
SET_EVENT_EI_SGD_VEC_CHECKPOINT_EVENT ,

SET_EVENT_PS_RLC_FREE_CTX_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_READ_PROCESSED_BY_DGM_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_READ_REJECTED_BY_DGM_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_WRITE_PROCESSED_BY_DGM_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_WRITE_REJECTED_BY_DGM_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_INCOMING_READ_EVENT_CHECKPOINT_EVENT ,

SET_EVENT_PS_RLC_ALLOC_BUFFERS_FAILED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_INCOMING_RLC_WRITE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_RLC_WRITE_WITH_SLAVE_READ_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_DPCA_MSG_TRIGGERED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_NOT_READY_SESSION_NUMBER_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_LDPC_EVENT_TRIGGERED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_TO_PS_MSG_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_MLP_SERVICES_PEND_READS_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_MLP_SERVICES_PEND_WRITES_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_START_SEND_NEW_BIG_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_PS_RLC_INCOMING_READ_FROM_REH_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_PS_RSV_DRV_DEBUG_ISR_CHECKPOINT_EVENT ,
SET_EVENT_PS_RSV_DRV_DBG_DATA_CHECKPOINT_EVENT ,
SET_EVENT_PS_RSV_DRV_BUS_ERROR_CHECKPOINT_EVENT ,


SET_EVENT_PS_BBM_GET_NEW_RELINK_BLK_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_GET_NEW_RELINK_BLK_RESP_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_UPDATE_BBM_DATA_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_FILE_WRITE_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_FILE_WRITE_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_FILE_STARTUP_READ_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_DECOMM_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_DECOMM_RESP_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_FILE_WRITE_COMP_AFTER_DECOMM_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_DECOMM_RESP_BAD_SPARE_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_DEFECT_COUNTS_CHECKPOINT_EVENT ,


SET_EVENT_PS_ADM_SOB_CHECKPOINT_EVENT ,
SET_EVENT_PS_ADM_SWAP_CHECKPOINT_EVENT ,
SET_EVENT_PS_ADM_CAN_ERASE_CHECKPOINT_EVENT ,

SET_EVENT_PS_OTG_SUBMIT2_CHECKPOINT_EVENT ,


SET_EVENT_PS_DST_REQ_START_PROCESS_EVENT ,   SET_EVENT_PS_DST_REQ_START_PROCESS_EVENT_END ,
SET_EVENT_PS_DST_REQ_END_PROCESS_EVENT ,   SET_EVENT_PS_DST_REQ_END_PROCESS_EVENT_END ,
SET_EVENT_PS_DST_FAILED_CHECKPOINT_EVENT ,




















































































































SET_EVENT_PS_DEBUG_DGM_SOFTBIT1_SECOND_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ECR_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_DGM_SUBMIT_PS_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RUN_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RUN_PERF_READ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SHF_RLS_LAST_PEEK_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_TRUERDY_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SPURIOUS_TRUERDY_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_TXCOMPLETE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_TIMER_EXPIRED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SUBMIT_BRDCST_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_HANDLE_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_PERF_SHELF_GET_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_GRACEFULHALT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RESHELFREQUESTS_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_POSTRESHELF_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_DGM_UNCACHE_WRITE_UNCOUPLEPWR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RUN_IN_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_CLEAREXCEPTION_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ENABLEQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_BLOCKQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_TRUERDY_ON_ACTIVE_WRITE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ABORT_SR_ON_SB_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_PRE_HALT_OPEN_HOSTWR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_POST_EXCP_OPEN_HOSTWR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SHELF_ADD_OLD_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_OTG_SPACE_DGID_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_DGM_PERF_SENSEAVOID_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SENSEAVOID_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_AIPR_SENSE_AVOID_XFER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RESUME_RD_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RUN_ENTER_EXCEPT_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_DGM_BES_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_CMD33_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_BES_COMPUTE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RELEASE_BES_BUF_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ALLOC_BES_BUF_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_BARRIER_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_DGM_AIPR_SET_FEATURE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_SB_SET_SUB_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_LOWQD_PERF_SUBMIT_LAT_RD_CHECKPOINT_EVENT ,



SET_EVENT_PS_PERF_DGM_MPRD_SENSEAVOID_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_AIPR_RESHELF_ADD_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_AIPR_RESHELF_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_AIPR_SKIP_PLANE_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_DGM_MPRD_SENSEEXPAN_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_AIPR_SR_SET_ATTRIB_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_DGM_MPRD_SENSEAHEAD_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_DGM_MPRD_SENSE_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_DGM_SR_SEND_CMD_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SR_NEW_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SR_ASMR_START_SR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SR_ASMR_SND_DEBUG_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SR_ASMR_SEND_SR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SR_ASMR_DEBUG_DATA_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_DGM_ERASE_RUN_READ_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ERASE_SET_STATE_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ABORT_SR_ON_SB_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ESR4_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ESR5_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ESR6_BC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_ESR7_BC_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_DGM_AIPR_XFER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RESHELF_LLFS_GPR3_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_CHANGE_PREPROG_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_GET_PARAM_RESULT_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_DGM_ERASE_SET_STATE_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_DGM_ERASE_RUN_READ_CHECKPOINT_EVENT ,



SET_EVENT_PS_DIAG_ERASE_SUSPEND_COUNTERS_CHECKPOINT_EVENT ,










































SET_EVENT_PS_DEBUG_DGM_MP_SENSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_MP_TRANSFER_CHECKPOINT_EVENT ,





SET_EVENT_PS_CRIT_SHF_PEEK_OLDEST_TLC_MISSING_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_DIE_RESET_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_CHANGE_C6PREREAD_CHECKPOINT_EVENT ,











SET_EVENT_PS_DEBUG_AIPR_EN_AFTER_DPS_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_DGM_SUBMIT_RPZ_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_FAIL_DISPATCH_RPZ_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_DMC_RES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_SUBMIT_DMC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_FTL_ACK_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_PRE_BRM_HNDLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_REPORT_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_PPROCESS_FTL_ACK_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_PPROCESS_BRM_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_DMC_THRESHOLD_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_DGM_RPZ_HSLC_MSMCH_CHECKPOINT_EVENT ,




SET_EVENT_PS_PERF_CVD_PROC_ASSIGN_PROCESS_EVENT ,   SET_EVENT_PS_PERF_CVD_PROC_ASSIGN_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_CVD_PROC_RELEASE_PROCESS_EVENT ,   SET_EVENT_PS_PERF_CVD_PROC_RELEASE_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_CVD_PROC_COMPACT_PROCESS_EVENT ,   SET_EVENT_PS_PERF_CVD_PROC_COMPACT_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_CVD_PROC_HBER_PROCESS_EVENT ,   SET_EVENT_PS_PERF_CVD_PROC_HBER_PROCESS_EVENT_END ,


SET_EVENT_PS_PERF_CVD_UPDATE_PEC_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_TICK_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_UPDATE_PROCESS_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_TT_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_TT_UPDATE_ABORT_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_ASSIGN_FAILED_BER_DEF_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BES5_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BES7_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_FAILED_BER_OPT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_FAILED_BER_DONER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BER_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_ALLOC_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_UPDATE_FAILED_BER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_UPDATE_BES5_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_UPDATE_BES7_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_TT_UPDATE_FINAL_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_VLD_MB_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_INV_MB_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_MARK_PEND_RLC_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_ALLOCATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_ASSIGN_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_ASSIGN_DONER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_INV_LATT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_INV_DYNAMIC_TT0_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DEALLOC_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DEALLOC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_CVDT_ASSIGN_CHECKPOINT_EVENT ,
SET_EVENT_PS_CVDT_ASSIGN_DONER_CHECKPOINT_EVENT ,
SET_EVENT_PS_CVDT_GET_MB_FLAG_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_PERIODIC_UPDATE_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_BARRIER_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BARRIER_CS_DONE_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_COMPACT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_COMPACT_SHIFTS_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DIAG_CHANGE_TT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DIAG_GET_LATT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DIAG_INVALIDATE_LATT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DIAG_GET_TT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DIAG_GET_TT_ID_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_CHECK_CLR_PENDING_RLC_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_FSM_CHANGE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_REFRESH_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BKOPS_SET_REQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_PROC_PERIODIC_PROCESS_EVENT ,   SET_EVENT_PS_PERF_CVD_PROC_PERIODIC_PROCESS_EVENT_END ,

SET_EVENT_PS_PERF_CVD_IS_HBER_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_RELEASE_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_MB_RELEASE_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_UPDATE_FAILED_BER_OPT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_OB_GOT_CLOSED_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BES_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BES_SEND_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BER_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_BER_SEND_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_DRD_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_FAILED_DRD_MEAS_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_BES_POST_PROC_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_ADD_TASK_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_ACTIVATE_TASK_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_COMPLETE_TASK_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_NOTIFY_TASK_CS_PREPARE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_NOTIFY_TASK_CS_READY_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_INFRA_BARRIER_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_FAILED_BER_LATT_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_ASSIGN_BER_LATT_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BER_DEF_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BER_OPT_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BER_DONER_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_UPDATE_BER_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_UPDATE_BER_OPT_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DRD_MEAS_AGGREGATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_ASSIGN_BER_COMP_AGGREGATE_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_CACHE_ADD_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_HSLC_CVD_CACHE_ADD1_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_CACHE_ADD2_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_CACHE_REL_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_HSLC_CVD_RD_PARAM_CACHE_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_CACHE_CLR_TREE_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_CVD_RESET_MB_TT0_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_RESET_DB_TT0_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DBG_ERR_MBCNT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DBG_ERR_TTCNT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DBG_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_CLR_PEND_RLC_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_RD_PARAM_TABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_PARAM_POST_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_PARAM_COMP_CB_WLZ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_PARAM_COMP_OB_WLZ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_PARAM_COMP_BWLZ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DRD_PARAM_COMP_OB_WLZ_CHECKPOINT_EVENT ,



SET_EVENT_PS_PERF_CVD_SET_OPEN_BLOCK_REQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_ENQUEUE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_CVD_DEQUEUE_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_CVD_DIST_CHECKPOINT_EVENT ,


SET_EVENT_PS_OTG_SETPARAM_ADDR_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SETPARAM_DATA_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_PS_OTG_NO_FREE_BUFFER_FAILURE_EVENT_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_OTG_HOST_RD_XFER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_OTG_HOST_WRT_PROG_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SUBMIT_OPTASK1_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SUBMIT_OPTASK2_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SUBMIT_COOKIE_CHECKPOINT_EVENT ,

SET_EVENT_PS_OTG_CHECK_STATUS_EVENT1_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SEED_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SEED_SR_SD_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SENSE_CONT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_DEC_TO_SRAM_CONT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_LQDPERF_SENSE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_LQDPERF_LLFSBP_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_LQDPERF_COMBO_EVENT_CHECKPOINT_EVENT ,

SET_EVENT_PS_OTG_NOP_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_NOP_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_XOR_ACCUMULATE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_XOR_ACCUMULATE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_AES_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_AES_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_LDPC_DECODE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_LDPC_DECODE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_LDPC_ENCODE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_LDPC_ENCODE_EVENT_PROCESS_EVENT_END ,


SET_EVENT_PS_OTG_HOST_RD_FROM_SRAM_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_HOST_RD_FROM_SRAM_EVENT_PROCESS_EVENT_END ,

SET_EVENT_PS_OTG_ERASE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_ERASE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_CUSTOM_SENSE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_CUSTOM_SENSE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_SENSE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_SENSE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_READ_TRANSFER_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_READ_TRANSFER_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_READ_XOR_UNROLL_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_READ_XOR_UNROLL_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_READ_BER_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_READ_BER_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_READ_BES_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_READ_BES_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_READ_SENSE_TRANS_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_READ_SENSE_TRANS_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_WRITE_TRANSFER_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_WRITE_TRANSFER_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_PROG_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_PROG_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_CHECK_STATUS_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_CHECK_STATUS_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_BASIC_COMMAND_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_BASIC_COMMAND_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_SET_GLOBAL_VARS_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_SET_GLOBAL_VARS_EVENT_PROCESS_EVENT_END ,



SET_EVENT_PS_OTG_SET_FEATURE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_SET_FEATURE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_SET_PARAM_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_SET_PARAM_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_BIT_COUNT_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_BIT_COUNT_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_LATCH_SWAP_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_LATCH_SWAP_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_GET_TEMPERATURE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_GET_TEMPERATURE_EVENT_PROCESS_EVENT_END ,

SET_EVENT_PS_OTG_GET_FEATURE_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_GET_FEATURE_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_GET_PARAM_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_GET_PARAM_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_DDR_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_DDR_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_SET_FEATURE_DETAILED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SENSE_DETAILED_CVD_EVENT_CHECKPOINT_EVENT ,









SET_EVENT_PS_OTG_DCC_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_DCC_EVENT_PROCESS_EVENT_END ,

SET_EVENT_PS_OTG_SFA_EVENT_PROCESS_EVENT ,   SET_EVENT_PS_OTG_SFA_EVENT_PROCESS_EVENT_END ,
SET_EVENT_PS_OTG_SFA_SKIP_SET_FEATURE_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SFA_DO_SET_FEATURE_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SFA_SKIP_5D_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SFA_DIE_RESET_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SFA_FORCE_DIE_RESET_CHECKPOINT_EVENT ,
SET_EVENT_PS_OTG_SFA_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_TRC_INCREMENT_REQUEST_CHECKPOINT_EVENT ,

SET_EVENT_PS_OTG_SH_FEAT_ADDR_8B_RESET_VAL_CHECKPOINT_EVENT ,



SET_EVENT_PS_EH_REH_CVD_READ_DIST_CHECKPOINT_EVENT ,


SET_EVENT_PS_EH_REH_PLANE0_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_PLANE1_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_PLANE2_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_REH_PLANE3_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_PF_DPCA_CHECKPOINT_EVENT ,

SET_EVENT_PS_EH_IGNORE_LOG_CHECKPOINT_EVENT ,
SET_EVENT_PS_EH_MAX_LOG_CHECKPOINT_EVENT ,








SET_EVENT_PS_ADM_IS_BWL_CHECKPOINT_EVENT ,
SET_EVENT_PS_ADM_IS_NOT_BWL_CHECKPOINT_EVENT ,



SET_EVENT_PS_HSLC_XOR_RECOVERY_START_CHECKPOINT_EVENT ,

SET_EVENT_PS_XOR_RECOVERY_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_ZONE_IS_VALID_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_ZONE_CLOSE_DETECT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_BITMAP_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_MARK_PARITY_INVALID_CHECKPOINT_EVENT ,

SET_EVENT_PS_XOR_RECOVERY_MARK_HEADER_UECC_PF_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_PARITY_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_UNROLL_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_WUC_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_UNROLL_FROM_LATCH_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_PF_DAMAGED_UNROLL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_PARITY_FMU_MARKED_BAD_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_OPEN_ZONE_BAD_BIN_BITMAP_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_RECOVERED_HLBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_BLOCK_IS_OPEN_CHECKPOINT_EVENT ,


SET_EVENT_PS_XOR_RECOVERY_INVALIDATED_LATCH_DATA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_IS_SUPPORTED_CHECKPOINT_EVENT ,


SET_EVENT_PS_XOR_LOADXOR_PROCESS_EVENT ,   SET_EVENT_PS_XOR_LOADXOR_PROCESS_EVENT_END ,
SET_EVENT_PS_XOR_LOADXOR_UECC_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_LOADXOR_FTL_EXCEPTION_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_STOREXOR_PROCESS_EVENT ,   SET_EVENT_PS_XOR_STOREXOR_PROCESS_EVENT_END ,
SET_EVENT_PS_XOR_REBUILDXOR_PROCESS_EVENT ,   SET_EVENT_PS_XOR_REBUILDXOR_PROCESS_EVENT_END ,
SET_EVENT_PS_XOR_REBUILDXOR_UECC_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_ZERO_UNROLLS_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_INVALID_VBA_CHECKPOINT_EVENT ,


SET_EVENT_DEBUG_PS_XOR_RECOVERY_RECOVERED_HLBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_STATEUPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_RECOVERED_UNROLL_HLBA_CHECKPOINT_EVENT ,
SET_EVENT_DEBUG_PS_XOR_PAR_BUFFER_HLBA_CHECKPOINT_EVENT ,
SET_EVENT_DEBUG_PS_XOR_MARK_PF_CHECKPOINT_EVENT ,
SET_EVENT_DEBUG_PS_XOR_REQ_HLBA_CHECKPOINT_EVENT ,


SET_EVENT_PS_XOR_EI_FIND_FREE_IV_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_READ_ERROR_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_CHECK_EI_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_RECOVERY_END_CLEAN_UP_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_WRITE_PAR_CLEAN_UP_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_LOAD_XOR_CLEAN_UP_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_STORE_XOR_CLEAN_UP_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_SKIP_WR_PAR_PAGES_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_EI_INJECT_PAR_PAGES_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_PS_XOR_UPDATE_ZONE_CS_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_ZEROFILLING_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_SET_INITIAL_DPCA_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_DPCA_CS_DEDUCT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_ADJUST_CS_DPCA_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_INIT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_LOADXOR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_LOADXOR_STATEUPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_STOREXOR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_STOREXOR_STATEUPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_REBUILDXOR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_WRITEPARITYHANDLER_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ZONE_CS_DONE_WHILE_REH_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_INVALID_BINBITMAP_CHECKPOINT_EVENT ,

SET_EVENT_PS_OPB_CHECKPOINT_EVENT ,
SET_EVENT_PS_OPB_DEBUG_ZONE_CHECKPOINT_EVENT ,

SET_EVENT_PS_OPB_DEBUG_CHECKPOINT_EVENT ,
SET_EVENT_PS_OPB_RESULT_CHECKPOINT_EVENT ,


SET_EVENT_PS_XOR_OBID_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_WRITEPARITY_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_UPDATE_ASSOC_ENDZONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_UNROLL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_UNROLL_VBA_BIN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_GETPSREQIDX_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_RETURNPSREQIDX_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_RECOVERED_LBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_WRITE_PARITY_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_SET_DPCA_FOR_LAST_LWL_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_SET_XOR_PARAMS_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_SET_DPCA_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_IS_IDLE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_START_TIME_TLC_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_START_TIME_TLC_CLOSED_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_START_TIME_SLC_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_START_TIME_SLC_CLOSED_CHECKPOINT_EVENT ,

SET_EVENT_PS_XOR_RECOVERY_END_TIME_TLC_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_END_TIME_TLC_CLOSED_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_END_TIME_SLC_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_RECOVERY_END_TIME_SLC_CLOSED_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_SET_ACCUM_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_END_ZONE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_UNROLL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_UNROLL_VBA_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_MARK_HEADER_BAD_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_CHECK_INVALID_BIN_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_CHECK_INVALID_BIN_HLBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_GET_PAR_FROM_XRAM_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_GET_PAR_FROM_NAND_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_GET_PAR_FROM_NAND_IRJB_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_PARITY_PAGE_DETECTED_DIFF_PS_CHECKPOINT_EVENT ,

SET_EVENT_PS_XOR_REBUILDXOR_UNROLL_LAST_VBA_SKIP_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_UNROLL_LAST_PARTIAL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_XOR_REBUILDXOR_UNROLL_LAST_FULL_VBA_CHECKPOINT_EVENT ,

SET_EVENT_PS_ADM_FMU_OFFSET_CHECKPOINT_EVENT ,
SET_EVENT_PS_ADM_GET_FMU_OFFSET_CHECKPOINT_EVENT ,


SET_EVENT_PS_HSLC_RS_SCAN_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RND_SCAN_START_CHECKPOINT_EVENT ,

SET_EVENT_PS_RS_ACT_SCAN_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_RLQ_SKIP_PENDING_RLC_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_ATTEMPT_ADD_TO_RSCQ_LIST_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_REH_BLK_PROC_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_SKIP_REH_BLK_PROC_CHECKPOINT_EVENT ,

SET_EVENT_PS_RS_FORCE_ADD_RLCQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_HSLC_RS_ADDBLK_TO_RLQLIST_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_PASSIVE_BLK_CHECKPOINT_EVENT ,
SET_EVENT_PS_HSLC_RS_ADD_FTL_BLK_TO_RLQ_LIST_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_ADD_INFRA_BLK_TO_RLQ_LIST_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SCTP_ADD_BLK_TO_RSCQ_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SCAN_STATE_MACHINE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_INVALID_LAST_WR_FMU_IN_MB_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_BAD_MSG_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_NON_CLASS_MSG_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_INFRA_BRM_BAD_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SCAN_DURING_INFRA_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SCTP_EXCEED_MAX_BLK_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_ADD_TO_RSCQ_LIST_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RSCQ_SKIP_PENDING_RLC_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RSCQ_SKIP_NOT_HBER_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RSCQ_SKIP_IN_RSCQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RSCQ_SKIP_FULL_RSCQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SHELF_REQ_RETRIEVAL_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SHELVE_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_BLOCK_MSG_QUEUE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SCAN_SKIP_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_READ_BER_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_READ_BER_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_READ_BER_RESPONSE_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RETRY_SW_FREQ_BASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_SW_FREQ_BASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_MSG_Q_FULL_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_MSG_Q_NOT_FULL_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_STORE_TO_LOG_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RESTORE_FROM_LOG_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_RESTORE_FROM_LOG_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_BLK_NOT_VALID_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_BRM_DIFERED_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_FTL_BRM_IMMEDIATE_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_FTL_BUSY_BRM_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_INFRA_BRM_IMMEDIATE_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_INFRA_BRM_IMMEDIATE_RESPONSE_ERROR_CHECKPOINT_EVENT ,

SET_EVENT_PS_RS_EXIT_SUSPEND_OP_CHECKPOINT_EVENT ,





SET_EVENT_PS_RS_000_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_001_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_002_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_003_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_004_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_005_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_006_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_007_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_008_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_009_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_010_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_011_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_012_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_013_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_014_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_015_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_016_CHECKPOINT_EVENT ,
SET_EVENT_PS_RS_017_CHECKPOINT_EVENT ,








SET_EVENT_GRP_PS_PERF_MISC3_MLP_SLEEP_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_PERF_MISC3_MLP_WKUP_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_PERF_MISC3_MLP_NOWORK_IPC_WKUP_FLG_ON_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_PERF_MISC3_MLP_SESNE_AVOID_STATISITIC_CHECKPOINT_EVENT ,


SET_EVENT_GRP_PS_PERF_MISC3_THM_TIMER_TICK_CHECKPOINT_EVENT ,
SET_EVENT_PS_THM_TEMP_REQ_PROCESSING_CHECKPOINT_EVENT ,
SET_EVENT_PS_THM_READ_NAND_TEMP_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_THM_READ_NAND_TEMP_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_THM_READ_NAND_TEMP_DIAG_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_THM_READ_NAND_TEMP_INFRA_RESPONSE_CHECKPOINT_EVENT ,



SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_3_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_4_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_5_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_15_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_6_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_PST_HNDLR_7_CHECKPOINT_EVENT ,


SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_3_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_4_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_5_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_6_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_RST_7_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_HOST_RST_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_HOST_RST_2_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_SERV_HNDLR_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_MISC3_PMM_SERV_HNDLR_2_CHECKPOINT_EVENT ,



SET_EVENT_PS_PERF_MISC3_BRM_SESSION_PROCESS_EVENT ,   SET_EVENT_PS_PERF_MISC3_BRM_SESSION_PROCESS_EVENT_END ,
SET_EVENT_PS_PERF_MISC3_BRM_ADD_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_BRM_UPDATE_REQ_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_BRM_DGM_SUBMISSION_REJECT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_BRM_NOTIFY_ALL_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_BRM_INT_MOD_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_BRM_MBOX_HANDLER_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_MISC3_MRPH_FFU_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_MRPH_VER_FFU_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_MRPH_VER_FFU2_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_MISC3_NPARAM_UPDATE_VPGM_CHECKPOINT_EVENT ,



SET_EVENT_PS_PERF_MISC3_NPARAM_VPGM_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_NPARAM_VPGM_TRIG_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_NPARAM_VPGM_SEND_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_NPARAM_VPGM_COMPLETION_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_NPARAM_VPGM_DIAG_CHECKPOINT_EVENT ,


SET_EVENT_PS_DUMP_NAND_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_PS_NAPARAM_DONE_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_MISC3_SGD_PROCESS_EVENT ,   SET_EVENT_PS_PERF_MISC3_SGD_PROCESS_EVENT_END ,

SET_EVENT_PS_PERF_MISC3_SGD_REQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_SGD_BARRIER_COMP_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_SGD_RESTOR_PARAM_COMP_CHECKPOINT_EVENT ,



SET_EVENT_PS_DEBUG_RMA_HSLC_SGD_DETECTION_COMP_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_RMA_HSLC_SGD_CORRECTION_COMP_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_SGD_UPPER_TAIL_DETECT_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_SGD_LOWER_TAIL_DETECT_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_SGD_OP_TAIL_DETECT_COMP_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_MISC3_SGD_SET_FEATURE_COMP_CHECKPOINT_EVENT ,

SET_EVENT_PS_SGD_WAIT_BBM_UPDATE_PROCESS_EVENT ,   SET_EVENT_PS_SGD_WAIT_BBM_UPDATE_PROCESS_EVENT_END ,

SET_EVENT_PS_PERF_MISC3_SGD_SKIP_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_IFT_FS_READ_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_PROCESS_PROCESS_EVENT_END ,

SET_EVENT_PS_DEBUG_IFT_SEND_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SEND_BARRIER1_FLUSH_DP_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER1_FLUSH_DP_COMPLETION_ONE_DIE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER1_FLUSH_DP_COMPLETION_ALL_DIES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SEND_BARRIER2_BEFORE_TM_LOW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER2_BEFORE_TM_LOW_COMPLETION_ONE_DIE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER2_BEFORE_TM_LOW_COMPLETION_ALL_DIES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SEND_BARRIER3_BEFORE_TM_HIGH_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER3_BEFORE_TM_HIGH_COMPLETION_ONE_DIE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER3_BEFORE_TM_HIGH_COMPLETION_ALL_DIES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SEND_BARRIER4_BEFORE_RT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER4_BEFORE_RT_COMPLETION_ONE_DIE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_BARRIER4_BEFORE_RT_COMPLETION_ALL_DIES_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_ZQC_DONE_SUCCESSFULLY_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_ZQC_1ST_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_ZQC_2ND_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_ZQC_RESULTS_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_DCC_1ST_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DCC_2ND_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DCC_DONE_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_SKIP_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_SKIP_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_RESTORE_RDQS_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_RESTORE_WDQS_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_RESTORE_RDQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_RESTORE_WDQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_RT_PROCESS_PROCESS_EVENT_END ,

SET_EVENT_PS_DEBUG_IFT_RT_INIT_RDQS_AND_ALL_DQs_TO_0_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_1ST_READ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_1ST_READ_FAIL_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_1ST_READ_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_1ST_READ_SUCCESS_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP1_CASE1_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP1_CASE1_END_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP1_CASE2_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP1_CASE2_END_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP2_DQ_LOCKED_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP2_DQ_LOCKED_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP2_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP2_END_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP3_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP3_START_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP3_READ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP3_READ_FAIL_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP3_REREAD_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_STEP3_BIT_FLIP_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_STEP3_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_STEP3_END_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_WT_END_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_FIRST_READ_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_DQ_CASE2_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_DQS_LEFT_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_DQ_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_DQS_RIGHT_SW_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_WT_FIRST_READ_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_DQ_CASE2_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_DQS_LEFT_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_DQ_SW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_DQS_RIGHT_SW_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_GET_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_RT_SET_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_WT_GET_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_SET_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_SET_TOGGLE_MODE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_TOGGLE_MODE_LOCKED_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_COUNTER_TM_HIGH2LOW_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_COUNTER_TM_LOW2HIGH_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_TRIGGER_INIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_TRIGGER_TEMPERATURE_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_SEND_DIE_RESET_ALL_DIES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DIE_RESET_COMPLETION_ALL_DIES_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_PRINT_TIME_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_SKIP_ZQC_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SKIP_DCC_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_OPT_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_OPT_SAVE_RESULTS_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_OPEN_QUEUES_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_CALL_EH_COMPLETION_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_SSC_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_SSC_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_STATE_CHECKPOINT_EVENT ,

SET_EVENT_PS_DEBUG_IFT_RT_SUMMARY_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_WT_SUMMARY_CHECKPOINT_EVENT ,


SET_EVENT_PS_DEBUG_IFT_DIAG_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_DIAG_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_IFT_DIAG_ZQC_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_DIAG_ZQC_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_IFT_DIAG_DCC_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_DIAG_DCC_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_IFT_DIAG_LOOPBACK_START_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_DIAG_LOOPBACK_START_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_IFT_DIAG_LOOPBACK_END_PROCESS_EVENT ,   SET_EVENT_PS_DEBUG_IFT_DIAG_LOOPBACK_END_PROCESS_EVENT_END ,
SET_EVENT_PS_DEBUG_IFT_DIAG_DIE_LOOPBACK_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DIAG_DIE_LOOPBACK_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DIAG_DIE_LOOPBACK_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_DEBUG_IFT_DIAG_DIE_LOOPBACK_RD_CHECKPOINT_EVENT ,


SET_EVENT_PS_PERF_MISC3_EPWR_WL_HIT_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_WR_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_BER_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_BER_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_BER_FAIL_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_EPWR_BES_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_BES_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_PERF_MISC3_EPWR_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PS_EPWR_PASS_AFTER_BES_CHECKPOINT_EVENT ,
SET_EVENT_PS_EPWR_FAILURE_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_EPWR_RLS_REQ_CHECKPOINT_EVENT ,

SET_EVENT_PS_PERF_MISC3_EPWR_WL_ABORT_CHECKPOINT_EVENT ,


SET_EVENT_PS_EPWR_ACT_CHECKPOINT_EVENT ,
SET_EVENT_PS_EPWR_DEACT_CHECKPOINT_EVENT ,
SET_EVENT_PS_EPWR_PROCESS_PROCESS_EVENT ,   SET_EVENT_PS_EPWR_PROCESS_PROCESS_EVENT_END ,





SET_EVENT_PS_FLGP_FTL_MSG_PART1_CHECKPOINT_EVENT ,

SET_EVENT_PS_FLGP_FTL_MSG_PART2_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_DB_NER_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_DB_NER_RESULT_P2_CHECKPOINT_EVENT ,

SET_EVENT_PS_FLGP_SEND_FTL_FINAL_RESULTS_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_FTL_FINAL_RESULTS_1_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_FTL_FINAL_RESULTS_2_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NP1_MB_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NP1_PS_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NER_MB_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NER_PS_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_LGW_MB_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_LGW_PS_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FER_MB_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FER_PS_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_BES_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_DB_TER_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_DB_LGW_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_DB_FINAL_RESULT_CHECKPOINT_EVENT ,

SET_EVENT_PS_FLGP_DMC_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_NER_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_NP1_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_LMW_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_LGW_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_TER_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_FOUND_FER_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NER_BINARY_DMC_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_LGW_BACKWARD_BER_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_TER_FORWARD_DMC_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_DMC_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_BER_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_BES_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_DMC_REQ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_BER_REQ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_SEND_BES_REQ_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_VBA_FIRST_FMU_IN_WL_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_VBA_LAST_FMU_IN_WL_CHECKPOINT_EVENT ,

SET_EVENT_PS_FLGP_VBA_LAST_FMU_IN_BLK_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_MIDDLE_WL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_NEXT_WL_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_PREV_WL_VBA_CHECKPOINT_EVENT ,


SET_EVENT_PS_FLGP_MORPHEUS_THRESHOLDS_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_MORPHEUS_SHIFTS_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_TLC_MORPHEUS_THRESHOLDS_CHECKPOINT_EVENT ,
SET_EVENT_PS_FLGP_TLC_MORPHEUS_SHIFTS_CHECKPOINT_EVENT ,


SET_EVENT_PS_BBM_NON_BLOCKING_FILE_WRITE_COMP_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_TRANSLATE_RELINKED_BLK_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_MBB_COUNT_PER_PLANE_CHECKPOINT_EVENT ,

SET_EVENT_PS_BBM_STARTUP_INCORRECT_DEVICE_CONFIG_CHECKPOINT_EVENT ,
SET_EVENT_PS_BBM_STARTUP_FAILED_CHECKPOINT_EVENT ,


SET_EVENT_PS_SE_START_GBB_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_START_SPARE_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_GET_FLASH_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_SET_FLASH_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_EXECUTE_SECURE_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_FINISHED_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_RECEIVED_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_USE_PREALLOCATED_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_RAN_OUT_OF_ALL_REQUESTS_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_REQUEST_START_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_REQUEST_END_CHECKPOINT_EVENT ,
SET_EVENT_PS_SE_INTERNAL_REQUEST_START_END_CHECKPOINT_EVENT ,

#line 2201 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_3_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_4_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_5_CHECKPOINT_EVENT ,

#line 2210 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_GRP_PS_DEBUG_BBM_ADD_BLK_6_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_REMOVE_BLK_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_REMOVE_BLK_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_REMOVE_BLK_3_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_RESET_FLIP_FLOP_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_RESET_FLIP_FLOP_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_RESET_FLIP_FLOP_3_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_STRIKE_CNT_REACHEED_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_STRIKE_CNT_REACHEED_2_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_FS_WRITE_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_FS_WRITE_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_FS_WRITE_3_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_FS_WRITE_4_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_REMOBVE_GBB_FROM_LIST_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_REMOBVE_GBB_FROM_LIST_2_CHECKPOINT_EVENT ,

SET_EVENT_GRP_PS_DEBUG_BBM_DO_ERASE_EH_1_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_DO_ERASE_EH_2_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_BBM_DO_ERASE_EH_3_CHECKPOINT_EVENT ,


SET_EVENT_GRP_PS_DEBUG_IRJB_OPENED_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_IRJB_COMPOSITION_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_IRJB_COMPOSITION_BBM_RT_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_IRJB_TRANSLATION_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_DEBUG_IRJB_INV_TRANSLATION_CHECKPOINT_EVENT ,


SET_EVENT_GRP_PS_BULLSEYE_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_BULLSEYE_OPEN_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_BULLSEYE_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_GRP_PS_BULLSEYE_GETPID_CHECKPOINT_EVENT ,



SET_EVENT_PS_GEV_CHECKPOINT_EVENT ,

SET_EVENT_PS_INIT_HW_OPTASK_PARAM_TABLE_INIT_CHECKPOINT_EVENT ,


SET_EVENT_GRP_PS_PERFPROF_CHECKPOINT_EVENT ,

SET_EVENT_PS_HRH_SENSE_AVOID_CNT_CHECKPOINT_EVENT ,
SET_EVENT_PS_HRH_DEBUG_CHECKPOINT_EVENT ,






SET_EVENT_SAT_PROCESS_DEALLOCATE_PROCESS_EVENT ,   SET_EVENT_SAT_PROCESS_DEALLOCATE_PROCESS_EVENT_END ,
SET_EVENT_SAT_STARTED_CONSOLIDATION_CHECKPOINT_EVENT ,
SET_EVENT_SAT_STARTED_CONSOLIDATION_SYNC_VC_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_PREPARE_TRANSLATE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_PREPARE_TRANSLATE_DRMLS_LOCK_CHECKPOINT_EVENT ,
SET_EVENT_SAT_PREPARE_TRANSLATE_DRMLS_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TRANSLATE_AFTER_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TRANSLATE_AFTER_CALLBACK_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_PROCESS_DEALLOCATE_BITMAP_PROCESS_EVENT ,   SET_EVENT_SAT_PROCESS_DEALLOCATE_BITMAP_PROCESS_EVENT_END ,
SET_EVENT_SAT_PREPARE_CONTROL_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_SAT_ULAYER_UNLOCKED_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_SELECTED_REGION_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_PREPARED_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_SELECT_MSET_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_MSET_IN_CAT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_MSET_NOT_IN_CAT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_LRU_LOCKED_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_MERGE_CAT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CONSOLIDATION_COPYBACK_CHECKPOINT_EVENT ,
SET_EVENT_SAT_DEALLOCATE_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_UPDATE_CUQ_CHECKPOINT_EVENT ,
SET_EVENT_SAT_UPDATE_CUQ_REMOVE_HEAD_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CLEAR_CUQ_PROCESS_EVENT ,   SET_EVENT_SAT_CLEAR_CUQ_PROCESS_EVENT_END ,
SET_EVENT_SAT_ULAYER_POP_ITEM_CHECKPOINT_EVENT ,
SET_EVENT_SAT_ULAYER_MERGE_WITH_CAT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_ULAYER_PARTIAL_MERGE_WITH_CAT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_ADD_MSET_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_TOUCH_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_LOCK_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_CANT_LOCK_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_UNLOCK_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_BEFORE_CLEARING_CONTEXT_CHECKPOINT_EVENT ,
SET_EVENT_AFTER_CLEARING_CONTEXT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_REMOVE_FROM_CAT_CHECKPOINT_EVENT ,

SET_EVENT_CAT_MAX_AVILABLE_CAT_HEADER1_CHECKPOINT_EVENT ,
SET_EVENT_CAT_MAX_AVILABLE_CAT_HEADER2_CHECKPOINT_EVENT ,
SET_EVENT_CAT_TRANSLATE_INFO_CHECKPOINT_EVENT ,
SET_EVENT_CAT_TRANSLATE_LOOP_INFO_CHECKPOINT_EVENT ,
SET_EVENT_SAT_DST_COMMAND_CHECKPOINT_EVENT ,
SET_EVENT_SAT_DST_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_SWAP_RGN_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_SWAP_CAT_HDR_AND_TEMPCAT_RGN_CHECKPOINT_EVENT ,

SET_EVENT_SAT_TEMPCAT_LOCK_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TEMPCAT_UNLOCK_SLOT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_ADD_OVERLAP_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_SAT_REM_OVERLAP_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_SAT_SEARCH_OVERLAP_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_SAT_UPDATE_VC_CHECKPOINT_EVENT ,
SET_EVENT_SAT_UPDATE_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_UPDATE_MOVE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TRANSLATE_DIRECT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TRANSLATE_RESULT_CHECKPOINT_EVENT ,
SET_EVENT_SAT_CAT_MERGE_MOVE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TEMPCAT_MERGE_MOVE_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TEMPCAT_MERGE_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_CAT_MERGE_INFO_CHECKPOINT_EVENT ,
SET_EVENT_CAT_MERGE_LOOP_INFO_CHECKPOINT_EVENT ,
SET_EVENT_CAT_MERGE_PRELOADED_CHECKPOINT_EVENT ,
SET_EVENT_SAT_TRANSLATE_MC_WA_CHECKPOINT_EVENT ,


SET_EVENT_MARK_DIRTY_MSET_CHECKPOINT_EVENT ,
SET_EVENT_ULAYER_OPTIMIZATION_SKIP_BY_RLC_CHECKPOINT_EVENT ,

SET_EVENT_DIRTY_MSET_FLUSH_CHECKPOINT_EVENT ,

#line 2336 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_DIRTY_MSET_FLUSH_COMPLETE_CHECKPOINT_EVENT ,

SET_EVENT_RESET_ULAYER_CNTS_CHECKPOINT_EVENT ,
SET_EVENT_DISABLE_ULAYER_CNTS_CHECKPOINT_EVENT ,



SET_EVENT_UIC_PRINT_STAT_CHECKPOINT_EVENT ,


SET_EVENT_FML_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FML_CALLBACK_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FML_IS_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FML_EXEC_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FML_EXEC_HANDLER_END_CHECKPOINT_EVENT ,
SET_EVENT_FML_SET_REST_CHECKPOINT_EVENT ,
SET_EVENT_FML_CLEAR_REST_CHECKPOINT_EVENT ,
SET_EVENT_FML_DEACTIVATE_AND_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FML_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_FML_GO_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FML_FLUSH_HAWA_CHECKPOINT_EVENT ,
SET_EVENT_FML_FLUSH_GRACEFUL_CHECKPOINT_EVENT ,
SET_EVENT_FML_SKIP_FLUSH_GRACEFUL_CHECKPOINT_EVENT ,
SET_EVENT_FML_FLUSH_RETURN_CHECKPOINT_EVENT ,


SET_EVENT_BMG_FINISHED_INIT_CHECKPOINT_EVENT ,
SET_EVENT_BMG_RECEIVED_SWITCH_PROFILE_REQ_CHECKPOINT_EVENT ,
SET_EVENT_BMG_STARTED_SWITCH_CHECKPOINT_EVENT ,
SET_EVENT_BMG_FINISH_AND_START_NEW_SWITCH_CHECKPOINT_EVENT ,
SET_EVENT_BMG_FINISHED_SWITCH_CHECKPOINT_EVENT ,
SET_EVENT_BMG_ISR_SUBMIT_ALLOC_REQ_CHECKPOINT_EVENT ,


SET_EVENT_RLC_SIGN_UECC_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RLC_FNVM_START_CHECKPOINT_EVENT ,
SET_EVENT_RLC_REL_JB_CHECKPOINT_EVENT ,
SET_EVENT_RLC_FNVM_END_CHECKPOINT_EVENT ,
SET_EVENT_RLC_RS_LOGICALLY_CLOSED_CHECKPOINT_EVENT ,
SET_EVENT_RLC_READ_LRM_PROCESS_EVENT ,   SET_EVENT_RLC_READ_LRM_PROCESS_EVENT_END ,
SET_EVENT_BRLC_READ_LRM_PROCESS_EVENT ,   SET_EVENT_BRLC_READ_LRM_PROCESS_EVENT_END ,
SET_EVENT_RLC_MAX_JB_RELEASES_LRM_PROCESS_EVENT ,   SET_EVENT_RLC_MAX_JB_RELEASES_LRM_PROCESS_EVENT_END ,
SET_EVENT_BRLC_PROCESS_EVENT ,   SET_EVENT_BRLC_PROCESS_EVENT_END ,
SET_EVENT_BRLC_SET_LGW_CHECKPOINT_EVENT ,
SET_EVENT_RLC_RELEASE_SRC_CHECKPOINT_EVENT ,
SET_EVENT_RLC_CYCLE_PROCESS_EVENT ,   SET_EVENT_RLC_CYCLE_PROCESS_EVENT_END ,
SET_EVENT_RLC_SELECT_SRC_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SELECT_TARGET_CHECKPOINT_EVENT ,
SET_EVENT_RLC_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_BRLC_DURING_MNT_CHECKPOINT_EVENT ,
SET_EVENT_BRLC_RS_CHECKPOINT_EVENT ,
SET_EVENT_BRLC_OP_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_RLC_START_STEP_CHECKPOINT_EVENT ,
SET_EVENT_RLC_EXIT_STEP_CHECKPOINT_EVENT ,
SET_EVENT_RLC_NO_SELECT_SRC_CHECKPOINT_EVENT ,
SET_EVENT_RLC_RESELECT_SRC_CHECKPOINT_EVENT ,
SET_EVENT_RLC_AUTO_FREE_CHECKPOINT_EVENT ,
SET_EVENT_RLC_AUTO_FREE_DURING_TLC_DYN_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SEND_SCAN_REQ_CHECKPOINT_EVENT ,
SET_EVENT_RLC_RECEIVE_SCAN_COMP_CHECKPOINT_EVENT ,
SET_EVENT_RLC_FINISH_CPY_STEP_CHECKPOINT_EVENT ,
SET_EVENT_RLC_TARGET_BLOCK_FULL_CHECKPOINT_EVENT ,
SET_EVENT_RLC_NEED_GC_CALC_MVP_STARTADV_CHECKPOINT_EVENT ,
SET_EVENT_RLC_NEED_GC_CALC_IN_FMG_CHECKPOINT_EVENT ,
SET_EVENT_RLC_FORCE_FINISH_CPY_CHECKPOINT_EVENT ,
SET_EVENT_RLC_AUTONOMOUS_STEP_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SIGN_FOR_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SRC_VC_ZERO_CHECKPOINT_EVENT ,
SET_EVENT_RLC_PADDING_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS1_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS2_CHECKPOINT_EVENT ,

SET_EVENT_RLC_WA_STATISTICS3_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS3_1_CHECKPOINT_EVENT ,

#line 2413 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_RLC_WA_STATISTICS4_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS5_CHECKPOINT_EVENT ,

SET_EVENT_RLC_WA_STATISTICS6_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS7_CHECKPOINT_EVENT ,
SET_EVENT_RLC_TRANSDONE_STEP_ZERO_PARTITION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_TRANSDONE_STEP_NONEED_NEXTRAG_CHECKPOINT_EVENT ,
SET_EVENT_RLC_WA_STATISTICS8_CHECKPOINT_EVENT ,

#line 2424 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_RLC_UPDATE_LIVE_FMUINBLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RLC_CLEAR_RESUME_INFO_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SRC_COUNT_SEQ_FFLBA_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SRC_SEQ_FFLBA_LENGTH_CHECKPOINT_EVENT ,
SET_EVENT_RLC_PREV_RESUME_INFO_CHECKPOINT_EVENT ,
SET_EVENT_RLC_UPDATE_COPY_FMUINBLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SAVED_COND_CHECKPOINT_EVENT ,
SET_EVENT_RLC_NEW_COND_CHECKPOINT_EVENT ,
SET_EVENT_RLC_CLEAR_SAVED_COND_CHECKPOINT_EVENT ,
SET_EVENT_MVP_MODIFY_QUOTA_CHECKPOINT_EVENT ,
SET_EVENT_RLC_CHECK_INC_HQ_CHECKPOINT_EVENT ,
SET_EVENT_MVP_GC_CONSUME_CHECKPOINT_EVENT ,
SET_EVENT_RLC_LOW_VC_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_RLC_READ_LRM_NOCPY_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SLC_TLC_FG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_HSLC_TLC_FG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_TLC_TLC_FG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_SLC_TLC_BG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_HSLC_TLC_BG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_TLC_TLC_BG_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_RLC_NEW_RESUME_INFO_CHECKPOINT_EVENT ,


SET_EVENT_WL_BLOCK_STUCK_CHECKPOINT_EVENT ,
SET_EVENT_WL_STATIC_RLC_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_WL_STATIC_RLC_NEEDED_CHECKPOINT_EVENT ,
SET_EVENT_WL_ACTUAL_SELECT_SRC_CHECKPOINT_EVENT ,
SET_EVENT_WL_SELECT_SRC_CHECKPOINT_EVENT ,
SET_EVENT_WL_SELECT_CANDIDATE_CHECKPOINT_EVENT ,
SET_EVENT_WL_SELECT_CANDIDATE_RND_CHECKPOINT_EVENT ,
SET_EVENT_WL_EXCEED_DIFF_CHECKPOINT_EVENT ,




SET_EVENT_MNT_FTM_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_BML_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_MTM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_WRITE_LOG_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_WRITE_LOGPTR_IN_FS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_START_COMPLETION_BLOCKING_FLOW_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_END_COMPLETION_BLOCKING_FLOW_CHECKPOINT_EVENT ,
SET_EVENT_MNT_FTM_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_MTM_ALLOCATE_NEW_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_MTM_RELOCATION_SOURCE_CHECKPOINT_EVENT ,
SET_EVENT_MTM_RELOCATION_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_MTM_TERMINATE_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_MTM_WRITE_TABLE_PART_CHECKPOINT_EVENT ,
SET_EVENT_MTM_INVALIDATE_OLD_COPY_CHECKPOINT_EVENT ,
SET_EVENT_MTM_INVALIDATE_RLC_SOURCE_CHECKPOINT_EVENT ,
SET_EVENT_MTM_START_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_MTM_RELOCATION_UPDATE_TABLE_CHECKPOINT_EVENT ,
SET_EVENT_MTM_CONTROL_SYNC_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_MTM_CONTROL_SYNC_ENDED_CHECKPOINT_EVENT ,
SET_EVENT_MTM_RELOCATION_STEP_DONE_CHECKPOINT_EVENT ,
SET_EVENT_MTM_EMPTY_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_MTM_CONSOLIDATION_CHECKPOINT_EVENT ,
SET_EVENT_MTM_BACKUP_RESTORE_CHECKPOINT_EVENT ,



SET_EVENT_LOG_MOUNT_READ_1_FMU_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_NEED_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_SWITCH_PREV_VERSION_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_SWITCH_VERSION_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_SWITCH_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_CHECK_RECOVERY_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_READ_PREV_FULL_COPY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED1_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED2_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED3_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED4_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED5_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FAILED6_CHECKPOINT_EVENT ,
SET_EVENT_LOG_SUSPECT_WA_OR_RECOVERED_CHECKPOINT_EVENT ,
SET_EVENT_LOG_BAD_SIGNATURE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_PROCESS_MOUNT_READ_IFS_CHECKPOINT_EVENT ,
SET_EVENT_LOG_PROCESS_MOUNT_READ_IFS_COMPOSITION_CHECKPOINT_EVENT ,
SET_EVENT_LOG_PROCESS_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_SENT_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_END_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_END_FLGP_RES_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_SKIP_READ_BLOCK_ERASED_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FIRST_2_COPIES_INFO_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_LAST_2_COPIES_INFO_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_PREV_2_COPIES_INFO_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_READ_FIRST_2_COPIES_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_READ_FULL_COPY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_BLOCK_LOG_VER_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_READ_LOG_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_CHECK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_CHECK_RECOVERY_OK_CHECKPOINT_EVENT ,
SET_EVENT_LOG_MOUNT_FER_NOT_IN_NER_COPY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_REQUEST_CONTROL_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_LOG_BLOCK_CONTROL_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_LOG_PROCESS_CONTROL_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_LOG_SWITCH_ACTIVE_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_LOG_ALLOCATE_NEW_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_LOG_BLOCK_WL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FIRST_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_MOUNT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_UGSD_MOUNT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_GSD_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_BLOCK_ALLOCATED_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FLASH_FILL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_PWS_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FNVM_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FE_SMART_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_INFRA_SMART_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FTL_SMART_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_BRLC_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_READONLY_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FILL_FMBL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_PRE_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_DECOMMISSIONED_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_FMBL_NOT_FULL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_TOTAL_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_REASON_UNKNOWN_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_START_PAGE_0_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_END_PAGE_0_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_START_PAGE_1_CHECKPOINT_EVENT ,
SET_EVENT_LOG_WRITE_END_PAGE_1_CHECKPOINT_EVENT ,


SET_EVENT_BKOPS_START_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_AURA_START_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_STOP_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_AURA_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_HANDLER_FINISHED_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_AURA_HANDLER_FINISHED_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_SEND_RELOCATION_STEP_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_MAIN_LOOP_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_NO_NEED_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_NEED_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_KEEP_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_BKOPS_DELAY_PEM_EXECUTION_CHECKPOINT_EVENT ,




SET_EVENT_MVP_CALC_GC_CR_SLC_CHECKPOINT_EVENT ,
SET_EVENT_MVP_CALC_GC_CR_TLC_CHECKPOINT_EVENT ,
SET_EVENT_MVP_JBALO_GC_CR_SLC_CHECKPOINT_EVENT ,
SET_EVENT_MVP_JBALO_GC_CR_TLC_CHECKPOINT_EVENT ,

SET_EVENT_MVP_FREE_CYCLE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_GC_CYCLE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_CHECK_GC_CHECKPOINT_EVENT ,
SET_EVENT_MVP_RLC_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_WAIT_UPDATE_VC_CHECKPOINT_EVENT ,
SET_EVENT_MVP_REDUCE_CYCLE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_NO_QUOTA_DRIFT_CHECKPOINT_EVENT ,
SET_EVENT_MVP_CHECK_STATIC_RELOCATION_CHECKPOINT_EVENT ,
SET_EVENT_MVP_GC_QUOTA_RESET_CHECKPOINT_EVENT ,
SET_EVENT_MVP_WAIT_FOR_RLC_STEP_CHECKPOINT_EVENT ,
SET_EVENT_MVP_WAIT_FOR_RLC_STEP_DONE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_CALC_FREE_SPACE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_PERFORM_SWAP_CHECKPOINT_EVENT ,
SET_EVENT_MVP_SWAP_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_END_RLC_CYCLE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_ADJUST_THRESHOLD_CHECKPOINT_EVENT ,
SET_EVENT_MVP_TLC_STATIC_POSTPONED_CHECKPOINT_EVENT ,
SET_EVENT_MVP_BEFORE_SCALE_DOWN_CHECKPOINT_EVENT ,
SET_EVENT_MVP_START_RLC_CYCLE_FIRST_STEP_CHECKPOINT_EVENT ,
SET_EVENT_MVP_NEW_RATIO_SET_CHECKPOINT_EVENT ,
SET_EVENT_MVP_RS_RLC_STEP_IDP_SCHED_SKIP_CHECKPOINT_EVENT ,

SET_EVENT_MVP_GC_QUOTA_CONSUMED_CHECKPOINT_EVENT ,
SET_EVENT_MVP_HOST_QUOTA_CONSUMED_CHECKPOINT_EVENT ,



SET_EVENT_MVP_IRLC_CYCLE_TRIGGER_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_CYCLE_TERMINATE_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_CALCULATE_QUOTA_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_SET_RATIO_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_SET_QUOTA_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_SELECT_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_SWITCH_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_GC_QUOTA_REFILL_CHECKPOINT_EVENT ,
SET_EVENT_IRLC_STEP_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_IRLC_SET_STALE_SCANBUFF_CHECKPOINT_EVENT ,
SET_EVENT_MVP_IRLC_MARK_AS_TERMINATRE_CHECKPOINT_EVENT ,


SET_EVENT_PSR_XOR_REC_START_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_XOR_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_XOR_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_MTM_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_MTM_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_REBUILD_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_STORE_PARITY_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_LOAD_PARITY_CHECKPOINT_EVENT ,
SET_EVENT_PSR_ADM_SWAP_OPBID_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_REC_GET_PARITY_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_FILL_XOR_HEADERS_CHECKPOINT_EVENT ,
SET_EVENT_PSR_FILL_XOR_HEADERS_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_OPEN_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_ZONE_END_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_READ_SCRUB_SCAN_CHECKPOINT_EVENT ,
SET_EVENT_PSR_READ_SCRUB_SCAN_PART_JWL_CHECKPOINT_EVENT ,
SET_EVENT_PSR_READ_SCRUB_SCAN_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_FLASH_FILL_CHECKPOINT_EVENT ,
SET_EVENT_PSR_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_END_ERASE_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_BARRIER_ONE_QUEUE_ALL_PS_CHECKPOINT_EVENT ,
SET_EVENT_PSR_BARRIER_BOTH_QUEUES_ALL_PS_CHECKPOINT_EVENT ,

SET_EVENT_PSR_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLA_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLA_READ_MWL_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLA_READ_SINGLE_FMU_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_SECURE_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_HOST_READ_NON_ALIGNED_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RMW_CHECKPOINT_EVENT ,
SET_EVENT_PSR_HOST_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_PAD_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RLC_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_HOST_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_LOG_READY_CHECKPOINT_EVENT ,
SET_EVENT_PSR_BK_OPS_MODE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CTRL_READ_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CAT_CTRL_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_META_DATA_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CTRL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CTRL_WRITE_MOUNT_F_CHECKPOINT_EVENT ,
SET_EVENT_PSR_MTM_CTRL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_MTM_CTRL_WRITE_MOUNT_F_CHECKPOINT_EVENT ,
SET_EVENT_PSR_LOG_CTRL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_OPEN_BLOCK_MBID_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CVD_RESTORE_JB_CHECKPOINT_EVENT ,
SET_EVENT_PSR_SCAN_FWD_CHECKPOINT_EVENT ,
SET_EVENT_PSR_SET_DEVICE_STATE_HEALTH_CHECKPOINT_EVENT ,
SET_EVENT_PSR_JB_XOR_ZONE_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_SEND_CTRL_DONE_INDICATION_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_REC_PAUSE_FOR_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_PSR_XOR_REC_COMPLETION_CHECKPOINT_EVENT ,
SET_EVENT_PSR_FAIL_REPORT_ACK_CHECKPOINT_EVENT ,
SET_EVENT_PSR_DECOMMISSION_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_PSR_UPDATE_PEC_CHECKPOINT_EVENT ,
SET_EVENT_PSR_METABLOCK_META_DATA_READ_CHECKPOINT_EVENT ,
SET_EVENT_PSR_HOST_READ_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_META_DATA_READ_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_ERASE_VBA_CHECKPOINT_EVENT ,

SET_EVENT_PSR_CTRL_READ_VBA_SINGLE_CHECKPOINT_EVENT ,

SET_EVENT_PSR_LOG_CTRL_WRITE_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_SCAN_FWD_VBA_CHECKPOINT_EVENT ,
SET_EVENT_PSR_DRD_CHECKPOINT_EVENT ,
SET_EVENT_PSR_CVD_REFRESH_CHECKPOINT_EVENT ,
SET_EVENT_PSR_DST_REQ_CHECKPOINT_EVENT ,



SET_EVENT_HWD_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_HWD_INIT_CHECKPOINT_EVENT ,
SET_EVENT_HWD_GRPID_FLUSH_START_CHECKPOINT_EVENT ,
SET_EVENT_HWD_GRPID_FLUSH_DONE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_GRPID_HAWA_FLUSH_START_CHECKPOINT_EVENT ,
SET_EVENT_HWD_GRPID_HAWA_FLUSH_DONE_CHECKPOINT_EVENT ,

SET_EVENT_HWD_GRPID_HAWA_FLUSH_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FLUSHGRACEFUL1_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FLUSHGRACEFUL2_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESIZEWINDOW1_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESIZEWINDOW2_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESETBYRANDOM_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESETBYOVERFLOW1_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESETBYOVERFLOW2_CHECKPOINT_EVENT ,
SET_EVENT_HWD_SATUPDATE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_CHAOYANGSEQ_CHECKPOINT_EVENT ,


SET_EVENT_HWD_FLUSH_BARRIER_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_OVERLAP_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_REMOVE_FROM_RUNNING_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_KEEP_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_SKIPPED_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_DONE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_START_CHECKPOINT_EVENT ,
SET_EVENT_HWD_UPDATE_SAT_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FLUSH_SLC_BUFFER_PROCESS_EVENT ,   SET_EVENT_HWD_FLUSH_SLC_BUFFER_PROCESS_EVENT_END ,
SET_EVENT_HWD_FLUSH_TLC_BUFFER_PROCESS_EVENT ,   SET_EVENT_HWD_FLUSH_TLC_BUFFER_PROCESS_EVENT_END ,
SET_EVENT_HWD_RMW_READ_PARAMS_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_HANDLE_SINGLE_FMU_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_MERGE_FMUS_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_MERGE_FILTER1_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_MERGE_FILTER2_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_ADD_TO_RUNNING_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WRITE_SEC_DATA1_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WRITE_SEC_DATA2_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_CRC_DATA_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RMW_CRC_DATA_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WR_SEC_DATA1_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WR_SEC_DATA2_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_START_HW_HOST_WRITE_PROCESS_EVENT ,   SET_EVENT_HWD_START_HW_HOST_WRITE_PROCESS_EVENT_END ,
SET_EVENT_HWD_HANDLE_DATA_PROCESS_EVENT ,   SET_EVENT_HWD_HANDLE_DATA_PROCESS_EVENT_END ,
SET_EVENT_HWD_WRITE_DATA_W_PS_PROCESS_EVENT ,   SET_EVENT_HWD_WRITE_DATA_W_PS_PROCESS_EVENT_END ,
SET_EVENT_HWD_WRITE_DATA_WO_PS_PROCESS_EVENT ,   SET_EVENT_HWD_WRITE_DATA_WO_PS_PROCESS_EVENT_END ,
SET_EVENT_HWD_INNER_WRITE_BUFFER_PROCESS_EVENT ,   SET_EVENT_HWD_INNER_WRITE_BUFFER_PROCESS_EVENT_END ,
SET_EVENT_HWD_UPDATE_ROUTING_STATE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_ROUTING_RULES_CHECKPOINT_EVENT ,
SET_EVENT_HWD_PADDING_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESUME_WRITE_AFTER_RMW_CHECKPOINT_EVENT ,
SET_EVENT_HWD_RESUME_WRITE_BUFFER_AFTER_RMW_CHECKPOINT_EVENT ,
SET_EVENT_HWD_HOSTLESS_WRITE_BUFFER_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WRITE_DALOC_PAYLOAD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_WRITE_RPMB_PAYLOAD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_GENERIC_OP_DONE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FUA_NUMBER_SEX_IN_CNT_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FUA_NUMBER_CNT_IN_CMD_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FUA_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FUA_PART_DONE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FMU_ERROR_HANDLING_CHECKPOINT_EVENT ,
SET_EVENT_HWD_FUA_ALL_DONE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_COUNTER_INCREASE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_COUNTER_ZEROED_CHECKPOINT_EVENT ,
SET_EVENT_HWD_SWITCH_MODE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_SWITCH_MODE_DONE_CHECKPOINT_EVENT ,

SET_EVENT_HWD_XOR_SWAP_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_HWD_PERFORM_SWAP_CHECKPOINT_EVENT ,


SET_EVENT_HRF_OVL_READ_CHECKPOINT_EVENT ,
SET_EVENT_HRF_RLA_COMPL_READ_CHECKPOINT_EVENT ,
SET_EVENT_HRF_READ_FLOW_START_CHECKPOINT_EVENT ,
SET_EVENT_HRF_READ_FLOW_RMW_START_CHECKPOINT_EVENT ,
SET_EVENT_HRF_READ_FLOW_HOSTLESS_START_CHECKPOINT_EVENT ,
SET_EVENT_HRF_READ_FLOW_FINISH_CHECKPOINT_EVENT ,
SET_EVENT_HRF_SUSPEND_CHECKPOINT_EVENT ,
SET_EVENT_HRF_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_HRF_TRANSLATE_START_CHECKPOINT_EVENT ,
SET_EVENT_HRF_TRANSLATE_FINISH_CHECKPOINT_EVENT ,
SET_EVENT_HRF_HOST_FAST_READ_CHECKPOINT_EVENT ,
SET_EVENT_HRF_UNALIGNED_READ_CHECKPOINT_EVENT ,
SET_EVENT_HRF_FILL_DATA_CHECKPOINT_EVENT ,
SET_EVENT_HRF_DRAM_PRELOAD_TRANSLATE_CHECKPOINT_EVENT ,


HRF_READ_FLOW_HOSTLESS_FAILURE_CHECKPOINT_EVENT ,
HRF_READ_FLOW_HOSTLESS_SAT_CNTL_READ_FAILURE_CHECKPOINT_EVENT ,


POP_FROM_RQ_CHECKPOINT_EVENT ,
EXIT_FROM_HALOOP_CHECKPOINT_EVENT ,
HR4K_PSR_CHECKPOINT_EVENT ,
HR_PSR_CHECKPOINT_EVENT ,


SET_EVENT_RC_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_RC_BUFFER_ADDR_CHECKPOINT_EVENT ,
SET_EVENT_RC_UNMOUNT_CHECKPOINT_EVENT ,
SET_EVENT_RC_UNMOUNT_ON_HOLD_CHECKPOINT_EVENT ,
SET_EVENT_RC_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_RC_DEACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_RC_TRY_TO_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_PSR_RC_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_RC_SEND_TO_HOST_CHECKPOINT_EVENT ,
SET_EVENT_RC_FETCH_DONE_CHECKPOINT_EVENT ,
SET_EVENT_RC_FFLBA_MISMATCH_CHECKPOINT_EVENT ,
SET_EVENT_RC_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_RC_DISABLE_SPLIT_STATE_CHECKPOINT_EVENT ,
SET_EVENT_RC_ENABLE_SPLIT_STATE_CHECKPOINT_EVENT ,



SET_EVENT_OVP_HW_FULL_SYNCH_DONE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_PARTIAL_SYNCH_DONE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_START_STREAM_WRITE_SYNCH_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_START_STREAM_RMW_SYNCH_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_SYNCH_STREAM_DONE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_ADMIN_Q_BLOCKED_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_PROCESS_CMD_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_DISPATCHER_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_ADMIN_Q_HANDLE_CMD_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_FLUSH_HAWA_STREAM_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_CHECK_STREAM_TLC_SYNCH_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_STREAM_HIT_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_PROCESS_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_DISPATCHER_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_TLC_FLUSH_HOOK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_LAST_ALLOC_HWDID_STREAM_CHECKPOINT_EVENT ,
SET_EVENT_OVP_STREAM_CHANGE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HW_RMW_HOOK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_RMW_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_HANDLE_ALIGNED_DALLOC_PROCESS_EVENT ,   SET_EVENT_OVP_HANDLE_ALIGNED_DALLOC_PROCESS_EVENT_END ,
SET_EVENT_OVP_HAWA_FLUSH_CALLBACK_CHECKPOINT_EVENT ,

SET_EVENT_OVP_FE_OREAD_FULL_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_FIND_MATCH_FLBA_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_NO_MATCH_FLBA_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_FIND_MATCH_LIST_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_FIND_MATCH_HWD_GROUPID_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SEND_HRF_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SEND_RLA_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_FULL_DONE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_CONTINUE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_START_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_MERGE_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_MERGE_SEND_TO_HOST_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_MERGE_CHECK_CONDITIONS_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_SHORT_DEBUG_DUMP_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_FULL_START_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_NO_CMD_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_HAWA_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_OVP_FE_OREAD_HAWA_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_OVP_ADMIN_CMD_WRITE_BUFFER_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_RPMB_ADMIN_CMD_WRITE_RPMB_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_RPMB_ADMIN_CMD_WRITE_RPMB_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_RPMB_FE_PROCESS_CMD_CHECKPOINT_EVENT ,
SET_EVENT_RPMB_SET_WRITE_COUNTER_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_RPMB_GET_WRITE_COUNTER_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_RPMB_SET_WRITE_COUNTER_CHECKPOINT_EVENT ,


SET_EVENT_DALOC_SAT_DALOC_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_DALOC_PAYLOAD_WRITE_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_DALOC_COMMAND_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_DALOC_PROCESS_HOST_CMD_CHECKPOINT_EVENT ,
SET_EVENT_DALOC_PROCESS_UGSD_REQUEST_CHECKPOINT_EVENT ,


SET_EVENT_OBM_BLOCK_LRM_CLEAR_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_OBM_ALLOC_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_OBM_CLOSE_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_OBM_BLOCK_LRM_SET_CHECKPOINT_EVENT ,
SET_EVENT_OBM_BLOCK_LRM_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_OBM_BLOCK_WL_CHECKPOINT_EVENT ,
SET_EVENT_OBM_BLOCK_WL_JB_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_OBM_BLOCK_SET_MOUNT_FIELDS_CHECKPOINT_EVENT ,
SET_EVENT_OBM_SET_OPEN_BLOCK_UGSD_CHECKPOINT_EVENT ,
SET_EVENT_OBM_SET_OPEN_BLOCK_GSD_CHECKPOINT_EVENT ,
SET_EVENT_OBM_ALLOC_SET_OPEN_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_OBM_GET_MB_PEC_CHECKPOINT_EVENT ,
SET_EVENT_OBM_CHECK_OVERFLOW1_CHECKPOINT_EVENT ,
SET_EVENT_OBM_CHECK_OVERFLOW2_CHECKPOINT_EVENT ,


SET_EVENT_OBM_INC_BLOCK_NTW_CHECKPOINT_EVENT ,


SET_EVENT_XORM_SWAP_LOAD_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_REBUILD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_XORM_RSQ_BAD_RQ_CHECKPOINT_EVENT ,
SET_EVENT_XORM_GET_PARITY_LOC_1_CHECKPOINT_EVENT ,
SET_EVENT_XORM_GET_PARITY_LOC_2_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_LOAD_SUCCESS_DRAM_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_LOAD_SUCCESS_NAND_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_LOAD_GROUP_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_RSQ_BRLC_PROCESS_EVENT ,   SET_EVENT_XORM_RSQ_BRLC_PROCESS_EVENT_END ,
SET_EVENT_XORM_RSQ_SKIP_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_QUEUED_1_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_QUEUED_2_CHECKPOINT_EVENT ,
SET_EVENT_XORM_COMPACTION_PROCESS_PROCESS_EVENT ,   SET_EVENT_XORM_COMPACTION_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_XORM_COMPACTION_ADD_SOURCE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_COMPACTION_SOURCE_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_PROCESS_PROCESS_EVENT ,   SET_EVENT_XORM_SWAP_PROCESS_PROCESS_EVENT_END ,
SET_EVENT_XORM_SWAP_NOP_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_CANCELLED_CHECKPOINT_EVENT ,
SET_EVENT_XORM_STORE_SKIPPED_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_EXECUTE_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_SEND_STORE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_SEND_LOAD_CHECKPOINT_EVENT ,
SET_EVENT_XORM_COMPACTION_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_XORM_PARITY_INVALIDATE_DRAM_CHECKPOINT_EVENT ,
SET_EVENT_XORM_PARITY_INVALIDATE_NAND_CHECKPOINT_EVENT ,
SET_EVENT_XORM_PARITY_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_BARRIER_SEND_CHECKPOINT_EVENT ,
SET_EVENT_XORM_SWAP_BARRIER_COMPLETION_CHECKPOINT_EVENT ,


SET_EVENT_READONLY_TRIGGER_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_SHD_OVERLAP_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_FNVM_START_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_FNVM_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_SHD_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_READONLY_MOUNT_CHECKPOINT_EVENT ,


SET_EVENT_RLA_INIT_CHECKPOINT_EVENT ,
SET_EVENT_RLA_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ALLOC_EMPTY_STREAM_CHECKPOINT_EVENT ,

SET_EVENT_RLA_TRACK_STM_PROCESS_EVENT ,   SET_EVENT_RLA_TRACK_STM_PROCESS_EVENT_END ,

SET_EVENT_RLA_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_EN_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_LOW_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_HW_STRM_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_STRM_REALLOC_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_READ_BEHIND_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_RACE_WITH_OVP_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_DIS_ALLOC_NEWSTRM_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_SAVE_HOST_READ_CMD_AND_CALC_MPD_CHECKPOINT_EVENT ,

SET_EVENT_RLA_READ_PEND_RSV_BUFFERS_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_DIS_PEND_RSV_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_DIS_NOT_RAM_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_DIS_ERASED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_DIS_OVP_UPDT_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_SEND_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_RLA_PS_SEND_READ_REQ_CHECKPOINT_EVENT ,
SET_EVENT_RLA_PS_MAILBOX_CALLBACK_CHECKPOINT_EVENT ,

SET_EVENT_RLA_OVP_READ_HANDLER_START_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_READ_START_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_UNALIGN_LBA_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_UNALIGN_LENGTH_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_STRM_NOT_FOUND_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_STRM_NO_OVP_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_BEHIND_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_AHEAD_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_NOT_ORDER_CMD_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_NO_FREE_CMD_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_TRANS_NOT_RAM_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_ERASED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_DIS_TRANS_CHANGED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_OVP_READ_QUEUED_CHECKPOINT_EVENT ,

SET_EVENT_RELEASE_TO_HOST_HIM_CHECKPOINT_EVENT ,
SET_EVENT_RELEASE_TO_HOST_NO_HIM_CHECKPOINT_EVENT ,
SET_EVENT_RELEASE_TO_HOST_NO_HIM_BREAK_CHECKPOINT_EVENT ,
SET_EVENT_RLA_SEND_HIM_RESPONSE_1_CHECKPOINT_EVENT ,
SET_EVENT_RLA_SEND_HIM_RESPONSE_2_CHECKPOINT_EVENT ,
SET_EVENT_ASYNC_TRANSFER_DONE_CHECKPOINT_EVENT ,

SET_EVENT_RLA_RSV_ISR_CALLED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_RSV_HANDLE_BUFFER_READY_CHECKPOINT_EVENT ,

SET_EVENT_RLA_HOST_CMD_DEQ_CHECKPOINT_EVENT ,
SET_EVENT_RLA_HOST_CMD_ENQ_CHECKPOINT_EVENT ,

SET_EVENT_RLA_COMP_READ_CMD_NOT_VER_CHECKPOINT_EVENT ,
SET_EVENT_RLA_COMP_READ_CMD_LENGTH_CHECKPOINT_EVENT ,
SET_EVENT_RLA_COMP_READ_PS_FAILED_CHECKPOINT_EVENT ,

SET_EVENT_RLA_ALLOCATE_CONTAINER_CHECKPOINT_EVENT ,
SET_EVENT_RLA_RELEASE_STREAM_PENDED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_RELEASE_CONAINER_STREAM_REL_CHECKPOINT_EVENT ,
SET_EVENT_RLA_RELEASE_STREAM_DONE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_NOT_RELEASED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_LENGTH_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_LENGTH_DET_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_LENGTH_0_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_LENGTH_0_DET_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_HIM_CMPL_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_HIM_CMPL_DET_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_HIM_CMPL_LOOP_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_STREAM_REL_HIM_CMPL_LOOP_DET_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_READ_TRANS_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CONAINER_RELEASE_TRIM_TRANSFER_BUFFER_CHECKPOINT_EVENT ,
SET_EVENT_RLA_TRIM_TRANSFER_BUFFER_CHECKPOINT_EVENT ,
SET_EVENT_RLA_TRANSLATE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_TRANSLATE_TRANSLATE_RES_CHECKPOINT_EVENT ,


SET_EVENT_RLA_ABORT_CHECK_IS_AHEAD_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_OVP_TRANS_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_PS_READ_RSP_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_OVP_UPDATE_AFTER_RSV_READY_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_LOW_RSC_AFTER_RSV_READY_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_READ_AHEAD_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_READ_AHEAD_END_CHECKPOINT_EVENT ,
SET_EVENT_RLA_DISCARDED_BY_HAWA_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_ALL_CHECKPOINT_EVENT ,

SET_EVENT_RLA_GBI_CALC_WINDOW_CHECKPOINT_EVENT ,

SET_EVENT_RLA_OVP_ENTR_REMOVE_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CALL_READ_AHEAD_CHECKPOINT_EVENT ,
SET_EVENT_RLA_AVOID_EXCEED_BUFFERS_CHECKPOINT_EVENT ,
SET_EVENT_RLA_DEBUG_TEST_HEADER_CHECKPOINT_EVENT ,
SET_EVENT_RLA_DEBUG_TEST_DATA_FFLBA_CHECKPOINT_EVENT ,
SET_EVENT_RLA_HLBA_MISMATCH_ADDRESS_CHECKPOINT_EVENT ,
SET_EVENT_RLA_DATA_MISMATCH_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_RSV_READY_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_CALL_RSV_CHECKPOINT_EVENT ,
SET_EVENT_RLA_READ_DIS_REQ_0_CHECKPOINT_EVENT ,
SET_EVENT_RLA_ABORT_WHILE_PEND_RSV_CHECKPOINT_EVENT ,
SET_EVENT_RLA_GBI_PROGRESS_CHECKPOINT_EVENT ,
SET_EVENT_RLA_SET_WRITE_ACTIVE_FLAG_CHECKPOINT_EVENT ,
SET_EVENT_RLA_RESET_WRITE_ACTIVE_FLAG_CHECKPOINT_EVENT ,
SET_EVENT_RLA_SKIP_2ND_ADDR_TRANSLATION_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHANGE_STREAM_ID_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_JBID_CHECKPOINT_EVENT ,
SET_EVENT_RLA_CHECK_JBID_MATCHED_CHECKPOINT_EVENT ,


SET_EVENT_RS_SCAN_FINISH_TOO_LONG_CHECKPOINT_EVENT ,
SET_EVENT_RS_SCAN_FINISH_TOO_FAST_CHECKPOINT_EVENT ,
SET_EVENT_RS_SCAN_TAKING_TOO_LONG_CHECKPOINT_EVENT ,
SET_EVENT_RS_REINIT_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT1_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT2_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT3_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT4_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT5_CHECKPOINT_EVENT ,
SET_EVENT_RS_MOUNT6_CHECKPOINT_EVENT ,
SET_EVENT_RS_INIT1_CHECKPOINT_EVENT ,
SET_EVENT_RS_INIT2_CHECKPOINT_EVENT ,
SET_EVENT_RS_SCAN_FINISH_CHECKPOINT_EVENT ,
SET_EVENT_RS_STOP_SCAN_DUE_TO_MAX_PAGES_CHECKPOINT_EVENT ,
SET_EVENT_RS_STOP_SCAN_DUE_TO_EXT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_RS_FINISHED_SCAN_OF_FEW_PAGES_CHECKPOINT_EVENT ,
SET_EVENT_RS_PAUSE_CHECKPOINT_EVENT ,
SET_EVENT_RS_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_RS_VALIDATE_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RS_RESET_SCAN_IDX_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_INTERRUPT_CHECKPOINT_EVENT ,
SET_EVENT_RS_TIMER_ISR_CHECKPOINT_EVENT ,
SET_EVENT_RS_TIMER_ISR_NO_SCHED_CHECKPOINT_EVENT ,
SET_EVENT_RS_EXT_EV_RCV_CHECKPOINT_EVENT ,
SET_EVENT_RS_DISABLED_IN_FG_OR_BG_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_NEXT_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RS_LONG_DELTA_CHECKPOINT_EVENT ,
SET_EVENT_RS_GET_CURR_TIME_CHECKPOINT_EVENT ,
SET_EVENT_RS_UPDATE_TIME_VARS_CHECKPOINT_EVENT ,
SET_EVENT_RS_PREPARE_DPS2_CHECKPOINT_EVENT ,
SET_EVENT_RS_ENABLE_FG_SCAN_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_SCAN_TARGET_TIME_CHECKPOINT_EVENT ,
SET_EVENT_RS_SCHEDULE_NEXT_CALL_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_NEXT_JB1_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_NEXT_JB2_CHECKPOINT_EVENT ,
SET_EVENT_RS_SET_NEXT_JP_CHECKPOINT_EVENT ,
SET_EVENT_RS_IS_BG_NEEDED1_CHECKPOINT_EVENT ,
SET_EVENT_RS_IS_BG_NEEDED2_CHECKPOINT_EVENT ,
SET_EVENT_RS_PSR_SCAN_REQ_CHECKPOINT_EVENT ,
SET_EVENT_RS_FG_RS_IN_FAST_READ_CHECKPOINT_EVENT ,
SET_EVENT_RS_FG_RS_IN_NORMAL_READ_CHECKPOINT_EVENT ,


SET_EVENT_RSQ_LOG_BLOCK_SCAN_REQ_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_RLC_REQ_REMOVED_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_LRM_CHECKPOINT_EVENT ,
SET_EVENT_NEW_RSQ_RLC_REQ_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_FILTER_UNALLOC_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_FILTER_REALLOC_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_FILTER_REALLOC_BLOCK_FMU_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_DISCARD_REQS_SHD_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_SET_FG_RS_READ_TH_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_TRIGGER_FG_RS_RLC_STEP_CHECKPOINT_EVENT ,
SET_EVENT_RSQ_BLOCK_RLC_REQ_CHECKPOINT_EVENT ,



SET_EVENT_MNT_START_CHECKPOINT_EVENT ,


SET_EVENT_MNT_STATE_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_HANDLE_LOG_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_READONLY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_NOTIFY_PS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_BML_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_SEND_DEVICE_HEALTH_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_XORM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_RLC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_SMART_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_FNVM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_CHECK_GSD_FLAG_CHECKPOINT_EVENT ,


SET_EVENT_MNT_STATE_GSD_MOUNT_OBM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_RSQ_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_MTM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_SAT_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_MVP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_PEM_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_GSD_MOUNT_RS_CHECKPOINT_EVENT ,


SET_EVENT_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_BML_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_EXTRACT_METADATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_OBM_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_CHECK_CS_NEEDED_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_SAT_MOUNT_UGSD_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_MOUNT_RSQ_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_XOR_BLOCK_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_MTM_BLOCK_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_HOST_BLOCK_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_MOUNT_MVP_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_MOUNT_RS_CHECKPOINT_EVENT ,


SET_EVENT_MNT_STATE_DR_CHECK_REQ_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_OPBS_REBUILD_XOR_PAR_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_LOAD_ON_BEGINNING_OF_ZONE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_ENABLE_READ_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_OPBS_BRLC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_LOAD_XOR_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_HWD_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_CONTROL_SYNC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_SYNC_ALL_VC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_MOUNT_COMPLETE_CHECKPOINT_EVENT ,


SET_EVENT_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE_CHECKPOINT_EVENT ,

SET_EVENT_MNT_HANDLE_DRD_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HANDLE_FLGP_RESPONSE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HANDLE_DRD_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_MNT_SF_HOST_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_MNT_SF_HOST_RECOVERY_DONE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_PERFORM_BRLC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_ALLIGN_HOST_BLCK_FER_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_WA_LGW_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_WA_FER_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_WA_DIFF_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_GOT_WA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_FLGP_RESP_END_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_FLGP_COMBINE_LGW_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_FLGP_COMBINE_FER_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_NAND_DEFECT0_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_NAND_DEFECT1_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_MOVE_FLGP_LGW0_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_MOVE_FLGP_LGW1_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_DALOC_SENT_RD_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_DALOC_READ_DONE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_HOST_RD_RES_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_FLAGS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_MARK_4_LATER_CHECKPOINT_EVENT ,
SET_EVENT_MNT_SET_LAST_VALID_JBA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_CALCULATE_LGW_JBA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_EXTRACT_FFLBA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_INIT_HEADER_PTRS_LIST_CHECKPOINT_EVENT ,
SET_EVENT_MNT_INIT_HEADER_PTRS_LIST_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_READ_AFTER_LGW_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_READ_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_READ_REALLOCATED_JB_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_READ_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_PROCESS_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_PROCESS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLER_SCHEDULED_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_DALOC_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_DALOC_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_START_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_ENTER_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_INVALID_FLBA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_VALID_FLBA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_RLC_STRT_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_RLC_STRT_LIST_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_RLC_BLCK_CHECKPOINT_EVENT ,
SET_EVENT_MNT_UGSD_RLC_BLCK_FULL_CHECKPOINT_EVENT ,
SET_EVENT_MNT_MOUNT_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_VALIDATE_B2B_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_INVALIDATE_LATE_B2B_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_INVALIDATE_NOW_B2B_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_DELAY_INVALIDATE_B2B_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_USE_B2B_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_RPMB_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_RPMB_LOSS1_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_RPMB_LOSS2_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_RPMB_LOSS3_CHECKPOINT_EVENT ,
SET_EVENT_MNT_HOST_RECOVERY_HANDLE_RPMB_LOSS4_CHECKPOINT_EVENT ,
SET_EVENT_MNT_STATE_PTTU_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_MNT_PTTU_TIMER_RESET_CHECKPOINT_EVENT ,


SET_EVENT_PWS_CHANGE_CHECKPOINT_EVENT ,
SET_EVENT_LPS_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_PWS_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_PWS_PS4_NOT_SUPPORTED_CHECKPOINT_EVENT ,
SET_EVENT_PWS_HANDLE_FWAI_DISALLOWED_CHECKPOINT_EVENT ,


SET_EVENT_DHM_ERASE_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_DHM_SEND_PEC_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_DHM_DIAG_SET_PEC_CHECKPOINT_EVENT ,


SET_EVENT_FNVM_NORMAL_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_PROCESS_HOST_CMD_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_UGSD_RECOVERY_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_ABORT_REQUESTED_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_NEXT_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_SAFE_TO_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_FINAL_CS_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FNVM_FINAL_CS_DONE_CHECKPOINT_EVENT ,


SET_EVENT_FLUSH_NV_START_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_NV_STOP_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_NV_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_NV_GET_PROGRESS_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_NV_DIAG_CHECKPOINT_EVENT ,



SET_EVENT_JBM_JBID_ALLOCATION_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_JBM_SWAP_COMPOSITION_CHECKPOINT_EVENT ,

SET_EVENT_JBM_JBID_ALLOCATED_CHECKPOINT_EVENT ,

#line 3253 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_JBM_JBID_ALLOCATED_HSLC_CHECKPOINT_EVENT ,
SET_EVENT_JBM_JBID_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_JBM_JBID_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_JBM_SECURE_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_JBM_SECURE_ERASE_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_JBM_UGSD_REALLOCATE_JB_CHECKPOINT_EVENT ,
SET_EVENT_JBM_JBID_ALLOCATION_IN_NBCS_CHECKPOINT_EVENT ,
SET_EVENT_JBM_REUSE_JB_CHECKPOINT_EVENT ,
SET_EVENT_JBM_RELEASED_JB_COMPOSITION_REQ_CHECKPOINT_EVENT ,


SET_EVENT_MBM_ALLOCATE_MB_CHECKPOINT_EVENT ,
SET_EVENT_MBM_RELEASE_MB_CHECKPOINT_EVENT ,
SET_EVENT_MBM_ERASE_MB_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_REC_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_PHY_BLOCK_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_NO_NEW_REC_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_NO_NEW_PHY_BLOCK_MOUNT_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_FLGP_RES_CHECKPOINT_EVENT ,
SET_EVENT_MBM_PEC_DBG_INCONSISTENT_CHECKPOINT_EVENT ,
SET_EVENT_MBM_PEC_DBG_NEW_CHECKPOINT_EVENT ,
SET_EVENT_MBM_RECOVERY_FOUND_NEW_DATA_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_READ_FROM_LIST_CHECKPOINT_EVENT ,
SET_EVENT_MBM_BLOCK_FLASH_FILL_CHECKPOINT_EVENT ,
SET_EVENT_MBM_META_DATA_READ_FROM_HEAP_CHECKPOINT_EVENT ,




SET_EVENT_MBM_RUNTIME_DECOMMISSION_CHECKPOINT_EVENT ,
SET_EVENT_MBM_UGSD_RECOVERY_DECOMMISSION_CHECKPOINT_EVENT ,

SET_EVENT_MBM_SYNC_DECOMMISSION_CHECKPOINT_EVENT ,
SET_EVENT_MBM_INC_PEC_MB_CHECKPOINT_EVENT ,
SET_EVENT_MBM_MNT_ASSERT_MB_MNTFIELDS_0_CHECKPOINT_EVENT ,
SET_EVENT_MBM_MNT_ASSERT_MB_MNTFIELDS_1_CHECKPOINT_EVENT ,
SET_EVENT_MBM_MNT_ASSERT_MB_PEC_CHECKPOINT_EVENT ,
SET_EVENT_MBM_MNT_ASSERT_MB_COMPOSITION_CHECKPOINT_EVENT ,
SET_EVENT_MBM_MNT_ASSERT_ALL_MB_PEC_CHECKPOINT_EVENT ,
SET_EVENT_MBM_FREE_METADIE_BLOCK_CHECKPOINT_EVENT ,
SET_EVENT_MBM_FREE_METADIE_BLOCK_REQ_RS_CHECKPOINT_EVENT ,
SET_EVENT_MBM_SKIP_REFILLREQUEST_CHECKPOINT_EVENT ,
SET_EVENT_MBM_RECALCULATE_PEC_STATS_CHECKPOINT_EVENT ,

#line 3304 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_PEM_CHANGE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PEM_ERASE_MB_SENT_CHECKPOINT_EVENT ,
SET_EVENT_PEM_ERASE_MB_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_PEM_ERASE_MB_COMPL_PER_MD_CHECKPOINT_EVENT ,

SET_EVENT_PEM_RESTORE_SEND_CHECK_ERASE_MB_CHECKPOINT_EVENT ,
SET_EVENT_PEM_RESTORE_MB_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PEM_UGSD_DETECT_CHECKPOINT_EVENT ,

SET_EVENT_PEM_POP_MIN_BY_DELTA_CHECKPOINT_EVENT ,
SET_EVENT_PEM_POP_MAX_BY_DELTA_CHECKPOINT_EVENT ,

SET_EVENT_PEM_SCTP_STATISTICS_CHECKPOINT_EVENT ,

#line 3322 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FMG_CTXT_COMP_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LRM_SET_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_RDY_QUEUE_ADD_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_RDY_QUEUE_REMOVE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_COMP_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_COMP_EXEC_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_FLOW_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_FLOW_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_FLOW_SET_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_FLOW_SET_UA_CHECKPOINT_EVENT ,
SET_EVENT_FMG_CTXT_FLOW_SET_RDY_QUEUE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LOCK_ACQUIRE_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LOCK_ACQUIRE_SUCCESS_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LOCK_ACQUIRE_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LOCK_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LOCK_SET_WEIGHT_CHECKPOINT_EVENT ,
SET_EVENT_FMG_UA_ALLOCATE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_UA_FREE_CHECKPOINT_EVENT ,
SET_EVENT_FMG_LRM_CLEAR_CHECKPOINT_EVENT ,


SET_EVENT_FQD_OUTQ_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FQD_OUTQ_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FQD_OUTQ_LRM_CHECKPOINT_EVENT ,
SET_EVENT_FQD_INQ_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FQD_INQ_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FQD_INQ_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_VALID_CNT_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_THRESHOLD_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_NEW_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_FQD_MBX_NEW_ARRIVED_CHECKPOINT_EVENT ,


SET_EVENT_EI_INJECT_CHECKPOINT_EVENT ,
SET_EVENT_EI_STATE_CONFIGURE_CHECKPOINT_EVENT ,
SET_EVENT_EI_STATE_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_EI_STATE_TERMINATE_CHECKPOINT_EVENT ,
SET_EVENT_EI_HOST_UECC_CHECKPOINT_EVENT ,
SET_EVENT_EI_FAILURE_REPORT_CHECKPOINT_EVENT ,
SET_EVENT_EI_INFRA_MAILBOX_ISR_CHECKPOINT_EVENT ,
SET_EVENT_EI_TIMESTAMP_CHECKPOINT_EVENT ,
SET_EVENT_EI_MB_REVIVE_CHECKPOINT_EVENT ,
SET_EVENT_EI_SCTP_CONFIGURE_DIRECT_INJECTIONS_CHECKPOINT_EVENT ,
SET_EVENT_EI_SCTP_DISABLE_DIRECT_INJECTIONS_CHECKPOINT_EVENT ,
SET_EVENT_EI_SCTP_GENERIC_DISPATCHER_CHECKPOINT_EVENT ,
SET_EVENT_EI_SET_RAND_SEED_FROM_LOG_CHECKPOINT_EVENT ,
SET_EVENT_EI_IV_UPDATE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_EI_CRC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_EI_NUM_EXPECTED_XOR_REQUESTS_INCREASE_CHECKPOINT_EVENT ,
SET_EVENT_EI_NUM_EXPECTED_XOR_REQUESTS_DECREASE_CHECKPOINT_EVENT ,
SET_EVENT_EI_XOR_CHANGE_TO_RECOVERABLE_CHECKPOINT_EVENT ,
SET_EVENT_EI_REAL_XOR_MASKED_CHECKPOINT_EVENT ,
SET_EVENT_EI_NESTED_EI_DURING_PF_CHECKPOINT_EVENT ,
SET_EVENT_DEC_EXPECTED_XOR_REQ_CHECKPOINT_EVENT ,
SET_EVENT_EI_RAND_READ_FAIL_LEVEL_CHECKPOINT_EVENT ,
SET_EVENT_EI_RAND_XOR_REBUILD_CHECKPOINT_EVENT ,
SET_EVENT_EI_RAND_EPWR_CHECKPOINT_EVENT ,
SET_EVENT_EI_BLOCK_CHECK_NESTED_CHECKPOINT_EVENT ,


SET_EVENT_FXH_SEND_TO_PS_CHECKPOINT_EVENT ,
SET_EVENT_FXH_EVENT_QUICK_TRACE_CHECKPOINT_EVENT ,
SET_EVENT_FXH_EVENT_FULL_START_CHECKPOINT_EVENT ,
SET_EVENT_FXH_EVENT_FULL_END_CHECKPOINT_EVENT ,


SET_EVENT_FXH_EVENT_FAILURE_REPORT_CHECKPOINT_EVENT ,



SET_EVENT_FTL_SMART_ASYNC_GET_COUNTER_MSG_CALLBK_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_RUN_TIME_SPARES_CHANGE_NOTIFY_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_RUN_TIME_AVG_PEC_CHANGE_NOTIFY_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_RUN_TIME_AVG_PEC_SLC_TLC_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_MBM_METADIE_AVG_PEC_CHANGE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_FTM_CHECK_SPARES_NOTIFY_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_FTM_CHECK_PEC_NOTIFY_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_RESET_SPARES_NOTIFY_FE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_RESET_PEC_NOTIFY_FE_CHECKPOINT_EVENT ,

SET_EVENT_GET_FREE_USER_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_GET_FREE_SYS_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_GET_SYS_PEC_EVENT_CHECKPOINT_EVENT ,



SET_EVENT_FTL_SMART_XBOX_VS_GET_INIT_PEC_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_XBOX_VS_GET_SLC_PEC_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_XBOX_VS_GET_TLC_PEC_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_XBOX_VS_GET_XBOX_PEC_COUNTERS_CHECKPOINT_EVENT ,

SET_EVENT_FTL_SMART_RECALCULATE_TBW_CHECKPOINT_EVENT ,
SET_EVENT_FTL_SMART_CALC_KSEC_WRITTEN_IN_PTN_CHECKPOINT_EVENT ,


SET_EVENT_DIAG_WRITE_AMPL_HOST_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_WRITE_AMPL_TEARDOWN_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_WRITE_AMPL_PARTITION_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_DISABLE_SLC_PRE_ERASE_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_WRITE_AMPL_TOTAL_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_WRITE_AMPL_PARTITION_OLD_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_SET_PEC_OFFSET_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_GET_TBW_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_SET_TBW_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_GET_TBR_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_SET_TBR_CHECKPOINT_EVENT ,
SET_EVENT_FTL_DIAG_SET_ROUTING_RULES_CHECKPOINT_EVENT ,
SET_EVENT_DIAG_SET_RS_DURATION_CHECKPOINT_EVENT ,


SET_EVENT_INDIRECT_CACHE_REG_CHECKPOINT_EVENT ,
SET_EVENT_LOAD_CACHE_CHECKPOINT_EVENT ,
SET_EVENT_FREE_CACHE_CHECKPOINT_EVENT ,
SET_EVENT_GET_CACHE_CHECKPOINT_EVENT ,
SET_EVENT_LOAD_CACHE_ACTION_CHECKPOINT_EVENT ,
SET_EVENT_LOAD_CACHE_READ_CHECKPOINT_EVENT ,
SET_EVENT_WR_CACHE_CHECKPOINT_EVENT ,


SET_EVENT_HSLC_INIT_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_PRELOAD_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_LOAD_PARAM_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CHK_LFULLNESS_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CALC_NHSLCALLOWED_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CALC_SCALE_HRDC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CHK_ENDURANCE_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_SEL_HARPLAN_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CHK_RNDBURSTLIMIT_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CHK_RLCSRC_MINVC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_CHK_ALLOWED_CHECKPOINT_EVENT ,
SET_EVENT_FTL_HSLC_PAUSE_CHECKPOINT_EVENT ,
SET_EVENT_FTL_HSLC_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_NUM_BLK_HRDC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_SET_MODE_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_CLOSE_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_REL_REPLACE_PTNID_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_BRLC_SWAP_ADD_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BLK_BRLC_SWAP_DEL_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_HRDC_CHK_FS_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_HRDC_SEL_SRC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_RLC_SELSTATIC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_RLC_SELDYNTLC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BKOPS_NEEDGC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BKOPS_SELSRC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_BKOPS_SELSRCTLC_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_INFO_SCTP_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_FEATURE_CONFIG1_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_FEATURE_CONFIG2_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_FEATURE_CONFIG3_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_FEATURE_CONFIG4_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_RND_BURST_CNT_RESET_CHECKPOINT_EVENT ,
SET_EVENT_HSLC_RECOVERY_CHK_BLKTYPE_OPBID_CHECKPOINT_EVENT ,
SET_EVENT_FTL_HSLC_UPDATE_MAX_PEC_CHECKPOINT_EVENT ,





SET_EVENT_HW_POLL_TIMER_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_HABM_DMA_SVCI_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_E2E_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_PRP_FETCH_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_PRP_OFFSET_ALIGN_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_DMA_AXI_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_DMA_OVERLAP_OTHER_ERR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_SFIFO_ADP_COMPLETION_HANDLING_CHECKPOINT_EVENT ,
SET_EVENT_E2E_SFIFO_FULL_CHECKPOINT_EVENT ,
SET_EVENT_PURGE_MF_FIFO_CHECKPOINT_EVENT ,
SET_EVENT_TRANSACTION_ERR_HANDLED_CHECKPOINT_EVENT ,
SET_EVENT_TRANSACTION_ERR_RECYCLED_CHECKPOINT_EVENT ,

SET_EVENT_FE_CC_CHANGE_DETECTED_DURING_LINK_DOWN_CHECKPOINT_EVENT ,
SET_EVENT_FE_LINKDOWN_CLEAR_INDICATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_RESET_HNVME_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_RESET_SKIP_DEACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_RESET_PROCESS_EVENT ,   SET_EVENT_FE_RESET_PROCESS_EVENT_END ,
SET_EVENT_FE_PERST_FLUSH_CHECKPOINT_EVENT ,
SET_EVENT_FE_SHUTDOWN_PROCESS_EVENT ,   SET_EVENT_FE_SHUTDOWN_PROCESS_EVENT_END ,
SET_EVENT_RESET_PERST_PROCESS_EVENT ,   SET_EVENT_RESET_PERST_PROCESS_EVENT_END ,
SET_EVENT_RESET_PERST_WHILE_PME_TURN_OFF_PROCESS_EVENT ,   SET_EVENT_RESET_PERST_WHILE_PME_TURN_OFF_PROCESS_EVENT_END ,
SET_EVENT_FLR_CRC_FATAL_ERR_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PME_TURNOFF_MESSAGE_RCV_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PME_TURNOFF_IN_D3_MSG_RCV_CHECKPOINT_EVENT ,
SET_EVENT_FLR_IRQ_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PWR_STATE_CHANGE_IRQ_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_CMD_TRANSACTION_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_NVME_FORMAT_OK_ABORTED_CHECKPOINT_EVENT ,
SET_EVENT_NVME_FORMAT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_ALL_COUNTERS_RESET_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_ASSERT_CHECKPOINT_EVENT ,
SET_EVENT_RESET_PERST_RE_ENABLE_IO_CHECKPOINT_EVENT ,


SET_EVENT_FE_PERST_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_PERST_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_PERST_FAKEPERST_CHECKPOINT_EVENT ,


SET_EVENT_SMART_ERR_COUNTER_RESET_CHECKPOINT_EVENT ,
SET_EVENT_SMART_ERR_COUNTER_RESET_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_MAC_HANG_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_CLEAN_DLM_Q_CHECKPOINT_EVENT ,
SET_EVENT_LINK_DOWN_AND_HOT_TOGETHER_CHECKPOINT_EVENT ,
SET_EVENT_PLP_MESSAGE_IN_CHECKPOINT_EVENT ,
SET_EVENT_PLP_STATISTICS_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_PLP_READ_FS_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PLP_SHUTDOWN_PROCESS_EVENT ,   SET_EVENT_PLP_SHUTDOWN_PROCESS_EVENT_END ,
SET_EVENT_PLP_GLOBALS_DEBUG_CHECKPOINT_EVENT ,
SET_EVENT_PLP_SKIP_CC_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_PMM_INTERNAL_SHUTDOWN_FAILED_PROCESS_EVENT ,   SET_EVENT_PMM_INTERNAL_SHUTDOWN_FAILED_PROCESS_EVENT_END ,
SET_EVENT_PERST_FLUSH_REQUIRED_CHECKPOINT_EVENT ,
SET_EVENT_PERST_FLUSH_INIT_CHECKPOINT_EVENT ,
SET_EVENT_HIM_INTR_CHECKPOINT_EVENT ,
SET_EVENT_PERST_FLUSH_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_IO_CMD_OUTSTANDING_CHECKPOINT_EVENT ,
SET_EVENT_ADMIN_CMD_OUTSTANDING_CHECKPOINT_EVENT ,
SET_EVENT_HA_QUEUE_CMD_OUTSTANDING_CHECKPOINT_EVENT ,
SET_EVENT_HIM_STATE_AT_RESET_CHECKPOINT_EVENT ,
SET_EVENT_UNEXPECTED_MAX_PAYLOAD_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_UNEXPECTED_MPS_OR_MRRS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_CHECK_SQTDB_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_FINISH_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_STOP_NON_RUNNING_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_ABORT_CHECKPOINT_EVENT ,


SET_EVENT_FE_EVENT_HANDLING_CHECKPOINT_EVENT ,
SET_EVENT_HA_CQM_FW_POP_CHECKPOINT_EVENT ,
SET_EVENT_HA_CQM_INTERRUPT_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_HAWA_INTERRUPT_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_PERST_FLUSH_EVENT_HANDLING_CHECKPOINT_EVENT ,


SET_EVENT_FE_INIT_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_CONTROLLER_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_CONTROLLER_READY_FOR_CMDS_CHECKPOINT_EVENT ,
SET_EVENT_ADMIN_FORMAT_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_FORMAT_FTL_ASYNCH_FORMAT_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CRITICAL_WARN_SET_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CRITICAL_WARN_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_EVENT_REGISTERED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_EVENT_REPORTED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_EVENT_INVALIDATED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_SECONDARY_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TOTAL_ERR_COUNT_RESET_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_FFU_REVISIONS_CHECKPOINT_EVENT ,
SET_EVENT_FLUF_FFU_REVISIONS_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ERROR_DECODED_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ERROR_DECODED_VBA_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ERROR_DECODED_CRC_UDATA_CHECKPOINT_EVENT ,
SET_EVENT_UECC_ERROR_CMD_REGISTERED_CHECKPOINT_EVENT ,
SET_EVENT_UECC_ERROR_CMD_UPDATED_CHECKPOINT_EVENT ,
SET_EVENT_UECC_CMD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_PRP_ERR_CMD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_E2E_DATA_XFER_ERR_CMD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_DATA_XFER_ERR_CMD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_SUCCESSFUL_CMD_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_CMD_AGING_INTERRUPT_CHECKPOINT_EVENT ,
SET_EVENT_CMD_AGING_INTERRUPT_SKIP_DUMP_CHECKPOINT_EVENT ,
SET_EVENT_SANITIZE_CMD_START_CHECKPOINT_EVENT ,
SET_EVENT_SANITIZE_OPERATION_PROCESS_EVENT ,   SET_EVENT_SANITIZE_OPERATION_PROCESS_EVENT_END ,
SET_EVENT_SANITIZE_RESUME_AFTER_RESET_CHECKPOINT_EVENT ,
SET_EVENT_DUI_LOG_HANDLING_CHECKPOINT_EVENT ,
SET_EVENT_DUI_LOG_PARAMS_CHECKPOINT_EVENT ,
SET_EVENT_DUI_START_DATA_COLLECTION_CHECKPOINT_EVENT ,
SET_EVENT_DUI_RS_BUFFERS_ALLOCATED_CHECKPOINT_EVENT ,
SET_EVENT_DUI_CALLBACK_RECEIVED_CHECKPOINT_EVENT ,
SET_EVENT_DUI_INFRA_REQUEST_SENT_CHECKPOINT_EVENT ,
SET_EVENT_DUI_FTL_REQUEST_SENT_CHECKPOINT_EVENT ,
SET_EVENT_DUI_TRANSFER_DONE_CHECKPOINT_EVENT ,
SET_EVENT_DUI_VALIDATE_CHECKPOINT_EVENT ,
SET_EVENT_TELEMETRY_LOG_HANDLING_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_ERR_DUMP_1_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_ERR_DUMP_2_CHECKPOINT_EVENT ,

SET_EVENT_SMART_HOSTWRITECMDS_DEBUG_CHECKPOINT_EVENT ,

SET_EVENT_CONTROLLER_INTERNAL_ACTIVATE_PROCESS_EVENT ,   SET_EVENT_CONTROLLER_INTERNAL_ACTIVATE_PROCESS_EVENT_END ,
SET_EVENT_SMART_GET_FTL_LOG_PTR_ERR_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_LOGICAL_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_PST_COMPL_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_PST_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_PST_ALREADY_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DRIVE_IN_ACTIVE_IDLE_MODE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_D3HOT_ENBALE_DPSSTARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_D3HOT_ENBALE_DPSSENT_CHECKPOINT_EVENT ,

SET_EVENT_FE_PLP_STATE_INVOKED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PLP_ASSERTED_BUT_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_FE_PLP_START_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_FE_PLP_PROCESS_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_COLD_BOOT_B2B_PERST_CHECKPOINT_EVENT ,
SET_EVENT_DETECTED_PERST_DURING_LINK_TRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_B2B_PERST_DETECT_WARM_BOOT_CHECKPOINT_EVENT ,
SET_EVENT_SMART_LOG_READ_COUNTER_CHECKPOINT_EVENT ,
SET_EVENT_SMART_LOG_WRITE_COUNTER_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_SET_MPS_MRRS_ABOVE_512B_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_SET_MPS_TO_128B_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_SET_MPS_ABOVE_128B_CHECKPOINT_EVENT ,
SET_EVENT_FE_FORCE_MPS_MRRS_CHECKPOINT_EVENT ,
SET_EVENT_FE_D3HOT_EVENT_QUEUED_TO_FIS_CHECKPOINT_EVENT ,
SET_EVENT_FE_WARM_BOOT_AFTER_DPS_CHECKPOINT_EVENT ,
SET_EVENT_FE_WARM_BOOT_AFTER_PERST_AND_CLKREQ_CHECKPOINT_EVENT ,
SET_EVENT_FE_FAT_ASS_ADD_AE_FOR_CIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_SET_FEAT_C0_CHECKPOINT_EVENT ,
SET_EVENT_FE_GET_FEAT_C0_CHECKPOINT_EVENT ,
SET_EVENT_FE_GET_PID_CHECKPOINT_EVENT ,
SET_EVENT_FE_C0_TRIGGER_FATAL_CHECKPOINT_EVENT ,
SET_EVENT_FE_FAT_ASS_READ_C1_LOG_CHECKPOINT_EVENT ,

SET_EVENT_FE_ENABLE_PMM_ON_PLP_CANCEL_CHECKPOINT_EVENT ,

SET_EVENT_FE_LTSSM_CHANGE_CHECKPOINT_EVENT ,

SET_EVENT_INVALID_CMD_START_CHECKPOINT_EVENT ,
SET_EVENT_CMD_RECYCLED_CHECKPOINT_EVENT ,

SET_EVENT_HA_SDM_INIT_CHECKPOINT_EVENT ,
SET_EVENT_CHANGE_RLA_GAPS_START_CHECKPOINT_EVENT ,
SET_EVENT_CHANGE_RLA_GAPS_END_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_RLA_GAPS_CHECKPOINT_EVENT ,

SET_EVENT_CURRENT_RLA_VUC_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_RLA_VU_NC_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_RLA_VUC_GM_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_RLA_VUC_GM_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_CURRENT_RLA_VUC_INIT_CHECKPOINT_EVENT ,


SET_EVENT_VERIFY_CMD_DEBUG_CC_UPDATE1_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_REQUEST_TO_FTL_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_RESPONSE_FROM_FTL_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_SMART_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_SMART_RUNTIME_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_UECC_CHECKPOINT_EVENT ,
SET_EVENT_VERIFY_CMD_DEBUG_UECC_SMART_CHECKPOINT_EVENT ,


SET_EVENT_SMART_CTRL_BUSY_TIME_WRAPPED_CHECKPOINT_EVENT ,
SET_EVENT_ADMIN_CMD_START_CHECKPOINT_EVENT ,
SET_EVENT_IO_CMD_START_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_SENT_HW_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_SENT_FW_CHECKPOINT_EVENT ,
SET_EVENT_CMD_NO_COMPLETION_SENT_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_REGISTERED_IN_DB_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_SENT_FROM_DB_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_NOT_SENT_FROM_DB_CHECKPOINT_EVENT ,
SET_EVENT_CMD_COMPLETION_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_ENABLE_DISABLE_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_SANITIZE_OUTSTANDING_IO_CHECKPOINT_EVENT ,
SET_EVENT_DUI_ACTIVE_IDLE_STOP_CHECKPOINT_EVENT ,
SET_EVENT_DUI_ACTIVE_IDLE_START_CHECKPOINT_EVENT ,

SET_EVENT_PMA_EQ_LINK_STAT0_REG_CHECKPOINT_EVENT ,
SET_EVENT_PMA_EQ_LINK_STAT1_REG_CHECKPOINT_EVENT ,
SET_EVENT_PMA_WA_LINK_STAT_REG_CHECKPOINT_EVENT ,


SET_EVENT_GOTOIDLE_GLOBAL_FETCH_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_GOTOIDLE_HABM_CH_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_GOTOIDLE_HA_PIPELINE_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_GOTOIDLE_HIM_SUBBLOCKS_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_GOTOIDLE_ALL_BLOCKS_IDLE_CHECKPOINT_EVENT ,

#line 3696 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_CROSSIP_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_SET_FEATURES_PMM_CHECKPOINT_EVENT ,
SET_EVENT_CLEAR_METADATA_LOG_CHECKPOINT_EVENT ,
SET_EVENT_NVM_HCMP_IO_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_NVM_HCMP_IO_INDEX_CHECKPOINT_EVENT ,
SET_EVENT_NVM_HCMP_IO_ITAG_STAT1_CHECKPOINT_EVENT ,
SET_EVENT_NVM_HCMP_IO_ITAG_STAT2_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_IRQ_STAT_AND_EN_CHECKPOINT_EVENT ,
SET_EVENT_RESET_HA_QUEUE_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_RESET_HAQ_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_FE_GET_CURRENT_PREVIOUS_CC_CHECKPOINT_EVENT ,
SET_EVENT_FE_CLEAR_CURRENT_PREVIOUS_CC_CHECKPOINT_EVENT ,
SET_EVENT_HA_QUEUE_PUSH_CHECKPOINT_EVENT ,
SET_EVENT_CROSS_IP_FLAG_SET_CHECKPOINT_EVENT ,
SET_EVENT_CMD_MDT_QUEUE_PARAMS_CHECKPOINT_EVENT ,
SET_EVENT_MANUAL_DATA_TRANSFER_CHECKPOINT_EVENT ,
SET_EVENT_SDM_DET_MESSAGE_SENT_CHECKPOINT_EVENT ,
SET_EVENT_SDM_REM_MESSAGE_SENT_CHECKPOINT_EVENT ,
SET_EVENT_HABM_FW_CHANNEL_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_SQ_CREATION_CHECKPOINT_EVENT ,
SET_EVENT_CQ_CREATION_CHECKPOINT_EVENT ,
SET_EVENT_DLEN_BPT_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_CMD_PRP_ENTRIES_CHECKPOINT_EVENT ,
SET_EVENT_PRP_LIST_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_FE_QUEUE_CMD_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_FE_DELETE_QUEUE_WAITLIST_ADD_CHECKPOINT_EVENT ,
SET_EVENT_FE_DELETE_QUEUE_DEFER_DELETED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DELETE_QUEUE_START_RESUME_DELETE_CHECKPOINT_EVENT ,
SET_EVENT_SAMPLED_HA_CTLR_BUSY_TIME_CHECKPOINT_EVENT ,
SET_EVENT_FE_SET_FEATURES_HOST_IDENTIFIER_CHECKPOINT_EVENT ,
SET_EVENT_CQ_FULL_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_FORCE_PCIE_XFER_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_AER_SECONDARY_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_AER_SECONDARY_TIMER_SUSPENDED_CHECKPOINT_EVENT ,
SET_EVENT_AER_NO_ROOM_FOR_REGISTER_CHECKPOINT_EVENT ,
SET_EVENT_HNVME_FWREGREQACCESS_PART_1_2_CHECKPOINT_EVENT ,
SET_EVENT_HNVME_FWREGREQACCESS_PART_2_2_CHECKPOINT_EVENT ,
SET_EVENT_FETCH_CONTROL_CHANGE_CHECKPOINT_EVENT ,
SET_EVENT_FETCH_CONTROL_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_DUPLICATE_CONTROLLER_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_REG_MON_CHECKPOINT_EVENT ,
SET_EVENT_HSQM_CMD_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_FIS_START_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_FIS_COMPLETE_ACTIVATE_CHECKPOINT_EVENT ,


SET_EVENT_DELL_HOST_METADATA_FILE_CREATED_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_FILE_EXISTED_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_WRITE_FILE_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_READ_FILE_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_FILE_SANITIZED_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_FILE_SANITIZE_FAILED_BUF_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_FILE_SANITIZE_FAILED_WRFS_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_SETFEATURE_CHECKPOINT_EVENT ,
SET_EVENT_DELL_HOST_METADATA_GETFEATURE_CHECKPOINT_EVENT ,
SET_EVENT_HOST_METADATA_OVERFLOW_CHECKPOINT_EVENT ,
SET_EVENT_HOST_METADATA_INIT_CHECKPOINT_EVENT ,
SET_EVENT_HOST_METADATA_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_ADD_ENTRY_MULTIPLE_ACTION_CNT_CHECKPOINT_EVENT ,
SET_EVENT_ADD_ENTRY_MULTIPLE_ACTION_A_ENC_CHECKPOINT_EVENT ,
SET_EVENT_ADD_ENTRY_MULTIPLE_ACTION_B_ENC_CHECKPOINT_EVENT ,
SET_EVENT_ADD_ENTRY_MULTIPLE_ACTION_C_ENC_CHECKPOINT_EVENT ,
SET_EVENT_DELETE_ENTRY_MULTIPLE_ACTION_ENC_CHECKPOINT_EVENT ,
SET_EVENT_DELETE_ENTRY_MULTIPLE_ACTION_ITERATION_ENC_CHECKPOINT_EVENT ,
SET_EVENT_GET_FEATURE_HM_CHECKPOINT_EVENT ,
SET_EVENT_HMD_FIND_ELEMENT_CHECKPOINT_EVENT ,
SET_EVENT_ADD_ENTRY_MULTIPLE_ACTION_ENC_CHECKPOINT_EVENT ,
SET_EVENT_HMD_COMMAND_RECIEVE_CHECKPOINT_EVENT ,
SET_EVENT_GET_FEATURE_HM_DELL_CHECKPOINT_EVENT ,
SET_EVENT_SCAN_DELETE_ENTRY_ACTION_ITERATION_HM_CHECKPOINT_EVENT ,
SET_EVENT_SCAN_ADD_REPLACE_ENTRY_ACTION_ITERATION_HM_CHECKPOINT_EVENT ,
SET_EVENT_HA_SYNC_HALT_HA_CHECKPOINT_EVENT ,
SET_EVENT_HA_SYNC_HALT_RESTORE_HA_CHECKPOINT_EVENT ,
SET_EVENT_HA_SYNC_HALT_HA_TO_CHECKPOINT_EVENT ,


SET_EVENT_FE_BOOT_PARTITION_READ_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_HANDLER_CALL_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_START_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_END_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_END_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_READ_END_BY_GSD_PLS_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_READ_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_DEFERRED_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_DEFER_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_XFER_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_FTL_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_START_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_END_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_FTL_READ_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_FTL_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_FW_DOWNLOAD_START_CHECKPOINT_EVENT ,
SET_EVENT_FW_DOWNLOAD_CLEANUP_CHECKPOINT_EVENT ,
SET_EVENT_BPDOWNLOAD_INIT_CHECKPOINT_EVENT ,
SET_EVENT_BPDOWNLOAD_PROGRESS_CHECKPOINT_EVENT ,
SET_EVENT_BPDOWNLOAD_FTL_WRITE_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_REPLACE_REQ_FTL_CS_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_REPLACE_BEFORE_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_REPLACE_AFTER_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_REPLACE_RPMB_LOCKED_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_REPLACE_DOWNLOAD_OUT_OF_ORDER_CHECKPOINT_EVENT ,
SET_EVENT_BPCOMMIT_ACTIVATE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_ENTER_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_PROCESS_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_GET_LOG_PAGE_AFTER_HOST_TRANSFER_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_DEALLOC_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_DEALLOC_R_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_DEALLOC_X_COMPLETE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_COPY_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_R_ALLOCAT_PTRS_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_X_ALLOCAT_PTRS_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_COPY_A_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_COPY_B_SIZE_CHECKPOINT_EVENT ,
SET_EVENT_BPREAD_COPY_C_SIZE_CHECKPOINT_EVENT ,



SET_EVENT_FE_IS_READY_FOR_NEW_CROSS_IP_OPERATION_CHECKPOINT_EVENT ,

SET_EVENT_PMA_WA_LINK_STAT_INTERRUPT_CHECKPOINT_EVENT ,
SET_EVENT_PMA_WA_LINK_STAT_EQUALIZATION_CHECKPOINT_EVENT ,
SET_EVENT_NOTIFY_LAST_DESC_CHECKPOINT_EVENT ,
SET_EVENT_NOTIFY_SFIFO_CHECKPOINT_EVENT ,
SET_EVENT_NOTIFY_START_CHECKPOINT_EVENT ,
SET_EVENT_NOFITY_CAM_INFO_CHECKPOINT_EVENT ,

SET_EVENT_RLA_BL_ALLOC_CHECKPOINT_EVENT ,
SET_EVENT_RLA_BL_START_INT_CHECKPOINT_EVENT ,
SET_EVENT_RLA_BL_FROM_INT_CHECKPOINT_EVENT ,
SET_EVENT_ABORT_CMD_FMTINPROG_CHECKPOINT_EVENT ,
SET_EVENT_AER_UNCORR_CHECKPOINT_EVENT ,
SET_EVENT_AER_CORR_CHECKPOINT_EVENT ,
SET_EVENT_LOG_LINK_STAT_CHECKPOINT_EVENT ,

SET_EVENT_FE_HOLD_RESTORE_DATA_ID_MSIX_TABLE_SAVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_MSIX_TABLE_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_SAVE_TO_AON_CHECKPOINT_EVENT ,
SET_EVENT_SAVE_CONTEXT_FOR_LPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_SUB_QUEUES_TABLE_SAVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_SUB_QUEUES_TABLE_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_COMP_QUEUES_TABLE_SAVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_COMP_QUEUES_TABLE_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_HNVME_REGS_SAVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_HNVME_REGS_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_NCR_REGS_SAVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOLD_RESTORE_DATA_ID_NCR_REGS_RESTORE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAL_RESTORE_TABLES_FROM_AON_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAL_SAVE_HAL_VARS_CHECKPOINT_EVENT ,
SET_EVENT_FE_COPY_GLOBALS_CHECKPOINT_EVENT ,
SET_EVENT_FE_COPY_SMART_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_COPY_NAMESPACE_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_COPY_PMM_CONTEXT_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_COPY_ASYNC_EVENT_COPY_CONTEXT_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_QUEUES_COPY_GLOBAL_DATA_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_PLP_COPY_INFO_CHECKPOINT_EVENT ,

#line 3855 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_HAL_RESTORE_HAL_VARS_CHECKPOINT_EVENT ,
SET_EVENT_FE_RESTORE_GLOBALS_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_SMART_RESTORE_SMART_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_RESTORE_NAMESPACE_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_RESTORE_PMM_CONTEXT_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_ASYNC_EVENT_RESTORE_CONTEXT_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_QUEUES_RESTORE_GLOBAL_DATA_CHECKPOINT_EVENT ,
SET_EVENT_FE_NVME_PLP_RESTORE_INFO_CHECKPOINT_EVENT ,

#line 3867 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_INTERRUPT_COALESCING_TIMER_INIT_CHECKPOINT_EVENT ,
SET_EVENT_INTERRUPT_COALESCING_TIMER_START_CHECKPOINT_EVENT ,
SET_EVENT_INTERRUPT_COALESCING_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_INTERRUPT_COALESCING_TIMER_STOP_CHECKPOINT_EVENT ,
SET_EVENT_INTERRUPT_COALESCING_TIMER_STOPPED_CHECKPOINT_EVENT ,

SET_EVENT_FIPS_RO_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FIPS_RO_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_FIPS_RO_SCTP_CHECKPOINT_EVENT ,

SET_EVENT_DST_ENDTEST_REASON_CHECKPOINT_EVENT ,


SET_EVENT_FE_FAST_SECURITY_CHECKPOINT_EVENT ,


SET_EVENT_GET_MULTI_MODE_CHECKPOINT_EVENT ,
SET_EVENT_MULTI_MODE_INIT_CHECKPOINT_EVENT ,
SET_EVENT_SUPPORT_MULTI_MODE_ID_CHECKPOINT_EVENT ,
SET_EVENT_LV_SET_PS3_PS4_CHECKPOINT_EVENT ,
SET_EVENT_LV_ABORT_PS3_PS4_CHECKPOINT_EVENT ,
SET_EVENT_LV_ABORT_D3HOT_PMM_TRANSITION_CHECKPOINT_EVENT ,
SET_EVENT_SET_MULTI_MODE_CHECKPOINT_EVENT ,


SET_EVENT_INTERRUPT_COALESCING_DEBUG_CHECKPOINT_EVENT ,

#line 3946 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_CC_CHANGE_AFTER_SHN_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ERROR_INJECTED_CHECKPOINT_EVENT ,
SET_EVENT_HABM_RELEASED_ADP_DESCRIPTOR_CHECKPOINT_EVENT ,
SET_EVENT_HABM_RELEASED_RS_RESOURCE_CHECKPOINT_EVENT ,
SET_EVENT_HABM_E2E_ADP_MATCH_FOUND_CHECKPOINT_EVENT ,
SET_EVENT_HABM_E2E_ADP_REGISTERED_CHECKPOINT_EVENT ,
SET_EVENT_E2E_SFIFO_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ERROR_HANDLE_SFIFO_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_E2E_NUM_ENTRIES_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_E2E_RELEASE_ADP_ENTRIES_CHECKPOINT_EVENT ,
SET_EVENT_E2E_HABM_CH_CLEANUP_CHECKPOINT_EVENT ,
SET_EVENT_E2E_EN_CH_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_HABM_SFIFO_ADP_INFO_CHECKPOINT_EVENT ,
SET_EVENT_PRP_VERIFY_UNALIGNED_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ADP_SCAN_ELEMENT_CHECKPOINT_EVENT ,
SET_EVENT_E2E_ADP_NO_RELEASE_DUPLICATES_CHECKPOINT_EVENT ,
SET_EVENT_E2E_HABM_HALT_SFIFO_DW0_CHECKPOINT_EVENT ,
SET_EVENT_E2E_HABM_HALT_SFIFO_DW1_CHECKPOINT_EVENT ,
SET_EVENT_E2E_HABM_DE_HALT_CHECKPOINT_EVENT ,


SET_EVENT_SMART_SKIP_CS_IN_RO_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CS_DEFERRED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_STOPPED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_TIMER_RESUMED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CS_DONE_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_CMD_REGISTERED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_EVENT_SLOT_ERASED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_AER_EVENT_TYPE_MASK_CHANGE_CHECKPOINT_EVENT ,
SET_EVENT_SMART_UECC_INCREMENTED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CS_REQUESTED_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_GET_DU_WRITTEN_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_GET_DU_READ_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_SET_DU_WRITTEN_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CAN_SET_DU_WRITTEN_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_SET_HOST_WRITTEN_CHECKPOINT_EVENT ,
SET_EVENT_SMART_LARGE_DUW_COUNT_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_GET_RESET_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CANT_GET_PMM_COUNTERS_CHECKPOINT_EVENT ,
SET_EVENT_SMART_CARRYOVER_INIT_CHECKPOINT_EVENT ,
SET_EVENT_SMART_STARTING_CARRYOVER_CHECKPOINT_EVENT ,
SET_EVENT_SMART_DURING_DPS_CHECKPOINT_EVENT ,


SET_EVENT_FE_DAS_START_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_DAS_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DAS_SET_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_DAS_HANDLE_TIMER_CHECKPOINT_EVENT ,


SET_EVENT_FLUSH_SENT_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_VALID_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_ERR_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_SENT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FLUSH_ENTRY_POINT_CHECKPOINT_EVENT ,


SET_EVENT_ATLASR_777_ID_CHECKPOINT_EVENT ,
SET_EVENT_ATLASR_777_SCTP_SET_CHECKPOINT_EVENT ,
SET_EVENT_ATLASR_777_SCTP_GET_CHECKPOINT_EVENT ,


SET_EVENT_FNV_RECIEVED_CHECKPOINT_EVENT ,
SET_EVENT_FNV_STATUS_RECIEVED_CHECKPOINT_EVENT ,
SET_EVENT_FNV_STATUS_COMP_CHECKPOINT_EVENT ,
SET_EVENT_FNV_GLOBAL_STRUCT_CHECKPOINT_EVENT ,
SET_EVENT_FNV_REQ_FOR_LP_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_FNV_ALREDY_RUNNING_CHECKPOINT_EVENT ,
SET_EVENT_FNV_COMPLETE_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FNV_STATUS_STOP_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FNV_MAKING_LP_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_FNV_NVME_START_HANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FNV_NVME_VALIDATION_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_FNV_THERMAL_CHECKPOINT_EVENT ,
SET_EVENT_FNV_NVME_SCTP_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_HAWA_SET_FLUSH_MODE_CHECKPOINT_EVENT ,
SET_EVENT_HAWA_SET_NORM_FLUSH_MODE_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_PCIE_DUMP_PMCSR_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_LINK_DEVICE_CS_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_AER_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_LTR_L1PMSUBSTATES_CHECKPOINT_EVENT ,


SET_EVENT_FE_DBG_PCIE_WRAP_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_PCIE_LM_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_PCIE_LM_LINKDOWN_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_REGS_DUMP_CHECKPOINT_EVENT ,

#line 4048 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_RS_BUFF_ALLOC_START_CHECKPOINT_EVENT ,
SET_EVENT_RS_BUFF_ALLOC_END_CHECKPOINT_EVENT ,
SET_EVENT_PARSE_PAYLOAD_START_CHECKPOINT_EVENT ,
SET_EVENT_HOST_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_FLAT_LBA_TRANSLATION_CHECKPOINT_EVENT ,
SET_EVENT_UNALIGNED_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_ALIGNED_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_PARSE_PAYLOAD_DONE_CHECKPOINT_EVENT ,
SET_EVENT_RMW_UPDATE_HEADERS_CHECKPOINT_EVENT ,
SET_EVENT_HOST_RANGES_NUM_CHECKPOINT_EVENT ,
SET_EVENT_HOST_DMRL_CHECKPOINT_EVENT ,


SET_EVENT_WUC_HOST_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_WUC_RMW_PREP_RANGE_CHECKPOINT_EVENT ,
SET_EVENT_WUC_PARSING_DONE_CHECKPOINT_EVENT ,


SET_EVENT_FE_FIS_Q_ENTRY_ADDED_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_Q_ENTRY_REMOVED_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_Q_HEAD_EXECUTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_Q_POST_FUNCTION_CALLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_Q_EVALUATION_ATTEMPT_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_CROSS_IP_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_FIS_PMM_CALLBACK_RECEIVED_CHECKPOINT_EVENT ,


SET_EVENT_FE_RETURN_HAQ_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAQ_FIFO_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAQ_GET_NEXT_FIFO_ADDRESS_CHECKPOINT_EVENT ,

SET_EVENT_HNVME_INTERRUPT_EVENTS_CHECKPOINT_EVENT ,
SET_EVENT_HA_INTERRUPT_EVENTS_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_INTERRUPT_EVENTS_CHECKPOINT_EVENT ,
SET_EVENT_FE_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_LINK_SQ_TAIL_DB_UPDATE_DISABLE_ASPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_PCIE_LINK_IN_L1_ENABLE_L0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_LINK_L1IDLE_L0_DISABLE_ASPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PCIE_WRAP_LPM_REGS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DUMP_PCIE_WRAP_REGS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PCIE_WRAP_LPM_LINK_CHECKPOINT_EVENT ,


SET_EVENT_FE_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_TIMER_CANCELLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_AON_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_AON_TIMER_CANCELLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_AON_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_TIMERS_EXPIRED_REFIRE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_L1_PLUS_CPM_WA_CHECKPOINT_EVENT ,


SET_EVENT_DST_CMD_RECEIVED_CHECKPOINT_EVENT ,
SET_EVENT_DST_START_ABORT_CMD_CHECKPOINT_EVENT ,
SET_EVENT_DST_ALLOCATE_RS_BUFFERS_CHECKPOINT_EVENT ,
SET_EVENT_DST_RELEASE_RS_BUFFERS_CHECKPOINT_EVENT ,
SET_EVENT_DST_EXECUTION_START_CHECKPOINT_EVENT ,
SET_EVENT_DST_START_HP_PS0_QUERY_CHECKPOINT_EVENT ,
SET_EVENT_DST_RESTART_HP_PS0_QUERY_CHECKPOINT_EVENT ,
SET_EVENT_DST_RESTART_AFTER_XIP_HP_PS0_QUERY_CHECKPOINT_EVENT ,
SET_EVENT_DST_HP_PS0_READY_CHECKPOINT_EVENT ,
SET_EVENT_DST_RAM_SMART_SEGMENTS_START_CHECKPOINT_EVENT ,
SET_EVENT_DST_TEST_TIME_CHECKPOINT_EVENT ,
SET_EVENT_DST_EXECUTION_RESTART_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDV_SEGMENT_START_CHECKPOINT_EVENT ,
SET_EVENT_MDV_SUBSTEP_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDV_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDV_ERROR_RETURN_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDV_STATUS_OK_RETURN_CHECKPOINT_EVENT ,
SET_EVENT_DST_NVMI_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_DST_NVMI_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_NVMI_ERROR_RETURN_CHECKPOINT_EVENT ,
SET_EVENT_DST_NVMI_STATUS_OK_RETURN_CHECKPOINT_EVENT ,
SET_EVENT_DST_RAM_CHECK_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_SMART_CHECK_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_DRIVE_LIFE_SMART_SEGMENTS_START_CHECKPOINT_EVENT ,
SET_EVENT_DST_DRIVE_LIFE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_SMART2_CHECK_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_SMART_CHECK_CHECKPOINT_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDI_CHECKPOINT_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDV_CHECKPOINT_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDI_SEGMENTS_START_CHECKPOINT_EVENT ,
SET_EVENT_MDI_READ_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDI_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_DST_READ_ONLY_EXIT_CHECKPOINT_EVENT ,
SET_EVENT_DST_MDI_ERROR_RETURN_CHECKPOINT_EVENT ,
SET_EVENT_DST_AER_SENT_CHECKPOINT_EVENT ,
SET_EVENT_DST_AER_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_DST_GET_LOG_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_DST_EXECUTION_END_CHECKPOINT_EVENT ,
SET_EVENT_DST_EVENT_AFTER_TERMINATION_CHECKPOINT_EVENT ,
SET_EVENT_DST_TIMEOUT_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_DST_WAITING_ON_XIP_SEMAPHORE_CHECKPOINT_EVENT ,
SET_EVENT_DST_ACQUIRING_XIP_SEMAPHORE_CHECKPOINT_EVENT ,
SET_EVENT_DST_ACQUIRING_XIP_SEMAPHORE_AT_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_DST_REQ_FOR_LP_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_DST_MAKING_LP_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_DST_REQ_FOR_PSID_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_DST_MAKING_PSID_CALLBACK_CHECKPOINT_EVENT ,
SET_EVENT_DST_WAIT_CALLBACK_CLEANUP_CHECKPOINT_EVENT ,
SET_EVENT_WZSL_EXCEED_CHECKPOINT_EVENT ,
SET_EVENT_WUSL_EXCEED_CHECKPOINT_EVENT ,

SET_EVENT_VSL_EXCEED_CHECKPOINT_EVENT ,



SET_EVENT_GET_LOG_PAGE_START_CHECKPOINT_EVENT ,

SET_EVENT_GET_LOG_PAGE_END_NSID_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_END_ID_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_ENDURANCE_ALL_CHECKPOINT_EVENT ,
SET_EVENT_ENDURANCE_IDENTIFY_CHECKPOINT_EVENT ,

SET_EVENT_GLP_RS_BUFFERS_ALLOCATED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_RS_BUFFERS_ALLOCATED_CHECKPOINT_EVENT ,

SET_EVENT_GLP_VS_PARAMS_TRANSFORMED_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_OFFSET_CHECKPOINT_EVENT ,
SET_EVENT_ERR_INF_LOG_ADD_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_ERR_INF_LOG_NEW_ENTRY_CB_CHECKPOINT_EVENT ,
SET_EVENT_ERR_INF_LOG_GET_LOG_PAGE_CHECKPOINT_EVENT ,
SET_EVENT_ERR_INFO_LOG_INIT_CHECKPOINT_EVENT ,
SET_EVENT_SANITIZE_LOG_ENTRY_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_SANITIZE_LOG_ENTRY_TIMES_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_D3HOTWAKEUP_CHECKPOINT_EVENT ,
SET_EVENT_FE_COMMIT_COMPLETION_CHECKPOINT_EVENT ,

SET_EVENT_FE_SCTP_OPCODE_ERRCNTVAL_CHECKPOINT_EVENT ,
SET_EVENT_FE_SCTP_ENTRY_ERRCNT_CHECKPOINT_EVENT ,


SET_EVENT_PEL_ALLOCATE_FTL_LOG_SPACE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_CLEAR_FTL_STORAGE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SANITIZE_START_EVENT_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SANITIZE_START_EVENT_LOG_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SANITIZE_COMPLETION_ENTERED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FORMAT_START_EVENT_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FORMAT_START_EVENT_LOGGING_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FORMAT_COMPLETION_ENTERED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FAKE_FORMAT_COMPLETION_FAILURE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_COMMIT_ACTIVATION_FROM_INFRA_CHECKPOINT_EVENT ,
SET_EVENT_PEL_COMMIT_ACTIVATION_FROM_GLOBALS_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SETTING_LAST_INIT_TYPE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_POWER_RESET_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_POWER_RESET_LOG_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_TIMESTAMP_ENTERED_CHECKPOINT_EVENT ,

SET_EVENT_PEL_TIMESTAMP_ENTERED_DBG_CHECKPOINT_EVENT ,

SET_EVENT_PEL_FW_COMMIT_ENTERED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_CHECK24HRELAPSE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_24HR_ELAPSED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_ENTER_SMART_SNAPSHOT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SMART_SNAPSHOT_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SMART_SNAPSHOT_LOG_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FW_COMMIT_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FW_COMMIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SMART_SNAPSHOT_ENTERED_BY_SCTP_CHECKPOINT_EVENT ,
SET_EVENT_PEL_HWERR_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_HWERR_LOG_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_GET_LOG_PAGE_CALLED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_CONTEXT_HEADER_CREATED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_CONTEXT_EVENT_CREATED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FTL_MOUNT_NOTIFICATION_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FTL_MOUNT_COMPLETE_CALL_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_SUPRESSION_START_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_SUPRESSION_END_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_INSIDE_CHECK_FOR_EVENT_SUPRESSION_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_NOT_ENOUGH_RECENT_EVENTS_FOR_SUPPRESSION_CHECKPOINT_EVENT ,
SET_EVENT_PEL_CHECK_SUPPRESSION_SAMPLE_CONSISTENCY_CHECKPOINT_EVENT ,
SET_EVENT_PEL_ADD_TO_HOLDING_QUEUE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_REMOVE_FROM_HOLDING_QUEUE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_HOLDING_QUEUE_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_PEL_THERMAL_EXCURSION_LOGGING_ENTERED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_THERMAL_EXCURSION_LOGGING_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_GET_LOG_PAGE_CONTEXT_FLAG_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_PEL_GET_LOG_PAGE_CONTEXT_RELEASE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INIT_DONE_AFTER_RESET_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_NVME_PELOG_PREPAREFORFORMATCOMPLETIONEVENT_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_NVME_PELOG_CLEARFORMATINPROGRESSFLAG_CHECKPOINT_EVENT ,
SET_EVENT_PEL_RE_INIT_FOR_FFU_CONFLICT_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_PELOG_STORAGE_INIT_1_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_PELOG_STORAGE_INIT_2_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INSIDE_PELOG_STORAGE_INIT_3_CHECKPOINT_EVENT ,
SET_EVENT_PEL_INIT_FOR_IA_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_FILL_CONTEXT_DBG_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_FILL_CONTEXT_DBG1_CHECKPOINT_EVENT ,
SET_EVENT_PEL_EVENT_FILL_CONTEXT_DBG2_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SET_FEATURES_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_ALLOCATED_TEMP_STORAGE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_SET_FEATURES_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_COPY_FROM_TEMP_SF_STORAGE_CHECKPOINT_EVENT ,
SET_EVENT_PEL_COPIED_SET_FEATURE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PEL_FTL_LOG_NOT_READY_FOR_SET_FEATURES_CHECKPOINT_EVENT ,
SET_EVENT_PEL_CONTROLLER_TELEMETRY_LOGGED_CHECKPOINT_EVENT ,
SET_EVENT_PEL_TELEMETRY_CREATED_LOG_FAILED_CHECKPOINT_EVENT ,


SET_EVENT_ADD_FW_HABM_DESC_CHECKPOINT_EVENT ,




















SET_EVENT_COMMIT_INFRA_STATUS_CHECK_CHECKPOINT_EVENT ,


SET_EVENT_DITT_INPUTS_CHECKPOINT_EVENT ,
SET_EVENT_HCTM_INPUTS_CHECKPOINT_EVENT ,
SET_EVENT_TT_COMPARE_AGAINST_DEFAULTS_CHECKPOINT_EVENT ,
SET_EVENT_DITT_IGNORE_ZERO_VALUES_CHECKPOINT_EVENT ,
SET_EVENT_TT_COMPARE_MAX_MIN_CHECKPOINT_EVENT ,
SET_EVENT_DITT_UPDATE_HCTM_VALUES_CHECKPOINT_EVENT ,
SET_EVENT_HCTM_UPDATE_DITT_VALUES_CHECKPOINT_EVENT ,

#line 4296 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_PMM_PROCESS_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PMM_PST_ABORT_ACTIVE_FLAG_SET_CHECKPOINT_EVENT ,
SET_EVENT_PMM_EVENT_ACTIVE_FLAG_SET_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_WAKEUPEVENT_LINKINL0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_ENABLE_SQTAILDBUPDATE_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_ENABLE_GLOBAL_QUEUE_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_RESET_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SHUTDOWN_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_INTERNAL_STATECHANGE_CHECKPOINT_EVENT ,
SET_EVENT_FE_HNVME_IDLE_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCU_DISABLE_ALL_TIMERS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_OPER_PST_RTOS_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_DPS_TRANS_RTOS_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_ABORT_PST_RTOS_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_ADMIN_CMD_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CTLR_SHUTDOWN_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_CTLR_RESET_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_CTLR_SUBSYSEM_RESET_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_PCIE_RESET_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_IN_PROGRESS_ON_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_WAKE_UP_FROM_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_AER_QUEUED_ON_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CONTINUE_LPM_D0_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_LPM_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_D3HOT_ON_REQUEST_AER_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_D3HOT_BLOCKED_AER_CLEAR_CHECKPOINT_EVENT ,
SET_EVENT_FE_D3HOT_PM_D3HOT_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CONTINUE_TO_LPM_D0_ACTIVE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_SUBQ_TAIL_DB_IRQ_ALREADY_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAL_SUBQ_TAIL_DB_IRQ_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HNVME_SUBQ_TAIL_DB_IRQ_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAL_SUBQ_TAIL_DB_IRQ_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HNVME_SUBQ_TAIL_DB_IRQ_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HAL_SUBQ_TAIL_DB_IRQ_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HNVME_SUBQ_TAIL_DB_IRQ_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_SUBQ_TAIL_DB_IRQ_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_SUBQ_TAIL_DB_IRQ_ENABLING_RULES_NOT_MET_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_SUBQ_TAIL_DB_IRQ_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ADMIN_QUEUE_CMD_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_IO_QUEUES_CMD_FETCH_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_LPM_HOST_INITIATED_SETF_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_UPDATE_LPM_STATE_HOST_INITIATED_SETF_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_UPDATE_LPM_STATE_HOST_INITIATED_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_SET_FEATURES_PM_NON_OPER_POWER_STATE_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_TRANSITION_WAS_ABORTED_BY_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_D3HOT_PM_NON_OPER_POWER_STATE_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_D3HOT_QUEUE_PST_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_FE_SKIPPING_D3HOT_PST_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_FE_IGNORE_D3HOT_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_START_LOW_POWER_MODE_ENTRY_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_START_D3HOT_LOW_POWER_MODE_ENTRY_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_START_OPERATIONAL_POWER_STATE_TRANSITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_START_OPERATIONAL_PST_COMPL_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PSTHANDLER_DET_CTLR_BSY_TIME_CHNG_ABRT_LPM_ENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PSTHANDLER_LPM_ENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PSTHANDLER_INVALID_TIMER_EXPIRY_ABORT_LPM_ENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_STARTED_LPM_ENTRY_SYNTHETIC_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_SYNTHETIC_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CTLR_ENABLE_COMPL_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_BKOPS_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_RESET_CTLR_COMPL_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENT_HIM_IDLE_CHECK_TIMER_EXPIR_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_SYNTHETIC_DELAY_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_SYNTHETIC_DELAY_EXITED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_SYNTHETIC_DELAY_CANCELED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_SYNTHETIC_DELAY_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_BKOPS_DURATION_TIMER_EXPIRATION_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_WAKEUP_COMPL_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_COMPL_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_SCHEDULED_WHEN_FE_HAS_NO_CMDS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_HIM_IDLE_CHECK_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_L12_REVERT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_DPS_RESET_OR_SHUTDOWN_EVENT_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_EXECUTED_DPS_SEQUENCE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CAN_DPS_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_ADMIN_QUEUE_FETCH_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PCIE_LINK_IN_VALID_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PCIE_LINK_TRANS_FROM_L1_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PCIE_LINK_TRANS_FROM_L1_IDLE_ENABLE_L0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ABORT_D3HOT_ENBALE_STAGINGTOSTART_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_LTR_PCIE_LINK_INVALID_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SEND_LTR_ENABLE_TRANSITION_FAILED_LINK_IN_L2_CHECKPOINT_EVENT ,


SET_EVENT_FE_PM_LPM_DPS_SEQ_PCIE_LNK_TRANS_TO_L0_WAIT_FOR_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_CHECK_ADMIN_QUEUE_FOR_SQ_DB_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_PCIE_LINK_TRANS_FROM_L1_IDLE_TO_L0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_INITIATE_ASPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_INITIATE_PCIPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PCIE_L12_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_STORE_TO_RET_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_RESTORE_FROM_RET_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_MAC_SHUTOFF_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_START_STORE_CHECKPOINT_EVENT ,
SET_EVENT_START_STORE_FE_HOLD_CHECKPOINT_EVENT ,



SET_EVENT_FE_PM_REVERT_LPM_MODE_SEQUENCE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_DPS_TRANS_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_D3HOT_DETECTED_AT_TRANSITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_LOGICAL_COMPL_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_LTR_MSG_SENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_MAIN_CPU_DPS_PHYSICAL_INITIATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_REGRET_WINDOW_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_WAITING_FOR_ABORT_CMPL_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_ABORT_COMPL_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PSTHANDLER_VALID_LPM_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_WAKEUP_IO_CMD_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_WAKEUP_ADMIN_CMD_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_STAGING_TO_LP_HOST_IO_DB_UPDATE_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_STAGING_TO_LP_HOST_ADMIN_DB_UPDATE_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_CHECK_HOST_ACTION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HOST_IO_DB_UPDATE_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HOST_QUEUE_DB_UPDATE_DET_WAIT_4_ABRT_TO_COMPL_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DIS_ALL_TIMERS_CHECKPOINT_EVENT ,


SET_EVENT_FE_PMM_D3HOT_ACTIVE_TRUE_DPSTSTARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_D3HOT_ACTIVE_TRUE_DPSSENT_CHECKPOINT_EVENT ,


SET_EVENT_FE_PMM_BKOPS_COMPLETED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_QUERYED_QUEUES_SQ_TAIL_DB_INTR_CHECKPOINT_EVENT ,

SET_EVENT_FE_PMM_LTR_MSG_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LTR_MSG_MONITOR_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LTR_MSG_NOT_SENT_IN_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ENABLE_AUTO_ASPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DISABLE_AUTO_ASPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LTR_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_NAMESPACE_SET1_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_NAMESPACE_SET2_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LTR_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SET_LTR_SENSE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_INIT_LTR_FLAG_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_NO_IO_CMD_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_IO_SQTDB_UPDATED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ADMIN_SQTDB_UPDATED_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HIM_READY_TO_ENTER_LPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_VALIDATE_LINK_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_GEN_LTR_MESSAGE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_SQTDB_UPDATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SET_NO_IO_CMD_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_AUTO_ASPM_L1_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_AUTO_ASPM_L12_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ASPM_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ASPM_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_PCIE_LINK_L1_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_PCIE_LINK_L12_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_SKIP_LINK_L1_IDLE_DUE_TO_SQ_DB_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_PCIE_LINK_L0_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_PCIE_PWR_STATE_CHNG_EVENT_RCVD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_NOIO_SQTAIL_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SQTDB_UPDATE_IRQ_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SQTDB_UPDATE_IRQ_STAUTS_CHECKPOINT_EVENT ,
SET_EVENT_FE_LTSSM_CHANGE_SKIPPED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HOST_ENABLED_ASPM_L12_CHECKPOINT_EVENT ,
SET_EVENT_FE_D3_ON_SETF_PMM_CHECKPOINT_EVENT ,
SET_EVENT_FE_SETF_ON_SETF_PMM_CHECKPOINT_EVENT ,

SET_EVENT_FE_PMM_DETECTED_SQ_TAIL_DB_UPDATES_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SEND_TIMER_MSG_TO_AON_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SEND_MSG_TO_AON_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_APST_NON_OPERATIONAL_TIMER_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_SERVICE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_APST_TABLE_ENTRY_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_AUTO_ASPM_L1_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_INIT_APST_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_APST_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_APST_EVALUATE_APST_TIMERS_TO_RESTART_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_APST_DPS32_EVALUATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_STATE_CHECKPOINT_EVENT ,
IN_PROCESS_BKOPS_STOPPED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_NEEDED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BKOPS_COMPL_NOT_RCVD_RESTART_IDLE_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_APST_NON_OPER_TIMER_TICKING_RESTARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_FFU_IMMEDIATE_WAKE_UP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_IS_FFU_IN_PROGRESS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ENABLE_L0_DURING_APST_DPS2_DPS3_TRANSITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DISABLE_CLOCKREQUEST_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DETECTED_ADMIN_CMDS_PENDING_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_ENTRY_LOG_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LTR_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HSLC_CANCEL_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HSLC_ADD_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HSLC_RESUME_CHECKPOINT_EVENT ,
SET_EVENT_FE_IDLEIZE_SQ_CHK_CHECKPOINT_EVENT ,

SET_EVENT_FE_PMM_SAVE_QUEUE_CONFIG_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_STATE_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SAVE_QUEUES_CONFIG_CHECKPOINT_EVENT ,
SET_EVENT_FE_CHANGE_POWER_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LINK_NOT_IN_L0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_SUBQ_TAIL_DBL_UPDATED_CHECKPOINT_EVENT ,
SET_EVENT_FE_SET_FEATURES_PM_OPER_POWER_STATE_REJECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_D3HOT_TO_D0_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_STAGING_D3HOT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_NONOP_WAKEUP_COMPL_D3HOT_CHECKPOINT_EVENT ,

#line 4508 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_PMM_RESET_SDM_DB_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_RESET_SDM_DB_FAIL_HIM_BUSY_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_RESET_SDM_DB_SKIP_BY_SCTP_CHECKPOINT_EVENT ,


SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_BKOPS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_START_DPS_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_PREPARE_L12_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_EXIT_L12_PREP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_BOOT_PARTITION_READ_DETECTED_NONOP_DPS_LTR_SENT_CHECKPOINT_EVENT ,



SET_EVENT_FE_FWAI_FAILED_TRIGGER_CONDITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_FWAI_QUEUE_PST_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_FE_FWAI_QUEUE_PST_REQUEST_ABORT_CHECKPOINT_EVENT ,
SET_EVENT_FE_FWAI_NO_TRY_QUEUE_PST_REQUEST_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_START_FWAI_LOW_POWER_MODE_ENTRY_EVALUATION_CHECKPOINT_EVENT ,
SET_EVENT_FE_API_FWAI_MESSAGEHANDLER_CHECKPOINT_EVENT ,
SET_EVENT_FE_FWAI_HAWA_FLUSH_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_HIM_INT_BEFORE_COMMIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_FW_AI_CANCELED_DUE_TO_HIPM_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_FW_AI_EXIT_COUNTER_INCREMENT_CHECKPOINT_EVENT ,



SET_EVENT_FE_DPA_CONTROLLER_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_CONTROLLER_RESET_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_SUBSYSTEM_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_SUBSYSTEM_RESET_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_LINK_DOWN_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_LINK_DOWN_RESET_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_FLR_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_FLR_RESET_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_HOT_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_PCIE_HOT_RESET_END_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_SET_FEATURES_CHECKPOINT_EVENT ,
SET_EVENT_FE_DPA_SMART_PERIODIC_TIMER_CHECKPOINT_EVENT ,


SET_EVENT_FE_IDLE_TIME_FLUSH_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_IDLE_FWT_FLUSH_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_IDLE_FWT_FLUSH_TIMER_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_HOST_IDLE_FWT_FLUSH_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_ACTIVEIDLE_TIMER_EXPIRED_EVENT_CHECKPOINT_EVENT ,


SET_EVENT_FE_SMBUS_SET_FEATURE_RCVED_CHECKPOINT_EVENT ,
SET_EVENT_FE_SMBUS_SET_FEATURE_SAVE_TO_CFG_CHECKPOINT_EVENT ,
SET_EVENT_FE_SMBUS_GET_FEATURE_RCVED_CHECKPOINT_EVENT ,
SET_EVENT_FE_SMBUS_GET_FEATURE_DW0_CHECKPOINT_EVENT ,
SET_EVENT_FE_SMBUS_INIT_FEATURE_CHECKPOINT_EVENT ,

#line 4569 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_VSF_ISSUED_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_INIT_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_CHK_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_MSG_HANDLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_MSG_HANDLE_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_CTRL_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_CTRL_MSG_PCU_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_CTRL_RD_FILE_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_FILE_WRITTEN_CHECKPOINT_EVENT ,
SET_EVENT_FE_VSF_LED_CMD_ERR_HANDLED_CHECKPOINT_EVENT ,

SET_EVENT_INFRA_VSF_LED_CTRL_MSG_RECEIVED_CHECKPOINT_EVENT ,


SET_EVENT_FE_VPD_INFO_CHECKPOINT_EVENT ,
SET_EVENT_FE_VPD_TNVCAP_UPDATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_VPD_TNVCAP_BEF_AFT_CHECKPOINT_EVENT ,

SET_EVENT_FE_CFG_VPD_UPDATE_DATA_CHECKPOINT_EVENT ,








SET_EVENT_SEC_TRNG_QERTF_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRNG_GENERATE_RANDOM_PROCESS_EVENT ,   SET_EVENT_SEC_TRNG_GENERATE_RANDOM_PROCESS_EVENT_END ,
SET_EVENT_SEC_TRNG_CERTF_PROCESS_EVENT ,   SET_EVENT_SEC_TRNG_CERTF_PROCESS_EVENT_END ,
SET_EVENT_SEC_TRNG_GENERATE_TEST_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRNG_LAZY_INIT_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRNG_WEAK_RANDOM_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRNG_FIPS_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRNG_FIPS_POLL_COUNTER_CHECKPOINT_EVENT ,


SET_EVENT_SEC_RSA_CALCULATE_PROCESS_EVENT ,   SET_EVENT_SEC_RSA_CALCULATE_PROCESS_EVENT_END ,


SET_EVENT_SEC_EFUSE_ERROR_CHECKPOINT_EVENT ,


SET_EVENT_SEC_FTL_FORMAT_NVM_PROCESS_EVENT ,   SET_EVENT_SEC_FTL_FORMAT_NVM_PROCESS_EVENT_END ,
SET_EVENT_SEC_FTL_HOSTLESS_READ_PROCESS_EVENT ,   SET_EVENT_SEC_FTL_HOSTLESS_READ_PROCESS_EVENT_END ,
SET_EVENT_SEC_FTL_WRITE_BUFFER_PROCESS_EVENT ,   SET_EVENT_SEC_FTL_WRITE_BUFFER_PROCESS_EVENT_END ,
SET_EVENT_SEC_FTL_DEALLOCATE_PROCESS_EVENT ,   SET_EVENT_SEC_FTL_DEALLOCATE_PROCESS_EVENT_END ,


SET_EVENT_SEC_FE_ABORT_DST_PROCESS_EVENT ,   SET_EVENT_SEC_FE_ABORT_DST_PROCESS_EVENT_END ,


SET_EVENT_SEC_HANDLER_ABORT_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_SEC_HANDLER_ABORT_COMMAND_CHECKPOINT_EVENT ,
SET_EVENT_SEC_SETUP_ISOLATION_PROCESS_EVENT ,   SET_EVENT_SEC_SETUP_ISOLATION_PROCESS_EVENT_END ,

SET_EVENT_SEC_PST_CHECK_CHECKPOINT_EVENT ,


SET_EVENT_SEC_RESET_SECURITY_IN_ST_SKT_CHECKPOINT_EVENT ,
SET_EVENT_SEC_APPLY_SECURITY_IN_ST_SKT_CHECKPOINT_EVENT ,
SET_EVENT_SEC_IS_ADMIN_COMMAND_PERMITTED_CHECKPOINT_EVENT ,
SET_EVENT_SEC_GET_IO_COMMAND_MODIFIER_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRANSLATE_READ_FROM_MBR_INPUT_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRANSLATE_READ_FROM_MBR_OUTPUT_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TRANSLATE_LBA_FROM_NAND_CHECKPOINT_EVENT ,
SET_EVENT_SEC_CRYPTO_TRANSFORM_CHECKPOINT_EVENT ,
SET_EVENT_SEC_CRYPTO_AES_XTS_CHECKPOINT_EVENT ,
SET_EVENT_SEC_LOG_FFU_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FFU_PARSE_HEADER_PROCESS_EVENT ,   SET_EVENT_SEC_FFU_PARSE_HEADER_PROCESS_EVENT_END ,
SET_EVENT_SEC_FFU_PROCESS_DATA_PROCESS_EVENT ,   SET_EVENT_SEC_FFU_PROCESS_DATA_PROCESS_EVENT_END ,
SET_EVENT_SEC_FFU_FINALIZE_PROCESS_EVENT ,   SET_EVENT_SEC_FFU_FINALIZE_PROCESS_EVENT_END ,


SET_EVENT_SEC_RMA_COMMAND_HANDLED_CHECKPOINT_EVENT ,
SET_EVENT_SEC_RMA_UPDATE_STATE_CHECKPOINT_EVENT ,
SET_EVENT_SEC_RMA_ADD_LOG_ENTRY_CHECKPOINT_EVENT ,


SET_EVENT_SEC_RMA_REQUEST_NONCE_CHECKPOINT_EVENT ,
SET_EVENT_SEC_RMA_REQUEST_DEVICE_SECRET_CHECKPOINT_EVENT ,


SET_EVENT_SEC_ATA_ADD_LOG_ENTRY_CHECKPOINT_EVENT ,


SET_EVENT_SEC_TCG_PARSER_TOKEN_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_PARSER_ACL_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_INVALID_TOKEN_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_PARSER_INPUT_PARAM_CHECKPOINT_EVENT ,


SET_EVENT_SEC_TCG_GET_COLUMNS_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_GET_COLUMNS_X_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_START_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_SESSION_VIOLATION_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_LEVEL0_BLOCKSID_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_CU_ABORT_SESSION_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_BT_GET_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_BT_SET_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_BT_GET_OUT_OF_RANGE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_BT_GET_LENGTH_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_BT_SET_OUT_OF_RANGE_ERROR_CHECKPOINT_EVENT ,


SET_EVENT_SEC_TCG_METHOD_SUCCEED_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_TRANSACTION_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_SEC_TCG_TRANSACTION_ENDED_CHECKPOINT_EVENT ,


SET_EVENT_SEC_TCG_RP_PROPERTIES_OVERFLOW_CHECKPOINT_EVENT ,


SET_EVENT_SEC_PRODUCTION_HW_TEST_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_HW_TEST_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_ON_STARTED_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_ON_STARTED_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_ON_COMPLETED_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_ON_COMPLETED_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_DLE_CONFIG_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_DLE_CONFIG_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_DLE_CONFIG_VERIFY_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_DLE_CONFIG_VERIFY_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_DEVICE_LOCK_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_DEVICE_LOCK_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_EXT_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_EXT_PROCESS_EVENT_END ,
SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_VERIFY_PROCESS_EVENT ,   SET_EVENT_SEC_PRODUCTION_RAM_CONFIG_VERIFY_PROCESS_EVENT_END ,


SET_EVENT_SEC_KM_SET_KEY_PROCESS_EVENT ,   SET_EVENT_SEC_KM_SET_KEY_PROCESS_EVENT_END ,
SET_EVENT_SEC_KM_SET_NAMESPACE_KEYS_PROCESS_EVENT ,   SET_EVENT_SEC_KM_SET_NAMESPACE_KEYS_PROCESS_EVENT_END ,


SET_EVENT_SEC_FS_READ_PROCESS_EVENT ,   SET_EVENT_SEC_FS_READ_PROCESS_EVENT_END ,
SET_EVENT_SEC_FS_WRITE_PROCESS_EVENT ,   SET_EVENT_SEC_FS_WRITE_PROCESS_EVENT_END ,

SET_EVENT_SEC_FS_READ_FILE0_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE1_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE2_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE3_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE4_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE5_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE6_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE7_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE8_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE9_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE10_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_READ_FILE11_CHECKPOINT_EVENT ,

SET_EVENT_SEC_FS_WRITE_FILE0_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE1_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE2_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE3_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE4_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE5_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE6_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE7_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE8_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE9_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE10_CHECKPOINT_EVENT ,
SET_EVENT_SEC_FS_WRITE_FILE11_CHECKPOINT_EVENT ,

SET_EVENT_SEC_FS_COMMIT_TRANSACTION_PROCESS_EVENT ,   SET_EVENT_SEC_FS_COMMIT_TRANSACTION_PROCESS_EVENT_END ,
SET_EVENT_SEC_FS_REVERT_TRANSACTION_PROCESS_EVENT ,   SET_EVENT_SEC_FS_REVERT_TRANSACTION_PROCESS_EVENT_END ,
SET_EVENT_SEC_FS_CLEANUP_PROCESS_EVENT ,   SET_EVENT_SEC_FS_CLEANUP_PROCESS_EVENT_END ,
SET_EVENT_SEC_FE_TRANSFER_REQUEST_PROCESS_EVENT ,   SET_EVENT_SEC_FE_TRANSFER_REQUEST_PROCESS_EVENT_END ,
SET_EVENT_SEC_FE_TRANSFER_RESPONSE_PROCESS_EVENT ,   SET_EVENT_SEC_FE_TRANSFER_RESPONSE_PROCESS_EVENT_END ,

SET_EVENT_SEC_RESET_INJECTION_CHECKPOINT_EVENT ,
SET_EVENT_FW_SEC_BOOT_LOG_CHECKPOINT_EVENT ,
SET_EVENT_DRM_FLAG_SET_CHECKPOINT_EVENT ,




SET_EVENT_FE_PCU_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_INIT_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_PRE_HIM_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_INIT_WAIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_INIT_WAIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_LOG_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_LOG_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_DELAYED_INIT_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_PCIE_DELAYED_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_PCIE_DIAGNOSTIC_START_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_PCIE_DIAGNOSTIC_END_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_EOM_DATA_CHECKPOINT_EVENT ,
SET_EVENT_GET_LOG_PAGE_EOM_DB_INIT_CHECKPOINT_EVENT ,


SET_EVENT_PCIE_PIPE_PHY_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_ELEC_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_COMPLINCE_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_SWING_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_VALID_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_DEEMPH_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_LOCAL_PRESET_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_PRESET_COEF_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_LOCAL_FS_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_LOCAL_LF_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_SYNC_HDR_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_ELEC_IDLE_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_POLARITY_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_INVALID_REQ_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_EQ_VAL_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_TX_MARGIN_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_RX_LNK_EVAL_FB_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_M2P_MSG_BUS_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_PIPE_P2M_MSG_BUS_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_CDNS_BUS_LTSSM_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_PHYRX_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_FRAME_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_DLLTX_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_DLLRX_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_DLLTXRX_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_TLTX_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_CDNS_BUS_TLRX_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_LTSSM_REC_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_ERROR_COUNTERS_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_LTSSM_IRQ_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_EQ_LOG_CHECKPOINT_EVENT ,

SET_EVENT_PCIE_ERROR_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_BUFF_ALLOC_FAILED_CHECKPOINT_EVENT ,

SET_EVENT_FE_PCIE_ACCESS_VIOLATION_DETAILS_CHECKPOINT_EVENT ,




SET_EVENT_INFRA_PCIE_MSG_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_PCIE_MSG_RECEIVED_BEFORE_TIMEOUT_CHECKPOINT_EVENT ,

#line 4816 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_PCU_PCIE_COLD_B2B_INIT_START_CHECKPOINT_EVENT ,
SET_EVENT_PCU_PCIE_COLD_B2B_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PCU_PCIE_RESET_START_CHECKPOINT_EVENT ,
SET_EVENT_PCU_PCIE_RESET_PERST_START_CHECKPOINT_EVENT ,
SET_EVENT_PCU_PCIE_WAIT_MP_CHECKPOINT_EVENT ,
SET_EVENT_PCU_PCIE_SEND_MSG_MP_CHECKPOINT_EVENT ,






SET_EVENT_CURRENT_LTSSM_CHECKPOINT_EVENT ,
SET_EVENT_PIPE_ISO_RX_CTRL_REG_CHECKPOINT_EVENT ,
SET_EVENT_CREQ_CHECKPOINT_EVENT ,
SET_EVENT_DEQ_CHECKPOINT_EVENT ,
SET_EVENT_PHY_PIPE_ISO_RX_EQ_EVAL_CHECKPOINT_EVENT ,
SET_EVENT_PHY_PMA_ISO_XCVR_CTRL_REG_CHECKPOINT_EVENT ,
SET_EVENT_LANE_REV_STAT_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_START_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_END_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_CONDITION_CHECKPOINT_EVENT ,
SET_EVENT_CFG_REG_CHECKPOINT_EVENT ,
SET_EVENT_LM_REG_CHECKPOINT_EVENT ,

SET_EVENT_CURRENT_LTSSM_MP_CHECKPOINT_EVENT ,
SET_EVENT_PIPE_ISO_RX_CTRL_REG_MP_CHECKPOINT_EVENT ,
SET_EVENT_CREQ_MP_CHECKPOINT_EVENT ,
SET_EVENT_DEQ_MP_CHECKPOINT_EVENT ,
SET_EVENT_PHY_PIPE_ISO_RX_EQ_EVAL_MP_CHECKPOINT_EVENT ,
SET_EVENT_PHY_PMA_ISO_XCVR_CTRL_REG_MP_CHECKPOINT_EVENT ,
SET_EVENT_LANE_REV_STAT_MP_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_START_MP_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_END_MP_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_DUMP_CONDITION_MP_CHECKPOINT_EVENT ,
SET_EVENT_CFG_REG_MP_CHECKPOINT_EVENT ,
SET_EVENT_LM_REG_MP_CHECKPOINT_EVENT ,
SET_EVENT_ASIC_MP_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_PMA_CMN_REG_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_ELEC_IDLE_DET_CTRL_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE1_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE2_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE3_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE4_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE5_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE6_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE7_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE8_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE9_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE10_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE11_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE12_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE13_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE14_CHECKPOINT_EVENT ,
SET_EVENT_PCIE_WRAP_DEBUG_PIPE15_CHECKPOINT_EVENT ,




SET_EVENT_FE_DC_ETT_TIMER_START_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_TIMER_STOPPED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_BKOP_CTRL_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_COMPLETED_ENABLE_DRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_COMPLETED_NONOP_DRAIN_CHECKPOINT_EVENT ,




SET_EVENT_FE_DC_ETT_STATE_TIMER_EXPIRED_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_STATE_TIMER_EXPIRED_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_COMPLETION_TIMER_EXPIRED_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_COMPLETION_TIMER_EXPIRED_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CALC_NONOP_TIME_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_CALC_OP_TIME_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ISR_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_COMPLETED_DISABLE_DRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_COMP_IRQ_IDLE_CHECK_CHECKPOINT_EVENT ,



SET_EVENT_FE_DC_ETT_HANLE_MSG_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_HANLE_MSG_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_SEND_MSG_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_SEND_MSG_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_DISABLED_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_DISABLED_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_RESET_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_RESET_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_START_DISABLE_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_START_DISABLE_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_START_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_START_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_START_ENABLE_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_START_ENABLE_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_ENABLED_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_ENABLED_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CB_OP_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_CB_OP_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_START_NONOP_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_START_NONOP_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_START_OP_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_START_OP_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CB_DISABLE_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_CB_DISABLE_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CB_ENABLE_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_CB_ENABLE_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CB_NONOP_DRAIN_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_CB_NONOP_DRAIN_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_CB_NONOP_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_CB_NONOP_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_STOP_PROCESS_EVENT ,   SET_EVENT_FE_DC_ETT_STOP_PROCESS_EVENT_END ,
SET_EVENT_FE_DC_ETT_IS_DISABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_IS_ALREADY_STOPPED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_TIMER_CTRL_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_TIMER_INVALID_STOP_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_COMPLETED_ENABLE_DRAIN_IMM_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_WRONG_QRESIZE_CONDITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_OP_CB_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_NONOP_STATE_TRIGGERED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ALREADY_NONOP_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ALREADY_OP_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_DRAIN_TIMER_CB_WRONG_ENABLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_NONOP_DRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_STOP_TIMER_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_NONOP_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_NONOP_CLK_CTRL_NOT_SUPPORT_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_WRONG_STATE_TIMER_EXPIRED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_WRONG_TIMER_COMPLETION_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_GET_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_HIM_IDLE_CHECK_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_ENABLE_DRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_HANLE_WRONG_MSG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_DRAIN_TIMER_CB_WRONG_DISABLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_DISABLE_DRAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_OP_STATE_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ALREADY_ENABLED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INVALID_NONOP_CB_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ALREADY_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_START_FROM_DISABLE_CB_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_NOT_DISABLED_PST_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_NOT_DISABLED_PST_STAGING_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_INIT_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_HNVME_BUSY_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_AER_PENDING_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_AER_CMD_IDX_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_IO_ITAG_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_ADMIN_ITAG_STATUS_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_WRONG_ISR_CALL_CHECKPOINT_EVENT ,
SET_EVENT_FE_DC_ETT_LINK_STATE_ETT_EN_DIS_STAGE_CHECKPOINT_EVENT ,


SET_EVENT_VS_LOG_DELL_CAH_COUNT_LPS_SET_FEAT_CHECKPOINT_EVENT ,
SET_EVENT_VS_LOG_DELL_CAH_COUNT_LPS_APST_CHECKPOINT_EVENT ,
SET_EVENT_VS_LOG_DELL_CAH_LPS_COUNTER_GLP_CHECKPOINT_EVENT ,


SET_EVENT_VS_LOG_C0H_COUNT_PS_CHANGE_CHECKPOINT_EVENT ,



SET_EVENT_DUTYCYCLE_ETT_IO_HIRED_TIMER_CONTROL_CHECKPOINT_EVENT ,
SET_EVENT_DUTYCYCLE_ETT_THERMAL_THROTTLING_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_THERMAL_THROTTLING_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_RS_PROFILE_APPLIED_CHECKPOINT_EVENT ,
SET_EVENT_DUTYCYCLE_ETT_INIT_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_INIT_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_START_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_START_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_STOP_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_STOP_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_RESUME_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_RESUME_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_THERMAL_DISABLE_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_THERMAL_DISABLE_PROCESS_EVENT_END ,
SET_EVENT_DUTYCYCLE_ETT_THERMAL_ENABLE_PROCESS_EVENT ,   SET_EVENT_DUTYCYCLE_ETT_THERMAL_ENABLE_PROCESS_EVENT_END ,

#line 4976 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_supportedevents.h"
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_D3_PHYSICAL_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PMM_PHYSICAL_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_NOT_IN_L12_L2L3_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_NOT_IN_L1_L2L3_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQUENCE_PCIE_L12_L2L3_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_WAIT_ABORT_OR_L12_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_ABORT_DETECT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_PME_EIB_CHECK_ON_MP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_PME_PERST_CHECK_ON_MP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_PME_L2_EXIT_TRIGGERED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_PCIE_PWR_STATE_CHNG_PREP_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_NVME_PCIE_PWR_STATE_NO_LTR_LATENCY_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_PCIE_L12_TRANS_STARTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_PCIE_PM_HANDLE_D3_TRANSITION_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_DPS_LTR_MSG_SENT_L1_HANDLE_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_PTO_DETECT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_PERST_LNKDOWN_DETECT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_DPS_SEQ_D3_D0_DETECT_CHECKPOINT_EVENT ,
SET_EVENT_FE_PM_LPM_LINK_VALID_CHECK_D3_PTO_DETECTED_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PME_WAKEUP_FLAG_WAIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_HANDLE_INVALD_PWR_STATE_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_HANDLE_D3_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_HANDLE_D3_LTSSM_CHECKPOINT_EVENT ,
SET_EVENT_PME_TURN_OFF_HANDLE_D0_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_PME_IN_D3_SEND_MSG_CHECKPOINT_EVENT ,
SET_EVENT_FE_PMM_LPM_PME_L2_EXIT_EVENT_POLLING_PROCESS_EVENT ,   SET_EVENT_FE_PMM_LPM_PME_L2_EXIT_EVENT_POLLING_PROCESS_EVENT_END ,




SET_EVENT_FE_DBG_PCIE_EQ_WA_TRIGG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_DPI_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PEAKING_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_VAL_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_DPI_BIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_AVG_DPI_PEAK_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_PCIE_EQ_WA_DPI_REG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PEAKING_REG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_TAP0_REG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_TAP1_REG_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_TAP0_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_TAP1_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_GAIN_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_400US_CHECKPOINT_EVENT ,

SET_EVENT_FE_DBG_PCIE_EQ_WA_PH0_TIME_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PH0_TIME1_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PH0_TIME2_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PH0_88_CHECKPOINT_EVENT ,
SET_EVENT_FE_DBG_PCIE_EQ_WA_PH0_86_CHECKPOINT_EVENT ,

#line 301 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"


  SET_EVENT_EVENT_TOTAL_COUNT
}SET_EVENT_EVENTS_t;










typedef enum
{
  SET_WAI_TS_CONFIG_IDX_ROM,
  SET_WAI_TS_CONFIG_IDX_DLE,
  SET_WAI_TS_CONFIG_IDX_RAM,
  SET_WAI_TS_CONFIG_IDX_IDLE,
  SET_WAI_TS_CONFIG_IDX_ROM_LAST
}SET_WAI_TS_CONFIG_IDX_t;





typedef enum
{
  SET_EVENT_TYPE_CONTEXT_SWITCH,
  SET_EVENT_TYPE_CHECKPOINT_EVENT,
  SET_EVENT_TYPE_BOUND_CHECKPOINT_EVENT,
  SET_EVENT_TYPE_QUANTITATIVE_EVENT,
  SET_EVENT_TYPE_PROCESS_EVENT,
  SET_EVENT_TYPE_BOUND_PROCESS_EVENT,
  SET_EVENT_TYPE_PROGRAM_COUNTER,
}SET_EVENT_TYPE_t;

#line 355 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
typedef struct _SET_EVENT_EVENT
{
  uint32_t type;
  uint32_t uid;
  uint32_t end;
  char name[80];
  uint32_t min;
  uint32_t avg;
  uint32_t max;
  uint32_t predecessor;
}SET_EVENT_EVENT_INFO_t;

#line 377 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
typedef struct _SET_EVENT_EVENT_CONFIG_INF
{
  uint32_t uid;
  char name[16];
}SET_EVENT_EVENT_CONFIG_INFO_t;







typedef struct _SET_EVENT_DICTIONARY_INFO
{
  uint32_t vintage;
  char signature[16];
}SET_EVENT_DICTIONARY_INFO_t;










typedef struct _SET_EVENT_THREAD_INFO
{
  uint32_t uid;
  uint32_t cpu;
  char name[80];
}SET_EVENT_THREAD_INFO_t, *pSET_EVENT_THREAD_INFO_t;









typedef struct SET_EVENT_FPS_EVENT_INFO
{
  uint32_t uid;

   char name[17];

#line 427 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
}SET_EVENT_FPS_EVENT_INFO_t, *pSET_EVENT_FPS_EVENT_INFO_t;

#line 442 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_eventengine.h"
typedef struct SET_EVENT_TIME_INFO
{
  uint32_t systemClkFreq;
  uint32_t setTimerPrescaler;
  uint32_t msts21LsbOffset;
  uint32_t ts07LsbOffset;
  uint32_t ts12LsbOffset;
  uint32_t ts16LsbOffset;
  uint32_t ts24LsbOffset;
}SET_EVENT_TIME_INFO_t, *pSET_EVENT_TIME_INFO_t;

#line 242 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"





void     SET_Init(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);

uint64_t SET_GetSetTimer(void);
uint32_t SET_GetSetTimerFreqInMHz(void);
void     SET_CheckATBMode(void);
Status_t SET_DiagGetSETEngStatus(uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);
Status_t SET_DiagConfigSETEng(uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);
Status_t SET_GetAllHwEventsStatus(uint32_t *pRetData);

#line 262 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_apis.h"
 void SET_AtbIntHandler(void);

#line 66 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"






      enum
      {
         SECTOR_SIZE_IN_BYTES       = 512,
         SECTOR_SIZE_IN_BYTES_LOG2  = 9,
      };



      enum
      {
         BLOCK_SIZE_512_BYTES_LOG2   = 9,
         BLOCK_SIZE_1KB_BYTES_LOG2   = 10,
         BLOCK_SIZE_2KB_BYTES_LOG2   = 11,
         BLOCK_SIZE_4KB_BYTES_LOG2   = 12,
         BLOCK_SIZE_8KB_BYTES_LOG2   = 13,
         BLOCK_SIZE_16KB_BYTES_LOG2  = 14,

         BLOCK_SIZE_512_BYTES        = 512,
         BLOCK_SIZE_1KB_BYTES        = 1024,
         BLOCK_SIZE_2KB_BYTES        = 2048,
         BLOCK_SIZE_4KB_BYTES        = 4096,
         BLOCK_SIZE_8KB_BYTES        = 8192,
         BLOCK_SIZE_16KB_BYTES       = 16384,
         BLOCK_SIZE_32KB_BYTES       = 32768,
         BLOCK_SIZE_64KB_BYTES       = 65536,
         BLOCK_SIZE_128KB_BYTES      = 131072,
         BLOCK_SIZE_256KB_BYTES      = 262144,
         BLOCK_SIZE_512KB_BYTES      = 524288,
      };

#line 115 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_globals.h"
      extern BOOL8  reserveTRW ;

#line 31 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_assert.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_exceptionhandling_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/ll_exphdl.h"

#line 20 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_exceptionhandling_api.h"

#line 19 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_assert.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_aon_defines.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_aon_regs_defines_triton16plusb0.h"

#line 84 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_aon_regs_defines_triton16plusb0.h"
typedef struct _SFR_AON {
    HW_REG Reserved0[4];
    HW_REG AON_MEM_CTRL                                 ;

    HW_REG Reserved1;
    HW_REG MEM_POFF_CTRL                                ;

    HW_REG POWER_CTRL                                   ;


    HW_REG ATOP_POC_CTRL                                ;

    HW_REG ATOP_REF_CTRL                                ;

    HW_REG ATOP_POR_CTRL                                ;

    HW_REG ATOP_OSCS_CTRL                               ;

    HW_REG ATOP_ATEST_CTRL                              ;

    HW_REG ATOP_STATUS                                  ;

    HW_REG ATOP_OPT_CTRL                                ;

    HW_REG ATOP_LFOSC_CTRL                              ;

    HW_REG JTAG_CTRL                                    ;


    HW_REG SFR_AON_RESET_CTRL                           ;

    HW_REG RESET_CTRL                                   ;

    HW_REG SECURE                                       ;
    HW_REG XTAL_PAD_CTRL                                ;



    HW_REG XTAL_STATUS                                  ;


    HW_REG AON_MISC                                     ;

    HW_REG EXT_PMIC                                     ;



    HW_REG AON_CPU                                      ;
    HW_REG Reserved2;
    HW_REG DDRC_POWER                                   ;

    HW_REG Reserved3;
    HW_REG TC_WRITE                                     ;
    HW_REG TC_READ                                      ;
    HW_REG TC_FW                                        ;
    HW_REG Reserved4;
    HW_REG PLL_CTRL                                     ;

    HW_REG Reserved5[3];
    HW_REG GPIO_AON_DS_CTRL                             ;

    HW_REG Reserved6;
    HW_REG MEM                                          ;

    HW_REG HIM                                          ;


    HW_REG Reserved7[24];
    HW_REG MP_PC                                        ;

    HW_REG PS0_PC                                       ;

    HW_REG PS1_PC                                       ;

    HW_REG Reserved8[5];
    HW_REG GP_FW_REG_POR[3]                             ;

    HW_REG Reserved9;
    HW_REG SECURITY                                     ;


    HW_REG Reserved10;
    HW_REG SPARE_REG_POR[3]                             ;

    HW_REG MEM_POWER_SW_CTRL                            ;

    HW_REG MEM_POWER_SW_STATUS                          ;

    HW_REG Reserved11;
    HW_REG PLL_PRESCLR_CTRL                             ;

    HW_REG Reserved12[3];
    HW_REG TM_PLL_BACKUP_MUX                            ;
    HW_REG Reserved13[3];
    HW_REG OTP_SW                                       ;
}SFR_AON_t, *PSFR_AON;

#line 21 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_aon_defines.h"

#line 21 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_infraerrorsubranges.h"
#line 18 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_infraerrorsubranges.h"
typedef enum Status_T_InfraRanges_e
{
   STATUS_UART_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000100,
   STATUS_SYS_LOADER_ERROR_BASE           = STATUS_INFRA_BASE + 0x00000200,
   STATUS_SYS_BLOCK_POOL_ERROR_BASE       = STATUS_INFRA_BASE + 0x00000300,
   STATUS_SYS_INIT_ERROR_BASE             = STATUS_INFRA_BASE + 0x00000400,
   STATUS_RTOS_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000500,
   STATUS_SCTP_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000600,
   STATUS_INFRA_DIAG_ERROR_BASE           = STATUS_INFRA_BASE + 0x00000700,
   STATUS_CFG_ERROR_BASE                  = STATUS_INFRA_BASE + 0x00000800,
   STATUS_TM_ERROR_BASE                   = STATUS_INFRA_BASE + 0x00000900,
   STATUS_FADI_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00001000,
   STATUS_PS_COMM_ERROR_BASE              = STATUS_INFRA_BASE + 0x00001100,
   STATUS_PMM_ERROR_BASE                  = STATUS_INFRA_BASE + 0x00001200,
   STATUS_TIMER_ERROR_BASE                = STATUS_INFRA_BASE + 0x00001300,
   STATUS_INFRA_SECDED_BASE               = STATUS_INFRA_BASE + 0x00001400,
   STATUS_INFRA_EFUSE_SECDED_BASE         = STATUS_INFRA_BASE + 0x00001500,
   STATUS_INFRA_DRAM_BASE                 = STATUS_INFRA_BASE + 0x00001600,
   STATUS_INFRA_EFUSE_BASE                = STATUS_INFRA_BASE + 0x00001700,
}   Status_T_InfraRanges_t;

#line 23 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"

#line 84 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
enum
{
   AON_RESTART_REASON_HW_POWER_ON      = 0x00000000,
   AON_RESTART_REASON_COLD_BOOT        = 0x00000001,
   AON_RESTART_REASON_WARM_DPS2        = 0x00000002,
   AON_RESTART_REASON_WARM_DPS3        = 0x00000004,
   AON_RESTART_REASON_WARM_SOC_RESET   = 0x00000008,
   AON_RESTART_REASON_WARM_DPS3_1      = 0x00000010,
   AON_RESTART_STATUS_PCU_COMPLETE     = 0x00010000,
   AON_RESTART_REASON_BOOT_COMPLETE    = 0x10000000,
};






typedef enum SoftRstSig_e
{
   SOFT_RST_SIG_INVALID        = 0x00000000,
   SOFT_RST_SIG_COLD_BOOT      = 0xDECAFB10,
   SOFT_RST_SIG_ROM_IDLE       = 0xB00D0001,
   SOFT_RST_SIG_ROM_WARM_BOOT  = 0xB00D0002,
   SOFT_RST_SIG_PREFA_RESET    = 0xB00D0003,
   SOFT_RST_SIG_FLASH_V_DROOP  = 0xB00D0004,
   SOFT_RST_SIG_FFU_RESTART    = 0xB00D0005,
   SOFT_RST_SIG_DLE_START      = 0xB00D0006,
   SOFT_RST_SIG_PCIE_PERST     = 0xB00D0007,
   SOFT_RST_SIG_FFU_CTRL_RESET = 0xB00D0008,
   SOFT_RST_SIG_FFU_NSSR_RESET = 0xB00D0009,
   SOFT_RST_SIG_FFU_FLR_RESET  = 0xB00D000A,
   SOFT_RST_SIG_EIB_WAKE_RESET = 0xB00D000B,
   SOFT_RST_SIG_FFU_PCIE_PERST = 0xB00D000C,
   SOFT_RST_SIG_PAD2           = 0xB00D000D,
   SOFT_RST_SIG_PAD3           = 0xB00D000E,
   SOFT_RST_SIG_POSTFA_RESET   = 0xB00D0010,
}   SoftRstSig_t;

#line 199 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
enum
{








   BOOT_PHASE_RAM_PRE_RTOS,
   BOOT_PHASE_RAM_POST_RTOS,
   BOOT_PHASE_RAM_BOOT_COMPLETE,
   BOOT_PHASE_RAM_READY_FOR_HOST,

#line 218 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
   BOOT_PHASE_NUM,
};
typedef uint32_t SysBootPhase_t;

typedef void(*pWarmBootVector_t)(uint32_t phase);






typedef struct
{
   SoftRstSig_t      BrokeRomSoftResetSignature;
   pWarmBootVector_t SysWarmVector;
   PVFV_t            SysPS_CPU_StartVector;
   uint32_t          SysBootStraps;
   PVFV_t            SysMain_CPU_StartVector;
   uint32_t          version_id;
   SoftRstSig_t      SysSoftResetSignature;
   uint32_t          mountState;
}   SysBootInfo_t;

#line 348 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
enum SYS_InitTypes_e
{
   SYS_INIT_COLD_BOOT         = 0x00000001,
   SYS_INIT_OTHER_RESET       = 0x00000002,
   SYS_INIT_PERST_RESET       = 0x00000004,

   SYS_INIT_DPS2              = 0x00000010,
   SYS_INIT_DPS3              = 0x00000020,
   SYS_INIT_DPS3_1            = 0x00000040,

   SYS_INIT_COMMIT_IA         = 0x00000100,
   SYS_INIT_FFU_CTRL_RESET    = 0x00000200,
   SYS_INIT_FFU_NSSR_RESET    = 0x00000400,
   SYS_INIT_FFU_FLR_RESET     = 0x00000800,
   SYS_INIT_EIB_WAKE_RESET    = 0x00001000,

   SYS_INIT_ASS_FAT_RESET     = 0x00002000,

   SYS_INIT_FFU_PERST_RESET   = 0x00004000,

   SYS_INIT_AFTER_FATAL_RESET = 0x00100000,

   SYS_INIT_RESET_NO_BOOT     = 0x01000000,
   SYS_INIT_SMBRESET_NO_BOOT  = 0x02000000,

   SYS_INIT_BOOT_COMPLETE     = 0x10000000,
};
typedef uint32_t SYS_InitTypes_t;

SYS_InitTypes_t  SYS_GetBootInitType(void);
Status_t  SYS_SetBootInitType(void);



__inline static  uint32_t SYS_Get_AON_Reg98(void) { return  ReadRegister( (unsigned long)( ( 0xfa010000  + 152 ) ) ) ; }

#line 397 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
__inline static  SysBootInfo_t* SYS_GetBootInfoPtr(void)        { return (SysBootInfo_t*) (HardwareToModel((unsigned long)( 0x0800ffe0 ))) ; }




      __inline static  BOOL32 IsRC_LDPC(void)     { return( (1) ); }
      __inline static  BOOL32 IsIRC_0SB_LDPC(void)     { return( (0) ); }
      __inline static  BOOL32 IsIRC_2SB_LDPC(void)     { return( (0) ); }

#line 413 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
   __inline static  BOOL32 IsCPUHalt(void)          { return( (0) ); }
   __inline static  BOOL32 IsUartDownload(void)     { return( (0) ); }
   __inline static  BOOL32 IsForceDownload(void)    { return( (0) ); }

#line 432 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
__inline static  uint32_t SYS_Get_AON_RestartReg(void) { return  ReadRegister( (unsigned long)( ( 0xfa010000  + 288  ) ) ) ; }
__inline static  void     SYS_Set_AON_RestartReg(uint32_t value) {  WriteRegister( (unsigned long)( ( 0xfa010000  + 288  ) ), (unsigned long)(value) ) ; }


void SYS_ZeroMemIn32ByteChunks(void* startAddr, uint32_t length);

Status_t SYS_eFuseWriteEnable(BOOL en);
void SYS_RAM_Init(void);

#line 452 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_init.h"
__inline static  BOOL32 SYS_IsSoftReset(void)
{
   return ((AON_RESTART_REASON_WARM_SOC_RESET & SYS_Get_AON_RestartReg()) != 0);
}

__inline static  SoftRstSig_t SYS_GetSoftResetSignature(void) { return SYS_GetBootInfoPtr()->SysSoftResetSignature; }

#line 20 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_footer.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_asic_id.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_top_defines.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_top_defines_triton16plusb0.h"

#line 112 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_top_defines_triton16plusb0.h"
typedef struct _SFR_TOP {
    HW_REG VERSION_ID                                   ;

    HW_REG Reserved0[3];
    HW_REG PLL0_CTRL_1                                  ;

    HW_REG PLL0_CTRL_2                                  ;

    HW_REG PLL0_CTRL_3                                  ;

    HW_REG PLL0_CTRL_4                                  ;

    HW_REG PLL1_CTRL_1                                  ;

    HW_REG PLL1_CTRL_2                                  ;

    HW_REG PLL1_CTRL_3                                  ;

    HW_REG PLL1_CTRL_4                                  ;

    HW_REG PLL2_CTRL_1                                  ;

    HW_REG PLL2_CTRL_2                                  ;

    HW_REG PLL2_CTRL_3                                  ;

    HW_REG PLL2_CTRL_4                                  ;

    HW_REG PLL0_STATUS                                  ;

    HW_REG PLL1_STATUS                                  ;

    HW_REG PLL2_STATUS                                  ;

    HW_REG PLLS_LOCK                                    ;

    HW_REG SFR_PLL_CLK_OUT_CTRL                         ;

    HW_REG Reserved1;
    HW_REG TRNG_RING_OSCS                               ;
    HW_REG Reserved2;
    HW_REG IP_FORCE_CG_1                                ;
    HW_REG IP_FORCE_CG_2                                ;
    HW_REG IP_CG_STATUS_1                               ;
    HW_REG IP_CG_STATUS_2                               ;
    HW_REG Reserved3[2];
    HW_REG EFUSE                                        ;
    HW_REG Reserved4;
    HW_REG ROM_MODE                                     ;

    HW_REG Reserved5[31];
    HW_REG GP_REG_LOAD[4]                               ;
    HW_REG GP_REG_SET[4]                                ;
    HW_REG GP_REG_CLR[4]                                ;
    HW_REG GP_FW_REG[3]                                 ;
    HW_REG Reserved6;
    HW_REG SPARE_REG[3]                                 ;
    HW_REG Reserved7[45];
    HW_REG PLLS_LOCK_2                                  ;

    HW_REG Reserved8[3];
    HW_REG PLL3_CTRL_1                                  ;

    HW_REG PLL3_CTRL_2                                  ;

    HW_REG PLL3_CTRL_3                                  ;

    HW_REG PLL3_CTRL_4                                  ;

    HW_REG PLL4_CTRL_1                                  ;

    HW_REG PLL4_CTRL_2                                  ;

    HW_REG PLL4_CTRL_3                                  ;

    HW_REG PLL4_CTRL_4                                  ;

    HW_REG PLL5_CTRL_1                                  ;

    HW_REG PLL5_CTRL_2                                  ;

    HW_REG PLL5_CTRL_3                                  ;

    HW_REG PLL5_CTRL_4                                  ;

    HW_REG Reserved9[48];
    HW_REG PLL3_STATUS                                  ;

    HW_REG PLL4_STATUS                                  ;

    HW_REG PLL5_STATUS                                  ;

    HW_REG Reserved10[5];
    HW_REG PLL_CLK_OUT                                  ;
    HW_REG Reserved11[3];
    HW_REG EFUSE_SW                                     ;
    HW_REG Reserved12[3];
    HW_REG DDR_CLK_CTRL                                 ;
    HW_REG Reserved13;
    HW_REG DPLL_CTRL                                    ;
    HW_REG STRESS_RING_OSC                              ;

    HW_REG PLL_BACKUP                                   ;
    HW_REG Reserved14[3];
    HW_REG CRACK_DET_IN                                 ;

    HW_REG CRACK_DET_OUT                                ;


    HW_REG Reserved15[2];
    HW_REG MLM_STARVE_PREVENT                           ;

    HW_REG FPGA_SVCI_HANG                               ;


    HW_REG DEBUG_SYSTEM_NG_MODE                         ;

    HW_REG MEM_ARB_TYPE                                 ;

}SFR_TOP_t, *PSFR_TOP;

#line 44 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sfr_top_defines.h"

#line 19 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_asic_id.h"

#line 90 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_asic_id.h"
typedef enum
{
   UMC_VENDOR  = 1,
   TSMC_VENDOR = 2,
   SMIC_VENDOR = 5,
} VENDOR_ID;

#line 111 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_asic_id.h"
enum
{
   ARC_600 = 2,
   ARC_700 = 3,
   ARC_EM  = 4,
   ARC_HS  = 5,
};
typedef uint8_t ARC_CoreVer_t;

typedef enum CoreFunction_e
{
   CORE_MAIN   = 0,
   CORE_PS     = 1,
   CORE_LLFS   = 2,
   CORE_PCU    = 3,
}   CoreFunction_t;





__inline static  uint32_t Get_CPU_Function(void)
{
   return (( (_lr( 0x00000004 ))  &  0x0000F000 ) >>  12 );
}


__inline static  uint32_t Get_CPU_Instance(void)
{
   return (( (_lr( 0x00000004 ))  &  0x00000F00 ) >>  8 );
}


__inline static  uint32_t Get_CPU_Type(void)
{
   return (( (_lr( 0x00000004 ))  &  0x000000F0 ) >>  4 );
}


__inline static  uint32_t Get_Chip_ID(void)
{
   return (( (_lr( 0x00000004 ))  &  0xFFFF0000 ) >>  16 );
}








   __inline static  void SYS_CacheAsicIdRegData(void) { (SYS_GetBootInfoPtr()->version_id) =  ReadRegister( (unsigned long)( ( 0xf108e000  + 0 ) ) ) ; }





   __inline static  uint32_t SYS_GetVersionIdData(void) { return ( ReadRegister( (unsigned long)( ( 0xf108e000  + 0 ) ) ) ); }






   __inline static  BOOL IS_FPGA(void) { return (((SYS_GetVersionIdData() >>  19 ) &  ( (0x00000001UL << 19 )  >> 19 ) ) ==  (0x01) ); }
   __inline static  BOOL IS_ASIC(void) { return (((SYS_GetVersionIdData() >>  19 ) &  ( (0x00000001UL << 19 )  >> 19 ) ) ==  (0x00) ); }






   __inline static  BOOL IS_PALLADIUM(void) { return (((SYS_GetVersionIdData() >>  18 ) &  ( (0x00000001UL << 18 )  >> 18 ) ) ==  (0x01) ); }

#line 190 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_asic_id.h"
   __inline static  uint32_t Get_Total_Number_CPUs(void)
   {
      return ( 2  +  8  +  1  +  1 );
   }

#line 17 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_footer.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_smalldump.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_def.h"

#line 18 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"

#line 315 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_BIG_DUMP_CODE;

#line 328 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_UECC_DUMP_CODE;

#line 341 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_SET_EVENTS_CODE;

#line 354 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_MP_RTOS_REGISTERS_CODE;

#line 368 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_PS_RTOS_REGISTERS_CODE;

#line 382 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_HIM_TABLE_CODE;

#line 396 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_MP_CODE;

#line 410 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_PS0_CODE;

#line 424 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_PS1_CODE;

#line 438 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FW_TRACE_CODE;

#line 452 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_CORE_DUMP_CODE;

#line 466 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_RTFADI_MP_CODE;

#line 480 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_PS0_RTFADI_CODE;

#line 494 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_PS1_RTFADI_CODE;

#line 508 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_SET_EVENT_CODE;

#line 522 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_HIM_TABLE_CODE;

#line 552 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint16_t    blkCat;
   uint8_t     isBWL;
   uint8_t     hiPriority;
}RS_SEND_BLK_TO_RLC_params;

typedef struct
{
   uint32_t                   VBA;
   uint32_t                   syndWt;
   uint32_t                   JBID;
   uint32_t                   source;
   RS_SEND_BLK_TO_RLC_params  params;
}SNAPTOOL_PS_RS_SEND_BLK_TO_RLC;

#line 577 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    PBA;
   BOOL32      blkType;
   uint32_t    SW;
   uint32_t    rfu[2];
} SNAPTOOL_PS_CVD_DRI;

#line 589 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   BOOL32      blkType;
   uint32_t    TTIdx1;
   uint32_t    TTIdx2;
   uint32_t    tempZone;
   uint32_t    rfu;
} SNAPTOOL_PS_CVD_COMPACTION;

#line 602 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   BOOL32      blkType;
   uint32_t    PBA;
   uint32_t    BERresults;
   uint32_t    TTidx;
   uint32_t    targetBER;
} SNAPTOOL_PS_CVD_COMPACTION_BER;

#line 615 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    VBA;
   uint32_t    TTIdx;
   uint32_t    blkType;
   uint32_t    isFTTU;
   uint32_t    TBER;
} SNAPTOOL_PS_CVD_TTU;

#line 628 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    blkType;
   uint32_t    TTIdx;
   uint32_t    MD;
   uint32_t    src;
   uint32_t    rfu;
} SNAPTOOL_PS_EL_CVD_INVALIDATE_LATT;

#line 641 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    dieInFIM;
   uint32_t    TTIdx;
   uint32_t    isFree;
   uint32_t    MBCnt1;
   uint32_t    MBCnt2;
} SNAPTOOL_PS_EL_CVD_DB_MBCNT_ERR;

#line 654 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    dieInFIM;
   uint32_t    blkType;
   uint32_t    cnt1;
   uint32_t    cnt2;
   uint32_t    rfu;
} SNAPTOOL_PS_EL_CVD_DB_TTCNT_ERR;

#line 667 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_XOR_LOG_PARAM;

#line 680 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_SGD_LOG_PARAM;

#line 693 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_IFT_LOG_PARAM;

#line 708 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_ERROR_HANDLING_PARAM;

#line 721 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_ERROR_HANDLING_PARAM;

#line 735 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_EH_FVT_CRITICAL_PARAM;

#line 752 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_FATAL_ASSERT_PARAM;

#line 765 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_FATAL_ASSERT_TEST_PARAM;

#line 783 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_FATAL_ASSERT_PARAM;

#line 796 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_EH_FATAL_ASSERT_PARAM;

#line 810 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_MAILBOX_OVFLW_FATAL_ASSERT_PARAM;

#line 823 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DGM_SHELF_FATAL_ASSERT_PARAM;

#line 836 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_REC_GET_MD_FATAL_ASSERT_PARAM;

#line 849 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_GET_DPCA_ID_FATAL_ASSERT_PARAM;

#line 862 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_SET_DPCA_VAL_FATAL_FATAL_ASSERT_PARAM;

#line 875 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_LDPC_ENC_ST_FIFO_FATAL_ASSERT_PARAM;

#line 888 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FLASH_CRITICAL_FAIL_FATAL_ASSERT_PARAM;

#line 901 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FLASH_FLASH_HW_RECOVERY_FAIL_FATAL_ASSERT_PARAM;

#line 914 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_HW_TIMEOUT_FAIL_FATAL_ASSERT_PARAM;

#line 927 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FW_WD_TIMEOUT_FAIL_FATAL_ASSERT_PARAM;

#line 940 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_TBL_DUALL_ERROR_FATAL_ASSERT_PARAM;

#line 953 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_STATUS_REQ_DUAL_READ_FATAL_ASSERT_PARAM;

#line 968 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_BUS_ERROR_READ_FATAL_ASSERT_PARAM;

#line 982 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_RELEASE_INT_READ_FATAL_ASSERT_PARAM;

#line 995 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_INCONSISTENT_READ_FATAL_ASSERT_PARAM;

#line 1008 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_VIR_UNDRFLW_READ_FATAL_ASSERT_PARAM;

#line 1021 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_PWR_VIR_UNDRFLW_READ_FATAL_ASSERT_PARAM;

#line 1034 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_OOR_FATAL_ASSERT_PARAM;

#line 1047 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DPCA_OVER_UNDER_FLOW_FATAL_ASSERT_PARAM;

#line 1061 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DPCA_BUS_ERROR_FATAL_ASSERT_PARAM;

#line 1074 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t Status;
         uint32_t pBadPtr;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_STARTUP_FATAL_ASSERT_PARAM;

#line 1087 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t Status;
         uint32_t pBadPtr;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_INIT_FATAL_ASSERT_PARAM;

#line 1100 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t MdInPs;
         uint32_t FimInPs;
         uint32_t phyPlOffset;
         uint32_t phyBlk;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_TRANSLATE_FATAL_ASSERT_PARAM;

#line 1113 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t queueIdx;
         uint32_t descIdx;
         uint32_t CAM_failedAllocCnt;
         uint32_t failedDispatchCnt;
         uint32_t zero;
      } SNAPTOOL_PS_MQD_CAM_ALLOC_INIT_FATAL_ASSERT_PARAM;

#line 1126 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t p0;
         uint32_t p1;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_CVD_MORPH_FATAL_ASSERT_PARAM;

#line 1139 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t startAddress;
         uint32_t size;
         uint32_t isUGSD;
         uint32_t expectedSize;
         uint32_t p4;
      } SNAPTOOL_PS_CVD_MNT_TABLES_SIZE_FATAL_ASSERT_PARAM;

#line 1160 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_LLFS_GENERIC_FATAL_ASSERT_PARAM;

#line 1177 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_GENERIC_PARAM;

#line 1190 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FATAL_ASSERT_INFRA_SPEC_PARAM;

#line 1203 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_PLL;

#line 1216 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_DRAM;

#line 1229 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_FATAL_ASSERT_DRAM_EXCEPTION;

#line 1243 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_SRAM;

#line 1256 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FTL_FATAL_ASSERT_GENERIC_PARAM;

#line 1270 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_INIT_ONLY_PARAM;

#line 1284 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_EXCEPTION_PARAM;

#line 1298 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_SVCI_ISR_PARAM;

#line 1312 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_SVCI_ISR_UNKNOWN_PARAM;

#line 1326 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_CORRUPTED_PARAM;

#line 1339 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_EH_FVT_WARNING_PARAM;

#line 1353 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_BOOT_PAGE_EXAMPLE_PARAM;

#line 1367 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_SET_EVENT_DUMP_PARAM;

#line 1381 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_IFS_PARAM_Warning;

#line 1395 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_IFS_PARAM_Critical;

#line 1409 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_THERMAL_SHUTDOWN_PARAM;

#line 1422 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_PARAM;

#line 1435 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_SHUTDOWN_PARAM;

#line 1449 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_POK_PARAM;

#line 1462 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_IRQ_PARAM;

#line 1476 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_PCU_INIT_EXCEPTION_PARAM;

#line 1505 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_ARC_REGS_RTOS_DUMP_PARAM;

#line 1519 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_ARC_REGS_STACK_DUMP_PARAM;

#line 1535 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t moduleID;
  uint32_t reason;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_READ_ONLY_PARAM;

#line 1548 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t resetType;
  uint32_t dbgEventsBitmap;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_NON_COMMON_RESET;

#line 1561 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_DUPLICATE_CONTROLLER_ENABLE;

#line 1574 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t nvmeCurrErr;
  uint32_t feUniqueErr;
  uint32_t cmdContext;
  uint32_t cmdOpcode;
  uint32_t cmfIndex;
} SNAPTOOL_FE_INTERNAL_ERROR;

#line 1587 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t cmdIndex;
   uint32_t sectorsFailed_sectorOffset;
   uint32_t ueccType;
   uint32_t commandSize;
   uint32_t startingLBA;
} SNAPTOOL_FE_XFER_ERROR_WARNING;

#line 1600 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t cmdIndex;
   uint32_t sectorsFailed_sectorOffset;
   uint32_t ueccType;
   uint32_t commandSize;
   uint32_t startingLBA;
} SNAPTOOL_FE_XFER_ERROR_CRITICAL;

#line 1613 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
      uint32_t pcieWrapEvents;
      uint32_t corrErrStatus;
      uint32_t uncorrErrStatus;
      uint32_t pcieDevCap;
      uint32_t fake5;
   } SNAPTOOL_FVT_FE_PCIE_DUMP_1_ERROR;

#line 1626 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
      uint32_t pcieWrapLinkStat;
      uint32_t pcieLmLocalErrStat;
      uint32_t pcieBaseCfgCS;
      uint32_t macAxiCfgOB;
      uint32_t fake5;
   } SNAPTOOL_FVT_PCIE_DUMP_2_ERROR;

#line 1639 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t asyncEventRequestCQ;
   uint32_t asyncEventIndex;
   uint32_t asyncCmdIndex;
   uint32_t cmdContext;
   uint32_t cmdDw30;
} SNAPTOOL_FE_AER_ERROR;

#line 1652 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_FE_HNVME_RESTORATION_ERROR;

#line 1666 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_FE_CRITICAL_PARAM;

#line 1681 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_INFRA_CRITICAL_PARAM;

#line 1696 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HIM_CMD_TABLE_DUMP_PARAM;

#line 1710 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HA_ARB_SECDED_PARAM;

#line 1724 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_GENERIC_FAT_ASS_PARAM;

#line 1738 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_E2E_DP_FATAL;

#line 1752 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HA_CCM_SVCI_PARAM;

#line 1766 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HA_DLM_SVCI_PARAM;

#line 1780 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HABM_UNKNOWN_ERROR_PARAM;

#line 1794 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HAWA_SVCI_PARAM;

#line 1808 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_SVCI_PARAM;

#line 1822 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_SECDED_PARAM;

#line 1836 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_INIT_FAIL_PARAM;

#line 1850 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_INVALID_FE_PMM_STATE;

#line 1864 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t pcieInitStatus;
  uint32_t bootInitType;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_PCIE_INIT_PARAM;

#line 1878 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_FE_PCIE_DUMP;

#line 1892 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_FE_WARNING_PARAM;

#line 1907 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_INFRA_WARNING_PARAM;

#line 1922 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MST_ERRORLOG_CRITICAL;

#line 1935 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MST_ERRORLOG_WARNING;

#line 1949 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_SECURITY_CRITICAL_PARAM;

#line 1962 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_SECURITY_WARNING_PARAM;

#line 1976 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_INFRA_WARNING_PARAM;

#line 17 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_smalldump.h"




typedef struct FADI_ESL_HEADER_T
{
  uint16_t label;
  uint16_t size;
}FADI_ESL_Header_t;

typedef struct
{
  uint32_t groups;
}FADI_ESL_Reg_Dump_Header_t;

typedef struct FADI_REG_DUMP_ENTRY_T
{
  uint16_t offset;
  uint16_t count;
}FADI_Reg_Dump_Entry_t;

typedef struct
{
  uint32_t offset;
  uint32_t numBytes;
}FADI_Reg_Offset_Size_t;

typedef struct FADI_REG_DUMP_SET_T
{
   uint32_t regEslHeader;
   uint32_t baseAddress;
   uint32_t count;
   FADI_Reg_Dump_Entry_t * pRegEntryList;
}FADI_Reg_Dump_Set_t;


typedef struct FADI_REG_DUMP_LIST_T
{
   FADI_Reg_Dump_Set_t * pRegSet;
   uint32_t            regSetsNum;
}FADI_Reg_Dump_List_t;


typedef struct FADI_RAM_DUMP_ENTRY_T
{
   FADI_ESL_Header_t ramEslheader;
   uint32_t address;
}FADI_Ram_Dump_Entry_t;


typedef struct FADI_RAM_DUMP_LIST_T
{
   FADI_Ram_Dump_Entry_t *pRamEntry;
   uint32_t ramSetsNum;
} FADI_Ram_Dump_List_t;


typedef struct FADI_SMDP_GROUP_DESCRIPTOR_T
{
   FADI_Reg_Dump_List_t *pRegDumpList;
   FADI_Ram_Dump_List_t *pRamDumpList;
} FADI_SDMP_Group_Descriptor_t;

typedef struct SmallDumpDDRC0_s
{
    HW_REG64 DDR_VERSION                                ;
    HW_REG64 Reserved0;
    HW_REG64 DDR_CTRL                                   ;
    HW_REG64 DDR_PARITY_BASE_ADDR                       ;
    HW_REG64 DDR_ERROR_INT_STATUS                       ;
    HW_REG64 DDR_MISC_INT_MASK                          ;


    HW_REG64 DDR_STATUS                                 ;
} SmallDumpDDRC0_t;

typedef struct SmallDumpDDRC1_s
{
    HW_REG64 DDR_SEQC_LP_DIS                            ;
    HW_REG64 DDR_SEQC_SR_CTRL                           ;
    HW_REG64 DDR_SEQC_CTRL                              ;
    HW_REG64 DDR_SEQC_STATUS                            ;
    HW_REG64 DDR_ACTIVE_CTRL                            ;
    HW_REG64 DDR_ACTIVE_STATUS                          ;
    HW_REG64 DDR_ACTIVE_IRQ_CTRL                        ;


    HW_REG64 DDR_ACTIVE_IRQ_STATUS                      ;
    HW_REG64 Reserved2[6];
    HW_REG64 DDR_HEB_DATA                               ;
    HW_REG64 DDR_HEB_EVENT_FILTER                       ;
    HW_REG64 DDR_HEB_UMCTL_EVENTS_FILTER                ;
    HW_REG64 Reserved3;
    HW_REG64 DDR_DEBUG                                  ;
    HW_REG64 Reserved4;
    HW_REG64 HIF_MRR_DATA[2]                            ;
} SmallDumpDDRC1_t;

typedef struct SmallDumpDDRC2_s
{
    HW_REG64 DDR_DEBUG_HIF_ARBITER                      ;
    HW_REG64 Reserved6[3];
    HW_REG64 DDR_DEBUG_HIF                              ;
    HW_REG64 Reserved7[27];
    HW_REG64 DDRC_COHERENCY                             ;
} SmallDumpDDRC2_t;

typedef struct SmallDumpDDRC_DMA0_s
{
    HW_REG64 DDR_DMA_CTRL                               ;
    HW_REG64 DDR_DMA_CFG                                ;
    HW_REG64 DDR_DMA_ERROR_INT_STATUS                   ;
    HW_REG64 DDR_DMA_SB_ERR_CNT                         ;
    HW_REG64 DDR_DMA_SB_ERR_THR                         ;
    HW_REG64 DDR_DMA_ERROR_INJECT                       ;
    HW_REG64 DDR_DMA_ECC_CTRL_STATUS                    ;
    HW_REG64 DDR_DMA_ERROR_INT_ENABLE                   ;


    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_00               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_01               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_02               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_03               ;

    HW_REG64 DDR_DMA_DATA_PORTS_ERROR_STATUS[4]         ;

    HW_REG64 DDR_DMA_RS_DC_CFG[15]                      ;



    HW_REG64 Reserved0[17];
    HW_REG64 DDR_DMA_CHN_DBG_REGS[12]                   ;
    HW_REG64 Reserved1[4];
    HW_REG64 DDR_DMA_REQ_CFG[12]                        ;
    HW_REG64 Reserved2[4];
    HW_REG64 DDR_DMA_REQ_CNT[12]                        ;
    HW_REG64 Reserved3[4];
    HW_REG64 DDR_DMA_REQ_RPTR[12]                       ;
    HW_REG64 Reserved4[4];
    HW_REG64 DDR_DMA_REQ_LOCK                           ;
    HW_REG64 DDR_DMA_REQ_INT_STATUS                     ;
    HW_REG64 DDR_DMA_DEBUG_SYS                          ;
    HW_REG64 DDR_DMA_DEBUG_DDR                          ;
    HW_REG64 DDR_DMA_CTRL_PIPE_DBG                      ;
} SmallDumpDDRC_DMA0_t;

typedef struct SmallDumpDDRC_DMA1_s
{
    HW_REG64 DDR_DMA_EXTR_CNTR_ADDR[12]                 ;
    HW_REG64 Reserved6[18];
    HW_REG64 DDR_DMA_SB_ERR_ADDR                        ;
    HW_REG64 DDR_DMA_DUMMY                              ;
    HW_REG64 DDR_DMA_CNTR[66]                           ;
}  SmallDumpDDRC_DMA1_t;

typedef struct SmallDumpDDRC_Debug_Regs0_t
{
    HW_REG64 DIRECT_REGION_ADDR                         ;
    HW_REG64 DRAM_CMD_RSP_TIMESTAMP                     ;
    HW_REG64 CACHE_ERROR_STATUS                         ;
    HW_REG64 WR_PORT_STATUS                             ;
    HW_REG64 RD_PORT_STATUS                             ;
    HW_REG64 CACHE_MNGR_STATUS                          ;
    HW_REG64 DRAM_SB_ERR_CNT                            ;
    HW_REG64 DRAM_SB_ERR_THR                            ;
    HW_REG64 ERROR_INJECT_ADDR                          ;
    HW_REG64 Reserved0[3];
    HW_REG64 CACHE_LINES_BUSY[4]                        ;
    HW_REG64 CACHE_LINES_DB_ERR[4]                      ;
    HW_REG64 CACHE_LINES_SB_ERR[4]                      ;
    HW_REG64 SPARE_CL_STATUS[4]                         ;
    HW_REG64 Reserved1[4];
    HW_REG64 DDR_DEBUG_CACHE_WFSM                       ;
    HW_REG64 DDR_DEBUG_CACHE_RFSM                       ;
    HW_REG64 DDR_DEBUG_CACHE_HIF                        ;
    HW_REG64 DDR_DEBUG_CACHE_HIF_CMD_FIFO_DST_DATA      ;
    HW_REG64 DDR_DEBUG_CACHE_ECC                        ;
    HW_REG64 DDR_DEBUG_FIFO_PTR                         ;
    HW_REG64 DATA_TO_HIF_FIFO                           ;
    HW_REG64 DDR_CACHE_ECC_DEBUG                        ;
    HW_REG64 Reserved2[24];
    HW_REG64 CL_LRU_TABLE[64]                           ;
    HW_REG64 CL_PHYS_MAP[64]                            ;
} SmallDumpDDRC_Debug_Regs0_t;

#line 210 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_smalldump.h"
extern FADI_SDMP_Group_Descriptor_t gFaSdmpDescriptorsRam[ (10) ];

#line 216 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_smalldump.h"
extern uint32_t FADI_SmallDumpCollect(uint32_t logCode, uint8_t * pSmallDump, FADI_SDMP_Group_Descriptor_t * sdmpDescriptor);

void FADI_InitErrorStatsSDL(void* pData);

#line 17 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_def.h"

#line 18 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_ps_comm.h"

#line 31 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_ps_comm.h"
typedef enum Infra_Mailbox_MsgID_e
{
   MAILBOX_RD_RAW_COMPLETION_MSG_ID = 1,
   MAILBOX_WR_RAW_COMPLETION_MSG_ID = 2,
   MAILBOX_FIRST_INFRA_BARRIER_COMPLETION_MSG_ID = 3,
   MAILBOX_SECOND_INFRA_BARRIER_COMPLETION_MSG_ID = 4,
}Infra_Mailbox_MsgID_t;

typedef struct
{
    uint32_t channel    ;
    uint32_t chip       ;
    uint32_t die        ;
    uint32_t plane      ;
    uint32_t block      ;
    uint32_t page       ;
    uint32_t fmu        ;
}Physical_Block_Address_t;





typedef union
{
   uint32_t all32;
   struct
   {
      union
      {
         uint16_t all16 : 16;
         uint16_t dmcResult : 16;
         struct
         {
            uint16_t    errorCode            :4;
            uint16_t    UECC_BitMap          :4;
            uint16_t    eraseRead_BitMap     :4;
            uint16_t    eiIdx                :4;
         }errorBits;
      }messageData;

      uint16_t mailID:8;
      uint16_t messageID:8;
   }bits;

   struct
   {
      union
      {
         uint16_t all16 : 16;
         struct
         {
            uint16_t    UECC_BitMap          :8;
            uint16_t    eraseRead_BitMap     :8;
         }errorBits;
      }messageData;

      uint16_t mailID:8;
      uint16_t messageID:8;
   }sctp_bits;
}Mail_t;

Status_t SendWritePhyPsRequest(uint8_t blkType, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint32_t reqOptions);
Status_t SendReadPhyPsRequest(uint8_t readSrc, uint8_t blkType, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint8_t ifFADIRead, uint32_t waitForPsMsgDone);
Status_t SendErasePhyPsRequest(uint32_t elcAddr, uint8_t blkType, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t waitForPsMsgDone, BOOL shallowErase, uint32_t PEC, uint8_t erasePlaneCount);
Status_t SendBesPhyPsRequest(uint8_t blkType, Physical_Block_Address_t * pba, uint32_t waitForPsMsgDone);

Status_t SendReadRawPhyPsRequest(uint8_t fastRead, uint8_t firstread, uint8_t isDLA, uint8_t rawRead, uint8_t noReadRetry, uint8_t xorOn, uint8_t forcedCVD, uint8_t rehReadOption, uint8_t *pUserVCGR, uint8_t xferOnly, uint8_t blkType, uint8_t numFmu,
   Physical_Block_Address_t * pba, Mail_t * requestId, uint32_t header, uint32_t data, uint32_t waitForPsMsgDone);
Status_t SendWriteRawPhyPsRequest(uint8_t rawWrite, uint32_t plcAddr, uint8_t blkType, uint8_t xferOnly, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint32_t waitForPsMsgDone);

#line 106 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_ps_comm.h"
Status_t SendIFSCompletionMessage(uint32_t psType, uint32_t cookie, Status_t ifsStatus);
Status_t WaitPsReqMsgDone(Mail_t * reqId);
void     MP_Main_Mailbox_Valid_Count_ISR(void);
void     MP_Main_Mailbox_Overflow_ISR(void);
Status_t SendReqFVTErrorLogEntryMessage(uint32_t psType, uint32_t severity, uint32_t *pParams);
Status_t SendReqFVTErrorLogEntryMessagePS0(uint32_t severity, uint32_t *pParams);
Status_t SendReqFVTErrorLogEntryMessagePS1(uint32_t severity, uint32_t *pParams);

#line 20 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_pmm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_rfm_aon_api.h"

#line 39 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_rfm_aon_api.h"
typedef union PS_RFM_AON_s
{
   uint8_t bytes[ (16) ];

#line 55 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_rfm_aon_api.h"
}   PS_RFM_AON_t;

#line 19 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_pmm_api.h"










typedef enum PS_Boot_type
{
   PS_BOOT_TYPE_COLD = 0,
   PS_BOOT_TYPE_WARM,
   PS_BOOT_TYPE_INVALID,
} PS_BootType_t;

typedef enum PS_PMM_Power_State
{
   PS_PMM_PWR_STATE_NORMAL = 0,
   PS_PMM_PWR_STATE_SHUTDOWN,
   PS_PMM_PWR_STATE_INVALID,
}   PS_PMM_Power_State_t;





typedef struct
{
   uint32_t reservedSpace[ ( 1024  / 4) ];
} PS_AON_Region_t;


typedef uint32_t PS_Boot_Flag_t;
typedef struct
{
   PS_Boot_Flag_t bootFlags;
   uint32_t   randomSeed;
}   PS_AON_Boot_t;

typedef struct
{
   PS_AON_Boot_t bootAonData;
   PS_RFM_AON_t  refreshManagerAonData;

}   PS_AON_Data_t;

#line 85 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_pmm_api.h"
   __inline static  BOOL IsWarmBoot(PS_AON_Boot_t* pAONBootData)
   {
      return (pAONBootData->bootFlags == PS_BOOT_TYPE_WARM);
   }

#line 104 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_pmm_api.h"
void PS_PMM_SetBootFlags(PS_BootType_t bootFlagVal);









Status_t PS_PMM_MP_RestoreRAM(void);









Status_t PS_PMM_MP_RetainRAM(void);










Status_t PS_PMM_SERV_Handler(void);









BOOL PS_IsSysBootInitWarm(void);

#line 21 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_msgtypes.h"

#line 154 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( (0x00)  + 72) < ( (0x00)  + (0x50) ) )) ? 1 : -1] ;

#line 199 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( ( ( (0x00)  + (0x50) ) )  + 37) < ( ( ( (0x00)  + (0x50) ) )  + (0x40) ) )) ? 1 : -1] ;

#line 228 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( ( ( ( (0x00)  + (0x50) ) )  + (0x40) )      + 21) < (0xFF) )) ? 1 : -1] ;

#line 22 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_def.h"

#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_devba_def.h"
#line 9 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_devba_def.h"
typedef union devba
{
   uint32_t all32;
   struct
   {
      uint32_t fmu         : 4;
      uint32_t metaWLpage  : 14;
      uint32_t phyBlock    : 10;
      uint32_t md          : 4;
   }bits;

   struct
   {
      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t MB             : 10;
      uint32_t MD             : 4;
   } PS_flavor3;

   struct
   {
      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t block          : 10;


      uint32_t fim_high : 1;
      uint32_t hFim : 1;
      uint32_t dieInFim : 2;

#line 47 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_devba_def.h"
   } vbaSlc;

   struct
   {
      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t block          : 10;

      uint32_t fim_high : 1;
      uint32_t hFim : 1;
      uint32_t dieInFim : 2;

#line 65 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_devba_def.h"
   } vbaTlc;

} DeVBA_t;

#line 3 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_def.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_mrph_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/cfgmanager/inc_public/cfg_manager_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/befs/inc_public/ifs_filenumbers.h"

#line 32 "d:/gitrepo/atlas3_release/source/befs/inc_public/ifs_filenumbers.h"
enum
{
   FS_FID_INVALID                   =  0,
   FS_FID_COMMON_CODE_BASE          =  200,
   FS_FID_CODE_BASE                 =  240,
   FS_FID_SYS_BOOT_CODE             =  FS_FID_CODE_BASE,
   FS_FID_INVALIDFILE               =  0xFF,
};

typedef uint32_t FsFileId_t;



typedef struct FileNameRecord_s
{
   uint8_t   fileNumber;
   uint8_t   nameString[32];
}   FileNameRecord_t;

#line 64 "d:/gitrepo/atlas3_release/source/befs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_FILE_MAP_e  { FS_FID_FILE_MAP  = 1 }  ViewerFileId_FILE_MAP_t ;
typedef enum ViewerFSId_FILE_NAMES_LIST_e  { FS_FID_FILE_NAMES_LIST  = 2 }  ViewerFileId_FILE_NAMES_LIST_t ;
typedef enum ViewerFSId_CFG_DATA_DLE_BLOB_e  { FS_FID_CFG_DATA_DLE_BLOB  = 3 }  ViewerFileId_CFG_DATA_DLE_BLOB_t ;
typedef enum ViewerFSId_CFG_DATA_FILE_e  { FS_FID_CFG_DATA_FILE  = 4 }  ViewerFileId_CFG_DATA_FILE_t ;
typedef enum ViewerFSId_CFG_INTERNAL_DATA_e  { FS_FID_CFG_INTERNAL_DATA  = 5 }  ViewerFileId_CFG_INTERNAL_DATA_t ;
typedef enum ViewerFSId_MORPHEUS_DATA_e  { FS_FID_MORPHEUS_DATA  = 6 }  ViewerFileId_MORPHEUS_DATA_t ;
typedef enum ViewerFSId_FFU_DL_TABLE_e  { FS_FID_FFU_DL_TABLE  = 7 }  ViewerFileId_FFU_DL_TABLE_t ;
typedef enum ViewerFSId_FTL_LOG_PTR_e  { FS_FID_FTL_LOG_PTR  = 16 }  ViewerFileId_FTL_LOG_PTR_t ;
typedef enum ViewerFSId_EI_CONFIG_e  { FS_FID_EI_CONFIG  = 17 }  ViewerFileId_EI_CONFIG_t ;
typedef enum ViewerFSId_ERR_FILE_NAME_MP_e  { FS_FID_ERR_FILE_NAME_MP  = 18 }  ViewerFileId_ERR_FILE_NAME_MP_t ;
typedef enum ViewerFSId_ERR_FILE_NAME_PS_e  { FS_FID_ERR_FILE_NAME_PS  = 19 }  ViewerFileId_ERR_FILE_NAME_PS_t ;
typedef enum ViewerFSId_EI_GLOBALS_e  { FS_FID_EI_GLOBALS  = 20 }  ViewerFileId_EI_GLOBALS_t ;
typedef enum ViewerFSId_MORPHEUS_USERROM_PAYLOAD_e  { FS_FID_MORPHEUS_USERROM_PAYLOAD  = 22 }  ViewerFileId_MORPHEUS_USERROM_PAYLOAD_t ;
typedef enum ViewerFSId_MORPHEUS_PAYLOAD_e  { FS_FID_MORPHEUS_PAYLOAD  = 23 }  ViewerFileId_MORPHEUS_PAYLOAD_t ;
typedef enum ViewerFSId_NAND_REG_DEFAULT_VALUES_e  { FS_FID_NAND_REG_DEFAULT_VALUES  = 24 }  ViewerFileId_NAND_REG_DEFAULT_VALUES_t ;
typedef enum ViewerFSId_NVME_DST_LOG_e  { FS_FID_NVME_DST_LOG  = 28 }  ViewerFileId_NVME_DST_LOG_t ;
typedef enum ViewerFSId_NVME_ERROR_LOG_e  { FS_FID_NVME_ERROR_LOG  = 32 }  ViewerFileId_NVME_ERROR_LOG_t ;

#line 84 "d:/gitrepo/atlas3_release/source/befs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_LBA_RANGE_TYPE_e  { FS_FID_LBA_RANGE_TYPE  = 38 }  ViewerFileId_LBA_RANGE_TYPE_t ;
typedef enum ViewerFSId_HOST_METADATA_DB_e  { FS_FID_HOST_METADATA_DB  = 39 }  ViewerFileId_HOST_METADATA_DB_t ;
typedef enum ViewerFSId_NAMESPACE_e  { FS_FID_NAMESPACE  = 40 }  ViewerFileId_NAMESPACE_t ;
typedef enum ViewerFSId_MANUFACTURING_SECTOR_e  { FS_FID_MANUFACTURING_SECTOR  = 41 }  ViewerFileId_MANUFACTURING_SECTOR_t ;
typedef enum ViewerFSId_EOM_LANE_DESC_DB_e  { FS_FID_EOM_LANE_DESC_DB  = 42 }  ViewerFileId_EOM_LANE_DESC_DB_t ;
typedef enum ViewerFSId_MST_INPUT_e  { FS_FID_MST_INPUT  = 51 }  ViewerFileId_MST_INPUT_t ;
typedef enum ViewerFSId_MST_OUTPUT_e  { FS_FID_MST_OUTPUT  = 52 }  ViewerFileId_MST_OUTPUT_t ;
typedef enum ViewerFSId_DUMMY_DIR_SYNC_e  { FS_FID_DUMMY_DIR_SYNC  = 93 }  ViewerFileId_DUMMY_DIR_SYNC_t ;
typedef enum ViewerFSId_VIEWER_XML_e  { FS_FID_VIEWER_XML  = 95 }  ViewerFileId_VIEWER_XML_t ;
typedef enum ViewerFSId_SECURITY0_e  { FS_FID_SECURITY0  = 100 }  ViewerFileId_SECURITY0_t ;
typedef enum ViewerFSId_SECURITY1_e  { FS_FID_SECURITY1  = 101 }  ViewerFileId_SECURITY1_t ;
typedef enum ViewerFSId_SECURITY2_e  { FS_FID_SECURITY2  = 102 }  ViewerFileId_SECURITY2_t ;
typedef enum ViewerFSId_SECURITY3_e  { FS_FID_SECURITY3  = 103 }  ViewerFileId_SECURITY3_t ;
typedef enum ViewerFSId_SECURITY4_e  { FS_FID_SECURITY4  = 104 }  ViewerFileId_SECURITY4_t ;
typedef enum ViewerFSId_SECURITY5_e  { FS_FID_SECURITY5  = 105 }  ViewerFileId_SECURITY5_t ;
typedef enum ViewerFSId_SECURITY6_e  { FS_FID_SECURITY6  = 106 }  ViewerFileId_SECURITY6_t ;
typedef enum ViewerFSId_SECURITY7_e  { FS_FID_SECURITY7  = 107 }  ViewerFileId_SECURITY7_t ;
typedef enum ViewerFSId_SECURITY8_e  { FS_FID_SECURITY8  = 108 }  ViewerFileId_SECURITY8_t ;
typedef enum ViewerFSId_SECURITY9_e  { FS_FID_SECURITY9  = 109 }  ViewerFileId_SECURITY9_t ;
typedef enum ViewerFSId_SECURITY10_e  { FS_FID_SECURITY10  = 110 }  ViewerFileId_SECURITY10_t ;
typedef enum ViewerFSId_SECURITY11_e  { FS_FID_SECURITY11  = 111 }  ViewerFileId_SECURITY11_t ;
typedef enum ViewerFSId_SECURITY12_e  { FS_FID_SECURITY12  = 112 }  ViewerFileId_SECURITY12_t ;

#line 125 "d:/gitrepo/atlas3_release/source/befs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_SYSTEM_IP_CFG_e  { FS_FID_SYSTEM_IP_CFG  = 221 }  ViewerFileId_SYSTEM_IP_CFG_t ;
typedef enum ViewerFSId_BBM_PS_0_e  { FS_FID_BBM_PS_0  = 224 }  ViewerFileId_BBM_PS_0_t ;
typedef enum ViewerFSId_BBM_PS_1_e  { FS_FID_BBM_PS_1  = 225 }  ViewerFileId_BBM_PS_1_t ;
typedef enum ViewerFSId_MBBT_e  { FS_FID_MBBT  = 226 }  ViewerFileId_MBBT_t ;
typedef enum ViewerFSId_BBM_UECC_LIST_PS_0_e  { FS_FID_BBM_UECC_LIST_PS_0  = 227 }  ViewerFileId_BBM_UECC_LIST_PS_0_t ;
typedef enum ViewerFSId_BBM_UECC_LIST_PS_1_e  { FS_FID_BBM_UECC_LIST_PS_1  = 228 }  ViewerFileId_BBM_UECC_LIST_PS_1_t ;
typedef enum ViewerFSId_FTL_MB_STATUS_TABLE_e  { FS_FID_FTL_MB_STATUS_TABLE  = 229 }  ViewerFileId_FTL_MB_STATUS_TABLE_t ;

typedef enum ViewerFSId_IFT_OPT_e  { FS_FID_IFT_OPT  = 230 }  ViewerFileId_IFT_OPT_t ;


typedef enum ViewerFSId_DLE_e  { FS_FID_DLE  = 233 }  ViewerFileId_DLE_t ;


typedef enum ViewerFSId_OVERLAY_FILE_e  { FS_FID_OVERLAY_FILE  = 242 }  ViewerFileId_OVERLAY_FILE_t ;
typedef enum ViewerFSId_FWT_EVENT_DIC_e  { FS_FID_FWT_EVENT_DIC  = 244 }  ViewerFileId_FWT_EVENT_DIC_t ;
typedef enum ViewerFSId_RAM_CODE_IMAGE_e  { FS_FID_RAM_CODE_IMAGE  = 246 }  ViewerFileId_RAM_CODE_IMAGE_t ;
typedef enum ViewerFSId_PSLNK_CODE_IMAGE_e  { FS_FID_PSLNK_CODE_IMAGE  = 248 }  ViewerFileId_PSLNK_CODE_IMAGE_t ;
typedef enum ViewerFSId_LLFS_CODE_IMAGE_e  { FS_FID_LLFS_CODE_IMAGE  = 250 }  ViewerFileId_LLFS_CODE_IMAGE_t ;
typedef enum ViewerFSId_PCU_CODE_IMAGE_e  { FS_FID_PCU_CODE_IMAGE  = 252 }  ViewerFileId_PCU_CODE_IMAGE_t ;
typedef enum ViewerFSId_SET_EVENT_DIC_e  { FS_FID_SET_EVENT_DIC  = 254 }  ViewerFileId_SET_EVENT_DIC_t ;
typedef enum ViewerFSId_TERMINATOR_e  { FS_FID_TERMINATOR  = FS_FID_INVALIDFILE }  ViewerFileId_TERMINATOR_t ;

#line 20 "d:/gitrepo/atlas3_release/source/infra/cfgmanager/inc_public/cfg_manager_api.h"

#line 44 "d:/gitrepo/atlas3_release/source/infra/cfgmanager/inc_public/cfg_manager_api.h"
typedef enum CFG_SetNumbers_e
{
   RESERVED_CFG                     = 0,
   PS_CFG_SET                          ,
   SYS_VERSION_CFG                     ,
   FTL_FORMAT_CFG_SET                  ,
   FTL_PHYSICAL_CFG_SET                ,
   THERMAL_THRESHOLD_SET               ,
   HIM_CFG                             ,
   FE_ID_CONTROLLER_CFG                ,
   FE_DEFAULT_SET_FEAT_CFG             ,
   FTL_EXT_CFG_SET                     ,
   PS_MRPH_TABLE_ENTRY                 ,
   PS_MRPH_CVD_TRACKING                ,
   PS_MRPH_FLGP_AND_WA                 ,
   PS_MRPH_CVD_DRD                     ,
   PS_MRPH_FAST_SLC_PROGRAM            ,
   PS_MRPH_READ_SCRUB                  ,
   PS_MRPH_ZQ_CALIBRATION              ,
   PS_MRPH_LDPC                        ,
   PS_MRPH_REH_OPTION                  ,
   PS_MRPH_READ_PERF_IMPROVEMENTS      ,
   PS_MRPH_LDPC_STATIC_CONFIG          ,
   PS_MRPH_BES                         ,
   PS_MRPH_VCGR                        ,
   PS_MRPH_FTL                         ,
   PS_MRPH_NAND_MT_VERSION             ,
   SEC_CFG                             ,
   FE_SAVED_DATA                       ,
   NAMESPACES_CFG                      ,
   FE_SERIAL_MODEL                     ,
   FE_CUSTOM_CFG                       ,
   FE_PM_CFG                           ,
   FE_CMD_SUPPORTED_CFG                ,
   VENDOR_SPECIFIC_IDLOG               ,
   PS_MRPH_MAP                         ,
   FE_GLOBALLY_UNIQUE                  ,
   PS_CFG_FAST_SLC_PROGRAM             ,
   PS_CFG_VCGR                         ,
   FE_THERMAL_THROTTLING               ,
   PS_KGD_NAND_PARAMS                  ,
   PS_EFUSE_ROM_PARAMS                 ,
   FTL_PARAM_CFG_SET                   ,
   SMBUS_CONFIG_SET                    ,
   FE_AUTO_POWER_TRANSIT_TABLE         ,
   FE_DATA_CONTAINER                   ,
   SYS_SKU_VERSION_CFG                 ,
   FE_DEVICE_UNIQUE_INFO               ,
   FE_DEVICE_MODEL_IDS_INFO            ,
   FE_POWER_STATES_CFG                 ,
   PS_MRPH_SGD                         ,
   PS_CFG_SGD                          ,
   FE_SANITIZE_DATA                    ,
   FE_SANITIZE_CFG                     ,
   FE_PLP_CFG                          ,
   CONTROL_DEBUG_FEATURE               ,
   FE_HMB_CFG                          ,
   FE_EXTERNAL_INFO                    ,
   PS_MRPH_IFT                         ,
   PS_MRPH_ERASE                       ,
   PS_MRPH_INIT                        ,
   FTL_HSLC_CFG_SET                    ,
   FFU_CFG                             ,

   PS_MRPH_TIMING                      ,

   FE_NOPSC                            ,
   HW_ACTIVE_IDLE_CFG                  ,
   FE_ERROR_RECOVERY_IDLOG             ,
   VENDOR_SPECIFIC_C1LOG               ,

#line 120 "d:/gitrepo/atlas3_release/source/infra/cfgmanager/inc_public/cfg_manager_api.h"
   FE_BP_CFG                           ,

   LAST_CFG                    = 0x7FFF,
}   CFG_SetNumbers_t;

enum CFG_Status_e
{
   CFG_DLE_FAIL = STATUS_CFG_ERROR_BASE,
   CFG_DLE_CFG_SET_SIZE_MISALIGN,
   CFG_INIT_FAIL,
   CFG_INIT_READ_FAIL,
   CFG_INIT_WRITE_FAIL,
   CFG_DLE_FAIL_SET_SIZE_NOT_MATCHED,
   CFG_DLE_FAIL_CONFIG_SET_NOT_FOUND,
   CFG_READ_FAIL,
   CFG_WRITE_FAIL,
   CFG_SIGNATURE_MISMATCH,
   CFG_CONFIG_SET_SIZE_MISALIGNED,
   CFG_FFU_WRONG_BUFFER_PASSED,
   CFG_FFU_CONFIG_SET_NOT_FOUND_INDEX_FILE,
   CFG_FFU_CONFIG_FILE_NOT_RECEIVED,
   CFG_FFU_NOT_ABLE_FIND_CONFIG_SET_HDR,
   CFG_CACHE_BUFFER_TOO_SMALL,
   CFG_INDEX_NOT_SET,
   CFG_PMM_DPS2_SIZE_ALLOCATED_BY_PMM_DOES_NOT_MATCH_HDR_BLOB,
   CFG_DLE_SIZE_MISMATCH_FTL_PHY_CFG_SET,
   CFG_FFU_CONFIG_SET_NOT_FOUND_IN_FLUF,
   CFG_DATA_CONFIG_CRC_CALCULATION_FAIL,
   CFG_DIAG_CONFIGURE_CRC_MISMATCH,
   CFG_FFU_FTL_RAM_PTR_NULL,
   CFG_DLE_INDEX_OUT_OF_BOUNDS,

   CFG_BUFFER_ALLOC_FAIL = 0x100,

}  ;

enum CFG_Config_Sets_Source_e
{
   CFG_GENERAL_SET = 0,
   CFG_MORPHEUS_SET,
   CFG_MORPHEUS_GENERATED_SET,
};

typedef struct CFG_SetHdr_s
{
   uint32_t    setNumber;
   uint32_t    setVersion;
   uint32_t    setSizeInBytes;
   uint32_t    numberOfSets;
   uint32_t    isFFUAble;
   uint32_t    signature;
   uint32_t    sourceConfigSet;
   uint32_t    reserved;
}   CFG_SetHdr_t;



Status_t CFG_ManagerInit(SysBootPhase_t bootPhase);
Status_t CFG_ReadCfg(uint32_t setNumber, uint8_t *pUserBuffer, uint32_t size);
Status_t CFG_WriteCfg(uint32_t setNumber, uint8_t *pUserBuffer, uint32_t size);
uint32_t CFG_GetSetLength(uint32_t Set_ID);

Status_t CFG_DPS2MemSize(uint32_t *returnSize);
Status_t CFG_PrepareFastDPS(void);
void CFG_SetFastDPS(void);
Status_t CFG_restoreFastDPS(void);

#line 32 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_mrph_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_driver_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"

#line 160 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
typedef enum
{
  EFUSE_BIT_CE_DIRECT_MODE    = 0,
  EFUSE_BIT_CE_DECODABLE_MODE = 0x7,
  EFUSE_BIT_CE_BUS_MUX_MODE   = 0x38,
} eFuse_CE_SelectMode_enum;





typedef union
{
   struct
   {
      uint32_t   JB4BootFlag : 3;
      uint32_t   AtbLocked : 3;

      uint32_t   NoCFSSetByFailedBoot : 3;

#line 183 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
      uint32_t   LifecycleProvisionedBit : 3;
      uint32_t   LifecycleDeployedBit : 3;
      uint32_t   LifecycleRMABit : 3;
      uint32_t   JBBootConvMode  : 3;
      uint32_t   EEPROMBoot  : 3;
      uint32_t   AtbListening : 3;
      uint32_t   BUIDEnabled : 3;
      uint32_t   reserved2 : 2;
   }bits;
   uint32_t   all32;

}eFuse_control_bits_t;

#line 222 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
union eFuseWord83_t
{
    struct
    {
       uint32_t CRC16_PROD : 16;
       uint32_t LFOSC_CAL :  7 ;
       uint32_t LFOSC_SECDED : 5;
       uint32_t reserved : 4;
    } bits;
    uint32_t all32;
};


typedef struct
{
    union eFuseWord83_t word83;

    union
    {
        struct
        {
            uint32_t REF_VCURVE_FT : 3;
            uint32_t REF_VLEVEL_FT : 3;
            uint32_t TOSC_CAL_FT : 7;
            uint32_t LFOSC_CAL_FT : 7;
            uint32_t LOT_NUMBER_FT : 11;
            uint32_t reserved : 1;
        } bits;
        uint32_t all32;
    } word84;

    union
    {
        struct
        {
            uint32_t SECDED_FT : 7;
            uint32_t STAMP_FT1 : 3;
            uint32_t STAMP_FT2 : 3;
            uint32_t STAMP_FT3 : 3;
            uint32_t reserved : 16;
        } bits;
        uint32_t all32;
    } word85;

    union
    {
        struct
        {
            uint32_t STRS_DET_TL0 : 10;
            uint32_t STRS_DET_TL1 : 10;
            uint32_t STRS_DET_TL2 : 10;
            uint32_t STRS_DET_TL3 : 2;
        } bits;
        uint32_t all32;
    } word86;

    union
    {
        struct
        {
            uint32_t STRS_DET_TL3 : 8;
            uint32_t STRS_DET_TR0 : 10;
            uint32_t STRS_DET_TR1 : 10;
            uint32_t STRS_DET_TR2 : 4;
        } bits;
        uint32_t all32;
    } word87;

    union
    {
        struct
        {
            uint32_t STRS_DET_TR2 : 6;
            uint32_t STRS_DET_TR3 : 10;
            uint32_t STRS_DET_BR0 : 10;
            uint32_t STRS_DET_BR1 : 6;
        } bits;
        uint32_t all32;
    } word88;

    union
    {
        struct
        {
            uint32_t STRS_DET_BR1 : 4;
            uint32_t STRS_DET_BR2 : 10;
            uint32_t STRS_DET_BR3 : 10;
            uint32_t STRS_DET_C0 : 8;
        } bits;
        uint32_t all32;
    } word89;

    union
    {
        struct
        {
            uint32_t STRS_DET_C0 : 2;
            uint32_t STRS_DET_C1 : 10;
            uint32_t STRS_DET_SECDED : 10;
            uint32_t reserved : 10;
        } bits;
        uint32_t all32;
    } word90;


}eFuse_Ram_BitArray_t;

typedef union
{
   struct
   {
      uint32_t   Lifecycle2ProvisionedBit : 3;
      uint32_t   Lifecycle2DeployedBit : 3;
      uint32_t   Lifecycle2RMABit : 3;
      uint32_t   Lifecycle3ProvisionedBit : 3;
      uint32_t   Lifecycle3DeployedBit : 3;
      uint32_t   Lifecycle3RMABit : 3;
      uint32_t   reserved : 14;
   } bits;
   uint32_t all32;
} eFuseExtraLifecycleBits_t;

typedef struct eFuseSecondaryKeyParityWords_s
{

   union
   {
      struct
      {
         uint32_t secSBSKHashParity2 : 10;
         uint32_t secSBSKHashParity3 : 10;
         uint32_t secFAKEKParity2 : 11;
         uint32_t reserved : 1;
      } bits;
      uint32_t all32;
   } parityWords_1;

   union
   {
      struct
      {
         uint32_t secPRSKHashParity2 : 10;
         uint32_t secPRSKHashParity3 : 10;
         uint32_t secFAKEKParity3 : 11;
         uint32_t reserved : 1;
      } bits;
      uint32_t all32;
   } parityWords_2;
}eFuseSecondaryKeyParityWords_t;

typedef struct eFuseSecondaryKeyArray_s
{

   eFuseSecondaryKeyParityWords_t parityWords;

   uint32_t secPRSKHash2[ (0x8) ];
   uint32_t secPRSKHash3[ (0x8) ];
   uint32_t secSBSKHash2[ (0x8) ];
   uint32_t secSBSKHash3[ (0x8) ];

} eFuseSecondaryKeyArray_t;



typedef struct eFuse_bit_Array_t
{
   union
   {
      struct
      {
         uint32_t y_coord : 8;
         uint32_t x_coord : 8;
         uint32_t wafer_lot : 16;
      } bits;
      uint32_t all32;
   } word0;

   union
   {
      struct
      {
         uint32_t wafer_num : 5;
         uint32_t ws_version : 3;
         uint32_t reserved0 : 12;
         uint32_t ref_vcurve : 3;
         uint32_t ref_vlevel : 3;

         uint32_t TOSC_COARSE_TRIM : 3;
         uint32_t reserved1 : 3;

#line 414 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
      } bits;
      uint32_t all32;
   } word1;

   union
   {
      struct
      {
         uint32_t io12_cal_n : 6;
         uint32_t io12_cal_p : 6;
         uint32_t tdet_dout_rt : 10;
         uint32_t tdet_dout_hot : 10;
      } bits;
      uint32_t all32;
   } word2;

   union
   {
      struct
      {
         uint32_t tosc_cal : 7;
         uint32_t reserved1 : 1;
         uint32_t secded_rt : 10;
         uint32_t secded_hot :  (10) ;
         uint32_t reserved2 : 4;
      } bits;
      uint32_t all32;
   } word3;

   uint32_t secFAKEK[ (0x08) ];

   uint32_t secFAKEK2[ (0x08) ];

#line 449 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
   uint32_t secSystemEK[ (0x10) ];
   uint32_t secSystemHK[ (0x8) ];

   uint32_t secFAKEK3[ (0x08) ];

#line 456 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
   union
   {
      struct
      {
         uint32_t secFAKEKParity : 11;
         uint32_t secSystemEKParity : 11;
         uint32_t secSystemHKParity : 10;
      } bits;
      uint32_t all32;
   } word52;

   union
   {
      struct
      {







         uint32_t rom_ce_select_mode : 6;
         uint32_t reserved1 : 4;

#line 484 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
         uint32_t unusedCVD: 17;
         uint32_t PERSTHandling : 3;
         uint32_t reserved2 : 2;
      } bits;
      uint32_t all32;
   } word53;

   eFuse_control_bits_t controlBits;

   uint32_t secSBSKHash[ (0x8) ];

   union
   {
      struct
      {
         uint32_t secSBSKHashParity : 10;
         uint32_t unusedCVDCRC8 : 8;
         uint32_t ws_pass_stamp : 3;
         uint32_t ft_pass_stamp : 3;
         uint32_t fuse_version : 8;
      } bits;
      uint32_t all32;
   } word63;




   union
   {
      struct
      {
         uint32_t core_v_cal_lo : 10;
         uint32_t core_v_cal_hi : 10;
         uint32_t core_v_secded : 7;
         uint32_t unused : 5;
      } bits;
      uint32_t all32;
   } word64;

   union
   {
      struct
      {
         uint32_t io_v_cal_lo : 10;
         uint32_t io_v_cal_hi : 10;
         uint32_t io_v_secded : 7;
         uint32_t unused : 5;
      } bits;
      uint32_t all32;
   } word65;

   uint32_t secPRSKHash[ (0x8) ];

   union
   {
      struct
      {
         uint32_t leakage_room_temp : 16;
         uint32_t leakage_high_temp : 16;
      } bits;
      uint32_t all32;
   } word74;

   union
   {
      struct
      {
         uint32_t leakage_room_temp_secded : 6;
         uint32_t leakage_high_temp_secded : 6;
         uint32_t ROM_use_FWTA : 3;
         uint32_t TDET_COMP_M1 : 3;
         uint32_t TDET_COMP_M2 : 3;
         uint32_t unused : 11;
      } bits;
      uint32_t all32;
   } word75;

   union
   {
      struct
      {
         uint32_t vdd_aon_leak_rt : 16;
         uint32_t vdd_fphy_leak_rt : 16;
      } bits;
      uint32_t all32;
   } word76;

   union
   {
      struct
      {
         uint32_t temp_rt : 8;
         uint32_t secded_leak_rt : 8;
         uint32_t vdd_aon_leak_hot : 16;
      } bits;
      uint32_t all32;
   } word77;

   union
   {
      struct
      {
         uint32_t vdd_fphy_leak_hot : 16;
         uint32_t temp_hot : 8;
         uint32_t secded_leak_hot : 8;
      } bits;
      uint32_t all32;
   } word78;

   union
   {
      struct
      {
         uint32_t voltage_scale : 8;
         uint32_t temp_sens0_dout_rt : 10;
         uint32_t temp_sens0_dout_hot : 10;
         uint32_t temp_sens1_dout_rt : 4;
       } bits;
      uint32_t all32;
   } word79;

   union
   {
      struct
      {
         uint32_t temp_sens1_dout_rt : 6;
         uint32_t temp_sens1_dout_hot : 10;
         uint32_t temp_sens2_dout_rt : 10;
         uint32_t temp_sens2_dout_hot : 6;
      } bits;
      uint32_t all32;
   } word80;

   union
   {
      struct
      {
         uint32_t temp_sens2_dout_hot : 4;
         uint32_t temp_sens3_dout_rt : 10;
         uint32_t temp_sens3_dout_hot : 10;
         uint32_t reserved : 8;
      } bits;
      uint32_t all32;
   } word81;

   union
   {
      struct
      {
         uint32_t secPRSKHashParity : 10;
         uint32_t temp_sens_secded_rt : 10;
         uint32_t temp_sens_secded_hot : 10;
         uint32_t reserved : 2;
      } bits;
      uint32_t all32;
   } word82;

#line 649 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
   union
   {
       struct
       {
          uint32_t CRC16_PROD : 16;
          uint32_t LFOSC_CAL :  7 ;
          uint32_t LFOSC_COARSE_TRIM :  3 ;
          uint32_t LFOSC_SECDED : 5;
          uint32_t reserved : 1;
       } bits;
       uint32_t all32;
   } word83;

   union
   {
       struct
       {
           uint32_t REF_VCURVE_FT : 3;
           uint32_t REF_VLEVEL_FT : 3;
           uint32_t TOSC_CAL_FT : 7;
           uint32_t LFOSC_CAL_FT : 7;
           uint32_t LOT_NUMBER_FT : 11;
           uint32_t reserved : 1;
       } bits;
       uint32_t all32;
   } word84;

   union
   {
       struct
       {
           uint32_t SECDED_FT : 7;
           uint32_t STAMP_FT1 : 3;
           uint32_t STAMP_FT2 : 3;
           uint32_t STAMP_FT3 : 3;
           uint32_t FT_VER : 5;
           uint32_t reserved : 11;
       } bits;
       uint32_t all32;
   } word85;

   union
   {
       struct
       {
           uint32_t STRS_DET_TL0 : 10;
           uint32_t STRS_DET_TL1 : 10;
           uint32_t STRS_DET_TL2 : 10;
           uint32_t STRS_DET_TL3 : 2;
       } bits;
       uint32_t all32;
   } word86;

   union
   {
       struct
       {
           uint32_t STRS_DET_TL3 : 8;
           uint32_t STRS_DET_TR0 : 10;
           uint32_t STRS_DET_TR1 : 10;
           uint32_t STRS_DET_TR2 : 4;
       } bits;
       uint32_t all32;
   } word87;

   union
   {
       struct
       {
           uint32_t STRS_DET_TR2 : 6;
           uint32_t STRS_DET_TR3 : 10;
           uint32_t STRS_DET_BR0 : 10;
           uint32_t STRS_DET_BR1 : 6;
       } bits;
       uint32_t all32;
   } word88;

   union
   {
       struct
       {
           uint32_t STRS_DET_BR1 : 4;
           uint32_t STRS_DET_BR2 : 10;
           uint32_t STRS_DET_BR3 : 10;
           uint32_t STRS_DET_C0 : 8;
       } bits;
       uint32_t all32;
   } word89;

   union
   {
       struct
       {
           uint32_t STRS_DET_C0 : 2;
           uint32_t STRS_DET_C1 : 10;
           uint32_t STRS_DET_SECDED : 10;
           uint32_t reserved : 10;
       } bits;
       uint32_t all32;
   } word90;



   eFuseExtraLifecycleBits_t word91;





   uint32_t word92_93[2];

   eFuseSecondaryKeyArray_t eFuseSecondaryKeyArray;

#line 769 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
}   eFuse_bit_Array_t;




typedef struct
{
   uint32_t    signature;
   eFuse_Ram_BitArray_t eFuseRamBits;
} RAM_AON_eFuseData_t;


typedef struct
{
   uint32_t    signature;
   eFuse_bit_Array_t  eFuseBitArray;
   BOOL hotValidity;

   uint32_t keyCopy;

   BOOL secFAKEKParityValidity;
   BOOL secSystemEKParityValidity;
   BOOL secSystemHKParityValidity;
   BOOL secFASKHashParityValidity;
   BOOL secSBSKHashParityValidity;
   BOOL secPRSKHashParityValidity;
}   AON_eFuseData_t;

#line 823 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data_triton16plus.h"
__inline static  BOOL SYS_eFuse_GetIO12Cal(const AON_eFuseData_t *pEfuseData, uint32_t defaultValueP, uint32_t defaultValueN, uint32_t *pValueP, uint32_t *pValueN)
{

   if (pEfuseData->hotValidity && pEfuseData->eFuseBitArray.word2.bits.io12_cal_p != 0 &&
                                  pEfuseData->eFuseBitArray.word2.bits.io12_cal_n != 0)
   {
      *pValueP = pEfuseData->eFuseBitArray.word2.bits.io12_cal_p;
      *pValueN = pEfuseData->eFuseBitArray.word2.bits.io12_cal_n;
      return  (1) ;
   }
   else
   {
      *pValueP = defaultValueP;
      *pValueN = defaultValueN;
      return  (0) ;
   }
}

#line 22 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_data.h"

#line 21 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_driver_api.h"

#line 58 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_driver_api.h"
enum
{
   STATUS_INFRA_EFUSE_SECDED_ONE_BIT_ERROR = STATUS_INFRA_EFUSE_SECDED_BASE,
   STATUS_INFRA_EFUSE_SECDED_UNCORRECTABLE_ERROR,
   STATUS_INFRA_EFUSE_SECDED_INVALID_SIZE,
};


enum
{
   STATUS_EFUSE_TIMEOUT_ERROR = STATUS_INFRA_EFUSE_BASE,
   STATUS_EFUSE_BUFFER_ALLOCATION_ERROR,
   STATUS_EFUSE_INIT_ERROR,
   STATUS_EFUSE_PROGRAMMING_ERROR,
   STATUS_SEC_EFUSE_INCORRECT_BSTATE,
};


enum
{
   SEC_EFUSE_KEY_COPY_0 = 0,
   SEC_EFUSE_KEY_COPY_1 = 1,
   SEC_EFUSE_KEY_COPY_2 = 2,


   SEC_EFUSE_KEY_LAST = SEC_EFUSE_KEY_COPY_2,

};




Status_t SYS_eFuseInit(void);

eFuse_bit_Array_t *SYS_GeteFuseData(void);

AON_eFuseData_t *SYS_GetAONeFuseData(void);


RAM_AON_eFuseData_t *SYS_GetAONeFuseRAMData(void);


Status_t SYS_eFuseRead(uint32_t *efuse_data, uint32_t efuse_addr);
Status_t SYS_eFuseReadArray(uint32_t *efuse_data, uint32_t efuse_addr, uint32_t num_words);
Status_t SYS_eFuseWrite(uint32_t efuse_data, uint32_t efuse_addr);
Status_t SYS_eFuseWriteArray(uint32_t* efuse_data, uint32_t efuse_addr, uint32_t num_words);

void     SYS_EfuseMarginalRead(BOOL32 enableMarginalRead);
Status_t SYS_eFuse_SECDED_CheckAndCorrect(uint32_t* pData, uint32_t dataSizeBits, uint32_t parity);

#line 111 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_driver_api.h"
uint32_t SYS_eFuse_SECDED_Encode(uint32_t *pData, uint32_t dataSizeBits);
BOOL     SYS_eFuseIsATBInListeningMode(void);
BOOL     SYS_eFuseIsJB4BootInConvMode(void);
BOOL     SYS_eFuseIsReadFromEEPROM(void);
BOOL     SYS_eFuseROMUseFWTA(void);
BOOL     SYS_eFuseIsATBLocked(void);
BOOL     SYS_eFuseReturnBUIDValue(void);


   eFuse_CE_SelectMode_enum SYS_GetCESelectModeFromEFuse(void);

#line 126 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/efuse_driver_api.h"
Status_t SYS_eFuseBurnATBListeningBits(void);
Status_t SYS_eFuseBurnATBLockedBits(void);
Status_t SYS_eFuseBurnBUIDEnableBits(void);


Status_t SYS_eFuseActivateKeyCopy(uint32_t keyCopyNum, BOOL32 parityCheckRequired);


__inline static  BOOL32 SYS_EFuse_IsCoveredByCache(uint32_t efuseAddress)
{
   return efuseAddress * sizeof(uint32_t) <  sizeof(eFuse_bit_Array_t);
}

__inline static  BOOL32 SYS_IsDeployedBitSet(eFuse_bit_Array_t *pEfuseData, uint32_t copy)
{
   BOOL32 retValue =  (0) ;

   switch (copy)
   {
      case SEC_EFUSE_KEY_COPY_0:
         retValue =  ( ((pEfuseData->controlBits.bits.LifecycleDeployedBit & 0x7 ) & ((pEfuseData->controlBits.bits.LifecycleDeployedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
         break;
      case SEC_EFUSE_KEY_COPY_1:
         retValue =  ( ((pEfuseData->word91.bits.Lifecycle2DeployedBit & 0x7 ) & ((pEfuseData->word91.bits.Lifecycle2DeployedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
         break;
      case SEC_EFUSE_KEY_COPY_2:
         retValue =  ( ((pEfuseData->word91.bits.Lifecycle3DeployedBit & 0x7 ) & ((pEfuseData->word91.bits.Lifecycle3DeployedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
         break;
   }
   return retValue;
}

__inline static  BOOL32 SYS_IsProvisionedBitSet(eFuse_bit_Array_t *pEfuseData, uint32_t copy)
{
   BOOL32 retValue =  (0) ;

   switch (copy)
   {
   case SEC_EFUSE_KEY_COPY_0:
      retValue =  ( ((pEfuseData->controlBits.bits.LifecycleProvisionedBit & 0x7 ) & ((pEfuseData->controlBits.bits.LifecycleProvisionedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   case SEC_EFUSE_KEY_COPY_1:
      retValue =  ( ((pEfuseData-> word91.bits.Lifecycle2ProvisionedBit & 0x7 ) & ((pEfuseData-> word91.bits.Lifecycle2ProvisionedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   case SEC_EFUSE_KEY_COPY_2:
      retValue =  ( ((pEfuseData->word91.bits.Lifecycle3ProvisionedBit & 0x7 ) & ((pEfuseData->word91.bits.Lifecycle3ProvisionedBit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   }
   return retValue;
}

__inline static  BOOL32 SYS_IsRMABitSet(eFuse_bit_Array_t *pEfuseData, uint32_t copy)
{
   BOOL32 retValue =  (0) ;

   switch (copy)
   {
   case SEC_EFUSE_KEY_COPY_0:
      retValue =  ( ((pEfuseData->controlBits.bits.LifecycleRMABit & 0x7 ) & ((pEfuseData->controlBits.bits.LifecycleRMABit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   case SEC_EFUSE_KEY_COPY_1:
      retValue =  ( ((pEfuseData->word91.bits.Lifecycle2RMABit & 0x7 ) & ((pEfuseData->word91.bits.Lifecycle2RMABit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   case SEC_EFUSE_KEY_COPY_2:
      retValue =  ( ((pEfuseData->word91.bits.Lifecycle3RMABit & 0x7 ) & ((pEfuseData->word91.bits.Lifecycle3RMABit & 0x7 ) - 1))  ? (1)  : (0)  ) ;
      break;
   }
   return retValue;
}

#line 33 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_mrph_api.h"

#line 45 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_mrph_api.h"
   typedef uint16_t nandParamAddr_t;


   typedef uint16_t nandParamData_t;


typedef struct PS_MRPHTableEntry_s
{

   uint8_t morpheusVersion[6];
   uint8_t padding[6];
   uint8_t sectionTerminator[4];
}  PS_MRPHTableEntry_t;

typedef struct PS_MRPHTableEntryConfig_s
{
   CFG_SetHdr_t            setHdr;
   PS_MRPHTableEntry_t setData;
}   PS_MRPHTableEntryConfig_t;



typedef struct PS_MRPH_NandMtVersion_s
{
   uint32_t             nandVersion;
   uint8_t              nandType;
   uint8_t              mtVersion;
   uint8_t              romFuseRPGM;
   uint8_t              morpheusFWFormatVersion;

}  PS_MRPH_NandMtVersion_t;

typedef struct PS_MRPH_NandMtVersionConfig_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_NandMtVersion_t setData;
}  PS_MRPH_NandMtVersionConfig_t;

typedef struct PS_KGD_DataSet_s
{
   uint16_t year;
   uint16_t month;
   uint16_t day;
   uint16_t hour;
   uint16_t minutes;
   uint16_t second;
   uint32_t reserved1;
   uint8_t  productCode[5];
   uint8_t  lotNo[13];
   uint8_t  waferId[10];
   uint16_t wafNo;
   uint16_t xAdd;
   uint16_t yAdd;
   uint16_t reserved2;
   uint32_t dutNo;
   uint32_t paramVer;
   uint8_t  programVer[3];
   uint8_t  reserved3[9];
}   PS_KGD_DataSet_t;

typedef struct PS_KGD_ConfigSet_s
{
   CFG_SetHdr_t         setHdr;
   PS_KGD_DataSet_t     setData;
}   PS_KGD_ConfigSet_t;

typedef struct PS_EFUSE_DataSet_s
{
   uint32_t data[ (2)  +  (4)  + 1];
   uint8_t padding[4];
}   PS_EFUSE_DataSet_t;

typedef struct PS_EFUSE_ConfigSet_s
{
   CFG_SetHdr_t         setHdr;
   PS_EFUSE_DataSet_t   setData;
}   PS_EFUSE_ConfigSet_t;



enum
{
   Morpheus_TableEntry = 0,
   CVDTracking_TableEntry,
   FLGPandWA_TableEntry,
   CVDDRDScan_TableEntry,
   FastSLCProgram_TableEntry,
   ReadScrub_TableEntry,
   LDPC_TableEntry,
   REHOption_TableEntry,
   ReadPerfImprv_TableEntry,
   BES_TableEntry,
   VCGR_TableEntry,
   FTL_TableEntry,
   SGD_TableEntry,
   IFT_TableEntry,
   ERASE_TableEntry,
   INIT_TableEntry,

   TIMING_TableEntry,

   RSV_TableEntry,
   EndOfMap_TableEntry,

   NUM_TABLE_ENTRIES,
};

typedef struct
{
   uint16_t TableEntry;
   uint16_t FormatVersion;
   uint16_t ValueVersion;
   uint16_t PayloadSize;
} PS_MRPH_MAP_TableEntry_t;

typedef struct PS_MRPH_MAP_Params_s
{
   PS_MRPH_MAP_TableEntry_t mapParams[NUM_TABLE_ENTRIES];
}   PS_MRPH_MAP_Params_t;

typedef struct PS_MRPH_MAP_CFG_Params_s
{
   CFG_SetHdr_t            setHdr;
   PS_MRPH_MAP_Params_t    setData;
}   PS_MRPH_MAP_CFG_Params_t;

Status_t PS_MRPH_DLE_Init();
Status_t PS_MRPH_DLE_Init_End(void);
void PS_MRPH_DLE_ReleaseBuffer(void);
Status_t PS_MRPH_readMORPHEUS(uint32_t tableEntry, uint8_t *buffer, uint32_t size);
Status_t PS_MRPH_ProcessPackage(uint8_t* pFileData);
void PS_MRPH_getNandMtVersion(uint8_t *pDstBuffer);
Status_t CFG_FFU_parseMRPHPackage(uint8_t *ffuBuffer, BOOL *updateNeeded);
Status_t CFG_FFU_parseMRPHPackage_CleanUp();
Status_t PS_MRPH_fillMORPHEUSTable(uint8_t *buffer);

void PS_MRPH_processDLEPackageHdr(uint8_t *pFileData, uint8_t *found, uint32_t *retIndex, uint32_t formatVersionUROM, uint32_t valueVersionUROM, uint32_t *foundValueVersionDLE);
Status_t PS_MRPH_DLE_ProcessRSPackage(uint8_t *pFileData, BOOL *updateNeeded);
Status_t PS_NPARAM_CFG_GenerateFastSLCData( uint8_t *pMrphBuffer);

void PS_NPARAM_CFG_getFastSLCData(uint8_t* pDstBuffer);
Status_t PS_NPARAM_CFG_GenerateVCGRData( uint8_t *pMrphBuffer);
void PS_NPARAM_CFG_getVCGRData(uint8_t* pDstBuffer);
Status_t PS_NPARAM_CFG_GenerateSGDData (uint8_t *pMrphBuffer);
void PS_NPARAM_CFG_getSGDData (uint8_t* pDstBuffer);
Status_t SYS_Diag_getTestStampUserrom(uint8_t *pDstBuffer);
Status_t SYS_Diag_compareTestStampPayload(uint8_t *first, uint8_t *second);

#line 4 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_def.h"










typedef uint32_t PS_FlashType_e;
typedef DeVBA_t PS_InfraGBBData_t;



typedef struct PS_ConfigData_s
{
   PS_FlashType_e FlashType;
   uint8_t        FlashID[  ( 4  * sizeof(uint16_t))  ];
   uint8_t        FlashExtdID[  ( 4  * sizeof(uint16_t))  ];
   uint16_t       blocksPerPlane;
   uint8_t        diesPerPhysChip;
   uint8_t        xorZonesPerBlock;
   uint16_t       burstModeThesValuS;
   uint8_t        align[6];
} PS_ConfigData_t;





typedef struct PS_Container_s
{
   volatile uint16_t          mpps0Sig;
   volatile uint16_t          mpps1Sig;
   PS_ConfigData_t            *pCfgData;
   uint32_t                   *pRelinkTbl_PS0;
   uint32_t                   *pRelinkTbl_PS1;
   uint32_t                   *pBbmCounters_PS0;
   uint32_t                   *pBbmCounters_PS1;
   uint32_t                   *pBbmLastGoodBlk_PS0;
   uint32_t                   *pBbmLastGoodBlk_PS1;
   uint32_t                   *pBbmUeccList_PS0;
   uint32_t                   *pBbmUeccList_PS1;
   uint32_t                   *pBbmUeccList_S_PS0;
   uint32_t                   *pBbmUeccList_S_PS1;
   uint32_t                   *pBbmDccmData_PS0;
   uint32_t                   *pBbmDccmData_PS1;
   PS_InfraGBBData_t          *pInfraGBBData_PS0;
   PS_InfraGBBData_t          *pInfraGBBData_PS1;
   uint32_t                   *pPsMrphDir;
   uint16_t                   productionDone;
   uint16_t                   nandParamDefault;
   uint32_t                   *pVpgmBaseAddr;
   uint32_t                   *pVcgrBaseAddr;
   uint32_t                   *pNANDDieParams;
   uint32_t                   *pSgdBaseAddr;
   uint32_t                   *pSgd_TLC_Detect_BaseAddr;
   uint32_t                   *pSgd_SLC_Detect_BaseAddr;
   uint32_t                   *pSgd_Correct_BaseAddrBlanket_PS0;
   uint32_t                   *pSgd_Correct_BaseAddrDie_PS0;

      uint32_t                *pSgd_Correct_BaseAddrBlanket_PS1;
      uint32_t                *pSgd_Correct_BaseAddrDie_PS1;

#line 72 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_def.h"
   PS_MRPH_NandMtVersion_t    nandMtVersion;

#line 79 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_def.h"
} PS_Container_t;


extern char __ct_[(( 0x00000400  >= (sizeof(PS_Container_t)))) ? 1 : -1] ;

#line 4 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_api.h"

#line 9 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_container_api.h"
extern PS_Container_t *pContainer;

#line 23 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"

#line 273 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
enum
{
   SLC_HOST_CLOSED_BLK  =  (0 << 1) ,
   SLC_HOST_OPEN_BLK    = ( (0 << 1)  |  (1 << 0) ),
   SLC_CTRL_CLOSED_BLK  =  (1 << 1) ,
   SLC_CTRL_OPEN_BLK    = ( (1 << 1)  |  (1 << 0) ),
   TLC_HOST_CLOSED_BLK  = ( (1 << 2)   |  (0 << 1) ),
   TLC_HOST_OPEN_BLK    = ( (1 << 2)   |  (0 << 1)  |  (1 << 0) ),
   RS_FTL_NON_CLASIFIED,
   INFRA_BLK            =  (7) ,
};
typedef uint16_t BlkCat_e;


enum
{
   RS_SRC_PASSIVE_SCAN = 0,
   RS_SRC_RANDOM_SCAN,
   RS_SRC_ACTIVE_SCAN,
   RS_SRC_REH,
   RS_SRC_CVD,
   RS_SRC_UT_RS,
};
typedef uint16_t EntrySrc_e;


enum
{
   CVD_REFRESH_SRC_FTL_ARS = 0,
   CVD_REFRESH_SRC_DIAG,
   CVD_REFRESH_SRC_ETC,
   CVD_REFRESH_CHANGED_POLICY,
};
typedef uint16_t CvdRefreshSrc_e;

enum
{
   ABOVE_QD8 = 0,
   QD1,
   QD5678,
   QD234,
};
typedef uint16_t QdState_e;

#line 325 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef struct RS_MorpheusParamsCB_s
{
   uint8_t openBlockNumWlsToScan;
   uint8_t closedBlockNumWlsToScan;
   uint8_t openBlockWls[ 16 ];
   uint8_t closedBlockWls[ 16 ];
   uint8_t rfu[6];
}   RS_MorpheusParamsCB_t, *RS_MorpheusParamsCB_p;

typedef struct
{
   uint32_t minVacancy;
   uint32_t numDropped;
   uint32_t retryRelo;
   uint32_t infraRelo;
   uint32_t ftlRelo;
   uint32_t accMode;
   uint32_t psvScanHBER;
   uint32_t rndScanSW;
   uint32_t actScanSW;
   uint32_t rehEntries;
   uint32_t rehFtlRelo;
   uint32_t rehInfraRelo;
   uint32_t PriCvdHandle;
}   RS_debugStat_t;



enum
{
   PS_PHY_RD_REQ_CACHE_MODE_AUTO       = 0,
   PS_PHY_RD_REQ_CACHE_MODE_OFF        = 1,
   PS_PHY_RD_REQ_CACHE_MODE_ON         = 2,
};

enum
{
   PS_PHY_RD_REQ_FIRST_RD_MODE_AUTO       = 0,
   PS_PHY_RD_REQ_FIRST_RD_MODE_OFF        = 1,
   PS_PHY_RD_REQ_FIRST_RD_MODE_ON         = 2,
};

typedef enum
{
   DONT_SKIP_LOAD,
   SKIP_LOAD,
} PS_SkipLoad_t;

typedef enum
{
   PS_UNCOUPLED_PROG = 0,
   PS_COUPLED_PROG,
} PS_CoupledProg_t;

#line 858 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef enum
{
   PS_API_LOWER_PAGE = 0,
   PS_API_MIDDLE_PAGE   ,
   PS_API_UPPER_PAGE    ,
   PS_API_MAX_NUM_OF_PAGES,
   PS_API_MAX_EPWR_PAGE_TYPE,
} PageType_e;

typedef enum
{
   PS_API_MODE_AUTO,
   PS_API_FR_FORCE_OFF,
   PS_API_FR_FORCE_ON,
} FastRead_e;

typedef enum
{
   FLGP_BER_CNTR_GOOD,
   FLGP_BER_CNTR_MARG,
   FLGP_BER_CNTR_BAD,
   FLGP_BER_CNTR_TOTAL,
} FlgpBerCntr_e;

#line 900 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef union vba
{

   uint32_t vba32;


   struct FTL_flavor1_s
   {
      uint32_t fmuInMB       : 18;
      uint32_t MBID          : 14;
   }   FTL_flavor1;


   struct FTL_flavor2_s
   {
      uint32_t fmuInMB        : 18;
      uint32_t MB             : 10;
      uint32_t MD             : 4;
   }   FTL_flavor2;


   struct FTL_flavor3_s
   {
      uint32_t fmuInMB        : 18;
      uint32_t MB             : 10;

      uint32_t CG             :  1;
      uint32_t MD             :  3;

#line 932 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }   FTL_flavor3;


   struct vba_bits_s
   {

      uint32_t fmu            :  4 ;
      uint32_t diePageInMB    :  14 ;
      uint32_t MB             :  10 ;
      uint32_t MD             :  4 ;
   }   bits;


   struct PS_Flavor2_s
   {
      uint32_t fmu            : 4;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t MB             : 10;
      uint32_t MD             : 4;
   }   PS_flavor2;


   struct PS_flavor3_s
   {
      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t MB             : 10;
      uint32_t MD             : 4;
   }   PS_flavor3;

   struct VbaSlc_s
   {
      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   : 13;
      uint32_t block          : 10;

      uint32_t fim_high       : 1;
      uint32_t hFim           : 1;
      uint32_t dieInFim       : 2;

#line 981 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }   vbaSlc;

   struct vbaTlc_s
   {

      uint32_t fmu            : 2;
      uint32_t plane          : 2;
      uint32_t lFim           : 1;
      uint32_t diePageInBlk   :13;
      uint32_t block          :10;

      uint32_t fim_high       : 1;
      uint32_t hFim           : 1;
      uint32_t dieInFim       : 2;

#line 1001 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }   vbaTlc;
}   VBA_t;


typedef union flashAddress_X3
{
   uint32_t all32;
   struct
   {
      uint32_t fmu           : 2;
      uint32_t plane         : 2;
      uint32_t lFim          : 1;
      uint32_t tlcPage       : 2;
      uint32_t stringNo      : 3;
      uint32_t wordLine      : 8;
      uint32_t phyBlock      : 10;

      uint32_t fim_high      : 1;
      uint32_t hFim          : 1;
      uint32_t dieInFIM      : 2;

#line 1026 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }bits;
} flashAddressX3_t;

typedef union flashAddress_X1
{
   uint32_t all32;
   struct
   {
      uint32_t fmu           : 2;
      uint32_t plane         : 2;
      uint32_t lFim          : 1;
      uint32_t stringNo      : 3;
      uint32_t wordLine      : 8;
      uint32_t RFU           : 2;
      uint32_t phyBlock      : 10;

      uint32_t fim_high      : 1;
      uint32_t hFim          : 1;
      uint32_t dieInFIM      : 2;

#line 1050 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }bits;
} flashAddressX1_t;


typedef union PS_API_DeVBA
{
   uint32_t devba32;


   struct
   {
      uint32_t fmu           : 2;
      uint32_t plane         : 1;
      uint32_t fimInPS       : 2;
      uint32_t logicalPage   : 11;
      uint32_t block         : 12;

      uint32_t PS            : 1;
      uint32_t dieInFim      : 3;

#line 1073 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   }bits;
} PS_API_DeVBA_t;

typedef struct BlkEntry_s
{
   VBA_t       VBA;
   BlkCat_e    blkCat;
   uint16_t    syndWt;
   uint16_t    JBID;
   EntrySrc_e  source;
   uint16_t    origSource;
   uint8_t     isBWL;
   uint8_t     hiPriority :1;
   uint8_t     isProc     :1;
   uint8_t     ishSLC     :2;
   uint8_t     rfu        :4;
}   BlkEntry_t;

#line 1104 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef union PS_XOR_ParityBinComposite
{
   uint16_t     all16;
   struct
   {
      uint16_t     parBin         :8;
      uint16_t     parBinGroupID  :8;
   }parts;
} PS_XOR_ParityBinComposite_t;


typedef struct PS_XOR_WriteParams_s
{
   uint8_t OPBID              : 4;
   uint8_t XBID               : 4;
} PS_XOR_WriteParams_t;

typedef struct PS_XOR_ReadParams_s
{
   uint8_t OPBID              : 4;
   uint8_t isParityPage       : 1;

   uint8_t skipXOR            : 1;
   uint8_t ignoreHBER          :1;
   uint8_t rfu1               : 1;
} PS_XOR_ReadParams_t;

typedef  union PS_XOR_Params_s
{
   uint8_t                 all;
   PS_XOR_WriteParams_t    writeParams;
   PS_XOR_ReadParams_t     readParams;
} PS_XOR_Params_t;



typedef struct PS_MsgTypeCntFlags_s
{

   uint8_t msgType;

   PS_XOR_Params_t xor;


   uint8_t blkType      : 1;
   uint8_t isHSLC       : 1;
   uint8_t eiDoInject   : 1;
   uint8_t eiIvIdx      : 4;
   uint8_t eiIsPsInternal : 1;


   uint8_t secCnt;
} PS_MsgTypeCntFlags_t;

#line 1177 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef  union PS_Common_D0_s
{
   uint32_t                all;
   PS_MsgTypeCntFlags_t    split;
} PS_Common_D0_t;



typedef struct PS_ReqGeneric_s
{

   PS_Common_D0_t  dw0;

   VBA_t VBA;

   uint32_t mbxAddr;

   uint32_t cookie;
} PS_ReqGeneric_t;







typedef struct WritePhyReqOption_s
{
   uint8_t isRawWriteReq   :1;
   uint8_t cache           :1;
   uint8_t xferOnly        :1;
   uint8_t isDRAM          :1;


   uint8_t supportMstCh      :1;
   uint8_t disableDynWrite   :1;
   uint8_t oneProgZeroVer    :1;
   uint8_t disableCoupleWr   :1;

#line 1219 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
} WritePhyReqOptionFields_t;
typedef union WritePhyReqOption_u
{
   uint8_t all;
   WritePhyReqOptionFields_t fields;
} WritePhyReqOption_t;




typedef struct PHY_writeReqSpecific_s
{

   uint16_t            rfu;

#line 1236 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   WritePhyReqOption_t option;
   uint8_t             compType;
   uint32_t            dataAddrLP;
   uint32_t            headerAddrLP;
   uint32_t            progLoopCountAddr;
} PHY_writeReqSpecific_t;

typedef struct PHY_writeReq_s
{









   PS_ReqGeneric_t common;

   PHY_writeReqSpecific_t specific;
} PHY_writeReq_t;







typedef struct ReadPhyReqOption_s
{
   uint16_t isRawReadReq   : 1;
   uint16_t noReadRetry    : 1;
   uint16_t forcedCVD      : 1;
   uint16_t rehReadOption  : 1;
   uint16_t src            : 1;
   uint16_t enSR           : 1;
   uint16_t cache          : 2;
   uint16_t firstRd        : 2;
   uint16_t fastRdMode     : 2;
   uint16_t xferOnly       : 1;
   uint16_t isDRAM         : 1;
   uint16_t doCvdComp        : 1;
   uint16_t doBoundaryWLComp : 1;
} ReadPhyReqOptionFields_t;

typedef union ReadPhyReqOption_u
{
   uint16_t all;
   ReadPhyReqOptionFields_t fields;
} ReadPhyReqOption_t;

typedef struct PHY_readReqSpecific_s
{

   uint16_t             rfu : 12;

#line 1295 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint16_t             forceDLA     : 1;
   uint16_t             sbNum        : 2;
   uint16_t             isFADILogRead: 1;
   ReadPhyReqOption_t   option;
   uint32_t             dataAddrLP;
   uint32_t             headerAddrLP;
   uint8_t              cvdShifts[4];
} PHY_readReqSpecific_t;

typedef struct PHY_readReq_s
{









   PS_ReqGeneric_t   common;

   PHY_readReqSpecific_t specific;
} PHY_readReq_t;


typedef struct ReadPhyHeaderRehOption_s
{
   uint8_t  rehStatus;
   uint8_t  decodeSuccessStage;
   uint16_t syndromeWeight;
   uint8_t  ldpcPowerLevel;
   uint8_t  rfu[27];
} ReadPhyHeaderRehOption_t;


typedef struct PS_DIAG_RawReadStatusByte_s
{
   uint32_t statusByte      :8;
   uint32_t rehStatus       :1;
   uint32_t successStage    :4;
   uint32_t syndromWeight   :16;
   uint32_t ldpcPowerLevel  :2;
   uint32_t validREHdata    :1;
}PS_DIAG_RawReadStatusByte_t;




typedef struct PHY_eraseReqSpecific_s
{

   uint16_t          rfu;

#line 1351 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint8_t           ignoreFailure     : 1;
   uint8_t           forceFlashWr      : 1;
   uint8_t           shallowErasePhyBlk: 1;

   uint8_t           disableFlashFill  : 1;
   uint8_t           rfu0              : 4;

#line 1360 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint8_t           rfu1;
   uint32_t          PEC;
   uint8_t           rfu2[4];
   uint32_t          eraseLoopCountAddr;
} PHY_eraseReqSpecific_t;

typedef struct PHY_eraseReq_s
{









   PS_ReqGeneric_t   common;

   PHY_eraseReqSpecific_t specific;
} PHY_eraseReq_t;







typedef struct PS_ReadDMCReqSpecific_s
{
   uint8_t     rfu0[3];
   uint8_t     failedPSRequestIndex;
   uint8_t     mode;
   uint8_t     isPhysical;
   uint8_t     doCvdComp        : 1;
   uint8_t     doBoundaryWLComp : 1;
   uint8_t     rfu_bits  : 6;
   uint8_t     rfu1[1];
   uint8_t     callerData[8];
} PS_ReadDMCReqSpecific_t;

typedef struct PS_ReadDMCReq_s
{









   PS_ReqGeneric_t common;

   PS_ReadDMCReqSpecific_t specific;
} PS_ReadDMCReq_t;




typedef struct INFRA_tempTickReqSpecific_s
{
   uint32_t           bufAddr;
   uint32_t           tickCnt;

   uint16_t           nandTemp;
   uint16_t           asicTemp;

#line 1430 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint32_t           msgCount;
} INFRA_tempTickReqSpecific_t;

typedef struct INFRA_tempTickReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempTickReqSpecific_t specific;
} INFRA_tempTickReq_t;




typedef struct FADI_ELReqSpecific_s
{
   uint32_t severity;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
} FADI_ELReqSpecific_t;

typedef struct FADI_EL_Req_s
{
   PS_ReqGeneric_t      common;
   FADI_ELReqSpecific_t specific;
} FADI_EL_Req_t;




typedef struct INFRA_IFSStatusReqSpecific_s
{
   Status_t           status;
   uint8_t            rfu0[12];
} INFRA_IFSStatusReqSpecific_t;

typedef struct INFRA_IFSStatusReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_IFSStatusReqSpecific_t specific;
} INFRA_IFSStatusReq_t;




typedef struct INFRA_swFreqSetReqSpecific_s
{
   uint8_t            rfu0[16];
} INFRA_swFreqSetReqSpecific_s;

typedef struct INFRA_swFreqSetReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempTickReqSpecific_t specific;
} INFRA_swFreqSetReq_t;





typedef struct INFRA_changePWRStateReqSpecific_s
{
   uint32_t          oldPwrState;
   uint32_t          newPwrState;
   uint32_t          newPwrDpsState;
   uint8_t           rfu0[4];
} INFRA_changePWRStateReqSpecific_t;

typedef struct INFRA_changePWRStateReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_changePWRStateReqSpecific_t specific;
} INFRA_changePWRStateReq_t;





typedef struct INFRA_changePWRStateRespSpecific_s
{
   uint32_t          oldPwrState;
   uint32_t          newPwrState;
   uint32_t          status;
   uint8_t           rfu0[4];
} INFRA_changePWRStateRespSpecific_t;

typedef struct INFRA_changePWRStateResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_changePWRStateRespSpecific_t specific;
} INFRA_changePWRStateResp_t;





typedef struct INFRA_ClkTickMsgSpecific_s
{
   uint32_t          clkTickCount;
   uint8_t          rfu[12];
} INFRA_ClkTickMsgSpecific_t;

typedef struct INFRA_ClkTickMsg_s
{









   PS_ReqGeneric_t   common;

   INFRA_ClkTickMsgSpecific_t specific;
} INFRA_ClkTickMsg_t;









typedef struct INFRA_writePhyFailureRespSpecific_s
{
   uint32_t          errStatus;
   uint8_t           rfu0[12];
} INFRA_writePhyFailureRespSpecific_t;

typedef struct INFRA_writePhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_writePhyFailureRespSpecific_t specific;
} INFRA_writePhyFailureResp_t;





typedef struct INFRA_readPhyFailureRespSpecific_s
{
   uint32_t         errStatus;
   uint32_t         cookie;
   uint8_t          failedFmuBitField;
   uint8_t          rfu0[3];
   uint32_t         rfu1;
} INFRA_readPhyFailureRespSpecific_t;

typedef struct INFRA_readPhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_readPhyFailureRespSpecific_t specific;
} INFRA_readPhyFailureResp_t;





typedef struct INFRA_erasePhyFailureRespSpecific_s
{
   uint32_t          errStatus;
   uint8_t           rfu0[12];
} INFRA_erasePhyFailureRespSpecific_t;

typedef struct INFRA_erasePhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_erasePhyFailureRespSpecific_t specific;
} INFRA_erasePhyFailureResp_t;





typedef struct INFRA_BERAboveThrRespSpecific_s
{
   uint8_t           rfu0[16];
} INFRA_BERAboveThrRespSpecific_t;

typedef struct INFRA_BERAboveThrResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_BERAboveThrRespSpecific_t specific;
} INFRA_BERAboveThrResp_t;





typedef struct INFRA_tempAboveThrRespSpecific_s
{
   uint32_t          src;
   uint32_t          measTemp;
   uint32_t          thrTemp;
   uint8_t           rfu0[4];
} INFRA_tempAboveThrRespSpecific_t;

typedef struct INFRA_tempAboveThrResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempAboveThrRespSpecific_t specific;
} INFRA_tempAboveThrResp_t;





typedef struct INFRA_flushBbmFilesReqSpecific_s
{
   uint32_t          fid;
   uint32_t          byteCount;
   uint8_t*          pUserBuffer;
   uint8_t           rfu0[4];
} INFRA_flushBbmFileReqSpecific_t;


typedef struct INFRA_flushBbmFileToIfsReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_flushBbmFileReqSpecific_t specific;
} INFRA_flushBbmFileReq_t;





typedef struct INFRA_flushIftFilesReqSpecific_s
{
   uint32_t          fid;
   uint32_t          byteCount;
   uint8_t*          pUserBuffer;
   uint8_t           rfu0[4];
} INFRA_flushIftFileReqSpecific_t;


typedef struct INFRA_flushIftFileToIfsReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_flushIftFileReqSpecific_t specific;
} INFRA_flushIftFileReq_t;










typedef struct FTL_hostWriteReqSpecific_s
{
   uint32_t          JBLIdx;

   uint16_t          ctxIdxs[2];

#line 1810 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint32_t          compType;
   uint32_t          rfu0;
} FTL_hostWriteReqSpecific_t;

typedef struct FTL_hostWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostWriteReqSpecific_t specific;
} FTL_hostWriteReq_t;






typedef struct FTL_hostReadReqSpecific_d4_bits_s
{
   uint32_t                      secOff         : 8;
   uint32_t                      streamStatus   : 2;
   uint32_t                      rehSecCount    : 8;
   uint32_t                      rehSecOff      : 3;

   uint32_t                      doPsRndRdOptz  : 1;
   uint32_t                      lowQueDepth    : 1;
   uint32_t                      qdState        : 2;

#line 1849 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint32_t                      rfu1           : 7;

} FTL_hostReadReqSpecific_d4_bits_t;

typedef  union FTL_hostReadReqSpecific_d4_s
{
   uint32_t                             all;
   FTL_hostReadReqSpecific_d4_bits_t    bits;
} FTL_hostReadReqSpecific_d4_t;

typedef struct FTL_hostReadReqSpecific_s
{
   uint32_t                      JBLIdx;
   uint32_t                      cmdIdx;
   uint32_t                      cmdOffset;
   FTL_hostReadReqSpecific_d4_t dw4;
} FTL_hostReadReqSpecific_t;

typedef struct FTL_hostReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostReadReqSpecific_t specific;
} FTL_hostReadReq_t;





typedef struct FTL_hostlessPartialFMUReadReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint32_t          secOff         : 8;
   uint32_t          rfu0           : 24;
} FTL_hostlessPartialFMUReadReqSpecific_t;

typedef struct FTL_hostlessPartialFMUReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostlessPartialFMUReadReqSpecific_t specific;
} FTL_hostlessPartialFMUReadReq_t;




typedef struct FTL_xorParityWriteReqSpecific_s
{


   uint32_t          JBLIdx     :  16;
   uint32_t          isDRAM     :  16;

#line 1924 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint32_t          compType : 16;
   uint32_t          binNum1st : 8;
   uint32_t          binNum2nd : 8;

} FTL_xorParityWriteReqSpecific_t;

typedef struct FTL_xorParityWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_xorParityWriteReqSpecific_t specific;
} FTL_xorParityWriteReq_t;




typedef struct FTL_controlWriteReqSpecific_s
{
   uint32_t          JBLIdx     :  16;
   uint32_t          isDRAM     :  16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint32_t          compType;
} FTL_controlWriteReqSpecific_t;

typedef struct FTL_controlWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_controlWriteReqSpecific_t specific;
} FTL_controlWriteReq_t;





typedef struct FTL_controlReadReqSpecific_s
{
   uint32_t          JBLIdx : 16;
   uint32_t          isDRAM : 16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint8_t           secOff;
   uint8_t           isHostData : 1;
   uint8_t           isRLA      : 1;
   uint8_t           isPsSenseAhead  : 1;
   uint8_t           reserved   : 5;
   uint8_t           rfu0[2];
} FTL_controlReadReqSpecific_t;

typedef struct FTL_controlReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_controlReadReqSpecific_t specific;
} FTL_controlReadReq_t;




typedef struct FTL_ReadPage0ReqSpecific_s
{
   uint32_t          JBLIdx : 16;
   uint32_t          isDRAM : 16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint8_t           isHSLC : 1;
   uint8_t           rfu0   : 7;
   uint8_t           rfu1[3];
} FTL_ReadPage0ReqSpecific_t;

typedef struct FTL_ReadPage0Req_s
{









   PS_ReqGeneric_t   common;

   FTL_ReadPage0ReqSpecific_t specific;
} FTL_ReadPage0Req_t;






typedef struct FTL_scanForwardReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          pFFLBA;
   uint8_t           rfu0[8];
} FTL_scanForwardReqSpecific_t;

typedef struct FTL_scanForwardReq_s
{









   PS_ReqGeneric_t   common;

   FTL_scanForwardReqSpecific_t specific;
} FTL_scanForwardReq_t;





typedef struct FTL_phyErasePreparationReqSpecific_s
{
   uint16_t          rfu0;
   uint8_t           ignoreFailure      : 1;
   uint8_t           forceFlashWr       : 1;
   uint8_t           rfu1               : 6;
   uint8_t           rfu2[13];
} FTL_phyErasePreparationReqSpecific_t;

typedef struct FTL_phyErasePreparationReq_s
{









   PS_ReqGeneric_t   common;

   FTL_phyErasePreparationReqSpecific_t specific;
} FTL_phyErasePreparationReq_t;





typedef struct FTL_phyEraseReqSpecific_s
{
   uint16_t          rfu0;
   uint8_t           ignoreFailure     : 1;
   uint8_t           waitForEndErase   : 1;
   uint8_t           forceSGDTrigger   : 1;
   uint8_t           noDecommission    : 1;


   uint8_t           disableFlashFill   : 1;
   uint8_t           rfu1               : 3;
   uint8_t           rfu2;
   uint32_t          PEC;
   uint16_t          waitForJbid;
   uint8_t           opbidOfWaitJbid;
   uint8_t           rfu3[5];

#line 2123 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
} FTL_phyEraseReqSpecific_t;



typedef struct FTL_phyEraseReq_s
{









   PS_ReqGeneric_t   common;

   FTL_phyEraseReqSpecific_t specific;
} FTL_phyEraseReq_t;





typedef struct FTL_barrierReqSpecific_s
{
   uint32_t          barrierId;
   uint32_t          numRequests;
   uint32_t          isControlSync : 1;
   uint32_t          internalOps   : 1;
   uint32_t          internalCVD   : 1;
   uint32_t          rfu1          : 29;
   uint8_t           rfu0[4];
} FTL_barrierReqSpecific_t;

typedef struct FTL_barrierReq_s
{









   PS_ReqGeneric_t   common;

   FTL_barrierReqSpecific_t specific;
} FTL_barrierReq_t;





typedef struct FTL_controlSyncDoneIndSpecific_s
{
   uint32_t          barrierId;
   uint8_t           rfu0[12];
} FTL_controlSyncDoneIndSpecific_t;

typedef struct FTL_controlSyncDoneInd_s
{









   PS_ReqGeneric_t   common;

   FTL_controlSyncDoneIndSpecific_t specific;
} FTL_controlSyncDoneInd_t;




typedef struct FTL_EndEraseMarkerReqSpecific_s
{
   uint16_t          JBId;


   uint8_t           rfu0[14];
} FTL_EndEraseMarkerReqSpecific_t;

typedef struct FTL_EndEraseMarkerReq_s
{









   PS_ReqGeneric_t   common;

   FTL_EndEraseMarkerReqSpecific_t specific;
} FTL_EndEraseMarkerReq_t;





typedef union FMUsOffsetOrHeaderAddr_u
{
   uint32_t   FTL_FMUsOffset;
   uint32_t   PS_headerAddrLP;

} FMUsOffsetOrHeaderAddr_t;

typedef struct FTL_relocationReadReqSpecific_s
{
   uint32_t                   JBLIdx     : 16 ;
   uint32_t                   RLCIdx     : 8  ;
   uint32_t                   FMU_Offset : 5  ;
   uint32_t                   isDRAM     : 1  ;
   uint32_t                   toggleBit  : 1  ;
   uint32_t                   isMasterPS : 1  ;
   uint32_t                   JBA;
   uint32_t                   dataAddrList;
   uint32_t                   headerAddrList;

} FTL_relocationReadReqSpecific_t;


typedef struct FTL_relocationReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_relocationReadReqSpecific_t specific;
} FTL_relocationReadReq_t;






typedef union mountInfoOrDataAddrLP_u
{
   uint32_t          FTL_mountInfo;
   uint32_t          PS_dataAddrLP;

} mountInfoOrDataAddrLP_t;

typedef union numFMUsInMasterOrHeaderAddrLP_u
{
   uint32_t          FTL_numFMUsInMaster;
   uint32_t          PS_headerAddrLP;

} numFMUsInMasterOrHeaderAddrLP_t;


typedef struct FTL_relocationWriteReqSpecific_s
{
   uint32_t                          JBLIdx                 :  16 ;
   uint32_t                          RLCIdx                 :  8 ;
   uint32_t                          isDRAM                 :  1 ;

   uint32_t                          IsHostBlock            :  1 ;
   uint32_t                          rfu                    :  1 ;

#line 2300 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint32_t                          numPaddingFMUs         :  5  ;
   uint32_t                          RSV_ReleaseAddr              ;
   mountInfoOrDataAddrLP_t           mountInfoOrDataAddrLP        ;
   numFMUsInMasterOrHeaderAddrLP_t   numFMUsInMasterOrHeaderAddrs ;

} FTL_relocationWriteReqSpecific_t;


typedef struct FTL_relocationWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_relocationWriteReqSpecific_t specific;
} FTL_relocationWriteReq_t;





typedef union FTL_FLGPReqSpecific_s
{
   struct
   {
      uint32_t          BMAddress;
      uint32_t          respAddr;
      uint32_t          pec;
      uint8_t           logIdx;
      uint8_t           dmcOnly;
      uint8_t           isHybridOrUnknown;
      uint8_t           err_inj;
   } part1;

   struct
   {
      uint16_t          JBLIdx;
      uint8_t           logIdx;
      uint8_t           rfu[9];
      VBA_t             flgpVba;
   } part2;
} FTL_FLGPReqSpecific_t;

typedef struct FTL_FLGPReq_s
{









   PS_ReqGeneric_t   common;

   FTL_FLGPReqSpecific_t specific;
} FTL_FLGPReq_t;





typedef struct FTL_changeHealthStateReqSpecific_s
{
   uint32_t          src;
   uint32_t          oldThrIdx;
   uint32_t          newThrIdx;
   uint8_t           rfu0[4];
} FTL_changeHealthStateReqSpecific_t;

typedef struct FTL_changeHealthStateReq_s
{









   PS_ReqGeneric_t   common;

   FTL_changeHealthStateReqSpecific_t specific;
} FTL_changeHealthStateReq_t;





typedef struct FTL_setHealthStateReqSpecific_s
{
   uint16_t          maxSLC_PEC;
   uint16_t          maxTLC_PEC;
   uint16_t          VPGM_SLC_thrIdx;
   uint16_t          Fast_SLC_thrIdx;
   uint16_t          Fast_TLC_thrIdx;
   uint8_t           rfu0[6];
} FTL_setHealthStateReqSpecific_t;

typedef struct FTL_setHealthStateReq_s
{









   PS_ReqGeneric_t   common;

   FTL_setHealthStateReqSpecific_t specific;
} FTL_setHealthStateReq_t;





typedef struct FTL_MB_decomRespSpecific_s
{
   uint32_t          LogTS;
   uint32_t          psCookie;
   uint8_t           rfu0[8];
} FTL_MB_decomRespSpecific_t;

typedef struct FTL_MB_decomResp_s
{









   PS_ReqGeneric_t   common;

   FTL_MB_decomRespSpecific_t specific;
} FTL_MB_decomResp_t;





typedef struct FTL_JBL_releaseReqSpecific_s
{
   uint32_t          JBLIdx;
   uint16_t          MBID;
   uint16_t          rfu[3];




   uint32_t          VLD_BMP;
} FTL_releaseReqSpecific_t;

typedef struct FTL_releaseReq_s
{









   PS_ReqGeneric_t   common;

   FTL_releaseReqSpecific_t specific;
} FTL_releaseReq_t;





typedef struct FTL_activeRSScanReqSpecific_s
{
   uint32_t          JBLIdx;
   uint8_t           WLIdx;
   uint8_t           IsCtrlBlock;
   uint8_t           rfu0[10];
} FTL_activeRSScanReqSpecific_t;

typedef struct FTL_activeRSScanReq_s
{









   PS_ReqGeneric_t   common;

   FTL_activeRSScanReqSpecific_t specific;
} FTL_activeRSScanReq_t;





typedef struct FTL_setOpenBlockSpecificReq_s
{
   uint16_t          JBLIdx;
   uint8_t           isHostBlock : 1;
   uint8_t           skipLoad    : 1;
   uint8_t           isWABlock   : 1;
   uint8_t           rfu0        : 5;
   uint8_t           rfu1;
   VBA_t             nextZoneVBA;

   uint16_t          MBID;
   uint16_t          rfu2[3];
} FTL_setOpenBlockReqSpecific_t;

typedef struct FTL_setOpenBlockReq_s
{









   PS_ReqGeneric_t   common;

   FTL_setOpenBlockReqSpecific_t specific;
} FTL_setOpenBlockReq_t;





typedef struct FTL_CVDRestoreJBReqSpecific_s
{
   uint32_t          JBLIdx;
   uint16_t          MBID;
   uint16_t          rfu[3];
   uint8_t           rfu0[4];
} FTL_CVDRestoreJBReqSpecific_t;

typedef struct FTL_CVDRestoreJBReq_s
{









   PS_ReqGeneric_t   common;

   FTL_CVDRestoreJBReqSpecific_t specific;
} FTL_CVDRestoreJBReq_t;





typedef struct FTL_JBL_infoRespSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          VBAlastFMU;
   uint16_t          MBID;
   uint16_t          rfu1[3];
} FTL_JBL_infoRespSpecific_t;

typedef struct FTL_JBL_infoResp_s
{









   PS_ReqGeneric_t   common;

   FTL_JBL_infoRespSpecific_t specific;
} FTL_JBL_infoResp_t;





typedef enum RebuildMode_e
{
   REBUILD_UGSD,
   REBUILD_LOAD_FAILURE
} RebuildMode_t;

typedef struct FTL_XOR_RebuildXORZoneReqSpecific_s
{
   uint16_t          JBLIdx;
   uint8_t           rebuildMode;
   uint8_t           rfu;
   uint32_t          VBAFirstErased;
   uint64_t          Bitmap;
} FTL_XOR_RebuildXORZoneReqSpecific_t;

typedef struct FTL_XOR_RebuildXORZoneReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_RebuildXORZoneReqSpecific_t specific;
} FTL_XOR_RebuildXORZoneReq_t;




typedef struct FTL_XOR_storeXORReqSpecific_s
{
   uint16_t          JBLIdx;
   uint8_t           GroupID;
   uint8_t           OPBID_XPB;
   uint8_t           XorStoreOption;
   uint8_t           rfu0[11];
} FTL_XOR_storeXORReqSpecific_t;

typedef struct FTL_XOR_storeXORReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_storeXORReqSpecific_t specific;
} FTL_XOR_storeXORReq_t;





typedef struct FTL_XOR_loadXORReqSpecific_s
{
   uint16_t          JBLIdx;
   uint16_t          ClrBuf;
   uint8_t           GroupID;
   uint8_t           OPBID_XPB;
   uint8_t           XorLoadOption;




   uint8_t           rfu0[9];

} FTL_XOR_loadXORReqSpecific_t;


typedef struct FTL_XOR_loadXORReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_loadXORReqSpecific_t specific;
} FTL_XOR_loadXORReq_t;

#line 2776 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef struct FTL_XOR_PauseForXORRecoveryReqSpecific_s
{
   uint32_t                      JBID;
   uint32_t                      rfu0[2];
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
} FTL_XOR_PauseForXORRecoveryReqSpecific_t;

typedef struct FTL_XOR_PauseForXORRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_PauseForXORRecoveryReqSpecific_t specific;
} FTL_XOR_PauseForXORRecoveryReq_t;





typedef struct FTL_XOR_GetParityPageForRecoveryReqSpecific_s
{
   uint32_t                      rfu0[2];
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       rfu1[2];
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
   uint8_t                       isDRAM;
} FTL_XOR_GetParityPageForRecoveryReqSpecific_t;

typedef struct FTL_GetParityPageForRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_GetParityPageForRecoveryReqSpecific_t specific;
} FTL_XOR_GetParityPageForRecoveryReq_t;





typedef struct FTL_XOR_StartXORRecoveryReqSpecific_s
{
   uint16_t                      FirstMBID;
   uint16_t                      rfu[3];
   uint8_t                       FMUNeedsCorrectionBitmap;
   uint8_t                       parityPageFMUErrorBitmap;
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       bypassUnroll;
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
} FTL_XOR_StartXORRecoveryReqSpecific_t;

typedef struct FTL_XOR_StartXORRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_StartXORRecoveryReqSpecific_t specific;
} FTL_XOR_StartXORRecoveryReq_t;





typedef struct FTL_XOR_EndXORZoneReqSpecific_s
{
   uint32_t          JBLIdx;
   uint8_t           rfu0[12];
} FTL_XOR_EndXORZoneReqSpecific_t;

typedef struct FTL_XOR_EndXORZoneReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_EndXORZoneReqSpecific_t specific;
} FTL_XOR_EndXORZoneReq_t;




typedef struct FTL_ADM_SwapOBIDReqSpecific_s
{
   uint8_t           tmpOBID;
   uint8_t           rfu0[15];
} FTL_ADM_SwapOBIDReqSpecific_t;

typedef struct FTL_ADM_SwapOBIDReq_s
{









   PS_ReqGeneric_t   common;

   FTL_ADM_SwapOBIDReqSpecific_t specific;
} FTL_ADM_SwapOBIDReq_t;




typedef struct FTL_LogReadyIndSpecific_s
{
   uint32_t          CVDRegionOrigin;
   uint32_t          CVDRegionLength;
   uint32_t          UGSDFlag;
   uint32_t          testFlags;
} FTL_LogReadyIndSpecific_t;

typedef struct FTL_LogReadyInd_s
{









   PS_ReqGeneric_t   common;

   FTL_LogReadyIndSpecific_t specific;
} FTL_LogReadyInd_t;




typedef struct FTL_XOR_RecoveryCompletionReqSpecific_s
{
   uint32_t       rfu2;
   uint32_t       rfu3;
   uint8_t        FMUNeedsCorrectionBitmap;
   uint8_t        parityPageFMUErrorBitmap;
   uint8_t        PS0UnrollFMUErrorBitmap;
   uint8_t        PS1UnrollFMUErrorBitmap;
   uint8_t        rfu4;
   uint8_t        rfu5;
   uint8_t        requestingPSID;
   uint8_t        rfu6;

} FTL_XOR_RecoveryCompletionReqSpecific_t;

typedef struct FTL_XOR_RecoveryCompletionReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_RecoveryCompletionReqSpecific_t specific;
} FTL_XOR_RecoveryCompletionReq_t;





typedef struct FTL_SetBkOpsSpecific_s
{
   BOOL32           isBkopsSet;
   uint8_t          rfu0[12];
} FTL_SetBkOpsSpecific_t;

typedef struct FTL_SetBkOpsReq_s
{









   PS_ReqGeneric_t   common;

   FTL_SetBkOpsSpecific_t specific;
} FTL_SetBkOpsReq_t;





typedef struct FTL_UpdatePECReqSpecific_s
{
   uint32_t PEC;
   uint8_t  rfu[12];
} FTL_UpdatePECReqSpecific_t;

typedef struct FTL_UpdatePECReq_s
{









   PS_ReqGeneric_t   common;

   FTL_UpdatePECReqSpecific_t specific;
} FTL_UpdatePECReq_t;





typedef struct FTL_CVDRefreshReqSpecific_s
{
   CvdRefreshSrc_e   reqSource;
   uint8_t           rfu0[14];
} FTL_CVDRefreshReqSpecific_t;

typedef struct FTL_CVDRefreshReq_s
{









   PS_ReqGeneric_t   common;

   FTL_CVDRefreshReqSpecific_t specific;
} FTL_CVDRefreshReq_t;





typedef struct FTL_CVD_DRD_ReqSpecific_s
{
   uint32_t         respAddr;
   uint16_t         OPB_ID_bitmap;
   uint8_t          rfu0[10];
} FTL_CVD_DRD_ReqSpecific_t;

typedef struct FTL_CVD_DRD_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_CVD_DRD_ReqSpecific_t specific;
} FTL_CVD_DRD_Req_t;





typedef struct FTL_GBBSpareSecureErase_ReqSpecific_s
{
   uint8_t        rfu[16];
}
FTL_GBBSpareSecureErase_ReqSpecific_t;

typedef struct FTL_GBBSpareSecureErase_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_GBBSpareSecureErase_ReqSpecific_t specific;
} FTL_GBBSpareSecureErase_Req_t;




typedef struct FTL_GenericException_ReqSpecific_s
{
   uint32_t        cookieForPSAck;
   uint64_t        ueccLba;
   uint32_t        mbPec;
} FTL_GenericException_ReqSpecific_t;

typedef struct FTL_GenericExceptionResp_s
{









   PS_ReqGeneric_t   common;

   FTL_GenericException_ReqSpecific_t specific;
} FTL_GenericExceptionResp_t;




typedef struct FTL_DST_ReqSpecific_s
{
   uint8_t           rfu0[16];
} FTL_DST_ReqSpecific_t;

typedef struct FTL_DST_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_DST_ReqSpecific_t specific;
} FTL_DST_Req_t;




typedef struct FTL_ReqSpecific_s
{
   uint8_t           rfu0[16];
} FTL_ReqSpecific_t;

typedef struct FTL_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_ReqSpecific_t specific;
} FTL_Req_t;




typedef struct PS_ReadScrubRelocReqSpecific_s
{
   uint32_t          JBLIdx;
   uint8_t           blkCat   :  3;
   uint8_t           rfu      :  5;
   uint8_t           srcEntry;
   uint8_t           origSrcEntry;
   uint8_t           isBWL;
   uint16_t          syndWt;
   uint8_t           hiPriority : 1;
   uint8_t           isUrgent : 1;
   uint8_t           rfu1 : 6;
   uint8_t           rfu0[5];
} PS_ReadScrubRelocReqSpecific_t;

typedef struct PS_ReadScrubRelocReq_s
{









   PS_ReqGeneric_t   common;

   PS_ReadScrubRelocReqSpecific_t specific;
} PS_ReadScrubRelocReq_t;





typedef struct PS_MB_decomReqSpecific_s
{
   uint32_t          psCookie;

   uint32_t          isFake;

#line 3228 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   uint8_t           isEraseFailNoDecommission;
   uint8_t           rfu[7];
} PS_MB_decomReqSpecific_t;

typedef struct PS_MB_decomReq_s
{









   PS_ReqGeneric_t   common;

   PS_MB_decomReqSpecific_t specific;
} PS_MB_decomReq_t;





typedef struct PS_JBL_infoReqSpecific_s
{
   uint8_t           rfu0[16];
} PS_JBL_infoReqSpecific_t;

typedef struct PS_JBL_infoReq_s
{









   PS_ReqGeneric_t   common;

   PS_JBL_infoReqSpecific_t specific;
} PS_JBL_infoReq_t;




typedef struct PS_EI_OriginInfo_s
{
   uint8_t eiDoInject   : 1;
   uint8_t eiIvIdx      : 4;
   uint8_t  rfu         : 3;
} PS_EI_OriginInfo_t;


typedef struct PS_XOR_RequestRecoveryReqSpecific_s
{
   uint32_t                      JBLIdx;
   uint16_t                      orgRdPSReqIdx;
   uint8_t                       FMUNeedsCorrectionBitmap;
   PS_EI_OriginInfo_t            eiOriginInfo;
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint16_t                      rfu2;
   uint8_t                       eiMaxPages;
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
} PS_XOR_RequestRecoveryReqSpecific_t;

typedef struct PS_XOR_RequestRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_RequestRecoveryReqSpecific_t specific;
} PS_XOR_RequestRecoveryReq_t;




typedef struct PS_XOR_RecoveryCompletionRespSpecific_s
{
   uint32_t       Rfu[4];
} PS_XOR_RecoveryCompletionRespSpecific_t;

typedef struct PS_XOR_RecoveryCompletionResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_RecoveryCompletionRespSpecific_t specific;
} PS_XOR_RecoveryCompletionResp_t;




typedef struct PS_XOR_PauseForXORRecoveryRespSpecific_s
{
   uint8_t       eiMaxPages;
   uint8_t       isOpenZone;
   uint8_t       Rfu[14];
} PS_XOR_PauseForXORRecoveryRespSpecific_t;

typedef struct PS_XOR_PauseForXORRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_PauseForXORRecoveryRespSpecific_t specific;
} PS_XOR_PauseForXORRecoveryResp_t;

#line 3393 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef struct PS_XOR_GetParityPageForRecoveryRespSpecific_s
{
   uint8_t         parityPageFMUErrorBitmap;
   uint8_t         bypassUnroll;
   uint16_t        Rfu1;
   uint32_t        Rfu2[3];
} PS_XOR_GetParityPageForRecoveryRespSpecific_t;

typedef struct PS_XOR_GetParityPageForRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_GetParityPageForRecoveryRespSpecific_t specific;
} PS_XOR_GetParityPageForRecoveryResp_t;




typedef struct PS_XOR_StartXORRecoveryRespSpecific_s
{
   uint8_t         unrollErrorBitmap;
   uint8_t         endingXORRecovery;
   uint16_t        Rfu1;
   uint32_t        Rfu2[3];
} PS_XOR_StartXORRecoveryRespSpecific_t;

typedef struct PS_XOR_StartXORRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_StartXORRecoveryRespSpecific_t specific;
} PS_XOR_StartXORRecoveryResp_t;

#line 3479 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef struct PS_GenericExceptionReqSpecific_s
{
   uint8_t         exceptionMsgType;
   uint8_t         rfu0;
   uint16_t        errorCode;
   uint32_t        cookieForPSAck;
   uint32_t        report;
   uint8_t         rfu1[4];
} PS_GenericExceptionReqSpecific_t;

typedef struct PS_GenericExceptionReq_s
{









   PS_ReqGeneric_t   common;

   PS_GenericExceptionReqSpecific_t specific;
} PS_GenericExceptionReq_t;




typedef struct PS_HostReadExceptionReqSpecific_s
{
   uint8_t         numSectFailed;
   uint8_t         isWuc;
   uint16_t        rfu;
   uint32_t        cookieForPSAck;
   uint32_t        commandIndex;
   uint32_t        commandOffset;
} PS_HostReadExceptionReqSpecific_t;

typedef struct PS_HostReadExceptionReq_s
{









   PS_ReqGeneric_t   common;

   PS_HostReadExceptionReqSpecific_t specific;
} PS_HostReadExceptionReq_t;




typedef struct PS_CVD_DRD_RespSpecific_s
{
   uint16_t         DRI_bitmap;
   uint8_t          rfu0[14];
} PS_CVD_DRD_RespSpecific_t;

typedef struct PS_CVD_DRD_Resp_s
{









   PS_ReqGeneric_t   common;

   PS_CVD_DRD_RespSpecific_t specific;
} PS_CVD_DRD_Resp_t;

typedef struct PS_FADI_ErLog_Request_Specific_s
{
    uint32_t index;
    uint32_t dumpSize;
    uint32_t rfu[2];
}FADI_PS_ErLog_Request_Specific_t;

typedef struct FADI_PS_ErrorLog_Request_s
{









   PS_ReqGeneric_t   common;

   FADI_PS_ErLog_Request_Specific_t specific;
} FADI_PS_ErrorLog_Request_t;

typedef struct PS_FADI_BigDump_Request_Specific_s
{
    uint8_t *ptr;
    uint32_t dataSize;
    uint32_t bufSize;
    uint8_t dumpRegion;
    uint8_t logType;
    uint8_t dumpType;
    uint8_t rfu8;
}INFRA_FADI_BigDump_Request_Specific_t;

typedef struct FADI_PS_BigDump_Request_s
{









   PS_ReqGeneric_t   common;

   INFRA_FADI_BigDump_Request_Specific_t specific;
} FADI_PS_BigDump_Request_t;




typedef struct PS_DIAG_MsgSpecific_s
{
   uint32_t          diagMsgSubCode;
   uint32_t          msgSpecificBufPtr;
   uint32_t          mpReturnBufferPtr;
   uint8_t           rfu0[4];
} PS_DIAG_MsgSpecific_t;


typedef struct PS_DIAG_Msg_s
{









   PS_ReqGeneric_t   common;

   PS_DIAG_MsgSpecific_t specific;
} PS_DIAG_Msg_t;

typedef struct PS_DIAG_DMC_MsgSpecific_s
{
   uint32_t          diagMsgSubCode;
   uint32_t          msgSpecificBufPtr;
   uint32_t          mpReturnBufferPtr;
   uint8_t           mode;
   uint8_t           isPhysical;
   uint8_t           rfu0[2];
} PS_DIAG_DMC_MsgSpecific_t;


typedef struct PS_DIAG_DMC_Msg_s
{









   PS_ReqGeneric_t   common;

   PS_DIAG_DMC_MsgSpecific_t specific;
} PS_DIAG_DMC_Msg_t;




typedef struct PS_BBM_Test_ReqSpecific_s
{
   VBA_t          VBA;
   uint8_t        blkType;
   uint8_t        phyPlOffset;
   uint16_t       testType;
   uint32_t       msgId;
   uint8_t        rfu0[4];
} PS_BBM_Test_ReqSpecific_t;

typedef struct PS_BBM_Test_Request_s
{









   PS_ReqGeneric_t   common;

   PS_BBM_Test_ReqSpecific_t specific;
} PS_BBM_Test_Request_t;






typedef union PS_Specific_t
{
   uint32_t dword[4];
} PS_specific_t;

typedef struct PS_generic_s
{
   PS_ReqGeneric_t common;
   PS_specific_t   specific;
}PS_genericMsg_t;

#line 3727 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   __inline static  void PS_ConvertDeVBA2PBA(Physical_Block_Address_t *pba, uint32_t DeVBA)
   {
      DeVBA_t DeLinkedVBA;

      DeLinkedVBA.all32 = DeVBA;
      pba->fmu          = DeLinkedVBA.vbaSlc.fmu;
      pba->plane        = DeLinkedVBA.vbaSlc.plane;
      pba->channel      = ( (((DeLinkedVBA).vbaSlc.hFim << 1) + (DeLinkedVBA).vbaSlc.lFim )  + (DeLinkedVBA.vbaSlc.fim_high *  ( ( 8 ) / ( 2 ) ) ));
      pba->page         = DeLinkedVBA.PS_flavor3.diePageInBlk;
      pba->block        = DeLinkedVBA.vbaSlc.block;
      pba->die          = DeLinkedVBA.vbaSlc.dieInFim;
      pba->chip         = 0;

   }

#line 3755 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   __inline static  void PS_ConvertPBA2DeVBA(Physical_Block_Address_t *pba, DeVBA_t *pDeVBA)
   {
      pDeVBA->vbaSlc.fmu = pba->fmu;
      pDeVBA->vbaSlc.plane  = pba->plane;



      {uint32_t _fim_ = (pba->channel % ( ( 8 ) / ( 2 ) ) ); (*pDeVBA).vbaSlc.hFim = (_fim_ >> 1); (*pDeVBA).vbaSlc.lFim = (_fim_ & 1); } ;

      pDeVBA->PS_flavor3.diePageInBlk = pba->page;
      pDeVBA->vbaSlc.block     = pba->block;
      pDeVBA->vbaSlc.fim_high  = (pba->channel /  ( ( 8 ) / ( 2 ) ) );
      pDeVBA->vbaSlc.dieInFim  = (pba->chip *  (4) ) + pba->die;
   }



enum
{
   PS_XOR_LOAD_NAND_TO_XRAM = 0,
   PS_XOR_LOAD_DRAM_TO_XRAM,
   PS_XOR_LOAD_TOTAL_MODE,
};

enum
{
   PS_XOR_STORE_XRAM_TO_NAND = 0,
   PS_XOR_STORE_XRAM_TO_DRAM,
   PS_XOR_STORE_DRAM_TO_NAND,
   PS_XOR_STORE_TOTAL_MODE,
};

#line 3959 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef enum PS_blkType_e
{
   PS_API_BLOCK_TYPE_SLC      = 0,
   PS_API_BLOCK_TYPE_TLC      = 1,


   PS_API_BLOCK_TYPE_TOTAL    = 2,
} PS_blkType_t;

typedef enum PS_RelinkBlkType_e
{


   PS_API_BLOCK_TYPE_GENERIC  = 2,
   PS_API_BLOCK_TYPE_NEW_SPARE_NOT_ERASED = 3,
} PS_RelinkBlkType_t;

typedef enum
{
   PS_COMPLETION_MSG_ON_ENCODE_AND_TRANSFER = 0,
   PS_COMPLETION_MSG_ON_PROGRAM             = 1,
   PS_NO_COMPLETION_MSG_NEEDED              = 2,
} PS_CompletionType_t;





typedef enum PS_ProgVerify_s
{
   PS_WL_PROG_VERIFY = 0,
   PS_WL_PROG_NO_VERIFY,
} PS_ProgVerify_t;

typedef enum PS_ProgType_s
{
   PS_CACHED_PROG,
   PS_UNCACHED_PROG,
} PS_ProgType_t;





enum MAILBOX_MISC_TEST
{
   PS_MBX_SEND_USING_PSID_TEST = 0,
   PS_NAND_READ_EI_MODE_BEFORE_SET        = 1,
   PS_NAND_SET_EI_MODE                    = 2,
   PS_NAND_GET_EI_MODE                    = 3,
};


enum
{
   PS_DMC_TRUE_ERASE_MODE,
   PS_DMC_BIN_SEARCH_MODE,
   PS_DMC_MODE_MAX_CNT,
};
typedef uint32_t PS_DMC_READ_MODE;

enum
{
   EH_STATUS_OK            = 0,

#line 4026 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   NAND_ERASE_FAILURE      = 2,
   UNCORRECTABLE           = 4,
   PROGRAM_FAILURE         = 6,
   NAND_TIMEOUT            = 7,
   HCR                     = 8,
   DCBR                    = 8,
   READ_FROM_ERASED_PAGE   = 10,

   XOR_UNROLL_ERROR        = 12,
   READ_PHY_REH_TRIGGERED  = 15,
   NAND_SGD_FAILURE        = 16,

#line 4041 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   MAX_EH_ERROR            = 0xFF
 };
typedef uint8_t EHStatus_t;

#line 4051 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
enum
{

  PS_FLASH_TYPE_BiCS3_256Gb_EX3 = 0,
  PS_FLASH_TYPE_BiCS3_512Gb_EX3,
  PS_FLASH_TYPE_BiCS4_256Gb_EX3,
  PS_FLASH_TYPE_BiCS4_256Gb_VLV_EX3_B_die,
  PS_FLASH_TYPE_BiCS4_512Gb_VLV_EX3,
  PS_FLASH_TYPE_BiCS4_512Gb_VLV_EX3_B_die,
  PS_FLASH_TYPE_BiCS4_1360Gb_EX4,
  PS_FLASH_TYPE_BiCS5_256Gb_EX3,
  PS_FLASH_TYPE_BiCS5_512Gb_VLV_EX3,
  PS_FLASH_TYPE_BiCS5_1024Gb_VLV_EX3,
  PS_FLASH_TYPE_BiCS5_1024Gb_VLV_EX4,
  PS_FLASH_TYPE_BiCS6_1Tb_EX3_4P_ODT_ON_B,
  PS_FLASH_TYPE_BiCS6_512Gb_EX3_4P_16K,
  PS_FLASH_TYPE_NUM,
};
typedef uint32_t PS_FlashType_e;


enum
{
  PS_INFRA_BLOCK_TYPE_BOOT = 0,
  PS_INFRA_BLOCK_TYPE_PARTITION,
  PS_INFRA_BLOCK_TYPE_FADI,
  PS_INFRA_TOTAL_TYPES_OF_BLOCKS,
};








typedef union
{
   uint16_t all16;
   struct
   {
      uint8_t PSReqIdx;
      uint8_t PSInternalReqIdx;
   } bits;
} PS_NPARAM_Diag_Hdr_t;


typedef struct
{
   uint16_t             paramRegValue;
   PS_NPARAM_Diag_Hdr_t paramHeader;
   uint16_t             paramRegAddr;
   uint16_t             padding;
   uint32_t             featureRegValue;
} PS_NPARAM_Diag_Buffer_t;

#line 4118 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
typedef struct EI_VER_PFPatternPages_s
{
   VBA_t       pagesUsingAlternateBins[ ( (3) ) ];
   VBA_t       pagesUsingRegularBins[ ( (4) ) ][ ( ( (5) * ( (3) ) )  * 2) ];
} EI_VER_PFPatternPages_t;




typedef struct PS_FLGPRespSpecific_s
{
   VBA_t             VBANerPlusOne;
   VBA_t             VBALastValid;
   VBA_t             VBAFirstErased;
   uint16_t          JBLIdx;
   uint8_t           psId;
   uint8_t           rfu;
   VBA_t             np1[ ( ( ( ( 8 ) / ( 2 ) )  * (1)  * (4) )  / (2) ) ][ (2) ];
} PS_FLGPRespSpecific_t;

typedef struct PS_FLGPResp_s
{









   PS_ReqGeneric_t   common;

   PS_FLGPRespSpecific_t specific;
} PS_FLGPResp_t;


typedef enum SET_PS_Debug_Control_e
{
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_RECOVERED             = (1<<0 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_UNRECOVERED           = (1<<1 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_SKIPPED               = (1<<2 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_DISABLED              = (1<<3 ),
   SET_PS_DEBUG_CONTROl_EPWR_STOPONFAILURE                   = (1<<4 ),
   SET_PS_DEBUG_CONTROL_ENABLE_16KUECCDUMP                   = (1<<5 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_RLC_READ                  = (1<<6 ),
   SET_PS_DEBUG_CONTROl_PROGRAM_STOPONFAILURE                = (1<<7 ),
   SET_PS_DEBUG_CONTROl_ERASE_STOPONFAILURE                  = (1<<8 ),
   SET_PS_DEBUG_CONTROl_FIM_EXCP_STOPONFAILURE               = (1<<9 ),
   SET_PS_DEBUG_CONTROl_STOPONBRK                            = (1<<10 ),
}   SET_PS_Debug_Control_t;

typedef enum FW_Debug_Control_e
{
   SET_FW_DBG_LEVEL_DEFAULT                          = 0,
   SET_FW_DBG_LEVEL_RMA                              = 1,
   SET_FW_DBG_LEVEL_FULL                             = 2,
   SET_FW_DBG_LEVEL_MED                              = 3,
   SET_FW_DBG_LEVEL_CUSTOM                           = 4,
   SET_FW_DBG_LEVEL_RDT                              = 5,
   SET_FW_DBG_LEVEL_RMA_SUBM                         = 6,
}   FW_Debug_Control_t;




typedef union PS_DebugControl_u
{
    uint32_t all;

    struct
    {
       uint32_t  stoponUECC_xorRecovered     :1;
       uint32_t  stoponUECC_xorUnRecovered   :1;
       uint32_t  stoponUECC_xorSkipped       :1;
       uint32_t  stoponUECC_xorDisabled      :1;
       uint32_t  stopOnFailure_EPWR          :1;
       uint32_t  enable_16KUECCDUMP          :1;
       uint32_t  stopOnUECC_RLC_Read         :1;
       uint32_t  stopOnFailure_PF            :1;
       uint32_t  stopOnFailure_EF            :1;
       uint32_t  stopOnFailure_FIM_excp      :1;
       uint32_t  stopOnBRK                   :1;
       uint32_t  rfu                         :21;
    } fields;

} PS_DebugControl_t;

#line 4249 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
void     PS_Main(void);
void     PS_NAND_IO_Override(void);
Status_t PS_StartUp(SysBootPhase_t bootPhase);
Status_t PS_InitBoot(SysBootPhase_t bootPhase);
BOOL     PS_IsReady(void);
void     PS_XOR_RecoveryReentryMgr(void);
void     PS_GetConfigData(void *pBuffer);
Status_t PS_isFMU_Erased(VBA_t vba, uint32_t cookie, BOOL * result);
PS_FlashType_e PS_GetFlashType(void);
uint32_t PS_GetNumDiesPerPhysChip(void);
uint32_t PS_GetNumDiesPerPS(void);
void     PS_RS_GetActiveScanMorpheusParam(RS_MorpheusParamsCB_t *pActScanMrph);
void     PS_RS_SwTimeRndScanFreqBaseHandler(void);
void     PS_FADI_RealTimeInit(void);
void     PS_FADI_RealTimeSample(void);
Status_t PS_IFT_RestoreCalibratedSettings(uint8_t fim);

void     PS_FIM_SetAsicDS(uint32_t fim);


void     PS_UpdateInfraGBBList(void);
Status_t PS_IsolateVBABlockRequest(DeVBA_t *ptr, BOOL isolate);
BOOL32 PS_ConvertCurrBlockToVba(uint32_t currBlockIndex, uint8_t blockType, DeVBA_t *deviceVba);

uint32_t *PS_CodeCoverageBuffAddr(void);


uint32_t PS_XOR_GetProgFailPatternPages(VBA_t injVBA, uint8_t  injPattern, EI_VER_PFPatternPages_t* pPatternPages);
uint32_t PS_XOR_GetProgFailPatternPagesWithInjBitmap(VBA_t injVBA, uint8_t  injPattern, EI_VER_PFPatternPages_t* pPatternPages, uint8_t injBitmap);








   __inline static   void PS_LDPC_ISR_Set_Bypass ( uint32_t * addr )
   {
      *addr = *addr |  (0x1) ;
   }










   __inline static  uint32_t PS_GenerateMDFromIndex(uint32_t mbIndex)
   {
      VBA_t vba;




      vba.FTL_flavor3.CG = PS_Instance;
      vba.FTL_flavor3.MD = mbIndex;


      return vba.FTL_flavor2.MD;
   }

#line 4324 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_api.h"
   __inline static  uint16_t PS_GetMBID(uint16_t mb, uint32_t mbindex)
   {
      VBA_t vba;

      vba.PS_flavor2.MB = mb;
      vba.PS_flavor2.MD = PS_GenerateMDFromIndex(mbindex);

      return (uint16_t)(vba.FTL_flavor1.MBID);
   }










   __inline static  BOOL PS_IsOddMD(VBA_t vba){
      return (vba.PS_flavor3.MD & 1);
   }

#line 18 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"

#line 40 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"
typedef void(*DumpCallBack)(uint32_t);




typedef enum
{
   FADI_DUMP_TYPE_ERRORLOG     = 0,
   FADI_DUMP_TYPE_RAM,
   FADI_DUMP_TYPE_SET_EVENTS,
   FADI_DUMP_TYPE_FW_TRACE,
   FADI_DUMP_TYPE_PEC_STATISTICS,
   FADI_DUMP_TYPE_BIN_DATA     = 9,
}FADI_DUMP_TYPE_t;

typedef enum
{
   FADI_DUMP_FIX_REGION = 0,
   FADI_DUMP_CIRCULAR_REGION,

   FADI_DUMP_TELEMETRY_REGION,

#line 64 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"
   FADI_DUMP_COREDUMP_REGION,
   FADI_DUMP_REGION_NUM,
}FADI_Logic_Region_t;

typedef enum
{
   FADI_LOG_TYPE_CRITICAL_ERRORLOG = 0,
   FADI_LOG_TYPE_WARNING_ERRORLOG,
   FADI_LOG_TYPE_BIG_DUMP,
   FADI_LOG_TYPE_UECC_DUMP,
   FADI_LOG_TYPE_SET_EVENTS,
   FADI_LOG_TYPE_MP_RTOS_REGISTERS,
   FADI_LOG_TYPE_PS_RTOS_REGISTERS,
   FADI_LOG_TYPE_HIM_TABLE,
   FADI_LOG_TYPE_RTFADI_MP,
   FADI_LOG_TYPE_RTFADI_PS0,
   FADI_LOG_TYPE_RTFADI_PS1,
   FADI_LOG_TYPE_FW_TRACE,
   FADI_LOG_TYPE_TELEMETRY_SNAPSHOT,
   FADI_LOG_TYPE_TELEMETRY_MP_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_PS0_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_PS1_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_SET_EVENT,
   FADI_LOG_TYPE_TELEMETRY_HIM_TABLE,
   FADI_LOG_TYPE_TELEMETRY_SMART_LOG,
   FADI_LOG_TYPE_TELEMETRY_SECURITY_INFO,
   FADI_LOG_TYPE_TELEMETRY_STATIC_UNIT_INFO,
   FADI_LOG_TYPE_TELEMETRY_XML_FILE,
   FADI_LOG_TYPE_TELEMETRY_SET_DICT,
   FADI_LOG_TYPE_TELEMETRY_FWT_DICT,
   FADI_LOG_TYPE_TELEMETRY_USER_ROM,
   FADI_LOG_TYPE_TELEMETRY_NAND_PARAMS,
   FADI_LOG_TYPE_TELEMETRY_FFU_HISTORY,
   FADI_LOG_TYPE_TELEMETRY_MFG_SECTOR,
   FADI_LOG_TYPE_TELEMETRY_ERROR_STAT,
   FADI_LOG_TYPE_TELEMETRY_WRITE_AMP,
   FADI_LOG_TYPE_TELEMETRY_FE_INFO,
   FADI_LOG_TYPE_TELEMETRY_PEC_STATISTICS,
   FADI_LOG_TYPE_CORE_DUMP,
   FADI_LOG_TYPE_FATAL_ASSERT_RTFADI_MP,
   FADI_LOG_TYPE_FATAL_ASSERT_PS0_RTFADI,
   FADI_LOG_TYPE_FATAL_ASSERT_PS1_RTFADI,
   FADI_LOG_TYPE_FATAL_ASSERT_SET_EVENT,
   FADI_LOG_TYPE_FATAL_ASSERT_HIM_TABLE,
   FADI_LOG_TYPE_NUM,
}FADI_LOG_TYPE_t;


typedef enum
{
   FADI_BIGDUMP_USER_BUFFER = 0,
   FADI_BIGDUMP_DYNAMIC_ALLOC_BUFFER,
   FADI_BIGDUMP_IFS_BUFFER,

}FADI_BigDump_Buffer_t;



typedef enum
{

   FADI_FORMATTED_BIG_DUMP_TEST1          = 0,
   FADI_FORMATTED_BIG_DUMP_TEST2,
   FADI_FORMATTED_BIG_DUMP_TEST3,
   FADI_FORMATTED_BIG_DUMP_TEST4,


   FADI_CLASSICAL_BIG_DUMP_TEST1          = 10,
   FADI_CLASSICAL_BIG_DUMP_TEST2,
   FADI_CLASSICAL_BIG_DUMP_TEST3,
   FADI_CLASSICAL_BIG_DUMP_TEST4,


   FADI_WRITE_RT_FADI_MP                  = 20,
   FADI_WRITE_RT_FADI_PS0,
   FADI_WRITE_RT_FADI_PS1,
   FADI_WRITE_HIM_CMDTABLE,


   FADI_WRITE_FWT                         = 30,


   FADI_FATAL_ASSERT_MP_INFRA_THREAD      = 40,
   FADI_FATAL_ASSERT_MP_FTL_THREAD,
   FADI_FATAL_ASSERT_MP_FE_THREAD,
   FADI_FATAL_ASSERT_WAIT_UNTIL_SCTP_STATUS_RETURN,
   FADI_FATAL_ASSERT_PS0,
   FADI_FATAL_ASSERT_PS1,
   FADI_FATAL_ASSERT_LLFS,
   FADI_FATAL_ASSERT_EXCEPTION,
   FADI_FATAL_ASSERT_FWT,
   FADI_FATAL_ASSERT_FROM_DDR,
}FADI_BigDump_TestCases_t;


typedef enum
{
   FADI_DUMP_OPCODE_LOG_DUMP = 0,
   FADI_DUMP_OPCODE_REINIT_FADI_BLOCKS = 1,
}FADI_Dump_Opcode_t;

typedef struct _FADI_DumpRequest_s
{

   uint32_t addr;
   DumpCallBack callBackAddr;

   uint16_t numFmu;
   uint16_t fmuOverwrite;

   uint8_t dumpType;
   uint8_t logType;
   uint8_t dumpRegion;
   uint8_t bufType;

   uint8_t freeSector;
   uint8_t footerNeeded;
   uint8_t opCode;
   uint8_t rfu[1];
} FADI_DumpRequest_t;

typedef struct FADI_DumpControl_s
{
   uint8_t headIndex;
   uint8_t tailIndex;
   uint8_t queueDepth;
   uint8_t counter;
}FADI_DumpControl_t;

typedef struct FADI_DumpManager_s
{
   FADI_DumpControl_t FADIDumpControl;
   FADI_DumpRequest_t FADIDumpQueue[ 20 ];
   uint16_t dumpedFmuCount;
   uint8_t bootPageFlush;
   uint8_t rfu8;
}FADI_DumpManager_t;


typedef struct _FADIHeader_t
{

   uint16_t   LDPC_Scrambler_seed;
   uint8_t    Data_Type;

   uint8_t    fmu;
   uint16_t   Sig;
   uint16_t   FMU_addr;
   uint8_t    padding[24];
}  FADIHeader_t;

#line 226 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_dumpmanager.h"
void FADI_DumpManagerHandling(void);
void FADI_StoreTelemetryFMU(uint16_t fmu);
void FADI_DumpQueueInit(void);
Status_t FADI_CleanFADIBlocksRequest(void);
Status_t SYS_Diag_FADI_Get_Core_Dump_Size(uint32_t numBytes, uint32_t* pBuffer);
Status_t SYS_Diag_FADI_Get_Number_Of_Core_Dumps(uint32_t numBytes, uint32_t* pBuffer);
uint16_t FADI_ReadTelemetryFMU(void);
Status_t FADI_DumpErrorLog(uint32_t index, uint8_t dumpRegion, uint8_t dumpType);
Status_t FADI_BigDumpRequest(uint8_t dumpType, uint8_t logType, uint8_t dumpRegion, FADI_ESL_Header_t eslHdrArr[], uint8_t * dataPtrArr[], uint32_t dumpNum, DumpCallBack callBackAddr, uint16_t file, uint16_t line);
Status_t FADI_FormattedBigDumpRequest(uint8_t bufType, uint8_t logType, uint8_t dumpRegion, uint8_t dumpType, uint8_t * ptr, uint32_t dataSize, uint32_t bufSize, DumpCallBack callBackAddr, uint16_t fmuOverwrite, uint16_t file, uint16_t line);
uint32_t FADI_GetStartFMUFromEndFMU(uint32_t region, uint32_t endFMU, uint32_t sizeFMU);
Status_t FADI_PsBigDumpHandler(FADI_PS_BigDump_Request_t * msg);
BOOL   FADI_ifQueueEmpty(void);
Status_t FADI_DumpMgrReadSpecificFmu(uint32_t fmu, uint8_t *pBuf, FADI_Logic_Region_t region);
Status_t FADI_DumpBigDump(DumpCallBack callBackAddr, uint32_t bufAddr, uint8_t dumpRegion, uint8_t dumpType, uint8_t logType, uint16_t numFmu, uint8_t bufType, uint8_t freeSector, uint8_t footerNeeded, uint16_t fmuOverwrite);

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_footer.h"

#line 45 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_footer.h"
extern const uint8_t FADI_FooterSignature[ 12  +  1 ];





typedef enum
{
  FADI_DUMP_DISP_COLOR_WHITE = 0,
  FADI_DUMP_DISP_COLOR_PINK  = 1,
  FADI_DUMP_DISP_COLOR_RED   = 2,
}FADI_DUMP_DISPLAY_COLOR_t;


typedef enum
{
   MP    = CORE_MAIN,
   PS    = CORE_PS,
}FADI_ErrorLog_CPU_Func_t;



typedef struct FADI_DM_DUMP_OWNER_T
{


   uint8_t processor;
   uint8_t cpuInstance;


   uint8_t task;
   uint8_t reserved;



   uint16_t file;


   uint16_t line;
}FADI_DM_Dump_Owner_t;



typedef struct FADI_DM_DUMP_INFO_T
{

   FADI_DM_Dump_Owner_t owner;


   uint32_t param[ 5 ];


   uint64_t timeStamp;
   uint64_t setTimeStamp;


   uint32_t code;


} FADI_DM_Dump_Info_t;







typedef struct FADI_DUMP_FOOTER_t
{
   uint8_t revision;
   uint8_t  rfu8[3];
   uint16_t logCnt[FADI_DUMP_REGION_NUM];
   uint16_t currentFmu[FADI_DUMP_REGION_NUM];
   uint16_t prodBuild;
   uint8_t  dumpLabel;
   uint8_t  logType;
   uint16_t partsCount;
   uint16_t dispColor;
   uint8_t  productID[4];
   FADI_DM_Dump_Info_t dumpInfo;
   uint32_t fwGitID;
   uint32_t logIndex;
   uint32_t powerCycle;
   uint8_t  signature[12];

}FADI_Dump_Footer_t;


typedef struct
{

   uint32_t x[(1024 * 2) - sizeof(FADI_Dump_Footer_t)/sizeof(uint32_t) - 1];
}FADI_BIG_Dump_Data_Example1_t;

typedef struct
{

   uint32_t x[1024 * 2 - 10];
}FADI_BIG_Dump_Data_Example2_t;

typedef struct
{

   uint32_t x[1024 * 4 - 1];
}FADI_BIG_Dump_Data_Example3_t;

typedef struct
{

   uint32_t x[1024 - sizeof(FADI_Dump_Footer_t)/sizeof(uint32_t) - 1 - 1];
}FADI_BIG_Dump_Data_Example4_t;

typedef struct
{
   uint32_t x[1024*8];

}FADI_BIG_Dump_Data_Example5_t;


typedef struct
{
   uint8_t     *pBuffInUsed;
   uint8_t     *pBuffStartAddress;
   uint8_t     *pDataToSave;
   uint16_t    bufferAllocSize;
   uint16_t    eslLabel;
   uint16_t    bytesToSave;
   uint16_t    bytesSavedSoFar;
   uint16_t    lineNumber;
   uint16_t    fileNameIndex;
   uint16_t    dumpLabel;
   uint8_t     numberOfDumps;
}FADI_Big_Dump_Pass_Params_t;


Status_t FADI_GenerateDumpInfo(FADI_DM_Dump_Info_t * pDumpInfo, uint16_t fileCode, uint16_t line, uint32_t logCode, uint32_t *pUserParams);

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_romver.h"

#line 73 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_romver.h"
uint8_t* SYS_GetROMVersion(uint8_t* pByteLength);

#line 22 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlogbuffermanager.h"

#line 33 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlogbuffermanager.h"
typedef enum
{
   FADI_ERRORLOG_BUFFER_AVAILABLE,
   FADI_ERRORLOG_BUFFER_IN_USE,
   FADI_ERRORLOG_BUFFER_WAIT_DUMPING,
   FADI_ERRORLOG_BUFFER_DUMPING,
}FADI_ErrorLog_Buffer_Status_t;

typedef struct ErrorLog_ENTRY_T
{
   uint32_t bufAddr;
   uint8_t * OpPtr;
   FADI_ErrorLog_Buffer_Status_t status;
}FADI_ErrorLog_Entry_t;



typedef struct
{
   FADI_ErrorLog_Entry_t errorLogEntry[ 5 ];
   uint8_t  dumpMgmInitComplete;
   uint8_t  errorlogEnable;
   uint8_t  reserved8[2];
   uint32_t reserved32[4];
}FADI_ErrorLog_Buffer_Manager_t;




typedef struct
{
   uint32_t validSignature;
   uint32_t fatalErrorBufAddr;
   uint32_t fatalErrorEntryLen;
   uint32_t errLogHdrBaseLen;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
   uint32_t param3;
   uint32_t param4;
   uint32_t fatalCode;
   uint32_t reserved[6];
}FADI_ErrorLog_BufSharedInfo_t;


extern volatile FADI_ErrorLog_Buffer_Manager_t * gErrorLogBufferManager;


void FADI_ErrorLogBufferInit(void);
void * FADI_PickUpErrorLogBuffer(uint32_t * retIndex);


FADI_ErrorLog_Buffer_Status_t FADI_ReadBufferStatus(uint32_t index);
void FADI_ChangeBufferStatus(uint32_t index, FADI_ErrorLog_Buffer_Status_t newStatus);
uint32_t FADI_ReadBufferAddress(uint32_t index);
uint8_t * FADI_ReadBufferOpAddr(uint32_t index);
void FADI_ChangeBufferOpPtr(uint32_t index, uint8_t * ptr);
void * FADI_PickUpWarningErrorLogBuffer(uint32_t * retIndex);

#line 23 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/mpc_driver.h"

#line 22 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/mpc_driver.h"
enum MPC_SEM_e
{
   MPC_BASIC_SEMAPHORE,
   MPC_PCU_MSG_SEMAPHORE,
   MPC_SEMAPHORE_1
};



enum MPC_MUTEX_NUMBER_e
{
   MPC_MUTEX_ERRORLOG,
   MPC_MUTEX_UART_ACCESS,
   MPC_MUTEX_AVAILABLE,
   MPC_MUTEX_PCU_MESSAGE,
   MPC_MUTEX_MP_MESSAGE,
   MPC_MUTEX_FADI_DUMP,
   MPC_MUTEX_HIM_CTLRBUSYTIME,
   MPC_MUTEX_PF_EH_BUFFER,
   MPC_MUTEX_BULLSEYE_SYNC_PS,
   MPC_MUTEX_FWT,
   MPC_MUTEX_FADI_DUMP_QUEUE,
   MPC_MUTEX_FADI_BIG_DUMP,
   MPC_MUTEX_PCU_DISABLE_TIMERS,
   MPC_MUTEX_SECURITY_SYNC_PERST,
   MPC_MUTEX_LAST_ENTRY,
};




typedef enum MPC_SWI_IDS_e
{
  MPC_SWI_ID0 = 0,
  MPC_SWI_ID1,
  MPC_SWI_ID2,
  MPC_SWI_ID3,
  MPC_SWI_ID4,
  MPC_SWI_ID5,


  MPC_SWI_NUM
} MPC_SWI_IDS_t;




typedef enum MPC_SWI_E_e
{
  MPC_SWI_E_0,
  MPC_SWI_E_1,
  MPC_SWI_E_2,
  MPC_SWI_E_3,
  MPC_SWI_E_4,
  MPC_SWI_E_5,
  MPC_SWI_E_6,
  MPC_SWI_E_7,


  MPC_SWI_E_NUM
} MPC_SWI_E_t;



enum
{
   MPC_MUTEX_LOCK_CONTEXT_INTERRUPTS_DISABLED = 0,
   MPC_MUTEX_LOCK_CONTEXT_INTERRUPTS_ENABLED  = 1,
};

#line 162 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/mpc_driver.h"
typedef enum
{
    CPU_ID_MP,
    CPU_ID_PS0,
    CPU_ID_PS1,
    CPU_ID_PCU,

}CPU_ID_t;


BOOL     MPC_Lock(uint8_t mutexNum, uint8_t mutexTransaction, BOOL Block);
BOOL     MPC_UnLock(uint8_t mutexNum, uint8_t mutexTransaction);

BOOL     MPC_Lock_InterruptsDisabled(uint8_t mutexNum, uint8_t mutexTransaction, BOOL Block);
BOOL     MPC_UnLock_InterruptsDisabled(uint8_t mutexNum, uint8_t mutexTransaction);

BOOL     MPC_Halt_CPU(CPU_ID_t cpuId);
void     MPC_HaltPSandLLFSCoProcessors(void);


void     MPC_TestMutex(void);
void     MPC_EnableMultipleCoProcessors(uint32_t coProcessors);
void     MPC_StopAllCoProcessors(void);
void     MPC_HaltAllCPUsExceptPCU(void);

void     MPC_ReStartMultipleProcessors(uint32_t coProcessors);
uint32_t MPC_GenerateCPUAndThreadID(void);




Status_t SYS_MPC_Init(void);
Status_t MPC_SetSWIEventHandler(uint32_t irq, uint32_t event, PVFV_t pISR);
uint32_t MPC_GetSWIEvent(uint32_t irq, uint32_t event);
void     MPC_SetSWIEvent(uint32_t irq, uint32_t event);
void     MPC_ClearSWIEvent(uint32_t irq, uint32_t event);
void     MPC_EnableSWIEvent(uint32_t irq, uint32_t event);
void     MPC_DisableSWIEvent(uint32_t irq,uint32_t event);
uint32_t MPC_ReadSWIEventReg(uint32_t irq);
void MPC_ExecuteSWIEventHandler(uint32_t irq, uint32_t event);

#line 26 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_productversion.h"

#line 33 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_productversion.h"
typedef struct SYS_VersionsCfg_s
{
   uint32_t vcsCommit;
   uint8_t  Char_R;
   uint8_t  RM_ProductFamily;
   uint8_t  RM_VersionChar;
   uint8_t  RM_MemoryType;
   uint8_t  FE_RomMajorRev;
   uint8_t  FE_RomMinorRev;
   uint8_t  BE_RomMajorRev;
   uint8_t  BE_RomMinorRev;
   uint8_t  FW_VersionStr[ ( 8  + 1) ];
   uint8_t  reserved[3];
}   SYS_VersionsCfg_t;

typedef struct SYS_VersionsCfgOpt_s
{
   CFG_SetHdr_t      setHdr;
   SYS_VersionsCfg_t setOpt[ 1 ];
}   SYS_VersionsCfgOpt_t;

typedef struct SYS_SKUVersionsCfg_s
{
   uint8_t fileName[ (48) ];
}   SYS_SKUVersionsCfg_t;

typedef struct SYS_SKUVersionsCfgOpt_s
{
   CFG_SetHdr_t      setHdr;
   SYS_SKUVersionsCfg_t setOpt[ 1 ];
}   SYS_SKUVersionsCfgOpt_t;

Status_t SYS_GetFW_Version(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_GetFW_InternalVersion(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_SetFW_InternalVersion(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_GetROM_Version(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_GetExtOrInt_FW_Version(uint8_t* pBuff, uint8_t* pByteLength, BOOL32 external);
Status_t SYS_Get_FW_VersionForSlot(uint8_t * pBuff, uint32_t  slot, uint8_t * pByteLength);
Status_t SYS_Get_FW_ActiveNextSlots(uint8_t * activeSlot, uint8_t * nextSlot);
Status_t SYS_GetSKUandCommit(uint32_t cfgTotalSets, uint8_t* srcBuffer, uint8_t* dstBuffer);
Status_t SYS_ProductVersionInit(SysBootPhase_t bootPhase);
Status_t SYS_GetSKUFileName(SYS_SKUVersionsCfg_t *pBuffer);
Status_t SYS_GetVCSCommit(uint32_t *pBuffer);
uint32_t SYS_GetVCSCommitID(void* pBuff);
Status_t SYS_GetVCSCommitIDFromFile(void* pBuffer, uint32_t bufferSize, uint32_t offsetInFile, uint32_t *pVCSID);
Status_t SYS_GetVCSCommitIDFromGroupedForDebug(void* pBuff);

#line 29 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 60 "d:/gitrepo/atlas3_release/source/infra/fadi/errorlog/inc_public/fadi_errorlog.h"
typedef enum
{
   FADI_EL_EXCEPTION_QUEUE_FULL = 0,
   FADI_EL_EXCEPTION_WRITE_FAILURE,
   FADI_EL_NUM_OF_EXCEPTIONS,
}FADI_ErrorLog_Exception_t;



typedef enum
{
   FADI_FVT_CRITICAL = 1,
   FADI_FVT_WARNING,
   FADI_FVT_INFO,
   FADI_FVT_BIG_DUMP,
   FADI_FVT_SET_EVENT_DUMP,
   FADI_FVT_CREATE_FATAL_ASSERT,
}FADI_ErrorLog_FvtMarker_t;


typedef enum
{
   FADI_FVT_EL_PS0 ,
   FADI_FVT_EL_PS1,
   FADI_FVT_EL_FTL,
   FADI_FVT_EL_INFRA,
   FADI_FVT_EL_FE,
   FADI_FVT_EL_SECURITY,
}FADI_ErrorLog_FvtSource_t;


typedef struct FADI_ERRORLOG_BASE_DATA_T
{

   uint8_t              signature[ 4 ];


   uint8_t              controller[ 4 ];


   uint8_t              romwareVersion[ 8 ];


   uint8_t              asicRevision;


   uint8_t              asicId;


   uint8_t              flashType;


   uint8_t              diesNum;


   uint8_t              FwVersion[ 8 ];


   uint32_t             cardConfig;


   uint16_t             criticalLogReq;


   uint16_t             warningLogReq;


   uint16_t             criticalLogWritten;


   uint16_t             warningLogWritten;


   uint16_t             asicTemp;


   uint16_t             nandPeakTemp;


   uint8_t              numDiesPerPhysChip;


   uint8_t              numDiesPerPS;


   uint16_t             revision;


   uint8_t              fwState[20];


}FADI_ErrorLog_Base_Data_t;

typedef struct FADI_ERRORLOG_BASE_T
{

   FADI_ESL_Header_t   hdr;


   FADI_ErrorLog_Base_Data_t   data;
}FADI_ErrorLog_Base_t;


typedef union
{
   uint32_t all32;
   struct
   {
      uint32_t id             : 16;
      uint32_t group          : 11;
      uint32_t special        : 2;
      uint32_t severify       : 3;
   }specific;
}FADI_ErrorLogCode_t;


typedef struct
{
   FADI_ErrorLog_Base_t logBase;


   uint8_t smallDump[ ( 4096  - (sizeof(FADI_ErrorLog_Base_t))  - (sizeof(FADI_Dump_Footer_t)) ) ];

   FADI_Dump_Footer_t footer;
}FADI_ErrorLog_t;




Status_t          FADI_PsErrorLogRequestHandler(FADI_PS_ErrorLog_Request_t * msg);
void              FADI_ErrorLog_Init(void);
Status_t          FADI_PostponedErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * sdmpDescriptor);
void              FADI_AssertFatalMPErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * pSdmpDescriptor);
Status_t          FADI_AssertFatalPSErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * pSdmpDescriptor);
uint32_t          FADI_SetBoundary(uint8_t * pBuffer);
Status_t          FADI_SetEventCollect(uint8_t * ptr, uint32_t size);
void              SYS_DisableErrorLog(BOOL32 ifClean);
void              SYS_EnableErrorLog(void);
BOOL32            SYS_IsErrorLogPending(void);

#line 24 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_esl_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/secded_defines.h"

#line 22 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/secded_defines.h"
typedef struct MRAM_ARAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_0;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_2;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_4;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_6;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_8;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_10;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_12;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_14;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_1;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_3;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_5;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_7;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_9;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_11;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_13;
   HW_REG64 SECDED_REGISTER_MRAM_ARAM_15;
} MRAM_ARAM_SECDED_Registers_t;

typedef struct DEBUG_RAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_DEBUG_RAM;
} DEBUG_RAM_SECDED_Registers_t;

typedef struct TRAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_TRAM_0;
   HW_REG64 SECDED_REGISTER_TRAM_1;
   HW_REG64 SECDED_REGISTER_TRAM_2;
   HW_REG64 SECDED_REGISTER_TRAM_3;
   HW_REG64 SECDED_REGISTER_TRAM_4;
   HW_REG64 SECDED_REGISTER_TRAM_5;
   HW_REG64 SECDED_REGISTER_TRAM_6;
   HW_REG64 SECDED_REGISTER_TRAM_7;
   HW_REG64 SECDED_REGISTER_TRAM_8;
   HW_REG64 SECDED_REGISTER_TRAM_9;
   HW_REG64 SECDED_REGISTER_TRAM_10;
   HW_REG64 SECDED_REGISTER_TRAM_11;
   HW_REG64 SECDED_REGISTER_TRAM_12;
   HW_REG64 SECDED_REGISTER_TRAM_13;
   HW_REG64 SECDED_REGISTER_TRAM_14;
   HW_REG64 SECDED_REGISTER_TRAM_15;
} TRAM_SECDED_Registers_t;

typedef struct BRAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_BRAM_0;
   HW_REG64 SECDED_REGISTER_BRAM_1;
   HW_REG64 SECDED_REGISTER_BRAM_2;
   HW_REG64 SECDED_REGISTER_BRAM_3;
   HW_REG64 SECDED_REGISTER_BRAM_4;
   HW_REG64 SECDED_REGISTER_BRAM_5;
   HW_REG64 SECDED_REGISTER_BRAM_6;
   HW_REG64 SECDED_REGISTER_BRAM_7;
} BRAM_SECDED_Registers_t;

typedef struct XRAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_XRAM_0;
   HW_REG64 SECDED_REGISTER_XRAM_2;
   HW_REG64 SECDED_REGISTER_XRAM_4;
   HW_REG64 SECDED_REGISTER_XRAM_6;
   HW_REG64 SECDED_REGISTER_XRAM_8;
   HW_REG64 SECDED_REGISTER_XRAM_10;
   HW_REG64 SECDED_REGISTER_XRAM_12;
   HW_REG64 SECDED_REGISTER_XRAM_14;
   HW_REG64 SECDED_REGISTER_XRAM_1;
   HW_REG64 SECDED_REGISTER_XRAM_3;
   HW_REG64 SECDED_REGISTER_XRAM_5;
   HW_REG64 SECDED_REGISTER_XRAM_7;
   HW_REG64 SECDED_REGISTER_XRAM_9;
   HW_REG64 SECDED_REGISTER_XRAM_11;
   HW_REG64 SECDED_REGISTER_XRAM_13;
   HW_REG64 SECDED_REGISTER_XRAM_15;
} XRAM_SECDED_Registers_t;


typedef struct DESC_RAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_DESC_RAM_0;
} DESC_RAM_SECDED_Registers_t;

typedef struct FTL_RAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_FTL_RAM_0;
   HW_REG64 SECDED_REGISTER_FTL_RAM_1;
   HW_REG64 SECDED_REGISTER_FTL_RAM_2;
   HW_REG64 SECDED_REGISTER_FTL_RAM_3;
   HW_REG64 SECDED_REGISTER_FTL_RAM_4;
   HW_REG64 SECDED_REGISTER_FTL_RAM_5;
   HW_REG64 SECDED_REGISTER_FTL_RAM_6;
   HW_REG64 SECDED_REGISTER_FTL_RAM_7;
   HW_REG64 SECDED_REGISTER_FTL_RAM_8;
   HW_REG64 SECDED_REGISTER_FTL_RAM_9;
   HW_REG64 SECDED_REGISTER_FTL_RAM_10;
   HW_REG64 SECDED_REGISTER_FTL_RAM_11;
   HW_REG64 SECDED_REGISTER_FTL_RAM_12;
   HW_REG64 SECDED_REGISTER_FTL_RAM_13;
   HW_REG64 SECDED_REGISTER_FTL_RAM_14;
   HW_REG64 SECDED_REGISTER_FTL_RAM_15;
} FTL_RAM_SECDED_Registers_t;



typedef struct ADP_RAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_ADP_RAM_0;
   HW_REG64 SECDED_REGISTER_ADP_RAM_1;
} ADP_RAM_SECDED_Registers_t;


typedef struct AON_RAM_SECDED_Registers_s
{
   HW_REG64 SECDED_REGISTER_AON_RAM;
} AON_RAM_SECDED_Registers_t;

#line 19 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_esl_api.h"

#line 197 "d:/gitrepo/atlas3_release/source/infra/fadi/dump/inc_public/fadi_esl_api.h"
typedef enum
{
   REG_DUMP_FADI_ESL_SET_EVENT_CONTROL_LABEL =  ( ((0x0)<< 10 ) | ( 0x11 ) ) ,
   REG_DUM_SET_EVENT_CONTROL_NUM_REG_DUMPS   = 2,
   REG_DUMP_SET_OFFSET_REG_FIRST_DUMP        = 0,
   REG_DUMP_SET_NUM_REG_FIRST_DUMP           = 4,
   REG_DUMP_SET_OFFSET_REG_SECOND_DUMP       = 0x18,
   REG_DUMP_SET_NUM_REG_SECOND_DUMP          = (0x160/4),
} FADI_SET_Control_Reg_Dump_Details_t;







typedef enum
{
   REG_DUMP_FADI_ESL_DDR_CFG_STS_LABEL =  ( ((0x0)<< 10 ) | ( 0x50 ) ) ,
   REG_DUMP_DDR_CFG_STS_NUM_REG_DUMPS = 2,
   REG_DUMP_DDR_CFG_STS_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_CFG_STS_NUM_REG_FIRST_DUMP = 0x48 / sizeof(uint32_t),
   REG_DUMP_DDR_CFG_STS_OFFSET_REG_SECOND_DUMP = 0x0400 / sizeof(uint32_t),
   REG_DUMP_DDR_CFG_STS_NUM_REG_SECOND_DUMP = 0xD8 / sizeof(uint32_t),
} FADI_DDR_CFG_STS_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_INDIRECT_CACHE_LABEL =  ( ((0x0)<< 10 ) | ( 0x51 ) ) ,
   REG_DUMP_DDR_INDIRECT_CACHE_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_INDIRECT_CACHE_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_INDIRECT_CACHE_NUM_REG_FIRST_DUMP = 0x100 / sizeof(uint32_t),
} FADI_DDR_INDIRECT_CACHE_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_DMA_LABEL =  ( ((0x0)<< 10 ) | ( 0x52 ) ) ,
   REG_DUMP_DDR_DMA_NUM_REG_DUMPS = 2,
   REG_DUMP_DDR_DMA_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_DMA_NUM_REG_FIRST_DUMP = 0x390 / sizeof(uint32_t),
   REG_DUMP_DDR_DMA_OFFSET_REG_SECOND_DUMP = 0x0700 / sizeof(uint32_t),
   REG_DUMP_DDR_DMA_NUM_REG_SECOND_DUMP = 0x100 / sizeof(uint32_t),
} FADI_DDR_DMA_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_UMCTL_LABEL =  ( ((0x0)<< 10 ) | ( 0x53 ) ) ,
   REG_DUMP_DDR_UMCTL_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_UMCTL_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_UMCTL_NUM_REG_FIRST_DUMP = 0x400 / sizeof(uint32_t),
} FADI_DDR_UMCTL_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_PUB_LABEL =  ( ((0x0)<< 10 ) | ( 0x54 ) ) ,
   REG_DUMP_DDR_PUB_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_PUB_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_PUB_NUM_REG_FIRST_DUMP = 0x1000 / sizeof(uint32_t),
} FADI_DDR_PUB_Reg_Dump_Details_t;







typedef enum
{
   REG_DUMP_FADI_ESL_TRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x41 ) ) ,
   REG_DUMP_TRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_TRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_TRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(TRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_TRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_FTL_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x42 ) ) ,
   REG_DUMP_FTL_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_FTL_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_FTL_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(FTL_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_FTL_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_BRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x43 ) ) ,
   REG_DUMP_BRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_BRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_BRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(BRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_BRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_XRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x44 ) ) ,
   REG_DUMP_XRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_XRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_XRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(XRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_XRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_DESC_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x45 ) ) ,
   REG_DUMP_DESC_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_DESC_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DESC_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(DESC_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_DESC_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_AON_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x46 ) ) ,
   REG_DUMP_AON_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_AON_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_AON_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(AON_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_AON_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_ADP_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x47 ) ) ,
   REG_DUMP_ADP_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_ADP_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_ADP_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(ADP_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_ADP_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_MRAM_ARAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x48 ) ) ,
   REG_DUMP_MRAM_ARAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_MRAM_ARAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_MRAM_ARAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(MRAM_ARAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_MRAM_ARAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_DEBUG_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x49 ) ) ,
   REG_DUMP_DEBUG_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_DEBUG_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DEBUG_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(DEBUG_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_DEBUG_RAM_SECDED_Reg_Dump_Details_t;

#line 25 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"

#line 38 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum MISC_HWEventEnable_Control_e
{
   SET_HW_DEBUG_EVENTS_RS                                       = (1<<0 ),
   SET_HW_DEBUG_EVENTS_LDPCENC                                  = (1<<1 ),
   SET_HW_DEBUG_EVENTS_LDPCDEC                                  = (1<<2 ),
   SET_HW_DEBUG_EVENTS_DPCA                                     = (1<<3 ),
   SET_HW_DEBUG_EVENTS_FE                                       = (1<<4 ),
   SET_HW_DEBUG_EVENTS_DDR                                      = (1<<5 ),
}   MISC_HWEventEnable_Control_t;

#line 127 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
enum SET_HWEvent_HIM_XML_e
{

   FE_HW_EVENT_PCIE_LINK_STATUS_CHANGE             = (0x00001),
   FE_HW_EVENT_HOST_COMMAND_RECEPTION              = (0x00002),
   FE_HW_EVENT_HA_COMMAND_QUEUEING                 = (0x00004),
   FE_HW_EVENT_HNVME_DESCRIPTOR_QUEUEING           = (0x00008),

   FE_HW_EVENT_HSEC_DESCRIPTOR_QUEUEING            = (0x00010),

   FE_HW_EVENT_HMBC_DESCRIPTOR_FETCHING             = (0x00020),
   FE_HW_EVENT_HNVME_DESCRIPTOR_COMPLETION         = (0x00040),
   FE_HW_EVENT_HSEC_DESCRIPTOR_COMPLETION          = (0x00080),

   FE_HW_EVENT_HMBC_DESCRIPTOR_COMPLETION          = (0x00100),
   FE_HW_EVENT_NEW_DESCRIPTOR_FETCHED              = (0x00200),
   FE_HW_EVENT_SECTOR_RELEASE                      = (0x00400),
   FE_HW_EVENT_SECTOR_AVAILABLE                    = (0x00800),

   FE_HW_EVENT_HAWA_HABM_DESCRIPTOR_GEN_UPPER      = (0x01000),
   FE_HW_EVENT_HAWA_HABM_DESCRIPTOR_GEN_LOWER      = (0x02000),
   FE_HW_EVENT_HWD_CONTEXT_GENERATION              = (0x04000),
   FE_HW_EVENT_FLAT_LBA_UPPER                      = (0x08000),

   FE_HW_EVENT_FLAT_LBA_MIDDLE                     = (0x10000),
   FE_HW_EVENT_FLAT_LBA_LOWER                      = (0x20000),

   FE_HW_EVENT_HA_IRQ                              = (0x40000),
   FE_HW_EVENT_HABM_IRQ                            = (0x80000),

   FE_HW_EVENT_HAWA_IRQ                            = (0x100000),
   FE_HW_EVENT_HSEC_IRQ                            = (0x200000),
   FE_HW_EVENT_HNVME_IRQ                           = (0x400000),
   FE_HW_EVENT_HA_FSM                              = (0x800000),

   FE_HW_EVENT_HABM_FSM                            = (0x1000000),
   FE_HW_EVENT_HAWA_FSM                            = (0x2000000),
   FE_HW_EVENT_HNVME_FSM                           = (0x4000000),

   FE_HW_EVENT_HMBC_DESCRIPTOR_QUEUING             = (1<<27),

   FE_HW_EVENT_HMBC_FSM                            = (0x10000000),
   FE_HW_EVENT_CMD_LENGTH                          = (0x20000000),
   FE_HW_EVENT_CMD_ATTR                            = (0x40000000),
   FE_HW_EVENT_CMD_COMPLETE                        = (0x80000000),

   FE_HW_EVENT_ALL_EVENT_CONTROL_BITS              = (0xFFFFFFFF),

#line 177 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
}  ;
typedef uint32_t SET_HWEvent_HIM_t;

#line 221 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_FIM_e
{
   FIM_HW_EVENT_GENERIC0                                     = (1<<0 ),
   FIM_HW_EVENT_GENERIC1                                     = (1<<1 ),
   FIM_HW_EVENT_GENERIC2                                     = (1<<2 ),
   FIM_HW_EVENT_GENERIC3                                     = (1<<3 ),
   FIM_HW_EVENT_STATUS_CHECK_FLASH_INTERFACE_TIMER_TIMEOUT   = (1<<4 ),
   FIM_HW_EVENT_EXTERNAL_DATA_RELEASE                        = (1<<5 ),
   FIM_HW_EVENT_LOCAL_COUNTER_CHANGED_FROM_0_TO_NON_ZERO     = (1<<6 ),
   FIM_HW_EVENT_COMMAND_ISSUED_ON_BUS                        = (1<<7 ),
   FIM_HW_EVENT_ADDRESS_BYTE_ISSUED_ON_BUS                   = (1<<8 ),
   FIM_HW_EVENT_DATA_TRANSFER_ON_BUS                         = (1<<9 ),
   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_0_TO_15         = (1<<10),
   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_16_TO_31        = (1<<11),

   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_32_TO_47        = (1<<12),
   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_48_TO_63        = (1<<13),
   FIM_HW_EVENT_FLASH_STATUS_POLL_CHANGE_TRUE_STATUS         = (1<<14),
   FIM_HW_EVENT_FLASH_STATUS_POLL_CHANGE_CACHE_STATUS        = (1<<15),
   FIM_HW_EVENT_FLASH_INTERFACE_DRIVES_NEW_CE_VALUE          = (1<<16),
   FIM_HW_EVENT_READY_BUSY_CHANGE_DETECTED                   = (1<<17),
   FIM_HW_EVENT_FW_DIE_STATUS_MESSAGE_SENT                   = (1<<18),
   FIM_HW_EVENT_FW_STATE_VARIABLE_CHANGE_BUSY_TO_EXPIRED     = (1<<19),
   FIM_HW_ALL_EVENTS_BITS_CONTROL                            = ((1<<20) - 1),

#line 253 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
}   SET_HWEvent_FIM_t;

#line 315 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_CAP_e
{
   CAP_HW_EVENT_HEB_DATA                                    = (1<<0 ),
   CAP_HW_EVENT_CONF_FETCH                                  = (1<<1 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_03                   = (1<<2 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_47                   = (1<<3 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_811                  = (1<<4 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_1215                 = (1<<5 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_03                  = (1<<6 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_47                  = (1<<7 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_811                 = (1<<8 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_1215                = (1<<9 ),
   CAP_HW_EVENT_RS_CONF_ACCEPTED_1                          = (1<<10),
   CAP_HW_EVENT_RS_CONF_ACCEPTED_2                          = (1<<11),
   CAP_HW_EVENT_CCD_SCHEDULE_1                              = (1<<12),
   CAP_HW_EVENT_CCD_SCHEDULE_2                              = (1<<13),
   CAP_HW_EVENT_POWER_RELEASE                               = (1<<14),
   CAP_HW_EVENT_REGISTER_ACCESS_1                           = (1<<15),
   CAP_HW_EVENT_REGISTER_ACCESS_2                           = (1<<16),
   CAP_HW_EVENT_REGISTER_ACCESS_3                           = (1<<17),
   CAP_HW_EVENT_FIM_UPDATE_BROADCAST                        = (1<<18),
   CAP_HW_EVENT_FIM_UPDATE                                  = (1<<19),
   CAP_HW_EVENT_PENDING_TABLE_UPDATE                        = (1<<20),
   CAP_HW_EVENT_RELEASE_TABLEW_UPDATE_1                     = (1<<21),
   CAP_HW_EVENT_RELEASE_TABLEW_UPDATE_2                     = (1<<22),
   CAP_HW_EVENT_SCH_Q_HEAD                                  = (1<<23),
   CAP_HW_EVENT_SCH_Q_TAIL                                  = (1<<24),
   CAP_HW_EVENT_FIM_STATUS                                  = (1<<25),
   CAP_HW_EVENT_RS_ALLOC_REQ                                = (1<<26),
   CAP_HW_EVENT_RS_ALLOC_DIFF_REQ                           = (1<<27),
   CAP_HW_EVENT_EXCEPTION                                   = (1<<28),

   CAP_NEW_BIT_1                                            = (1<<29),
   CAP_NEW_BIT_2                                            = (1<<30),
   CAP_NEW_BIT_3                                            = (1<<31),






   CAP_HW_ALL_EVENTS_BITS_CONTROL                           = 0x7FFFFFFF,

#line 360 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
}    SET_HWEvent_CAP_t;

#line 374 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_CAM_e
{
   CAM_ALLOCATION_REQUEST                                   = (1<<0 ),
   CAM_RELEASE_REQ                                          = (1<<1 ),
   CAM_ARRAY_FULL                                           = (1<<2 ),
   CAM_REGISTER_REQUEST_1                                   = (1<<3 ),
   CAM_REGISTER_REQUEST_2                                   = (1<<4 ),
   CAM_REGISTER_REQUEST_3                                   = (1<<5 ),
   CAM_HW_ALL_EVENTS_BITS_CONTROL                           = ((1<<6) - 1),
}    SET_HWEvent_CAM_t;

#line 397 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_RS_e
{
   RS_POOL_0                                                = (1<<0 ),
   RS_POOL_1                                                = (1<<1 ),
   RS_DATA_PATH_LSBS                                        = (1<<2 ),
   RS_DATA_PATH_HSBS                                        = (1<<3 ),
   RS_RELEASE_LSBS                                          = (1<<4 ),
   RS_RELEASE_HSBS                                          = (1<<5 ),
   RS_VIRTUAL_POOL_ALLOC                                    = (1<<6 ),
   RS_FW_EVENT                                              = (1<<7 ),
   RS_TRANSITION                                            = (1<<8 ),
   RS_STARVED_0                                             = (1<<9 ),
   RS_STARVED_1                                             = (1<<10),
   RS_STARVED_2                                             = (1<<11),
   RS_STARVED_3                                             = (1<<12),
   RS_VALIDA_BLOCK_1                                        = (1<<13),
   RS_VALIDA_BLOCK_2                                        = (1<<14),
   RS_VALIDA_AND_ALLOCA_BLOCK_1                             = (1<<15),
   RS_VALIDA_AND_ALLOCA_BLOCK_2                             = (1<<16),
   RS_CONFIGURATION_1                                       = (1<<17),
   RS_CONFIGURATION_2                                       = (1<<18),
   RS_ACCESS_DETAILS_1                                      = (1<<19),
   RS_ACCESS_DETAILS_2                                      = (1<<20),
   RS_RA_BUFF_ALLOCATED                                     = (1<<21),
   RS_RA_BUFF_RELEASED                                      = (1<<22),
   RS_POWER_ALLOCATED                                       = (1<<23),
   RS_POWER_RELEASED                                        = (1<<24),
   RS_STARVED_4                                             = (1<<25),
   RS_STARVED_5                                             = (1<<26),
   RS_STARVED_6                                             = (1<<27),
   RS_ALLOCATION_DONE                                       = (1<<28),
   RS_ACCESS_DETAILS_3                                      = (1<<29),
   RS_EXCEPTION                                             = (1<<30),

   RS_DPC_POWER_CHANGE                                      = (1<<31),
   RS_HW_ALL_EVENTS_BITS_CONTROL                            = 0xFFFFFFFF,

#line 436 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
}   SET_HWEvent_RS_t;

#line 450 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_LDPC_DEC_e
{
   LDPC_DEC_NEW_DESCRIPTOR_FETCH                            = (1<<0 ),
   LDPC_DEC_OPERATION_START                                 = (1<<1 ),
   LDPC_DEC_SECTOR_AVAILABLE                                = (1<<2 ),
   LDPC_DEC_SECTOR_RELEASE                                  = (1<<3 ),
   LDPC_DEC_BER                                             = (1<<4 ),
   LDPC_DEC_MODE_SWITCH                                     = (1<<5 ),
   LDPC_DEC_ALL_EVENTS_BITS_CONTROL                         = ((1<<6) - 1),
}   SET_HWEvent_LDPC_DEC_t;









typedef enum SET_HWEvent_LDPC_ENC_e
{
   LDPC_ENC_NEW_DESCRIPTOR_FETCH                               = (1<<0 ),
   LDPC_ENC_OPERATION_START                                    = (1<<1 ),
   LDPC_ENC_SECTOR_AVAILABLE                                   = (1<<2 ),
   LDPC_ENC_SECTOR_RELEASE                                     = (1<<3 ),
   LDPC_EN_ALL_EVENTS_BITS_CONTROL                             = ((1<<4) - 1),
}   SET_HWEvent_LDPC_ENC_t;









typedef enum SET_HWEvent_LDPC_DPCA_e
{
   DPCA_COUNTER_UPDATE_0                                       = (1<<0 ),
   DPCA_COUNTER_UPDATE_1                                       = (1<<1 ),
   DPCA_GROUP_NOTIFICATION                                     = (1<<2 ),
   DPCA_EN_ALL_EVENTS_BITS_CONTROL                             = ((1<<3) -1 ),
}   SET_HWEvent_DPCA_ENC_t;









typedef enum SET_HWEvent_DDR_e
{
   DDR_NEW_DESCRIPTOR_SELECTED                         = (1<<0 ),
   DDR_COUNTER_INTERNAL_RELEASE                        = (1<<1 ),
   DDR_COUNTER_EXTERNAL_RELEASE_RECEIVED               = (1<<2 ),
   DDR_ECC_SINGLE_BIT_ERROR_CORRECTION_DETECTED        = (1<<3 ),
   DDR_ECC_DUAL_BIT_ERROR_DETECTED                     = (1<<4 ),
   DDR_HIF_INTERFACE_ACTIVE                            = (1<<5 ),
   DDR_SEQUENCER_SCHEDULING_DECISIONS                  = (1<<6 ),
   DDR_ALL_EVENTS_BITS_CONTROL                         = ((1<<7) - 1),
}   SET_HWEvent_DDR_t;

#line 524 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
 typedef union FIM_HWSetEvents_u
{
    uint32_t all;

    struct
    {
         uint32_t  generic0                         :1;
         uint32_t  generic1                         :1;
         uint32_t  generic2                         :1;
         uint32_t  generic3                         :1;
         uint32_t  statusCheckFITimeOut             :1;
         uint32_t  extDataRelease                   :1;
         uint32_t  timerChange0ToNonZero            :1;
         uint32_t  cmdIssuedOnBus                   :1;
         uint32_t  addressByteIssuedonbus           :1;
         uint32_t  dataTransferOnBus                :1;
         uint32_t  flashStatusPollStartdies0to15    :1;
         uint32_t  flashStatusPollStartdies16to31   :1;
         uint32_t  flashStatusPollChange            :1;
         uint32_t  flashInterfaceDrivesNewCEValue   :1;
         uint32_t  readyBusyChangeDetected          :1;
         uint32_t  dieStatusMessageSent             :1;
         uint32_t  stateVariableFromBusyToExpired   :1;
         uint32_t  reserved                         :15;
     } fields;
}
FIM_HWSetEvents_t;




 typedef union CAP_HWSetEvents_u
 {
      uint64_t all;

      struct
      {
          uint64_t  hebData                          :1;
          uint64_t  confFetch                        :1;
          uint64_t  dieTrueStatusChange03            :1;
          uint64_t  dieTrueStatusChange47            :1;
          uint64_t  dieTrueStatusChange811           :1;
          uint64_t  dieTrueStatusChange1215          :1;
          uint64_t  dieCacheStatusChange03           :1;
          uint64_t  dieCacheStatusChange47           :1;
          uint64_t  dieCacheStatusChange811          :1;
          uint64_t  dieCacheStatusChange1215         :1;
          uint64_t  rsConfAccepted1                  :1;
          uint64_t  rsConfAccepted2                  :1;
          uint64_t  ccdSchedule1                     :1;
          uint64_t  ccdSchedule2                     :1;
          uint64_t  powerRelease                     :1;
          uint64_t  RegisterAccess1                  :1;
          uint64_t  RegisterAccess2                  :1;
          uint64_t  RegisterAccess3                  :1;
          uint64_t  fimUpdateBroadcast               :1;
          uint64_t  fimUpdate                        :1;
          uint64_t  pendingTableUpdate               :1;
          uint64_t  ReleaseTablewUpdate1             :1;
          uint64_t  ReleaseTablewUpdate2             :1;
          uint64_t  schQHead                         :1;
          uint64_t  schQTail                         :1;
          uint64_t  fimStatus                        :1;
          uint64_t  rsAllocReq                       :1;
          uint64_t  rsAllocDiffReq                   :1;
          uint64_t  exception                        :1;

          uint64_t  new_item_1                       :1;
          uint64_t  new_item_2                       :1;
          uint64_t  new_item_3                       :1;
          uint64_t  new_item_4                       :1;
          uint64_t  new_item_5                       :1;
          uint64_t  new_item_6                       :1;
          uint64_t  new_item_7                       :1;
          uint64_t  new_item_8                       :1;
          uint64_t  new_item_9                       :1;
          uint64_t  rfu                              :26;

#line 604 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
      } fields;

 } CAP_HWSetEvents_t;







typedef union CAM_HWSetEvents_u
{
    uint32_t all;

    struct
    {

         uint32_t  camAllocationRequest              :1;
         uint32_t  camReleaseReq                     :1;
         uint32_t  camArrayFull                      :1;
         uint32_t  camRegisterRequest1               :1;
         uint32_t  camRegisterRequest2               :1;
         uint32_t  camRegisterRequest3               :1;
         uint32_t  rfu                               :26;
    } fields;
} CAM_HWSetEvents_t;






typedef union RS_HWSetEvents_u
{
    uint32_t all;

    struct
    {
       uint32_t  rsPool0                        :1;
       uint32_t  rsPool1                        :1;
       uint32_t  rsDataPathLSBS                 :1;
       uint32_t  rsDataPathHSBS                 :1;
       uint32_t  rsReleaseLSBS                  :1;
       uint32_t  rsReleaseHSBS                  :1;
       uint32_t  rsVirtualPoolAllocation        :1;
       uint32_t  rsFWEvent                      :1;
       uint32_t  rsTransition                   :1;
       uint32_t  rsStarved0                     :1;
       uint32_t  rsStarved1                     :1;
       uint32_t  rsStarved2                     :1;
       uint32_t  rsStarved3                     :1;
       uint32_t  rsValiBlock1                   :1;
       uint32_t  rsValiBlock2                   :1;
       uint32_t  rsValiAndAlloBlock1            :1;
       uint32_t  rsValiAndAlloBlock2            :1;
       uint32_t  rsConfiguration1               :1;
       uint32_t  rsConfiguration2               :1;
       uint32_t  rsAccessDetails1               :1;
       uint32_t  rsAccessDetails2               :1;
       uint32_t  rsRABuffAllocated              :1;
       uint32_t  rsRABuffReleased               :1;
       uint32_t  rsPowerAllocated               :1;
       uint32_t  rsPowerReleased                :1;
       uint32_t  rsStarved4                     :1;
       uint32_t  rsStarved5                     :1;
       uint32_t  rsStarved6                     :1;
       uint32_t  rsAllocationDone               :1;
       uint32_t  rsAccessDetails3               :1;
       uint32_t  rsException                    :1;

       uint32_t  rsDPCPowerChange               :1;

#line 678 "d:/gitrepo/atlas3_release/source/infra/fadi/set/inc_public/set_hwevents.h"
    } fields;
}   RS_HWSetEvents_t;





typedef union LDPC_ENC_HWSetEvents_u
{
    uint32_t all;
    struct
    {
       uint32_t  ldpcENCNewDescriptorFetch      :1;
       uint32_t  ldpcENCOperationStart          :1;
       uint32_t  ldpcENCSectorAvailable         :1;
       uint32_t  ldpcENCSectorRelease           :1;
       uint32_t  rfu                            :28;
    } fields;
}   LDPC_ENC_HWSetEvents_t;






typedef union LDPC_DEC_HWSetEvents_u
{
    uint32_t all;

    struct
    {
       uint32_t  ldpcDECNewDescriptorFetch      :1;
       uint32_t  ldpcDECOperationStart          :1;
       uint32_t  ldpcDECSectorAvailable         :1;
       uint32_t  ldpcDECSectorRelease           :1;
       uint32_t  ldpcDECBER                     :1;
       uint32_t  ldpcDECModeSwitch              :1;
       uint32_t  rfu                            :26;
     } fields;

}   LDPC_DEC_HWSetEvents_t;





typedef union DPCA_HWSetEvents_u
{
    uint32_t all;

    struct
    {
       uint32_t  dpcaCounterUpdate0             :1;
       uint32_t  dpcaCounterUpdate1             :1;
       uint32_t  dpcaGroupNotification          :1;
       uint32_t  rfu                            :29;
    } fields;

}   DPCA_HWSetEvents_t;




typedef union DDR_HWSetEvents_u
{
   uint32_t all;

   struct
   {

      uint32_t ddrNewDescriptorSelected                   :1;
      uint32_t ddrCounterInternalRelease                  :1;
      uint32_t ddrCounterExternalReleaseReceived          :1;
      uint32_t ddrEccSingleBitErrorCorrectionDetected     :1;
      uint32_t ddrEccDualBitErrorDetected                 :1;
      uint32_t ddrHifInterfaceActive                      :1;
      uint32_t ddrSequencerSchedulingDecisions            :1;
      uint32_t reserved                                   :25;
   } fields;
}   DDR_HWSetEvents_t;





typedef union FE_HWSetEvents_u
{
   uint32_t all;

   struct
   {

      uint32_t fePCIELinkStatusChange                     :1;
      uint32_t feHostCommandReception                     :1;
      uint32_t feHACommandQueueing                        :1;
      uint32_t feHNVMEDescriptorQueueing                  :1;
      uint32_t feHSECDescriptorQueueing                   :1;
      uint32_t feHMBCDescriptorQueueing                   :1;
      uint32_t feHNVMEDescriptorCompletion                :1;
      uint32_t feHSECDescriptorCompletion                 :1;
      uint32_t feHMBCDescriptorCompletion                 :1;
      uint32_t feNEWDescriptorFetched                     :1;
      uint32_t feSectorRelease                            :1;
      uint32_t feSectorAvailable                          :1;
      uint32_t feHAWAHABMDescriptorGenUpper               :1;
      uint32_t feHAWAHABMDescriptorGenLower               :1;
      uint32_t feHWDContextGeneration                     :1;
      uint32_t feFlatLBAUpper                             :1;
      uint32_t feFlatLBAMiddle                            :1;
      uint32_t feFlatLBALower                             :1;
      uint32_t reserved                                   :14;
   } fields;
}   FE_HWSetEvents_t;




typedef union FIM_HWSetEventsControl_u
{
   uint8_t all;

    struct
    {
        uint8_t  fimEvent0      :1;
        uint8_t  fimEvent1      :1;
        uint8_t  fimEvent2      :1;
        uint8_t  fimEvent3      :1;
        uint8_t  fimEvent4      :1;
        uint8_t  fimEvent5      :1;
        uint8_t  fimEvent6      :1;
        uint8_t  fimEvent7      :1;
    } fields;
} FIM_HWSetEventsControl_t;





typedef union CAP_HWSetEventsControl_u
{
   uint8_t all;

    struct
    {
        uint8_t  capEvent0      :1;
        uint8_t  capEvent1      :1;
        uint8_t  capEvent2      :1;
        uint8_t  capEvent3      :1;
        uint8_t  capEvent4      :1;
        uint8_t  capEvent5      :1;
        uint8_t  capEvent6      :1;
        uint8_t  capEvent7      :1;
    } fields;
} CAP_HWSetEventsControl_t;




typedef union CAM_HWSetEventsControl_u
{
   uint8_t all;

    struct
    {
        uint8_t  camEvent0      :1;
        uint8_t  camEvent1      :1;
        uint8_t  reserved       :6;
    } fields;
} CAM_HWSetEventsControl_t;




typedef union MISC_HWSetEventsControl_u
{
   uint8_t all;
    struct
    {
        uint8_t  rsEvent           :1;
        uint8_t  ldpcEncEvent      :1;
        uint8_t  ldpcDecEvent      :1;
        uint8_t  dpcaEvent         :1;
        uint8_t  feEvent           :1;
        uint8_t  ddrEvent          :1;
        uint8_t  reserved          :2;
    } fields;
} MISC_HWSetEventsControl_t;




typedef struct ALL_HWSetEventsControl_s
{
   FIM_HWSetEventsControl_t  fimEventbitmap;
   CAP_HWSetEventsControl_t  capEventbitmap;
   CAM_HWSetEventsControl_t  camEventbitmap;
   MISC_HWSetEventsControl_t miscEventflags;
} ALL_HWSetEventsControl_t;





typedef struct Control_SetEvents_s
{
   ALL_HWSetEventsControl_t   allHWControlflags;
   FIM_HWSetEvents_t          fimHWSetEvents[ ( 8 ) ];
   CAP_HWSetEvents_t          capHWSetEvents[ ( 8 ) ];
   CAM_HWSetEvents_t          camHWSetEvents[ 2 ];
   RS_HWSetEvents_t           rsHWSetEvents;
   LDPC_ENC_HWSetEvents_t     ldpcEncHWSetEvents;
   LDPC_DEC_HWSetEvents_t     ldpcDecHWSetEvents;
   DPCA_HWSetEvents_t         dpcaHWSetEvents;
   DDR_HWSetEvents_t          ddrHWSetEvents;
   FE_HWSetEvents_t           feHWSetEvents;
   uint8_t                    reserved[20];
}  Control_SetEvents_t;

#line 26 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"

#line 91 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
void FADI_SetMountBmlDone(BOOL32 isBmlMountEnd);


BOOL32 FADI_IsMountBmlDone();





enum FADI_SaveFailuresDumpTrigger_e
{
   FADI_SAVE_TGT_DONT_USE,
   FADI_SAVE_TGT_AGING,
   FADI_SAVE_TGT_SMART,
   FADI_SAVE_TGT_ERR_LOG,
   FADI_SAVE_TGT_FATAL_ASSERT,
   FADI_SAVE_TGT_TEST,
   FADI_SAVE_TGT_HOST_TELEMETRY,
   FADI_SAVE_TGT_INTERNAL_TEST,
};
typedef uint16_t FADI_SaveFailuresDumpTrigger_t;

#line 156 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
typedef union FWSetEventsCtrl0_u
{
    uint32_t all32;
    struct
    {
        uint32_t  FW_SET_EVENT_GRP_FA_CONFIG_GRP_UID           :1;
        uint32_t  FW_SET_EVENT_GRP_ROM_FW                      :1;
        uint32_t  FW_SET_EVENT_GRP_DLE_FW                      :1;
        uint32_t  FW_SET_EVENT_GRP_ERROR_LOG                   :1;
        uint32_t  FW_SET_EVENT_GRP_FE_CRITICAL                 :1;
        uint32_t  FW_SET_EVENT_GRP_FE_BREAD_CRUMBS             :1;
        uint32_t  FW_SET_EVENT_GRP_FE_DEBUG_RMA                :1;
        uint32_t  FW_SET_EVENT_GRP_FE_SMART                    :1;
        uint32_t  FW_SET_EVENT_GRP_FE_EXCEPTION                :1;
        uint32_t  FW_SET_EVENT_GRP_FE_PERFORMANCE_SYS          :1;

        uint32_t  FW_SET_EVENT_GRP_FE_DEBUG                    :1;
        uint32_t  FW_SET_EVENT_GRP_FE_DEALLOCATE_WZ            :1;
        uint32_t  FW_SET_EVENT_GRP_FE_WUC                      :1;
        uint32_t  FW_SET_EVENT_GRP_FE_SERIALIZATION            :1;
        uint32_t  FW_SET_EVENT_GRP_FE_ISR_DEBUG                :1;
        uint32_t  FW_SET_EVENT_GRP_FE_PMM                      :1;
        uint32_t  FW_SET_EVENT_GRP_FE_SHMOO_DEBUG              :1;
        uint32_t  FW_SET_EVENT_GRP_FE_THERMAL_THROTTLING       :1;
        uint32_t  FW_SET_EVENT_GRP_FE_FULL_DEBUG               :1;
        uint32_t  FW_SET_EVENT_GRP_FE_HMBC_DEBUG               :1;

        uint32_t  FW_SET_EVENT_GRP_FE_HAQ                      :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_CRITICAL              :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_BREAD_CRUMBS          :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_DEBUG_RMA             :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_DPA_POINTS            :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_PERIODIC_EVENTS       :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_TIMING                :1;
        uint32_t  FW_SET_EVENT_GRP_INFRA_DEBUG                 :1;
        uint32_t  FW_SET_EVENT_GRP_SEC_CRITICAL                :1;
        uint32_t  FW_SET_EVENT_GRP_SEC_BREAD_CRUMBS            :1;

        uint32_t  FW_SET_EVENT_GRP_SEC_DEBUG_RMA               :1;
        uint32_t  FW_SET_EVENT_GRP_SEC_DEBUG                   :1;
    } fields;
} FWSetEventsCtrl0_t;

typedef union FWSetEventsCtrl1_u
{
    uint32_t all32;
    struct
    {
        uint32_t  FW_SET_EVENT_GRP_SEC_USAGE_4                 :1;
        uint32_t  FW_SET_EVENT_GRP_MST_DEBUG                   :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_CRITICAL                :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_BREAD_CRUMBS            :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_DEBUG_RMA               :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_SAT                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FML                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_BMG                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RLC                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_MTM                     :1;

        uint32_t  FW_SET_EVENT_GRP_FTL_LOG                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_BKOPS                   :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_MVP                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_PSR                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_HWD                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_OVP                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_DALOC                   :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_OBM                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RLA                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RLA_DEBUG               :1;

        uint32_t  FW_SET_EVENT_GRP_FTL_HRF                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RS                      :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RSQ                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_MNT                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_DHM                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FNVM                    :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_JBM                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FMG                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FQD                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_MBM                     :1;

        uint32_t  FW_SET_EVENT_GRP_FTL_PWS                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_PWS_DEBUG               :1;
    } fields;
} FWSetEventsCtrl1_t;

typedef union FWSetEventsCtrl2_u
{
    uint32_t all32;
    struct
    {
        uint32_t  FW_SET_EVENT_GRP_FTL_XORM                    :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_EI                      :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_WL                      :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_OBM_EXT                 :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FXH                     :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_READONLY                :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_BREAD_CRUMBS_PERF       :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_SMART                   :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_DEBUG_RMA_PERF          :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_RDT                     :1;

        uint32_t  FW_SET_EVENT_GRP_FTL_USAGE_41                :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_FOR_FULL_DEBUG          :1;
        uint32_t  FW_SET_EVENT_GRP_FTL_DDR_CACHE_ACCESS        :1;
        uint32_t  FW_SET_EVENT_GRP_PS_1P0V_DEBUG               :1;
        uint32_t  FW_SET_EVENT_GRP_PS_CRITICAL                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_BREAD_CRUMBS             :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_RMA                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_RSV_DRV                  :1;
        uint32_t  FW_SET_EVENT_GRP_PS_BULLSEYE                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_REGRESSION               :1;

        uint32_t  FW_SET_EVENT_GRP_PS_VALIDATION               :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_DGM                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_MQD                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_CVD                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_OTG                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_EH                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_CH                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_BOOT_MAIN          :1;
        uint32_t  FW_SET_EVENT_GRP_PS_XOR                      :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_RM                 :1;

        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_RS                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_RLC                :1;

    } fields;
} FWSetEventsCtrl2_t;

typedef union FWSetEventsCtrl3_u
{
    uint32_t all32;
    struct
    {
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_HW_DRV             :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_FLGP               :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_BBM                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_MISC3               :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_3                  :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_ADM                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_XOR                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_MISC1              :1;
        uint32_t  FW_SET_EVENT_GRP_PS_ADM                      :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_MISC3              :1;

        uint32_t  FW_SET_EVENT_GRP_PS_PERF_DGM                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_MQD                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_CVD                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_OTG                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_EH                  :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_CH                  :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_BOOT_MAIN           :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_XOR                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_RM                  :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_RS                  :1;

        uint32_t  FW_SET_EVENT_GRP_PS_PERF_RLC                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_HW_DRV              :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_FLGP                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_BBM                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_PERF_RFM                 :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DST                      :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_IFT                :1;
        uint32_t  FW_SET_EVENT_GRP_PS_DEBUG_IRJB               :1;
        uint32_t  FW_SET_EVENT_GRP_PCU_EVENTS                  :1;
        uint32_t  RESERVED_125                                 :1;

        uint32_t  FW_SET_EVENT_GRP_LLFS                        :1;
        uint32_t  RESERVED_127                                 :1;
    } fields;
} FWSetEventsCtrl3_t;




typedef struct DebugControlSignatures_s
{
   uint16_t                   validSignature;
   uint16_t                   flashValidSignature;

}  DebugControlSignatures_t;

typedef struct DbgCntrlSignatures_s
{
   uint16_t                   validSig;
   uint16_t                   rfu;

}  DbgCntrlSignatures_t;

typedef struct ControlFWFlt_s
{
   FWSetEventsCtrl0_t                        atbFlt0;
   FWSetEventsCtrl1_t                        atbFlt1;
   FWSetEventsCtrl2_t                        atbFlt2;
   FWSetEventsCtrl3_t                        atbFlt3;
}  ControlFWFlt_t;

typedef struct Control_Debug_Param1_s
{
   DebugControlSignatures_t   cfgsetSignatures;
   Control_SetEvents_t        hwControlSetEvents;
   PS_DebugControl_t          psDebugControl;

}  Control_Debug_Param1_t;

typedef struct Cntrl_Dbg_Param2_s
{
   DbgCntrlSignatures_t       cfgsetSigFW;
   FW_Debug_Control_t         fwDebugCtrl;
   ControlFWFlt_t             fwFlt;
}  Cntrl_Dbg_Param2_t;


typedef struct Control_Debug_Params_s
{
   Control_Debug_Param1_t        controlDebugParams;
   Cntrl_Dbg_Param2_t             controlDebugFWParams;
}  Control_Debug_Params_t;





typedef struct PS_Control_Debug_Feature_s
{
   CFG_SetHdr_t                         setHdr;
   Control_Debug_Params_t               psDebug;
}   Control_Debug_Feature_t;






Status_t FADI_Init(SysBootPhase_t bootPhase);
Status_t FADI_LockPorts(void);
Status_t FADI_UnLockPorts(void);
void     FADI_FatalPostReset(void);
void     FADI_FatalResetInit(void);
void     FADI_CreateFatalAssertEntry(void);
void     FADI_FatalPs0Isr(void);
void     FADI_FatalPs1Isr(void);



Status_t FADI_BuildErrorLogBase(uint8_t * pDest);
void     FADI_ProcessFatAssFromPS(uint32_t psAsserting);
void     FADI_ProcessFatAssFromLLFS(void);
Status_t FADI_FlushBootPage(BOOL32 ifImmediate);


extern uint32_t gINFRARequestHandlerGlobal;

void     FADI_EnableNandAccess(void);
void     FADI_DisableNandAccess(void);
void     FADI_EnableCallBackTimer(void);
void     FADI_DisableCallBackTimer(void);
Status_t FADI_DumpManagerInit(void);
Status_t FADI_DumpMgrCheckAddr(uint32_t firstFMU, uint32_t numBytes, BOOL checkErrorLog);
Status_t FADI_DumpMgrRead(uint32_t firstFMU, uint32_t byteCount, uint32_t * pBuf, uint32_t region);
Status_t FADI_FillDumpFooter(FADI_Dump_Footer_t * pFooter, uint8_t dumpRegion, uint8_t dumpType, uint8_t logType, uint16_t fmuCnt);
Status_t FADI_DumpMgrStatistics(uint32_t byteCount, uint32_t * pBuf);
uint32_t FADI_GetErrorLogSize(void);
uint32_t FADI_GetEventLogSize(void);
uint32_t FADI_GetCoreDumpRegionSize(void);
Status_t FADI_TestBigDumpWrapper(uint32_t test, uint32_t *pFiveParms);
Status_t FADI_SaveDumpDataToBuff(FADI_Big_Dump_Pass_Params_t *pBigDumpParams);
Status_t FADI_GenerateFadiEntriesForFVT(uint32_t severity, uint32_t threadOrCPU, uint32_t *pFiveParms);
Status_t FADI_ErrorLogEntryPSorThreads(uint32_t severity, uint32_t threadOrCPU, uint32_t *pFiveParms);
void     FADI_InfraThreadGeneratedErrorLog(uint32_t severity, uint32_t *pFiveParms);
void     FADI_FEThreadGeneratedErrorLog(uint32_t messageParms);
void     FADI_SendMsgToFEThreadToGeneratedErrorLog(uint32_t severity, uint32_t *pFiveParms);
BOOL32   FADI_IsNandAccessible(void);
BOOL32   FADI_Disable(void);
void     FADI_Enable(void);
void     FADI_SaveFADumps(FADI_SaveFailuresDumpTrigger_t triggerReason);
BOOL32   FADI_AreDebugPortsClosed(void);
Status_t FADI_DumpRtMp(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_DumpRtPs0(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_DumpRtPs1(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_DoASingleSetEventsSave(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_ErrorLogSETEvens(uint8_t * pErrorlogEventLoc, uint32_t size, uint8_t dumpRegion);
uint32_t FADI_GetBootFatalAssertedStatus(void);
void     FADI_SetBootFatalAssertedStatus(uint16_t status);
void     FADI_DebugWaitLoop(void);

void     FADI_FatalPostResetProccess(void);
void     FADI_FatalPreResetMP(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t parm0, uint32_t parm1, uint32_t parm2, uint32_t parm3, uint32_t parm4, BOOL bcStayOn);






void     FADI_RealTimeSample(void);

#line 463 "d:/gitrepo/atlas3_release/source/infra/fadi/inc_public/fadi_apis.h"
Status_t FADI_CFG_Debug_Control_Init(void);
Status_t FADI_SetCfg_Debug_Control(void);
Status_t FADI_SetCfg_Default_Debug_Control(void);
void     FADI_FatAssDie(void);
void     FADI_EnableCallBackTimerFatAss(void);
void     INFRA_ISR_Request_Handler(void);
Status_t SET_InitMain(SysBootPhase_t bootPhase);
Status_t SET_InitMain_ROM(SysBootPhase_t bootPhase);

#line 23 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_assert.h"

#line 43 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_assert.h"
extern void ROMTrace( void *pData, ...);

#line 32 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"

#line 68 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
enum PMM_PERST_Flag_e
{
   PMM_NO_B2B_PERST      = 1,
   PMM_PERST_COLD_B2B    = 2,
   PMM_PERST_B2B         = 3,
};

#line 85 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
typedef uint32_t PMM_PERST_Flag_t;


enum PMM_RFM_State_e
{
   PMM_START_RFM_EXECUTED = 0,
   PMM_START_RFM_INIT = 1,
   PMM_START_RFM_BOOT = 2,
};
typedef uint32_t PMM_RFM_State_t;


enum PMM_WakeupSource_e
{
   PMM_WAKEDUP_BY_GPIO_IRQ = 0,
   PMM_WAKEDUP_BY_TIMER,
   PMM_WAKEDUP_BY_CLKREQ,
   PMM_WAKEDUP_BY_PERST,
   PMM_WAKEDUP_BY_WAKE,

#line 107 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
   MM_WAKEDUP_BY_DEBUG_TIMER,

   PMM_WAKEDUP_BY_TIMER_FOR_FWAI = 7,
   PMM_WAKEDUP_BY_PLS_FOR_FWAI,

   PMM_WAKEDUP_BY_MCTP = 9,
   PMM_WAKEDUP_BY_NA = 99
};
typedef uint32_t PMM_WakeupSource_t;

enum PMM_TransitionStep_e
{
   PMM_STEP_FE = 0,
   PMM_STEP_FTL,
   PMM_STEP_SEC,
   PMM_STEP_IFS,
   PMM_STEP_PS,
   PMM_STEP_PCU,
   PMM_STEP_DONE,
   PMM_STEP_NA = 99,
};
typedef uint32_t PMM_TransitionStep_t;

enum PMM_PS_SubStep_e
{
   PMM_PS_SUBSTEP_FIRST_BARRIER,
   PMM_PS_SUBSTEP_SECOND_BARRIER,
   PMM_PS_SUBSTEP_PST_MSG,
};
typedef uint32_t PMM_PS_PowerSubStep_t;


enum PMM_PowerState_e
{
   PMM_PS0,
   PMM_PS1,
   PMM_PS2,
   PMM_PS3,
   PMM_PS4,
   PMM_NUM_OF_PS,

   PMM_PST_FW_ACTIVE_IDLE = 20,
   PMM_PST_FW_ACTIVE_IDLE_ABORT,

   PMM_PST_FFU_RESET_SHUTDOWN = 29,
   PMM_PST_FFU_IA_SHUTDOWN = 30,
   PMM_PST_FFU_IA_ACTIVATE = 31,
   PMM_PST_RO = 32,
   PMM_PST_SHN = 33,
   PMM_PST_RESET_DEACTIVATE = 34,
   PMM_PST_RESET_ACTIVATE = 35,
   PMM_PST_POWER_ON_ACTIVATE = 36,
   PMM_PST_ACTIVE = 97,
   PMM_PST_WAKEUP = 98,
   PMM_PST_START_RFM = 99,
   PMM_PST_NA = 100
};
typedef uint32_t PMM_PowerState_t;

enum PMM_PS_DPS_e
{
   PMM_PS0_DPS0 = 0,
   PMM_PS1_DPS0_1,
   PMM_PS2_DPS0_2,
   PMM_FWAI_DPS1_1,
   PMM_PS3_DPS2,
   PMM_PS4_DPS3_1,
   PMM_PS4_DPS3_2,
   PMM_PS_DPS_NA,
};
typedef uint32_t PMM_PS_DPS_t;








enum PMM_VS_LMM_e
{
   PMM_VS_MM_STANDARD = 0,
   PMM_VS_MM_PERFORMANCE = 1,
   PMM_VS_MM_POWERSAVING = 2,
};
typedef uint8_t PMM_VS_LMM_t;





enum PMM_MSG_ID_e
{
   PMM_MSG_ID_ENTER_DPS = 0,
   PMM_MSG_ID_AON_RESET,
   PMM_MSG_ID_DIAG_I2C,
   PMM_MSG_ID_READ_TMP103_SENS,
   PMM_MSG_ID_SET_NVME_PS,
   PMM_MSG_ID_OPERATIONAL_BKOPS_TIMER,
   PMM_MSG_ID_OPERATIONAL_BKOPS_TIMER_CANCEL,
   PMM_MSG_ID_APST_OPERATIONAL_STATE_TIMER,
   PMM_MSG_ID_APST_OPERATIONAL_STATE_TIMER_CANCEL,
   PMM_MSG_ID_APST_NON_OPERATIONAL_STATE_TIMER,
   PMM_MSG_ID_APST_NON_OPERATIONAL_STATE_TIMER_CANCEL,
   PMM_MSG_ID_POWER_OFF_DEVICE,
   PMM_MSG_ID_APST_RE_ENTRY,
   PMM_MSG_ID_LTR_DISABLE,
   PMM_MSG_ID_LTR_ENABLE,
   PMM_MSG_ID_DISABLE_ALL_TIMERS,
   PMM_MSG_ID_EFUSE_WRITE_ENABLE = 0x10,
   PMM_MSG_ID_START_DAS,
   PMM_MSG_ID_SEND_TM_PCB_TEMP,
   PMM_MSG_ID_SMB_CFG_SET,
   PMM_MSG_ID_HOST_IDLE_TIMER_TO_FLUSH,
   PMM_MSG_ID_HOST_IDLE_TIMER_TO_FLUSH_CANCEL,


   PMM_MSG_ID_IDLE_TIMER_FOR_FWT_FLUSH = 0x16,
   PMM_MSG_ID_IDLE_TIMER_FOR_FWT_FLUSH_CANCEL,


   PMM_MSG_ID_CLKREQ_INTERRUPT,

   PMM_MSG_ID_INFRA_IS_READY,
   PMM_MSG_ID_BACK_TO_BACK_PERST_DISABLE,
   PMM_MSG_ID_PLP_READY_DONE,
   PMM_MSG_ID_PLP_ENABLE,
   PMM_MSG_ID_PLP_DISABLE,
   PMM_MSG_ID_PLP_DISABLE_INTERRUPT,
   PMM_MSG_ID_PLP_ENABLE_INTERRUPT,
   PMM_MSG_ID_PLP_CANCEL_FINISHED = 0x20,
   PMM_MSG_ID_PLS_STATE_RESET,
   PMM_MSG_ID_UART_INTERRUPT_ENABLE,

   PMM_MSG_ID_HSLC_COUNTER_RESET_TIMER,
   PMM_MSG_ID_HSLC_COUNTER_RESET_TIMER_CANCEL,
   PMM_MSG_ID_CHANGE_BUCK2_TO_18V,
   PMM_MSG_ID_INIT_VOLT_TEST,
   PMM_MSG_ID_ENTER_DPS2_VOLT_TEST,
   PMM_MSG_ID_ENTER_DPS3_VOLT_TEST,
   PMM_MSG_ID_EXIT_DPS2_VOLT_TEST,
   PMM_MSG_ID_EXIT_DPS3_VOLT_TEST,

#line 254 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
   PMM_MSG_D3COLD_DETECTED,


   PMM_MSG_ID_FWAI_START_MP_TIMER = 0x2E,
   PMM_MSG_ID_FWAI_STOP_MP_TIMER,
   PMM_MSG_ID_FWAI_DISABLE_FWAI_TIMER,
   PMM_MSG_ID_FWAI_SET_PHYSICAL_FWAI_FLAG,
   PMM_MSG_ID_READ_PMIC_INT_AFTER_RESET,

#line 268 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
   PMM_MSG_ID_GET_PMIC_TYPE,

};

typedef uint16_t  PMM_MSG_ID_t;


enum PCU_MSG_ID_e
{
   PCU_MSG_ID_DIAG_I2C_RESP = 0x0,
   PCU_MSG_ID_TMP103_I2C_RESP,
   PCU_MSG_ID_PMIC_THERMAL_WARNING,
   PCU_MSG_ID_PMIC_THERMAL_WARNING_EXIT,
   PCU_MSG_ID_PMIC_THERMAL_SHUTDOWN,
   PCU_MSG_ID_LOG_PMIC_POK_EVENT,
   PCU_MSG_ID_LOG_PMIC_IRQ_EVENT,
   PCU_MSG_ID_LOG_PMIC_PCU_INIT_EXCEPTION_EVENT,
   PCU_MSG_ID_PMM_OPERATIONALSTATE_IDLETIMER_EXPIRED,
   PCU_MSG_ID_PMM_HOST_IDLE_TIMER_TO_FLUSH_EXPIRED,
   PCU_MSG_ID_PMM_APSTPS3_TIMER_EXPIRED,
   PCU_MSG_ID_PMM_APSTPS4_TIMER_EXPIRED,
   PCU_MSG_ID_PMM_APST_RE_ENTRY_ACK,
   PCU_MSG_ID_LTR_ENABLE_BIT_CHANGED,
   PCU_MSG_ID_LOG_LOW_POWER_TIMEOUT_EVENT,
   PCU_MSG_ID_LOG_POWER_GOOD_TIMEOUT_EVENT,

   PCU_MSG_ID_PLP_START = 0x10,
   PCU_MSG_ID_PLP_END,
   PCU_MSG_ID_PLP_PROCEED,
   PCU_MSG_ID_PLP_RESET,
   PCU_MSG_ID_PLP_UPDATE_COUNTERS,
   PCU_MSG_ID_CHANGE_BUCK2_TO_12V_DONE,
   PCU_MSG_ID_PCIE_INIT_DONE,
   PCU_MSG_LTSSM_SAMPLE_MSG,
   PCU_MSG_ID_PMM_HSLC_TIMER_EXPIRED,


   PCU_MSG_ID_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED = 0x19,

#line 313 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
   PCU_MSG_ID_PMIC_VCC_SMART_CNT_UPDATE,


   PCU_MSG_ID_PMM_FWAI_TIMER_EXPIRED = 0x1D,


   PCU_MSG_ID_SMB_ISR_TO_PCU,
};
typedef uint32_t PCU_MSG_ID_t;


enum PMM_MPCTransaction_e
{
   PMM_MPC_TR_PUSH_MP_MESSAGE,
   PMM_MPC_TR_PUSH_PCU_MESSAGE,
   PMM_MPC_TR_PULL_MP_MESSAGE,
   PMM_MPC_TR_PULL_PCU_MESSAGE
};
typedef uint32_t PMM_MPCTransaction_t;


enum PMM_MSG_OPCode_e
{
   PMM_MSG_OPCODE_START_PST = 0,
   PMM_MSG_OPCODE_ABORT_PST,
   PMM_MSG_OPCODE_WAKEUP_PST,
   PMM_MSG_OPCODE_AON_PST,
   PMM_MSG_OPCODE_RS_PST,
   PMM_MSG_OPCODE_RESET_DEACTIVATE,
   PMM_MSG_OPCODE_RESET_ACTIVATE,
   PMM_MSG_OPCODE_COMPLETED,
};
typedef uint32_t PMM_MSG_OPCode_t;


enum PMM_DiagI2c_e
{
   WRITE_I2C = 0,
   READ_I2C,
};
typedef uint32_t PMM_DiagI2c_t;

enum PMM_I2cBus_e
{
   PMIC_I2C = 0,
   DCDC_I2C,
};
typedef uint32_t PMM_I2cBus_t;



enum PMM_TimersType_e
{
   PMM_FE_TIMER = 0,
   PMM_SLEEP_ELAPSED_TIMER = 1,
   PMM_I2C_TIMER = 2,
   PMM_DEBUG_TIMER = 3,
   PMM_LTR_TIMER = 4,
   PMM_DAS_TIMER = 5,
   PMM_PMIC_IRQ_TIMER = 6,
   PMM_PMIC_POK_TIMER = 7,
   PMM_PLP_SETUP_TIMER = 8,
   PMM_SMBUS_TIMER = 9,
   PMM_NUM_OF_TIMERS,
   PMM_MAX_NUM_OF_TIMERS = 16
};

#line 400 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_pmm.h"
typedef unsigned char PMM_TimersType_t;

enum PMIC_VenodrID_e
{
    PMIC_VendorID_Invalid = 0,


    PMIC2_VendorID_ROHM   = 0x10,
    PMIC2_VendorID_QORVO,
    PMIC2_VendorID_ST,

    PMIC_VendorID_MAX     = PMIC2_VendorID_ST + 1,
};
typedef uint32_t PMIC_VentorID_t;




enum PMIC_RevisionID_e
{
    PMIC_RevisionID_Invalid      = 0,
    PMIC_RevisionID_ACTIVE       = 0x8a,
};






typedef struct PMM_EventMsg_s
{
   PMM_MSG_OPCode_t OPCode;
   uint32_t Msg[2];
} PMM_EventMsg_t;


typedef union PMM_MPC_Diag_I2C_e
{
   uint32_t   all;
   struct
   {
      uint32_t index: 8;
      uint32_t data: 8;
      uint32_t read: 8;
      uint32_t i2cBus: 8;
   } mBits;
} PMM_MPC_Diag_I2C_t;

typedef union MPPCU_IPC_Msg_Header_s
{
   struct Msg_Header_s
   {
      uint32_t msgId:16;
      uint32_t sessionId:16;
   }bits;
   uint32_t all32;
}   MPPCU_IPC_Msg_Header_t;

typedef struct PMM_MSG_s
{
   MPPCU_IPC_Msg_Header_t hdr;
   uint32_t Arg;
}   PMM_MSG_t;


typedef struct PCU_MSG_s
{
   MPPCU_IPC_Msg_Header_t hdr;
   uint32_t Arg;
}   PCU_MSG_t;


typedef struct PCU_MSGQueue_s
{
   volatile uint16_t HeadIdx;
   volatile uint16_t TailIdx;
   PCU_MSG_t Msg[ ( 8  + 1) ];
}   PCU_MSGQueue_t;


typedef struct PMM_MSGQueue_s
{
   volatile uint16_t HeadIdx;
   volatile uint16_t TailIdx;
   PMM_MSG_t Msg[ ( 8  + 1) ];
}   PMM_MSGQueue_t;

typedef union PCU_MsgResetArg_s
{
   struct
   {
      uint8_t sysResetType;
      uint8_t feResetType;
      uint8_t reserved[2];
   } params;

   uint32_t all32;
}   PCU_MsgResetArg_t;





uint32_t PMM_GetResetType(void);
void PMM_GetPCUMsg(PCU_MSG_t* PCUMsg);
void PMM_PutPCUMsg(PMM_MSG_ID_t msgID, uint32_t msgArg);
void PMM_PutTimerPCUMsg(PMM_MSG_ID_t msgID, uint16_t sessionId, uint32_t msgArg);
Status_t PMM_AbortPST(void);
Status_t PMM_StartPST(PMM_PowerState_t powerState);
Status_t PMM_Reset(uint32_t resetType, uint32_t activate_flag);
Status_t PMM_WakeUpFromSleep(void);
void PMM_CallMeWhenComplete(PMM_TransitionStep_t PMMStep, Status_t PMMStatus);
void PMM_SWHandler(uint32_t eventBitmap);
void PMM_HandlePCUMsg(void);
PMM_PS_DPS_t PMM_GetPStoDPS(PMM_PowerState_t powerState, BOOL isPs4Start);
Status_t PMM_Init(void);
BOOL32 PMM_IsPST_StepBeyondIFS(void);
PMM_PowerState_t PMM_GetPrevActivePowerState(void);
PMM_PowerState_t PMM_GetPrevPowerState(void);
PMM_PowerState_t PMM_GetCurrPowerState(void);
PMM_PS_DPS_t PMM_GetCurrDpsState(void);
void PMM_InitPrevPowerState();
uint64_t PMM_GetSleepElapsedTime(void);
Status_t PMM_EnterLowPowerState(PMM_PowerState_t powerState, PMM_PS_DPS_t psDps);
void PMM_ExitLowPowerState(void);

void PMM_HandleMpFWAI(void);

PMM_PowerState_t PMM_GetDeviceState(void);
void PMM_ResetFEPSTParam(void);
void PMM_PowerOffDevice(void);
void PMM_GetPMICType(void);
void PMM_DPSExitInit(void);
void PMM_ClearBootSwitch(void);
void PMM_StartDASTimer(void);
void PMM_UpdateLPMAbortCounters(BOOL32 timeout);
void PMM_NotifyInfraReadyToPCU(void);
Status_t PMM_EnterIDLELowPowerState();
Status_t PMM_ExitIDLELowPowerState();
uint32_t PMM_GetBootReason(void);
void PMM_GetRetainedMemFromFTLCB(uint8_t* MemAddr);
void PMM_GetFfuBufMem(void);
void PMM_ControlBuck2(uint32_t Buck2Level);

Status_t PMM_DivideCMC(void);
Status_t PMM_RestoreCMC(void);

void PMM_DPS_ProcessQuickBoot(void);

BOOL32 PMM_isPMED0EIBWakeUp(void);


void PMM_ResetLinkAbortReasonFlag(void);


void PMM_VS_CheckAbnormalVcc(uint32_t pcumsg_type, uint32_t param4, uint32_t param5);

#line 22 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"

#line 1 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/llfs/t16plusrevb_bics6/inc_public/rs_reg/rs_regs_defines.h"

#line 502 "d:/gitrepo/atlas3_release/source/llfs/t16plusrevb_bics6/inc_public/rs_reg/rs_regs_defines.h"
typedef struct _RS {
    HW_REG64 RS_CTRL                                    ;
    HW_REG64 RS_STATUS                                  ;
    HW_REG64 Reserved0[2];
    HW_REG64 RS_INT_STATUS                              ;
    HW_REG64 RS_INT_MASK                                ;


    HW_REG64 Reserved1[2];
    HW_REG64 RS_BUS_ERROR                               ;
    HW_REG64 RS_BUS_CFG                                 ;
    HW_REG64 Reserved2[5];
    HW_REG64 RS_RAM_PARITY_INIT                         ;
    HW_REG64 RS_CFG_MESSAGE_ID                          ;
    HW_REG64 Reserved3[3];
    HW_REG64 RS_PWR_ACCUM_TIMER                         ;
    HW_REG64 RS_HW_BUFFER_LIST_CFG                      ;
    HW_REG64 RS_FW_BUFFER_LIST_CFG                      ;
    HW_REG64 Reserved4;
    HW_REG64 RS_RELEASE                                 ;
    HW_REG64 RS_CANCEL_REQUEST                          ;
    HW_REG64 Reserved5[2];
    HW_REG64 RS_PROFILE_TBL_VALUE0                      ;
    HW_REG64 RS_PROFILE_TBL_VALUE1                      ;
    HW_REG64 RS_PROFILE_TBL_CTRL                        ;
    HW_REG64 Reserved6;
    HW_REG64 RS_PWR_CNT[4]                              ;
    HW_REG64 Reserved7[4];
    HW_REG64 RS_PWR_ACCUMULATOR[4]                      ;
    HW_REG64 Reserved8[4];
    HW_REG64 RS_CFG_STARVATION03                        ;
    HW_REG64 RS_CFG_STARVATION47                        ;
    HW_REG64 Reserved9[2];
    HW_REG64 RS_MAP_TBL_VALUE0                          ;
    HW_REG64 RS_MAP_TBL_VALUE1                          ;
    HW_REG64 RS_MAP_TBL_CTRL                            ;
    HW_REG64 Reserved10;
    HW_REG64 RS_RA_BITMAP_DEBUG_CTRL                    ;
    HW_REG64 RS_RA_BITMAP_DEBUG_STATUS                  ;
    HW_REG64 Reserved11[6];
    HW_REG64 RS_RB_CFG_SIZE[8]                          ;
    HW_REG64 Reserved12[24];
    HW_REG64 RS_RA_CFG[4]                               ;
    HW_REG64 Reserved13[12];
    HW_REG64 RS_RA_STATUS[4]                            ;
    HW_REG64 Reserved14[12];
    HW_REG64 RS_RB_STATUS[128]                          ;
    HW_REG64 RS_PWR_VIRTUAL_CFG[32]                     ;
    HW_REG64 RS_PWR_VIRTUAL_CNT[32]                     ;
    HW_REG64 RS_RA_VIRTUAL_CFG[32]                      ;
    HW_REG64 Reserved15[32];
    HW_REG64 RS_RA_VIRTUAL_CNT[32]                      ;
    HW_REG64 Reserved16[96];
    HW_REG64 RS_REQUEST[16]                             ;
    HW_REG64 Reserved17[16];
    HW_REG64 RS_BUF_LIST_ADDR[16]                       ;
    HW_REG64 Reserved18[16];
    HW_REG64 RS_NOTIFICATION_ADDR[16]                   ;
    HW_REG64 Reserved19[16];
    HW_REG64 RS_REQUEST_STATUS[4]                       ;
    HW_REG64 Reserved20[28];
    HW_REG64 RS_DP_POWER_CFG_01[32]                     ;
    HW_REG64 RS_DP_POWER_CFG_23[32]                     ;
    HW_REG64 RS_DP_POWER_STATUS[4]                      ;
    HW_REG64 Reserved21[284];
    HW_REG64 RS_CLK_GATE                                ;
    HW_REG64 Reserved22;
    HW_REG64 RS_HEB_DATA                                ;
    HW_REG64 RS_HEB_EVENT_FILTER                        ;
    HW_REG64 RS_HEB_PWR_EVENT                           ;
    HW_REG64 Reserved23[2];
    HW_REG64 RS_DUMMY_REG                               ;
    HW_REG64 Reserved24[8];
    HW_REG64 RS_DBG_FOR_SOC                             ;
    HW_REG64 RS_DBG_FSM_STATE                           ;

    HW_REG64 RS_DBG_RAPC_FSM_STATE                      ;

    HW_REG64 RS_DBG_DATA_0                              ;
    HW_REG64 RS_DBG_DATA_1                              ;
    HW_REG64 RS_DBG_DATA_2                              ;
    HW_REG64 RS_DBG_STARVED0                            ;
    HW_REG64 RS_DBG_STARVED1                            ;
    HW_REG64 RS_DBG_FW_CNCL_VEC                         ;
    HW_REG64 RS_DBG_CM1_VALUE0                          ;
    HW_REG64 RS_DBG_CM1_VALUE1                          ;
    HW_REG64 RS_DBG_CM1_CTRL                            ;
    HW_REG64 RS_DBG_FW_REQ_VEC                          ;
    HW_REG64 Reserved25;
    HW_REG64 RS_DBG_HW_REQ_VEC[2]                       ;
    HW_REG64 RS_DBG_FW_NO_RES_VEC                       ;
    HW_REG64 Reserved26;
    HW_REG64 RS_DBG_HW_NO_RES_VEC[2]                    ;
    HW_REG64 RS_ECC_ERR_STATISTICS                      ;

    HW_REG64 RS_BUS_ERROR_DBG                           ;
    HW_REG64 RS_DBG_REQ_HISTORY                         ;
    HW_REG64 RS_DBG_REQ_ACCEPT_HISTORY                  ;
    HW_REG64 RS_DBG_DATA_3                              ;
    HW_REG64 RS_DBG_STARVED2                            ;
    HW_REG64 RS_DBG_REQ_ACCEPT_HISTORY_NO_DP            ;
    HW_REG64 RS_DBG_DPC_PWR_HISTORY                     ;

    HW_REG64 RS_DBG_ALLOC_STAT_CTRL                     ;
    HW_REG64 RS_DBG_ALLOC_STAT_01                       ;
    HW_REG64 RS_DBG_ALLOC_STAT_02                       ;
    HW_REG64 RS_DBG_ALLOC_STAT_03                       ;
    HW_REG64 RS_ACTIVE_IDLE                             ;
}RS_t, *PRS;

#line 50 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/atlas3_release/source/llfs/t16plusrevb_bics6/inc_public/rs_reg/rs_regs_defines.h"

#line 26 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
#line 1 "d:/gitrepo/atlas3_release/source/llfs/t16plusrevb_bics6/inc_public/datapath_memory_assign.h"

#line 1 "d:/gitrepo/atlas3_release/_out/model/dllbuild/atlas3_ei.ram/softmap.h"

#line 34 "d:/gitrepo/atlas3_release/source/llfs/t16plusrevb_bics6/inc_public/datapath_memory_assign.h"

#line 27 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_global.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/functionactualcategories.h"

#line 21 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_global.h"

#line 101 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_global.h"
extern uint32_t gRrLowQdReqCnt;
extern uint32_t gIsRrLowQdQualified;

#line 114 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_global.h"
extern uint32_t gFtlHrfCurrHostReadCmdSizeSect;




extern uint32_t gFtlFioSraRwCnt;

#line 29 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_publicdefines.h"
#line 29 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_publicdefines.h"
typedef enum
{
   CMC_SRC_CLK_ID_0 = 0,
   CMC_SRC_CLK_ID_1,
   CMC_SRC_CLK_ID_2,
   CMC_SRC_CLK_ID_3,
   CMC_SRC_CLK_ID_4,
   CMC_SRC_CLK_ID_5,
   CMC_SRC_CLK_ID_6,
   CMC_SRC_CLK_ID_7,
   CMC_SRC_CLK_ID_8,
   CMC_SRC_CLK_ID_9,
   CMC_SRC_CLK_ID_10,
   CMC_SRC_CLK_ID_11,
   CMC_SRC_CLK_ID_12,
   CMC_SRC_CLK_ID_13,
   CMC_SRC_CLK_ID_14,
   CMC_SRC_CLK_ID_15,
   CMC_SRC_CLK_ID_NUM,
}Cmc_Src_Clk_Id_t;

#line 28 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_publictypes.h"
#line 28 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_publictypes.h"
typedef struct CMC_ClockInfo
{
   uint8_t mClkSource;
   uint8_t mClkDomain;
   uint16_t mClkPeriod;
   uint32_t mDutyCycle;
} CMC_ClockInfo_t;

typedef struct
{
   uint32_t domainId;
   uint32_t srcClkId;
   uint32_t reqfreq;
} CMC_DomainInfo_t;


typedef struct CMC_Subdomain_Info
{
   uint8_t domainIndex;
   uint8_t subdIndex;
   uint8_t divmDivider;


   uint8_t phase;


   uint32_t subdPlockMask;
} CMC_Subdomain_Info_t;

#line 29 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/platform/triton/cmc_top_triton16_plus.h"

#line 783 "d:/gitrepo/atlas3_release/source/infra/bsp/platform/triton/cmc_top_triton16_plus.h"
typedef uint32_t u32;

#line 48 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"

#line 63 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"
typedef struct {
    uint32_t source1;
    uint32_t source2;
}fwtaClockSources_t;





typedef enum FreqMonitorClock
{
   FM_CMC2_TOP_DOMAIN_15 = 0,
   FM_FIM0_MTR_CLK,
   FM_FIM2_MTR_CLK,
   FM_FIM3_MTR_CLK,
   FM_FIM4_MTR_CLK,
   FM_FIM5_MTR_CLK,
   FM_FIM6_MTR_CLK,
   FM_FIM7_MTR_CLK,
   FM_RESERVED_0,
   FM_FIM_MTR_CLK_0,
   FM_FIM_MTR_CLK_2,
   FM_FIM_MTR_CLK_3,
   FM_FIM_MTR_CLK_4,
   FM_FIM_MTR_CLK_5,
   FM_FIM_MTR_CLK_6,
   FM_FIM_MTR_CLK_7,
   FM_RESERVED_1,
   FM_PCIE_PHY_PLL,
   FM_DDR_DTO_0,
   FM_DDR_DTO_1,
   FM_HSIO,
   FM_NUM,
} eFreqMonitorClock;





Status_t  CMC_CalibrateLFOSCfromEfuse(void);




   uint32_t CMC_TOP_GetSrcClkFreq(uint32_t srcClkId);
   Status_t CMC_TOP_GetSysClkFreqMHz(uint32_t * sysClkFreq);
   uint32_t CMC_TOP_GetEfcClkFreqMHz(void);
   Status_t CMC_TOP_SetCTTClkFreq(uint32_t cttIndex, uint32_t cttFreq);
   uint32_t CMC_TOP_ConfigureATBClockFreq(uint32_t ATBClkFreq);
   Status_t CMC_TOP_UpdateATBDomainDividers(uint32_t domDivider, uint32_t subDivider, uint32_t subdDivm);
   Status_t CMC_TOP_SetCPUPeriphSubdomainDivider(uint32_t subDivider, uint32_t subdDivm);
   uint32_t CMC_TOP_GetATBClkFreqHz(void);
   Status_t CMC_TOP_GenerateATBClocks(void);
   Status_t CMC_TOP_DisableATBClocks(void);
   uint32_t CMC_TOP_ConvertNSecToFIMClockCycles(uint32_t timeNs);
   Status_t CMC_TOP_ConfigureCpuDomainMaxFreq(void);
   Status_t CMC_TOP_MonitorSourceClock(uint32_t srcClk);
   Status_t CMC_TOP_MonitorClocksOnGpio(uint32_t fmClockType, uint32_t fmClockDivider, uint32_t cmcClockSource);
   Status_t CMC_TOP_ROM_Init(void);
   Status_t CMC_TOP_DLE_Init(void);
   Status_t CMC_TOP_InitCpuDomainDefault(void);

   Status_t CMC_TOP_InitCpuClockDomain(uint32_t srcClkId, uint32_t dividerValue);
   Status_t CMC_TOP_ConfigureCpuClockDomain(uint32_t srcClkId, uint32_t dividerValue);

#line 131 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"
   Status_t CMC_TOP_RAM_Init(void);
   Status_t CMC_TOP_ConfigureFlashBypassModeCPUdomain(void);
   Status_t CMC_TOP_DisableDataPathDomain(void);
   Status_t CMC_TOP_EnterIDLELowPower(void);
   Status_t CMC_TOP_ExitIDLELowPower(void);
   uint32_t CMC_TOP_GetDomainDivider(uint32_t domainId);
   Status_t CMC_TOP_SetDomainDivider(uint32_t domainId, uint32_t domDivider);




   Status_t CMC_TOP_EnableCTTClock(uint32_t cttIndex);
   Status_t CMC_TOP_EnableFWTAClock(void);
   Status_t CMC_TOP_EnableTRNGClock(void);
   Status_t CMC_TOP_EnableSETClock(void);
   Status_t CMC_TOP_EnableMultipleCTTClock(uint32_t cttMask);
   Status_t CMC_TOP_DisableCTTClock(uint32_t cttIndex);
   Status_t CMC_TOP_DisableMultipleCTTClock(uint32_t cttMask);
   uint32_t CMC_TOP_GetCTTClkFreq(uint32_t cttIndex);
   void CMC_TOP_GetFWTASourceClkFreq(fwtaClockSources_t * fwtaClocks);
   uint32_t CMC_TOP_GetSETClkFreqInMhz(void);
   uint32_t CMC_TOP_GetTRNGClkFreqInMhz(void);
   uint32_t CMC_TOP_GetSourceClkId(uint32_t domainId);




   Status_t CMC_TOP_ControlHIMClocks(uint32_t clkEnable);
   Status_t CMC_TOP_SetSourceClkId(uint32_t domainId, uint32_t srcClkId);
   Status_t CMC_TOP_EnableCpuPeriphPclk(uint32_t pClkId);
   Status_t CMC_TOP_DisableCpuPeriphPclk(uint32_t pClkId);
   Status_t CMC_TOP_ExitDPS2(void);
   Status_t CMC_TOP_ExitDPS3(void);


   void CMC_TOP_ClearWakeupFlag(uint32_t wakeupIdx);
   uint32_t CMC_TOP_GetWakeupFlags(void);
   uint32_t CMC_TOP_GetWakeupActiveFlags(void);

#line 177 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/cmc_top_dr_api.h"
Status_t CMC_SetDomainActiveIdle(uint32_t cmcBaseAddr, uint32_t domain, uint32_t val);





void SYS_Set_SFR_GP_REG_2_bit0(void);
void SYS_Clear_SFR_GP_REG_2_bit0(void);
BOOL32 SYS_Is_SFR_GP_REG_2_bit0_Set(void);

#line 30 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_dram_definitions.h"

#line 33 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 43 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
extern const PRS pRSV;

#line 143 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
extern char __ct_[( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0x03010000 )  + (40*1024) )  + (8*1024) )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )             +0x1000)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  +0x400)  + ( ((uint32_t)( (1888*1024) / (4096+32) /64) + ( (1888*1024) / (4096+32) %64 ? 1:0)) *8))  + ( ((uint32_t)( (2097152) / (4096+32) /64) + ( (2097152) / (4096+32) %64 ? 1:0)) *8))  + ( ((uint32_t)( (0) / (4096+32) /64) + ( (0) / (4096+32) %64 ? 1:0)) *8))  + ( ((uint32_t)( (132096) / (4096+32) /64) + ( (132096) / (4096+32) %64 ? 1:0)) *8) - ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( 0x03010000 )  + (40*1024) )  + (8*1024) )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )  + 0x1000 )             +0x1000)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  + 0x100)  +0x400)  <= 1024) ? 1 : -1] ;

#line 621 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
extern const uint64_t RSV_BE_RB_MAPPING_TABLE[ 0x7 ][ 0x8 ][2];

#line 51 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_errorsubranges.h"
#line 17 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_errorsubranges.h"
typedef enum Status_T_PSRanges_e
{
   STATUS_NPDP_ERROR_BASE     = STATUS_PS_BASE + 0x00000100,
   STATUS_BBM_ERROR_BASE      = STATUS_PS_BASE + 0x00000200,
   STATUS_CVD_ERROR_BASE      = STATUS_PS_BASE + 0x00000300,
   STATUS_DGM_ERROR_BASE      = STATUS_PS_BASE + 0x00000400,
   STATUS_RS_ERROR_BASE       = STATUS_PS_BASE + 0x00000500,
   STATUS_MRPH_ERROR_BASE     = STATUS_PS_BASE + 0x00000600,
   STATUS_NPARAM_ERROR_BASE   = STATUS_PS_BASE + 0x00000700,
   STATUS_RSV_ERROR_BASE      = STATUS_PS_BASE + 0x00000800,
   STATUS_PS_DIAG_ERROR_BASE  = STATUS_PS_BASE + 0x00000900,
   STATUS_PS_IRJB_ERROR_BASE  = STATUS_PS_BASE + 0x00000A00,
}   Status_T_PSRanges_t;

#line 52 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"

#line 146 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
typedef enum RSV_CpuType_e
{
   RSV_CPU_CLIENT_MP  = 0,
   RSV_CPU_CLIENT_PS0 = 1,
   RSV_CPU_CLIENT_PS1 = 2,

   RSV_CPU_CLIENT_CNT
} RSV_CpuType_t;

#line 170 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
typedef enum RSV_BufferProfiles_e
{
   RSV_EMPTY_BUFFER_PROFILE = 0,
   RSV_HOST_READ_BUFFER_PROFILE,
   RSV_RLC_READ_TO_SRAM_BUFFER_PROFILE,
   RSV_RLC_READ_TO_DRAM_BUFFER_PROFILE,
   RSV_RLA_READ_BUFFER_PROFILE,
   RSV_UNROLL_XOR_BUFFER_PROFILE,
   RSV_BER_READ_BUFFER_PROFILE,
   RSV_BES_READ_BUFFER_PROFILE,
   RSV_HOST_DATA_CTRL_RLC_WRITE_FROM_SRAM_BUFFER_PROFILE,
   RSV_HOST_DATA_CTRL_RLC_WRITE_FROM_DRAM_BUFFER_PROFILE,
   RSV_HOST_WRITE_BUFFER_PROFILE,
   RSV_HAWA_WRITE_TO_RAM_VERIFICATION_BUFFER_PROFILE,
   RSV_SECURED_READ_TO_SRAM,
   RSV_RLA_CLIENT_BUFFER_PROFILE,
   RSV_BMG_HOST_WRITE_CLIENT_BUFFER_PROFILE,
   RSV_INFRA_CLIENT_BUFFER_PROFILE,
   RSV_RLC_CLIENT_BUFFER_PROFILE,
   RSV_BMG_RLC_CLIENT_BUFFER_PROFILE,
   RSV_SECURITY_CLIENT_BUFFER_PROFILE,
   RSV_FE_CLIENT_BUFFER_PROFILE,
   RSV_INVALID_PROFILE_INDEX = 255

} RSV_BufferProfiles_t;




typedef enum RSV_PowerProfiles_e
{
   RSV_EMPTY_CHECK_STATUS_PROFILE = 0 ,
   RSV_ERASE_PROFILE,
   RSV_WRITE_TRANSFER_PROFILE,
   RSV_PROGRAM_SLC_TYPE_PROFILE,
   RSV_SENSE_TYPE_PROFILE,
   RSV_READ_TRANSFER_PROFILE,
   RSV_PROGRAM_LOW_PROFILE,
   RSV_PROGRAM_HIGH_PROFILE,
   RSV_SENSE_LOW_PROFILE,
   RSV_SENSE_HIGH_PROFILE,
   RSV_CUSTOM_SENSE_PROFILE,
   RSV_LATCH_SWAP_PROFILE,
   RSV_TEMPERATURE_READ_PROFILE,
   RSV_RESET_DIE_PROFILE,
   RSV_BIT_COUNT_TRANSFER_PROFILE,

   RSV_THERMAL_THROTTLING_PROFILE,
   RSV_DIST_READ_TYPE_PROFILE,
   RSV_PROGRAM_TLC_TYPE_PROFILE,
   RSV_SENSE_ERASED_SLC_SP_TYPE_PROFILE,
   RSV_SENSE_ERASED_SLC_DP_TYPE_PROFILE,
   RSV_SENSE_ERASED_TLC_SP_TYPE_PROFILE,
   RSV_SENSE_ERASED_TLC_DP_TYPE_PROFILE,
   RSV_REFRESH_RD_PROFILE,
   RSV_TOTAL_PROFILE_NUM,

} RSV_PowerProfiles_t;



typedef enum RSV_VirtualClient_e
{
   RSV_VCLIENT_ID_PS_UT_HOST_WRITE_RA_POOL         =    0x00000201 ,
   RSV_VCLIENT_ID_RLA_RA_POOL                      =    0x00020001 ,
   RSV_VCLIENT_ID_BANK_MANAGER_HW_RA_POOL          =    0xFFFFFFFF  ,
   RSV_VCLIENT_ID_INFRA_RA_POOL                    =    0x00030000  ,
   RSV_VCLIENT_ID_RELOCATION_PS0_RA_POOL           =    0x01000100 ,
   RSV_VCLIENT_ID_RELOCATION_PS1_RA_POOL           =    0x01000200 ,
   RSV_VCLIENT_ID_BANK_MANAGER_RLC_RA_POOL         =    0xFFFFFFFF ,
   RSV_VCLIENT_ID_SECURITY_RA_POOL                 =    0x00010002 ,
   RSV_VCLIENT_ID_FE_RA_POOL                       =    0x00030003 ,
   RSV_VCLIENT_ID_INFRA_PEAK_NAND_PWR_POOL         =    0x00000101 ,
   RSV_VCLIENT_ID_INFRA_PEAK_DATAPATH_PWR_POOL     =    0x00010101 ,
   RSV_VCLIENT_ID_INFRA_PEAK_FW_PWR_POOL           =    0x00020101 ,
   RSV_VCLIENT_ID_INFRA_AVERAGE_NAND_PWR_POOL      =    0x01000101 ,
   RSV_VCLIENT_ID_INFRA_AVERAGE_DATAPATH_PWR_POOL  =    0x01010101 ,
   RSV_VCLIENT_ID_INFRA_AVERAGE_FW_PWR_POOL        =    0x01020101 ,

} RSV_VirtualClients_t;

#line 262 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
typedef enum RSV_PowerAccumSamples_e
{
   CYCLES_64 = 0,
   CYCLES_128   ,
   CYCLES_256   ,
   CYCLES_512   ,
   CYCLES_1024  ,
   CYCLES_2048  ,
   CYCLES_4096  ,
   CYCLES_8192  ,

} RSV_PowerAccumSamples_t;



enum
{
   STATUS_RSV_BUFFS_POWER_NOT_READY_YET = STATUS_RSV_ERROR_BASE,
   STATUS_RSV_BUFFS_POWER_READY,
};




typedef void (*BuffsAllocDoneCB_t)(void);







typedef struct Request_Random_Allocation_s
{
   uint32_t VirtualPoolIndex    :  3;
   uint32_t BufferPoolIndex     :  4;
   uint32_t RFU0                :  9;
   uint32_t BufferCount         :  5;
   uint32_t RFU1                :  3;

}Request_Random_Allocation_t, *pRequest_Random_Allocation_t;

typedef struct Request_Power_Consumption_s
{
   uint32_t VirtualPoolIndex    :  3;
   uint32_t PowerPoolIndex      :  2;
   uint32_t PowerConsumption    :  16;
   uint32_t RFU0                :  3;

}Request_Power_Consumption_t, *pRequest_Power_Consumption_t;

typedef struct Request_Ring_Buffer_s
{
   uint32_t RFU0                :  3;
   uint32_t BufferPoolIndex     :  4;
   uint32_t RFU1                :  9;
   uint32_t BufferCount         :  5;
   uint32_t InstanceIndex       :  3;

}Request_Ring_Buffer_t, *pRequest_Ring_Buffer_t;

typedef struct Request_Resource_Profiles_s
{
   uint32_t BufferResourceProfileIndex   :  8;
   uint32_t PowerResourceProfileIndex    :  8;
   uint32_t BufferCount                  :  5;
   uint32_t InstanceIndex                :  3;

}Request_Resource_Profiles_t, *pRequest_Resource_Profiles_t;


typedef union _Request_Details_u
{
   Request_Random_Allocation_t   RequestRandomAllocation;
   Request_Power_Consumption_t   RequestPowerConsumption;
   Request_Ring_Buffer_t         RequestRingBuffer;
   Request_Resource_Profiles_t   RequestResourceProfiles;
   uint32_t                        field;
}Request_Details_u, *pRequest_Details_u;


typedef struct RSV_Request_s
{
   uint32_t PoolType        :  2;
   uint32_t StarvationBlock :  1;
   uint32_t Priority        :  3;
   Request_Details_u RequestDetails;
}RSV_Request_t, *pRSV_Request_t;




typedef struct Rls_Request_Random_Allocation_s
{
   uint32_t BufferIndex     :  19;

}Rls_Request_Random_Allocation_t, *pRls_Request_Random_Allocation_t;

typedef struct Rls_Request_Power_Consumption_s
{
   uint32_t PowerToRelease  :  19;

}Rls_Request_Power_Consumption_t, *pRls_Request_Power_Consumption_t;

typedef struct  Rls_Request_Resource_Profiles_s
{
   uint32_t RlsPowerProfileIndex      :  8;
   uint32_t DiffRlsPowerProfileIndex  :  8;
   uint32_t EnDiffRlsPowerProfileIndex:  1;
   uint32_t RFU0                      :  1;

} Rls_Request_Resource_Profiles_t, *pRls_Request_Resource_Profiles_t;


typedef union _Rls_Request_Details_u
{
   Rls_Request_Random_Allocation_t   RlsRequestRandomAllocation;
   Rls_Request_Power_Consumption_t   RlsRequestPowerConsumption;
   Rls_Request_Resource_Profiles_t   RlsRequestResourceProfiles;
   uint32_t                            field;

}Rls_Request_Details_u, *pRls_Request_Details_u;


typedef struct RSV_Rls_Request_s
{
   uint32_t VirtualPool     :  3;
   uint32_t Pool            :  3;
   uint32_t Type            :  2;
   Rls_Request_Details_u RlsRequestDetails;

}RSV_Rls_Request_t, *pRSV_Rls_Request_t;


typedef  struct RSV_RequestCtx_s
{
   uint32_t             *pIndexTable;
   uint8_t             **ppDataBuffers;
   uint8_t             **ppHeaderBuffers;

} RSV_RequestCtx_t, *pRSV_RequestCtx_t;

#line 505 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void  __attribute__((section("TRW")))  PS_RSV_Init(uint32_t psCpuInstance);

#line 517 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_RegisterInterrupts(void);










void RSV_ErrorLogInit();

#line 561 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_BuffAlloc(RSV_VirtualClients_t clientId, uint32_t numBuffsToAlloc, pRSV_RequestCtx_t pReqCtx);

#line 582 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_SetBufListAddress(RSV_VirtualClients_t clientId, uint32_t *pBufListAddress);

#line 601 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetBufListAddress(RSV_VirtualClients_t clientId, uint32_t **ppBLAddress);

#line 619 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_BuffRelease(uint32_t buffIdx);

#line 638 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_BuffListRelease(uint32_t *buffIdxList, uint32_t buffIdxListLength);

#line 667 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_PowerAlloc(RSV_VirtualClients_t clientId, uint32_t powerToAlloc);

#line 697 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_PowerAllocUsingProfile(RSV_VirtualClients_t clientId, RSV_PowerProfiles_t profileIdx);

#line 726 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_PowerAllocMultiplePools(RSV_VirtualClients_t clientId1, uint32_t powerToAlloc1, RSV_VirtualClients_t clientId2, uint32_t powerToAlloc2);

#line 747 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_PowerRelease(RSV_VirtualClients_t clientId , uint32_t pwrToRelease);

#line 768 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_PowerReleaseUsingProfile(RSV_PowerProfiles_t profileIdx);

#line 783 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
uint32_t RSV_IsRequestPending(RSV_VirtualClients_t clientId);

#line 826 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_PowerAccumSetup(uint32_t powerPoolIdx, RSV_PowerAccumSamples_t pwrAccumSample);

#line 843 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetAccumulatedPower(uint32_t powerPoolIdx, uint32_t *accumPower);

#line 864 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_SetPowerAccumulator(uint32_t powerPoolIdx, uint32_t valueToUpdateAccum);

#line 880 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_ResetPowerAccumulator(uint32_t powerPoolIdx);










void RSV_EnablePowerAccumTimer(void);









void RSV_DisablePowerAccumTimer(void);

#line 917 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_ConfigPowerAccumTimer(RSV_PowerAccumSamples_t pwrAccumSample);

#line 932 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetPowerAccumTimerValue(uint32_t *timerValue);

#line 955 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetPoolFreeBuffs(RSV_VirtualClients_t clientId, uint32_t *freeBuffsNum);

#line 973 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetVPoolAllocBuffs(RSV_VirtualClients_t clientId, uint32_t *allocBuffsNum);

#line 988 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetPoolFreePower(uint32_t powerPoolIdx, uint32_t *freePower);

#line 1004 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetVPoolAllocPower(uint32_t powerPoolIdx,uint32_t virtualPoolIdx, uint32_t *allocPower);










void RSV_AckClientInterrupts(RSV_VirtualClients_t clientId);

#line 1027 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_EnableInterrupts(RSV_VirtualClients_t clientId);

#line 1039 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_DisableInterrupts(RSV_VirtualClients_t clientId);

#line 1055 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_SetBuffsReadyNotificationCB(RSV_VirtualClients_t clientId, BuffsAllocDoneCB_t cbFunc);

#line 1098 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_CancelReq(RSV_VirtualClients_t clientId, BOOL checkIfSucceeded);

#line 1112 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
void RSV_WaitReqToBeServiced(RSV_VirtualClients_t clientId);

#line 1129 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetVirtPoolMinBuffs(RSV_VirtualClients_t clientId, uint32_t *pMinBuff);

#line 1144 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetVirtPoolMaxBuffs(RSV_VirtualClients_t clientId, uint32_t *pMaxBuff);

#line 1163 "d:/gitrepo/atlas3_release/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_api.h"
Status_t RSV_GetNumberOfTotalBuffersPerPool(uint32_t poolId, uint32_t *pBuffersNum);










uint32_t RSV_GetHostWritePoolAddress(void);

#line 28 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"

#line 54 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
enum
{
   HA_FE_CROSS_IP_INTERNAL_QUEUE = 0,
   HA_EXCEPTION_QUEUE,
   HA_TWO_RANGE_QUEUE,
   HA_ADMIN_QUEUE,
   HA_READ_QUEUE,
   HA_READ_OVP_QUEUE,

   HA_PRE_MOUNT_HOLDING_QUEUE,

#line 67 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
   HA_QUEUE7,
   HA_QUEUE8,
   HA_QUEUE9,
   HA_QUEUE10,
   HA_QUEUE11,
   HA_QUEUE12,
   HA_QUEUE13,
   HA_DEFAULT_QUEUE,
   HA_HAWA_QUEUE,
   HA_NUM_QUEUES,
};
typedef uint32_t HA_Queues_t;





typedef union HA3_CQM_FWQX_STATE_u
{
   struct HA3_CQM_FWQX_STATE_s
   {
      uint32_t qSize                         :9;
      uint32_t qCiHead                       :9;
      uint32_t qCiTail                       :9;

      uint32_t reserved_0                    :3;
      uint32_t qPop                          :1;
      uint32_t qValid                        :1;


   } bits;

   uint32_t all32;
} HA3_CQM_FWQX_STATE_t;

typedef struct HA3_CQM_FWQX_STATE_64_s
{
   HA3_CQM_FWQX_STATE_t    HA3_CQM_FWX_STATE;
   uint32_t                Reserved32_63Bits;
}HA3_CQM_FWQX_STATE_64_t;

typedef union HFWR_HIM_INT_EN_u
{
    struct HFWR_HIM_INT_EN_s
    {
         uint32_t hnvme              :1;
         uint32_t ha                 :1;
         uint32_t hawa               :1;
         uint32_t habm0              :1;
         uint32_t habm1              :1;
         uint32_t habm2              :1;
         uint32_t hsec               :1;
         uint32_t pcieWrap           :1;
         uint32_t pcieMacPhy         :1;

         uint32_t hmbc               :1;
         uint32_t fsmMn              :1;

         uint32_t reserved11_12      :2;

#line 134 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
         uint32_t hawaRwCtxNtfRbNe   :1;
         uint32_t hawaSwCtxNtfRbNe   :1;
         uint32_t hawaOwCtxNtfRbNe   :1;
         uint32_t haFWQ0ne           :1;
         uint32_t haFWQ1ne           :1;
         uint32_t haFWQ2ne           :1;
         uint32_t haFWQ3ne           :1;
         uint32_t haFWQ4ne           :1;
         uint32_t haFWQ5ne           :1;
         uint32_t haFWQ6ne           :1;
         uint32_t haFWQ7ne           :1;
         uint32_t haFWQ8ne           :1;
         uint32_t haFWQ9ne           :1;
         uint32_t haFWQ10ne          :1;
         uint32_t haFWQ11ne          :1;
         uint32_t haFWQ12ne          :1;
         uint32_t haFWQ13ne          :1;
         uint32_t haFWQ14ne          :1;
         uint32_t haFWQ15ne          :1;
    } bits;
    uint32_t all32;
} HFWR_HIM_INT_EN_t;



typedef union NVM_HSQM_CMD_CTR_u
{
    struct NVM_HSQM_CMD_CTR_s
    {
        uint32_t io_Ctr                :16;
        uint32_t admin_Ctr             :16;
    } bits;
    uint32_t all32;
} NVM_HSQM_CMD_CTR_t;


uint32_t HA_GetDLMQ(void);
uint32_t HNVMe_GetHSQCMDCtrl(void);
void HABM_WaitForIdle_FwChannel( void );

#line 186 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
__inline static  void HIM_EnableTopLevelInterrupts_HA ( uint32_t queueBitmap )
{
   HFWR_HIM_INT_EN_t    HFWR_HIM_INT_EN;
   uint32_t             intPosture;



   intPosture =  DisableInt() ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(queueBitmap <= (0xFFFF)), "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h" , 196 , "queueBitmap <= (0xFFFF)");                         "BullseyeCoverage restore"; } ;

   HFWR_HIM_INT_EN.all32 =  ReadRegister( (unsigned long)( ( 0xee000000  + 0x2004) ) ) ;
   HFWR_HIM_INT_EN.all32 |= (queueBitmap << 16);

   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(queueBitmap) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(HFWR_HIM_INT_EN.all32) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_HA_CQM_INTERRUPT_ENABLE_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;

   WriteRegister( (unsigned long)( ( 0xee000000  + 0x2004) ), (unsigned long)(HFWR_HIM_INT_EN.all32) ) ;

   RestoreInt(intPosture) ;
}

#line 222 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
__inline static  uint32_t HA_CQM_FirmwarePop(uint32_t haCqmFwQueueNumber, uint32_t* queueSizePtr)
{
   HA3_CQM_FWQX_STATE_t ha3CqmFwQueueState;
   uint16_t             commandIndex;
   uint32_t             intPosture;

   intPosture =  DisableInt() ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(haCqmFwQueueNumber < HA_NUM_QUEUES), "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h" , 231 , "haCqmFwQueueNumber < HA_NUM_QUEUES");                         "BullseyeCoverage restore"; } ;

   do
   {

      ha3CqmFwQueueState.all32 =  ReadRegister( (unsigned long)( ( 0xf8130000  + 0x288)  + (haCqmFwQueueNumber * sizeof(HA3_CQM_FWQX_STATE_64_t))) ) ;
      IMPLEMENT_POLLING_ACCELERATION ;
   } while ( (ha3CqmFwQueueState.bits.qValid == 0) &&
            (ha3CqmFwQueueState.bits.qSize != 0) &&
            (ha3CqmFwQueueState.bits.qPop == 1));


   if ((ha3CqmFwQueueState.bits.qValid) && (ha3CqmFwQueueState.bits.qSize != 0))
   {


      commandIndex = (uint16_t) ha3CqmFwQueueState.bits.qCiHead;
      *queueSizePtr = ha3CqmFwQueueState.bits.qSize;



      ha3CqmFwQueueState.bits.qPop = 1;


      ha3CqmFwQueueState.all32 &=  (0x40000000) ;
      WriteRegister( (unsigned long)( ( 0xf8130000  + 0x288)  + (haCqmFwQueueNumber * sizeof(HA3_CQM_FWQX_STATE_64_t))), (unsigned long)(ha3CqmFwQueueState.all32) ) ;
   }

   else
   {
      commandIndex =  ( (0xFFFF) ) ;
      *queueSizePtr = 0;
   }

   RestoreInt(intPosture) ;

   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(haCqmFwQueueNumber) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(commandIndex) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(*queueSizePtr) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_HA_CQM_FW_POP_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;

   return commandIndex;
}










__inline static  void HA_CQM_QueueInterruptEnable(uint32_t haCqmFwQueueNumber)
{
   HIM_EnableTopLevelInterrupts_HA((uint32_t)(1 << haCqmFwQueueNumber));

}








__inline static  void HAQ_QueueInterruptEnable(uint32_t queueID)
{

#line 302 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
}









__inline static  uint32_t HNVMe_SQM_GetCmdCounterIO(void)
{
   NVM_HSQM_CMD_CTR_t   hsqmCmdCtr;

   hsqmCmdCtr.all32 =  ReadRegister( (unsigned long)( ( 0xee000000  + 0x21B0) ) ) ;

   return hsqmCmdCtr.bits.io_Ctr;
}

#line 333 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/him_minidriver.h"
__inline static  BOOL32 HIM_CheckTopLevelCQM_Interrupt_HA(uint32_t hfwrHIM_IntStatus, HA_Queues_t queueNum)
{


   return (((hfwrHIM_IntStatus) & (1 << (16 + queueNum))) != 0);
}

#line 23 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_customconfig.h"

#line 31 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_customconfig.h"
typedef enum
{
   GENERIC_OEM   = 0,
   DELL_OEM      = 1,
   HP_OEM        = 2,
   LENOVO_OEM    = 3,
   ASUS_OEM      = 4,
   INTERNAL_OEM  = 5,
   WD_BLACK_OEM  = 6,
   MICROSOFT_OEM = 7,
} SYS_OEMDecode_t;

#line 53 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_customconfig.h"
typedef struct SYS_Custom_Features_s
{
   uint64_t thermalSoftShutdownSupport                 :1;
   uint64_t ledSupport                                 :1;
   uint64_t nhtecTMT3_0_AltSupport                     :1;
   uint64_t nhtecDOECCompositeSupport                  :1;
   uint64_t oemFlag                                    :3;
   uint64_t reserved_4_60                              :57;
} SYS_Custom_Features_t;

#line 25 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/mp_mqd_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sys_intcontrollerdriver.h"

#line 29 "d:/gitrepo/atlas3_release/source/infra/bsp/inc_public/sys_intcontrollerdriver.h"
typedef   void(*InterruptHandler_t)(void);

Status_t SYS_IntControllerInit(BOOL32 EnableInterrupt);
void     SYS_MaskAll_CPU_Interrupts(void);
void     SYS_Mask_CPU_InteruptNumber(uint32_t intNum);
void     SYS_Enable_CPU_InterruptNumber(uint32_t intNum);
BOOL     SYS_InputInterruptIsActive(uint32_t intNum);
BOOL32   SYS_IsEnabled_CPU_InterruptNumber(uint32_t intNum);
Status_t SYS_Install_ISR_Vector(uint32_t vectorNumber, InterruptHandler_t handler);
void     SYS_SetIntPriority(uint32_t intNum, uint32_t priority);
uint8_t  SYS_GetIntPriority(uint32_t CPU_Interrupt);
void     SYS_FireSGI(uint32_t intNum, uint8_t targetFlag);
void     SYS_ClearPulseInt(uint32_t intNum);
void     SYS_SetIntMode(uint32_t intNum, uint32_t intMode);
uint32_t SYS_GetIntMode(uint32_t intNum);
void     SYS_TriggerSwi(uint32_t intNum);
void     SYS_SetIntThreshold(uint32_t threshold);
void     SYS_InitInterruptVectors(void);

#line 18 "d:/gitrepo/atlas3_release/source/infra/inc_public/mp_mqd_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"

#line 39 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
typedef struct RTOS_QueueField_s
{
   struct RTOS_QueueField_s* next;
   struct RTOS_QueueField_s* prev;
} RTOS_QueueElement_t;

typedef struct
{
   RTOS_QueueElement_t* next;
   RTOS_QueueElement_t* prev;
   uint16_t             size;
   uint16_t             max;
} RTOS_Queue_t;







enum RTOS_Status_e
{

   RTOS_OK = STATUS_OK,
   RTOS_ERROR = STATUS_ERROR,


   RTOS_LWMSGQ_INVALID_PARAMETERS = STATUS_RTOS_ERROR_BASE,
   RTOS_LWMSGQ_INVALID,
   RTOS_LWMSGQ_FULL,
   RTOS_LWMSGQ_EMPTY,
   RTOS_LWMSGQ_TIMEOUT,
   RTOS_LWEVNT_INVALID_PARAMETERS,
   RTOS_LWEVNT_TIMEOUT,
   RTOS_LWEVNT_NO_EVENT_GROUPS_AVAILABLE,
   RTOS_FAST_MSG_Q_FULL,
   RTOS_LWSEMA_TIMEOUT,
   RTOS_LWSEMA_WAIT_ERROR,
   RTOS_LWSEMA_NO_DESTRUCTION,
   RTOS_LWSEMA_CREATE_FAIL,
   RTOS_RECEIVED_NULL_PTR,
}  ;

enum ThreadId_e
{
   THREAD_NON_RTOS = 0,
   THREAD_RAM_FE = 1,
   THREAD_RAM_FTL,
   THREAD_RAM_INFRA,
   THREAD_RAM_SECURITY,
   THREAD_RAM_PS_UT,
   THREAD_RAM_MST,
   THREAD_DLE_FE,
   THREAD_DLE_FMT,

#line 96 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
   THREAD_ISR,
}  ;

typedef uint16_t RTOS_ThreadType_t;

typedef struct
{
   RTOS_ThreadType_t threadType;
   uint16_t threadInstance;
} RTOS_ThreadInfo_t;







enum
{
   MAX_STACK_INFO_ENTRIES = 32,
}  ;

typedef struct SYS_DiagStackInfoEntry_s
{
   uint8_t  coreFunction;
   uint8_t  coreInstance;
   uint8_t  threadId;
   uint8_t  RTOS_Present               : 1;
   uint8_t  stackGrowsToHighAddress    : 1;
   uint8_t  rfuBits                    : 6;
   uint32_t stackHighAddr;
   uint32_t stackLowAddr;
   uint32_t stackPeakAddr;
}   SYS_DiagStackInfoEntry_t;

typedef struct SYS_DiagStackInfo_s
{
   uint8_t numberOfEntries;
   uint8_t rfu1;
   uint8_t rfu2;
   uint8_t rfu3;
   SYS_DiagStackInfoEntry_t stackInfoEntries[MAX_STACK_INFO_ENTRIES];
}   SYS_DiagStackInfo_t;

#line 196 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
uint32_t RTOS_msToTicks(uint32_t milliSeconds);
void     RTOS_SetRunflag(void);
void     RTOS_ClearRunflag(void);









void   RTOS_Enter(void);
void RTOS_PrepareDpsExit(void);
void* RTOS_GetKernelDataPtr(void);





typedef enum
{
   waitForAny,
   waitForAll
} RTOS_MaskWaitOptions;


   typedef enum EventGroup_e
   {
      EVENT_GROUP_NVME,
      EVENT_GROUP_INFRA,
      EVENT_GROUP_FTL,
      EVENT_GROUP_SECURITY,

#line 235 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
      NUM_EVENT_GROUPS,
   } EventGroup_t;

#line 259 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
Status_t RTOS_LightWeightEventInit(void);
Status_t RTOS_LightWeightEventSet(EventGroup_t group, uint32_t bitMask);
Status_t RTOS_LightWeightEventClear(EventGroup_t group, uint32_t bitMask);
uint32_t RTOS_LightWeightEventSampleGroup(EventGroup_t group, uint32_t bitMask);
uint32_t RTOS_LightWeightEventWait(EventGroup_t group, uint32_t bitMask, RTOS_MaskWaitOptions waitOptions, uint32_t waitMs);





void                 RTOS_QueueInit(RTOS_Queue_t* queue, uint32_t size);
BOOL                 RTOS_QueueEnqueue(RTOS_Queue_t* queue, RTOS_QueueElement_t* element);
RTOS_QueueElement_t* RTOS_QueueDequeue(RTOS_Queue_t* queue);
BOOL                 RTOS_QueueInsert(RTOS_Queue_t* queue, RTOS_QueueElement_t* afterThisElement, RTOS_QueueElement_t* elementToInsert);
RTOS_QueueElement_t* RTOS_QueueHead(RTOS_Queue_t* queue);
RTOS_QueueElement_t* RTOS_QueueNext(RTOS_Queue_t* queue, RTOS_QueueElement_t* afterThisElement);
void                 RTOS_QueueUnlink(RTOS_Queue_t* queue, RTOS_QueueElement_t* elementToRemove);
BOOL                 RTOS_QueueIsEmpty(RTOS_Queue_t* queue);
uint32_t             RTOS_QueueGetSize(RTOS_Queue_t* queue);





extern void RTOS_DelayMilliSeconds(uint32_t msDelay);





void* RTOS_Alloc(uint32_t numberOfBytes);

Status_t RTOS_Free(void* handle);




Status_t RTOS_FreeSecure(void* handle);






typedef struct
{
   RTOS_Queue_t      fastQ;
   RTOS_Queue_t      freePool;
   uint32_t          eventMask;
   EventGroup_t      eventGroup;
   void*             pFreeSemaphore;
} FastMessageQueue_t;

FastMessageQueue_t*  RTOS_FastMessageQueueCreate(FastMessageQueue_t* fastQueuePtr,
                                                 uint32_t elementSizeInBytes,
                                                 uint32_t numberOfElements,
                                                 EventGroup_t eventGroup,
                                                 uint32_t eventMask);

Status_t             RTOS_FastMessageQueueSend(FastMessageQueue_t* fastQueuePtr, RTOS_QueueElement_t* elementPtr);
RTOS_QueueElement_t* RTOS_FastMessageQueueReceive(FastMessageQueue_t* fastQueuePtr);
RTOS_QueueElement_t* RTOS_FastMessageQueueGetFree(FastMessageQueue_t* qPtr, BOOL block);
BOOL                 RTOS_FastMessageQueuePutFree(FastMessageQueue_t* qPtr, RTOS_QueueElement_t*);
BOOL                 RTOS_FastMesssageQueueIsEmpty(FastMessageQueue_t* qPtr);
uint16_t             RTOS_FastMesssageQueueSize(FastMessageQueue_t* qPtr);





void*    RTOS_LightWeightSemaphoreCreate(uint32_t howMany, uint8_t* labelString);
Status_t RTOS_LightWeightSemaphoreDestroy(void* pLwSema);
Status_t RTOS_LightWeightSemaphoreWait(void* pLwSema, uint32_t timeoutMs);
Status_t RTOS_LightWeightSemaphorePost(void* pLwSema);
BOOL32   RTOS_LightWeightSemaphorePoll(void* pLwSema);

#line 354 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_api.h"
typedef struct RTOS_Mutex_s
{
   uint32_t mutexPrv[ (12) ];
} RTOS_Mutex_t;

typedef RTOS_Mutex_t* pRTOS_Mutex_t;
typedef uint32_t RTOS_MutexCeiling_t;

Status_t RTOS_MutexGetPriorityCeiling(pRTOS_Mutex_t, RTOS_MutexCeiling_t* pCeiling);
uint32_t RTOS_MutexGetWaitCount(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexInit(pRTOS_Mutex_t pMutex, uint8_t* labelString);
Status_t RTOS_MutexLock(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexSetPriorityCeiling(pRTOS_Mutex_t pMutex,
                                                  RTOS_MutexCeiling_t NewCeiling,
                                                  RTOS_MutexCeiling_t* pOldCeiling);
Status_t RTOS_MutexTryLock(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexUnlock(pRTOS_Mutex_t pMutex);






typedef void (*pRTOS_User_ISR_t)(void*);
typedef void (*pRTOS_Kernel_ISR_t)(void);

pRTOS_User_ISR_t   RTOS_InstallUser_ISR(uint32_t vectorNumber, pRTOS_User_ISR_t pISR, void* pParameter);
pRTOS_Kernel_ISR_t RTOS_InstallKernel_ISR(uint32_t vectorNumber, pRTOS_Kernel_ISR_t pISR);





BOOL     RTOS_IsRunning(void);
uint32_t RTOS_GetThreadId(void);
void*    RTOS_GetThreadStorageBasepointer(void);

void     RTOS_IcacheInvalidate(void);
void     RTOS_IcacheInvalidateMLines(void* address, uint32_t length);
void     RTOS_IcacheEnable(void);
void     RTOS_IcacheDisable(void);
void     RTOS_DcacheDisable(void);







void     RTOS_NotifyKernelTimeIfRunning(void);
void     RTOS_Block(void);
void     RTOS_Yield(void);
void     RTOS_MakeThreadReady(void* pThreadHandle);
void*    RTOS_GetCurrentThreadHandle(void);
BOOL32   RTOS_IsIn_ISR(void);

void     RTOS_SetupInterruptLevel(uint32_t vectorNum, uint32_t intLvl);

void     RTOS_InitThreadInfo(RTOS_ThreadType_t pThreadType, uint16_t instance);
RTOS_ThreadInfo_t RTOS_GetThreadInfo(void);

void     RTOS_HW_StackCheckOff(void);
void     RTOS_HW_StackCheckOn(void);
uint32_t RTOS_GetPeakStackAddress(uint32_t stackHighAddr, uint32_t stackLowAddr, uint32_t pattern);
Status_t RTOS_GetStackInfo(SYS_DiagStackInfo_t* pStackInfo);
void     RTOS_GetThreadStackBounds(uint32_t *stackBaseAddr, uint32_t *stackLimitAddr);
Status_t RTOS_CopySysRam(uint8_t * pDistMem, uint16_t *pSize);
Status_t RTOS_CopyKernelData(uint8_t *pDistMem, uint16_t *pSize);

#line 19 "d:/gitrepo/atlas3_release/source/infra/inc_public/mp_mqd_api.h"

#line 200 "d:/gitrepo/atlas3_release/source/infra/inc_public/mp_mqd_api.h"
enum MP_MQD_PS_TYPE_e
{
   MP_MQD_PS_TYPE_PS0 = 0,

   MP_MQD_PS_TYPE_PS1,


   MP_MQD_PS_TYPE_NUM
};
typedef uint32_t MP_MQD_PSType_t;



typedef enum MP_MQD_Queue_Group_e
{
   MP_MQD_QUEUE_GROUP_INFRA = 0,
   MP_MQD_QUEUE_GROUP_FTL,


   MP_MQD_QUEUE_GROUP_NUM

} MP_MQD_Queue_Group_t;




typedef enum MP_PQD_QUEUE_TYPE_e
{
   MP_PQD_QUEUE_TYPE_INFRA = 0,
   MP_PQD_QUEUE_TYPE_ADMIN,

   MP_PQD_QUEUE_TYPE_HIGH,
   MP_PQD_QUEUE_TYPE_RLC_READ,

   MP_PQD_QUEUE_TYPE_NORMAL,


   MP_PQD_QUEUE_TYPE_NUM
} MP_PQD_QueueType_t;



typedef enum MP_CQD_QUEUE_TYPE_e
{
   MP_CQD_QUEUE_TYPE_URGENT = 0,
   MP_CQD_QUEUE_TYPE_NORMAL,
   MP_CQD_QUEUE_TYPE_INFRA,


   MP_CQD_QUEUE_TYPE_NUM
} MP_CQD_QueueType_t;






typedef struct MQD_RTFADI_Data_s
{
   uint16_t          CQDvalidCnt[MP_MQD_PS_TYPE_NUM][MP_CQD_QUEUE_TYPE_NUM];
   uint16_t          PQDvalidCnt[MP_MQD_PS_TYPE_NUM][MP_PQD_QUEUE_TYPE_NUM];
}  MQD_RTFADI_Data_t;

#line 276 "d:/gitrepo/atlas3_release/source/infra/inc_public/mp_mqd_api.h"
void        MP_MQD_Init(void);
void        MP_MQD_IntRegister(pRTOS_User_ISR_t pISR);


uint32_t    MP_PQD_GetFreeCnt(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
uint32_t    MP_PQD_GetValidCnt(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
void        MP_PQD_SendMsgStart(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType, uint32_t LPAddr);
void        MP_PQD_SendMsgEnd(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
uint32_t    MP_PQD_Flush(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);

uint32_t    MP_PQD_GetStatusMask(void);
uint32_t    MP_PQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
Status_t    MP_PQD_ExpandStatusBit(uint32_t statusBit, MP_MQD_PSType_t* PSType, MP_PQD_QueueType_t* QType);


void        MP_PQD_IntEnable(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
void        MP_PQD_IntDisable(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
uint32_t    MP_PQD_GetStatus(void);
uint32_t    MP_PQD_GetIntMask(void);
void        MP_PQD_ClrIntMask(uint32_t intMask);

void        MP_PQD_SetQThr(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType, uint32_t Thr);
void        MP_PQD_IntThrEnable(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
void        MP_PQD_IntThrDisable(MP_MQD_PSType_t PSType, MP_PQD_QueueType_t QType);
uint32_t    MP_PQD_GetThrStatus(void);
uint32_t    MP_PQD_GetThrIntMask(void);
void        MP_PQD_ClrThrIntMask(uint32_t intMask);



uint32_t    MP_CQD_GetValidCnt(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);
Status_t    MP_CQD_PeekMsg(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType, uint8_t** pMsg);
void        MP_CQD_ReleaseMsg(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);

uint32_t    MP_CQD_GetStatusMask(void);
uint32_t    MP_CQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
Status_t    MP_CQD_ExpandStatusBit(uint32_t statusBit, MP_MQD_PSType_t* PSType, MP_CQD_QueueType_t* QType);


void        MP_CQD_IntEnable(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);
void        MP_CQD_IntDisable(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);
uint32_t    MP_CQD_GetStatus(void);
uint32_t    MP_CQD_GetIntMask(void);
void        MP_CQD_ClrIntMask(uint32_t intMask);

void        MP_CQD_SetQThr(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType, uint32_t Thr);
void        MP_CQD_IntThrEnable(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);
void        MP_CQD_IntThrDisable(MP_MQD_PSType_t PSType, MP_CQD_QueueType_t QType);
uint32_t    MP_CQD_GetThrStatus(void);
uint32_t    MP_CQD_GetThrIntMask(void);
void        MP_CQD_ClrThrIntMask(uint32_t intMask);






void MP_CQD_GeneralIntDisable(uint32_t ipcChannel);
void MP_CQD_GeneralIntEnable(uint32_t ipcChannel);
uint32_t MP_CQD_GeneralGetIntMask(uint32_t ipcGroupOffset);
void MP_CQD_GeneralClrIntMask(uint32_t ipcGroupOffset, uint32_t intMask);
uint32_t MP_CQD_GeneralGetValidCnt(uint32_t ipcChannel);
void MP_CQD_GeneralClearValidCnt(uint32_t ipcChannel);
void MP_CQD_GeneralDecrementValidCnt(uint32_t ipcChannel);
uint32_t MP_CQD_GeneralGetCountersStatus(uint32_t ipcGroupOffset);


uint32_t MP_MQD_GetRTFADIStatistics(MQD_RTFADI_Data_t *pMQDRTFADI);


void        MP_PQD_BTST(void);

#line 29 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"

#line 47 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"
enum SYS_Throttle_Level_e
{
   SYS_THROTTLING_NONE = 0,
   SYS_THROTTLING_LIGHT,
   SYS_THROTTLING_HEAVY,
   SYS_THROTTLING_EXTREME,

#line 56 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"
   SYS_THROTTLING_NUM,
   SYS_THROTTLING_TSD = SYS_THROTTLING_NUM,
};
typedef uint32_t SYS_Throttle_Level_t;

typedef enum
{
    TDET_COMPOSITE_TEMP = 0,
    TDET_ASIC_TEMP_SENSOR = 1,
    TDET_HOTTEST_NAND_PS0 = 2,
    TDET_HOTTEST_NAND_PS1 = 3,
    TDET_TEMP_SENSORS_NUM = 4,
    TDET_TEMP_SENSORS_ALL = 0xFF,
}Tdet_Sensor_Index_t;




typedef enum
{
   TEMP_CONFIG_WC_OVER_TEMP_THRESHOLD,
   TEMP_CONFIG_UNDER_TEMP_THRESHOLD,
   TEMP_CONFIG_RESERVED,
   TEMP_CONFIG_CC_TEMP_THRESHOLD = 0xFE,
   TEMP_CONFIG_ASIC_TEMP_TT_THRESHOLD = 0xFF,
}Temp_Config_Index_t;

typedef enum
{
   SMART_WARN_TEMP_TIME = 0,
   SMART_CRIT_TEMP_TIME = 1,
   SMART_ALL_TEMP_TIME = 2,
}SYS_Temp_Time_t;

typedef struct SYS_Infra_Smart_s
{
   uint32_t wcTime;
   uint32_t ccTime;
   uint32_t lightThrottlingCount;
   uint32_t heavyThrottlingCount;
   uint32_t extremeThrottlingCount;
   uint32_t totalTimeTMT1;
   uint32_t totalTimeTMT2;
   uint32_t maxNandTemp;
   uint32_t maxAsicTemp;
   uint16_t DRAMparityErrors;
   uint16_t SRAMparityErrors;

#line 109 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"
}   SYS_Infra_Smart_t;

typedef struct SYS_Infra_Resident_s
{
   SYS_Infra_Smart_t infraSmart;
   uint8_t reserved[ 256  - sizeof(SYS_Infra_Smart_t)];
}SYS_Infra_Resident_t;



typedef union SYS_HotestDieLocation_s
{
   uint32_t all32;
   struct
   {
      uint8_t ps;
      uint8_t fim;
      uint8_t die;
      uint8_t reserved;
   }bytes;
}  SYS_HotestDieLocation_t;


typedef struct SYS_Temperature_s
{
   uint32_t asicTemp;
   uint32_t compositeTemp;
   uint32_t nandPeakTemp;
   uint32_t nandTemp[ ( 2 ) ][ ( ( ( 8 ) / ( 2 ) )  * (1)  * (4) ) ];
   SYS_HotestDieLocation_t hotestDieLocation;
}   SYS_Temperature_t;


typedef struct SYS_ETTcounter_s
{
   int32_t count;
   int32_t max;
   int32_t hysteresis;
   int32_t decrement;
   int32_t increment;
   int32_t low_threshold;
   int32_t high_threshold;
   int32_t shutdown_threshold;
} SYS_ETTcounter_t;

typedef struct SYS_NANDSampling_s
{
   uint32_t TEMP_SR;
   uint64_t NandSamplingPeriodMicroseconds;
   uint64_t NandSamplingPeriodHighTemp;
   uint64_t NandSamplingPeriodDefault;
   uint64_t MicrosecondsAboveTEMP_SRcurrent;
   uint64_t TicksAboveTEMP_SRtotal;
   uint64_t MicrosecondsAboveTEMP_SRthreshold;
} SYS_NANDSampling_t;



typedef struct SYS_NHTEC_s
{
   SYS_ETTcounter_t ETTcounter;
   uint32_t TMT3_0;
   uint32_t TMT3_1;
   uint32_t TMT3_DEC;
   uint32_t deviceOverExposureCompensation;
} SYS_NHTEC_t;





typedef struct SYS_RtFadi_Thermal_s
{
   uint32_t asicTemp;
   uint32_t compositeTemp;
   uint32_t peakDieTemp;
   uint32_t curPowerState;
   uint32_t prePowerState;
   uint32_t thermalThrottling;
   uint32_t nvmePowerState;
   uint32_t hotestDieLocation;
}  SYS_RtFadi_Thermal_t;





void SYS_EnableDisableHctmCounterTMT1(BOOL flag);
void SYS_EnableDisableHctmCounterTMT2(BOOL flag);
void SYS_ChangeCompositeLightThresholds(uint32_t lightTempThreshold);
void SYS_ChangeCompositeHeavyThresholds(uint32_t heavyTempThreshold);

#line 207 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"
uint32_t SYS_GetTdetTempKelvin(Tdet_Sensor_Index_t sensorIdx, BOOL lockCriticalSection);


uint32_t SYS_GetSMARTSize(void);
uint32_t SYS_GetSMARTVersion(void);
void SYS_PrepForSMARTControlSync(void);
void SYS_SMARTControlSyncDone(void);
Status_t SYS_GetInfraSMARTCounter(SYS_Infra_Smart_t * pInfraSmartCounter);
void  __attribute__((section("CODE_MEDIUM")))  SYS_GetInfraSMART(uint16_t * pSensorsTemp, SYS_Infra_Smart_t * pInfraSmartCounter);
uint32_t SYS_GetCompositeTempBMC(BOOL ifTimer);
void SYS_InitInfraSmartFTLLog(void);
void SYS_ResetSmartTempTime(uint32_t tempTimeType);
void SYS_ChangeUnderTempThreshold(Tdet_Sensor_Index_t tdetSensorId, uint32_t underTemp);
void SYS_ChangeOverTempThreshold(Tdet_Sensor_Index_t tdetSensorId, uint32_t underTemp);
void SYS_SetWcCcTemp(uint32_t wcTemp, uint32_t ccTemp);

uint32_t SYS_GenThermalFadiRtData(SYS_RtFadi_Thermal_t * pData);


Status_t SYS_EnableThermalSystem(BOOL32 ifRunImmediate);
void SYS_DisableThermalSystem(BOOL32 ifClearEvent);

void SYS_ReadAllTemperature(SYS_Temperature_t * pAllTemp);
uint32_t SYS_GetHighTempTime(void);
SYS_Throttle_Level_t SYS_GetDeviceThrottlingLevel(void);
SYS_Throttle_Level_t SYS_GetThermalThrottlingLevel(void);
uint32_t SYS_GetThrottlingTransitionCounter(void);


BOOL32 SYS_IsPowerAllocation(void);
void SYS_SetThermalInProgress(BOOL value);
BOOL32 SYS_GetThermalInProgress(void);

#line 270 "d:/gitrepo/atlas3_release/source/infra/tm/inc_public/sys_tm_api.h"
BOOL SYS_Is_Throttling(void);

#line 33 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"

#line 268 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
enum NVMe_FNV_STOP_REASON_State_e
{
    NVMe_FNV_STOP_REASON_FNV_NOT_RUNNING             = 0,
    NVMe_FNV_STOP_REASON_THERMAL_THROTTLE_CONDITION  = 1,
    NVMe_FNV_STOP_REASON_SANITIZE_RECIEVED           = 2,
    NVMe_FNV_STOP_REASON_FORMAT_RECIEVED             = 3,
    NVMe_FNV_STOP_REASON_DEVICE_SELF_TEST_RECIEVED   = 4,
    NVMe_FNV_STOP_REASON_SHUTDOWN_STARTED            = 5,
    NVMe_FNV_STOP_REASON_D3_STATE_STARTED            = 6,
    NVMe_FNV_STOP_REASON_SCTP_STOP                   = 7,
    NVMe_FNV_STOP_REASON_RESET_STARTED               = 8,
    NVMe_FNV_STOP_REASON_SECOND_FNV_RECIEVED         = 9,
    NVMe_FNV_STOP_REASON_PLP                        = 10,

};

typedef uint16_t NVMe_FNV_STOP_REASON_State_t;


enum NVMe_FNV_FTL_FE_CALL_e
{
   FE_FTL_FNV_CMD_COMPLETED,
   FE_FTL_FNV_CMD_STOPPED,
};
typedef uint32_t NVMe_FNV_FTL_FE_CALL_t;




typedef enum NVMe_AdminCmdOpCodes_e
{
   DELETE_IO_SUBMISSION_QUEUE          = 0x00,
   CREATE_IO_SUBMISSION_QUEUE          = 0x01,
   GET_LOG_PAGE                        = 0x02,
   DELETE_IO_COMPLETION_QUEUE          = 0x04,
   CREATE_IO_COMPLETION_QUEUE          = 0x05,
   IDENTIFY                            = 0x06,
   ABORT                               = 0x08,
   SET_FEATURES                        = 0x09,
   GET_FEATURES                        = 0x0A,
   ASYNC_EVENT_REQUEST                 = 0x0C,
   NAMESPACE_MANAGEMENT                = 0x0D,
   FW_COMMIT                           = 0x10,
   FW_IMAGE_DOWNLOAD                   = 0x11,
   DEVICE_SELF_TEST                    = 0X14,
   NAMESPACE_ATTACHMENT                = 0x15,
   KEEP_ALIVE_CMD                      = 0x18,
   DIRECTIVE_SEND                      = 0x19,
   DIRECTIVE_RECEIVE                   = 0x1A,
   NVMEMI_SEND                         = 0x1D,
   NVMEMI_RECEIVE                      = 0x1E,
   DOORBELL_BUFFER_CONFIG              = 0x7C,
   FABRICS_COMMANDS                    = 0x7F,
   FORMAT_CMD                          = 0x80,
   SECURITY_SEND                       = 0x81,
   SECURITY_RECEIVE                    = 0x82,
   SANITIZE                            = 0x84,

   VS_CMD_GET_SET_CTLR_PM_CAPABILITY   = 0xC0,

   VS_CMD_SET_VENDOR_SPECIFIC_FEATURE  = 0xDF,
   VS_CMD_GET_LOG_PAGE_SHADOW          = 0XE2,
   DEVICE_SELF_TEST_MIRROR             = 0xE4,
   SCTP_WRITE                          = 0xE5,
   SCTP_READ                           = 0xE6,
   SET_FEATURES_MIRROR                 = 0xE9,
   GET_FEATURES_MIRROR                 = 0xEA,


   VS_CMD_UPDATE_IDLOG                 = 0xF1,
   VS_CMD_GET_DUI_LOG                  = 0xFA,

#line 344 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
} NVMe_AdminCmdOpCodes_t;

typedef enum NVMe_NVMCmdOpCodes_e
{
   NVM_FLUSH               = 0x00,
   NVM_WRITE               = 0x01,
   NVM_READ                = 0x02,
   NVM_WRITE_UNCORRECTABLE = 0x04,
   NVM_COMPARE             = 0x05,
   NVM_WRITE_ZEROES        = 0x08,
   NVM_DATASET_MANAGEMENT  = 0x09,

   NVM_VERIFY              = 0x0C,

   NVM_FNV                 = 0x80,
} NVMe_NVMCmdOpCodes_t;

#line 391 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
enum
{
   FE_EXP_HLBA = 1,
   FE_EXP_CRC,
   FE_EXP_WUC,
   FE_EXP_UECC,
   FE_EXP_CONTROL_READ_UECC,
   FE_EXP_TRANSLATED_TO_UECC_JBA,
   FE_EXP_PRP,
   FE_EXP_PRP_FETCH,
   FE_EXP_DMA_ERR,
   FE_EXP_TRANS_ERR,
   FE_EXP_FW_COMPLETION,
   FE_EXP_HOSTLESS_UECC,
};
typedef uint32_t FE_ExceptionType_e;

enum
{
   FE_ERR_FE,
   FE_ERR_FTL,
   FE_ERR_PS,
   FE_ERR_SEC,
};
typedef uint32_t FE_Errors_IP_e;

enum
{
   SEND_TO_HOST,
   GET_FROM_HOST
};
typedef uint32_t  TransferDirection_e;

enum FE_SecurityCryptoOperation_e
{
   HSEC_ENCRYPT = 0,
   HSEC_DECRYPT,
   HSEC_BYPASS,
};
typedef uint32_t FE_SecurityCryptoOperation_t;

enum
{
   HAWA_RANDOM_WRITE       = 0,
   HAWA_SEQUENTIAL_WRITE   = 1,
   HAWA_OVERLAP_WRITE      = 2,
   HAWA_NUM_WRITE_TYPES    = 3,
};
typedef uint32_t HAWA_WriteTypes_t;

enum
{
   HAWA_FLUSH_NORMAL_MODE                    = 0x00,
   HAWA_FLUSH_FORCE_MODE                     = 0x01,
   HAWA_FLUSH_GRACEFUL_MODE                  = 0x02,
   HAWA_FLUSH_RESERVED                       = 0x03,
};
typedef uint32_t HAWA_FlushModes_t;

enum
{
   HAWA_CONTEXT_PEEK,
   HAWA_CONTEXT_POP,
};
typedef uint32_t HAWA_ContextOperations_t;


enum
{
   HA_SSE_USER_HWD = 0,
   HA_SSE_USER_RLA,
   HA_SSE_USER_ACS,
   HA_SSE_USER_CUQ,
   HA_SSE_USER_FUSED,
   HA_SSE_USER_MAX,
};
typedef uint32_t HA_SSE_UserIDs_t;

enum
{
   HA_SSE_USER_BIT_HWD   = 0x01,
   HA_SSE_USER_BIT_RLA   = 0x02,
   HA_SSE_USER_BIT_ACS   = 0x04,
   HA_SSE_USER_BIT_CUQ   = 0x08,
   HA_SSE_USER_BIT_FUSED = 0x10,
};
typedef uint32_t HA_SSE_UserIDsBits_t;

enum
{
   HA_SSE_STATUS_OK,
   HA_SSE_CFG1_VALID_BIT_ZERO,
   HA_SSE_NO_FREE_ENTRIES_ON_ADD,
   HA_SEE_NO_ENTRIES_ON_REMOVE,

};
typedef uint32_t HA_SSE_Status_t;


enum
{
   HIM_NAMESPACE_TABLE_LBS_512   = 0,
   HIM_NAMESPACE_TABLE_LBS_4096  = 1,
   HIM_NAMESPACE_TABLE_LBS_8192  = 2,
   HIM_NAMESPACE_TABLE_LBS_16384 = 3,
   HIM_LBS_INVALID,
};
typedef uint32_t HIM_LogicalBlockSizes_t;

enum
{
   HIM_HABM_COUNTER_DU_READ_OFFSET = 1,
   HIM_HABM_COUNTER_DU_WRITE_OFFSET,
   HIM_HABM_COUNTER_HOST_READ_OFFSET,
   HIM_HABM_COUNTER_HOST_WRITE_OFFSET,
   HIM_HABM_COUNTER_INVALID_OFFSET,
};
typedef uint32_t HIM_HABM_CounterOffset_t;

enum
{
   HIM_HA_COUNTER_BUSY_OFFSET = 0,
   HIM_HA_COUNTER_WRITE_WORKLOAD_OFFSET,
   HIM_HA_COUNTER_READ_WORKLOAD_OFFSET,
   HIM_HA_COUNTER_INVALID_OFFSET,
};
typedef uint32_t HIM_HA_CounterOffset_t;

enum
{
   HIM_HABM_CHANNEL_BE_0 = 0,
   HIM_HABM_CHANNEL_BE_1,
   HIM_HABM_CHANNEL_BE_2,
   HIM_HABM_CHANNEL_BE_3,
   HIM_HABM_CHANNEL_BE_4,
   HIM_HABM_CHANNEL_BE_5,
   HIM_HABM_CHANNEL_BE_6,
   HIM_HABM_CHANNEL_BE_7,
   HIM_HABM_CHANNEL_HAWA,
   HIM_HABM_CHANNEL_FW,
   HIM_HABM_CHANNEL_INVALID,
};
typedef uint32_t HIM_HABM_ChannelID_t;

enum
{
   HIM_CC_MAX_XFER_SIZE_EXCEEDED = 0x1,
   HIM_CC_NSID_CHECK_FAILED      = 0x2,
   HIM_CC_PRP_ERR_IN_PSE         = 0x4,
};


enum HIM_CC_STE_Error_e
{
   HIM_CC_STE_CROSSING_ENTRIES_ERR   = 0x1,
   HIM_CC_STE_ENTRY_DETACHED_ERR     = 0x2,
   HIM_CC_STE_ENTRY_NOT_FOUND_ERR    = 0x4,
   HIM_CC_STE_SECURITY_ERR           = 0x8,
};

enum HIM_PSE_CreateQueueErrors_e
{
   HIM_PSE_CQ_QID_MORE_THAN_256 = 0x01,
   HIM_PSE_CQ_QID_IN_USE        = 0x02,
   HIM_PSE_CQ_MAX_SIZE_EXCEEDED = 0x04,
   HIM_PSE_CQ_NOT_CONTIGUOUS    = 0x08,
   HIM_PSE_CQ_PRP_OFFSET_NOT_0  = 0x10,
   HIM_PSE_CQ_SGL_NOT_ALLOWED   = 0x20,
};

enum HIM_PSE_PRP_Errors_e
{
   HIM_PSE_PRP1_DWORD_UNALIGNED =  0x01,
   HIM_PSE_PRP2_DWORD_UNALIGNED =  0x02,
   HIM_PSE_PRP_OFFSET_NON_ZERO  =  0x04,
   HIM_PSE_UNRECOGNIZED_COMMAND = 0x100,
};

enum HNVMe_EEC_Errors_e
{
   HNVMe_EEC_MAX_XFER_SIZE_EXCEEDED =  0x01,
   HNVMe_EEC_NSID_CHECK_FAILED      =  0x02,
};




enum HNVMe_EEC_ProtocolSpecificErrors_e
{
   HNVMe_EEC_PSE_PRP_ERRORS          =  0x00,
   HNVMe_EEC_PSE_SGL_ERRORS          =  0x01,
   HNVMe_EEC_PSE_CREATE_QUEUE_ERRORS =  0x02,
};

enum HIM_PSE_SGL_Errors_e
{
   HIM_PSE_SGL_WAS_USED_IN_CMD  = 0x01,
};

enum
{
   NVM_ITAG_CMD_TYPE_IO = 0,
   NVM_ITAG_CMD_TYPE_ADMIN,
   NVM_ITAG_CMD_TYPE_INVALID,
};
typedef uint32_t NVM_ItagCmdType_t;

enum
{
   HIM_FQR_FW_REQUEST      = 0x01,
   HIM_FQR_BYPASS_ST       = 0x02,
   HIM_FQR_BYPASS_SSE      = 0x04,
   HIM_FQR_BYPASS_SDM      = 0x08,
   HIM_FQR_QUEUE_TO_HAWA   = 0x10,
};
typedef uint32_t HIM_CC_FwRequest_t;


enum
{
   FEATURE_SEL_CURRENT                  = 0x00,
   FEATURE_SEL_DEFAULT                  = 0x01,
   FEATURE_SEL_SAVED                    = 0x02,
   FEATURE_SEL_SUPPORTED_CAPABILITIES   = 0x03,
   FEATURE_SEL_RESERVED                 = 0x04,
};
typedef uint32_t FeatureSelect_t;


enum
{
   ASYNC_ERROR_DOORBELL_REG_INVALID,
   ASYNC_ERROR_DOORBELL_VAL_INVALID,
   ASYNC_ERROR_DIAG_FAILURE,
   ASYNC_ERROR_PERSISTENT,
   ASYNC_ERROR_TRANSIENT,
   ASYNC_ERROR_FW_IMAGE_LOAD_FAILED,
   ASYNC_SMART_SPARES,
   ASYNC_SMART_TEMPERATURE,
   ASYNC_SMART_RELIABILITY,
   ASYNC_SMART_READ_ONLY,
   ASYNC_NOTICE_FW_ACTIVATION_STARTING,
   ASYNC_NVM_CMD_SANITIZE_OPERATION_COMPLETED,
   ASYNC_NOTICE_TELEMETRY_CONTROLLER_INITIATED,
   ASYNC_NVM_CMD_SANITIZE_OP_COMPL_UNEXPECTED_DEALLOCATION,
   ASYNC_NOTICE_ERROR_RECOVERY,
   ASYNC_EVENT_RESERVED = 0xFF,
};
typedef uint32_t AsyncEvent_t;



typedef enum FE_ResetType_e
{
   FE_RST_POWER_ON                           = 0,
   FE_RST_CONTROLLER_RESET                   = 1,
   FE_RST_NVME_SUBSYSTEM_RESET               = 2,
   FE_RST_PCIE_FLR_RESET                     = 3,
   FE_RST_PCIE_HOT_RESET                     = 4,
   FE_RST_PCIE_LINK_DOWN_RESET               = 5,
   FE_RST_PERST_ASSERT                       = 6,
   FE_RST_HOT_LINK_DOWN_IMM_RESET            = 7,
   FE_RST_EIB_WAKE_RESET                     = 8,

   FE_RST_POST_FATAL_RESET                   = 9,
   FE_RST_CONTROLLER_ENABLED      = ( (0xFFFFFFFFUL)  - 1),
   FE_RST_CONTROLLER_READY_FOR_IO =  (0xFFFFFFFFUL) ,
}FE_ResetType_t;



enum
{
   SMART_SPARE_WARNING = 0,
   SMART_TEMPERATURE_WARNING,
   SMART_MEDIA_DEGRADED_WARNING,
   SMART_READ_ONLY_WARNING,
   SMART_VOLATILE_MEMORY_WARNING,
   SMART_PERCENTAGE_USED_WARNING,
};
typedef uint32_t WarningBit_t;

enum
{
   BIT_MAP_SET,
   BIT_MAP_CLEAR
};
typedef uint32_t BitMap_SetClear_t;

enum
{
   EVENT_ID_NO_DATA = 1,
   EVENT_ID_WITH_DATA = 2
};
typedef uint32_t HEB_FW_FrameCode_t;

enum
{
   HA_SDM_STREAM_DETECTION = 0,
   HA_SDM_STREAM_REMOVAL,
};
typedef uint32_t HA_SDM_StreamEvent_t;


enum NVMe_CommandType_e
{
   NVME_ADMINCOMMAND=0,
   NVME_IOCOMMAND
};

typedef uint8_t  NVMe_CommandType_t;

enum NVMe_QueueType_e
{
   COMPLETION_QUEUE_TYPE,
   SUBMISSION_QUEUE_TYPE,
};
typedef uint8_t  NVMe_QueueType_t;

enum FE_PMM_MUTEX_CTLRBUSYTIME_TRANSID_e
{
   FE_PMM_MUTEX_AON_GETCTLRBUSYTIME= 0x01,
   FE_PMM_MUTEX_MPU_GETCTLRBUSYTIME= 0x80,
};

typedef enum FE_HAL_BlockConversion_e
{
   FE_HAL_CONVERT_BLOCK_START = 0,
   FE_HAL_CONVERT_BLOCK_END = 1
} FE_HAL_BlockConversion_t;

enum NVMe_FirmwareCommitActions_e
{
   FW_COMMIT_REPLACE_NO_ACTIVATION           = 0x00,
   FW_COMMIT_REPLACE_ACTIVATE_ON_NEXT_RESET  = 0x01,
   FW_COMMIT_ACTIVATE_ON_NEXT_RESET          = 0x02,
   FW_COMMIT_ACTIVATE_IMMEDIATELY            = 0x03,
   FW_COMMIT_RESERVED1_COMMIT_ACTION,
   FW_COMMIT_RESERVED2_COMMIT_ACTION,
   FW_COMMIT_BP_REPLACE_CONTENT              = 0x06,
   FW_COMMIT_BP_SPECIFIED_ACTIVE             = 0x07,
};

enum NVMe_FormatSecureEraseSettings_e
{
   NVM_FORMAT_SES_NO_SECURE_ERASE       = 0x00,
   NVM_FORMAT_SES_USER_DATA_ERASE       = 0x01,
   NVM_FORMAT_SES_CRYPTOGRAPHIC_ERASE   = 0x02,
   NVM_FORMAT_SES_FIRST_RESERVED,
};

enum FE_FTL_Format_Options_e
{
   FE_FTL_FORMAT_OPTION_NO_SECURE_ERASE             = 0,
   FE_FTL_FORMAT_OPTION_USER_DATA_ERASE             = 1,
   FE_FTL_FORMAT_OPTION_CRYPTOGRAPHIC_ERASE         = 2,
   FE_FTL_FORMAT_OPTION_CRYPTO_AND_PHYSICAL_ERASE   = 3,
};




enum
{
   FE_DUTYCYCLE_ETT_EVENT_ENABLE = 1,
   FE_DUTYCYCLE_ETT_EVENT_DISABLE,
   FE_DUTYCYCLE_ETT_EVENT_NONOP_COMPLETION_TIMER_CB,
   FE_DUTYCYCLE_ETT_EVENT_NONOP_TIMER_CB,
   FE_DUTYCYCLE_ETT_EVENT_OP_TIMER_CB,
   FE_DUTYCYCLE_ETT_EVENT_DISABLE_TIMER_CB,
   FE_DUTYCYCLE_ETT_EVENT_ENABLE_TIMER_CB,

#line 766 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
};

typedef uint8_t FE_DutyCycleETT_EventMsg_t;




enum FE_PMM_LPMEntryState_e
{
   FE_PMM_LPM_ENTRY_STARTED = 0x1,
   FE_PMM_LPM_ENTRY_COMPLETED,
   FE_PMM_LPM_ENTRY_ABORTED,
};

typedef uint32_t  FE_PMM_LPMEntryState_t;


enum syntheticDelayState_e
{
   FE_PMM_SYNTHETIC_DELAY_STOPPED = 0,
   FE_PMM_SYNTHETIC_DELAY_STARTED,
   FE_PMM_SYNTHETIC_DELAY_RUNNING,
};

typedef enum VendorSpecific_SecurityAuditLog_EventType_e
{
   VS_SEC_AUDIT_LOG_EVENT_FW_AUTHENTICATION_FAILURE = 0,
   VS_SEC_AUDIT_LOG_EVENT_AUTHORIZED_VS_COMMAND,
   VS_SEC_AUDIT_LOG_EVENT_UNAUTHORIZED_VS_COMMAND,
   VS_SEC_AUDIT_LOG_EVENT_SED_OVER_NON_SED_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_NON_SED_OVER_SED_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_NON_HP_OVER_HP_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_SECURE_ERASE_FAILURE,
   VS_SEC_AUDIT_LOG_EVENT_SANITIZATION_FAILURE,

   VS_SEC_AUDIT_LOG_EVENTS_NUMBER
} VendorSpecific_SecurityAuditLog_EventType_t;


typedef enum FE_ThermalThrottle_Changed_e
{
   FE_THERMAL_THROTTLE_NONE,
   FE_THERMAL_THROTTLE_STARTED,
   FE_THERMAL_THROTTLE_LIGHT,
   FE_THERMAL_THROTTLE_HEAVY,
   FE_THERMAL_THROTTLE_EXTREAM,
   FE_THERMAL_THROTTLE_ENDED,
}FE_ThermalThrottle_Changed_t;



typedef enum FE_Thermal_Idle_e
{
   FE_THERMAL_IDLE_MSG_ENABLE,
   FE_THERMAL_IDLE_MSG_DISABLE,
   FE_THERMAL_IDLE_MSG_IO_COMPLETED,
   FE_THERMAL_THROTTELING_CONDITION_CHANGED
}FE_Thermal_Idle_EventType_t;



typedef enum FE_PEL_ThermalExcursionEvents_e
{
   TE_EVENT_WCTEMP_CROSSED          = 1,
   TE_EVENT_CCTEMP_CROSSED          = 2,
   TE_EVENT_TMT1_CROSSED            = 3,
   TE_EVENT_TMT2_CROSSED            = 4,
   TE_EVENT_VS_THERMAL_MGMT_START   = 5,
   TE_EVENT_TEMP_NORMAL             = 0x88,
   TE_EVENT_VS_THERMAL_MGMT_STOP    = 0x89,
   TE_EVENT_UNDER_TEMP              = 0xB0,
} FE_PEL_ThermalExcursionEvents_t;

#line 905 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
typedef enum VendorSpecificEventCode_e
{
   ENTERING_SELF_THROTTLING_VS_EVENT_CODE = 1,
   EXITING_SELF_THROTTLING_VS_EVENT_CODE = 2,
   CROSSING_SELF_THROTTLING_VS_EVENT_CODE = 3,
   CRITICAL_TEMP_DOS_VS_EVENT_CODE = 4,
   EVENT_SUPPRESSION_START_VS_EVENT_CODE = 0xfff1,
   EVENT_SUPPRESSION_END_VS_EVENT_CODE,
}VendorSpecificEventCode_t;



enum FE_PCIe_Init_States_e
{
   FE_PCIE_INIT_UNKNOWN               = 0x00000000,
   FE_PCIE_INIT_DONE_SUCCESS          = 0x00000001,
   FE_PCIE_INIT_TRIGGERED             = 0x00000002,
   FE_PCIE_INIT_WAIT_COLDBOOT         = 0x00000004,
   FE_PCIE_INIT_WAIT_PERST            = 0x00000008,
   FE_PCIE_INIT_WAIT_FFU_NSSRESET     = 0x00000010,
   FE_PCIE_INIT_START_PCU             = 0x00000020,
   FE_PCIE_INIT_NOT_REQUIRED          = 0x00000040,
   FE_PCIE_INIT_RESUME_COLD_B2B_PERST = 0x00000080,
   FE_PCIE_INIT_RECEIVED_PCU_MSG      = 0x00000100,
   FE_PCIE_INIT_TIMEOUT_PCU_MSG       = 0x00000200,
   FE_PCIE_INIT_SUCCESS_AFTER_TIMEOUT = 0x00000400,

   FE_PCIE_INIT_FAIL_UNEXPECTED_DOWN  = 0x10000000,
   FE_PCIE_INIT_TRIGGER_TIMEOUT       = 0x20000000,
   FE_PCIE_INIT_FAIL_TIMEOUT          = 0x40000000,
   FE_PCIE_INIT_PERST_LINK_UP_FAIL    = 0x80000000,
};
typedef uint32_t FE_PCIe_Init_States_t;


typedef enum VendorSpecific_LpmCounter_EventType_e
{
   VS_HIPM_INCREASE_BASE          = 0,
   VS_HIPM_INCREASE_WHEN_INITIATE_PST  = VS_HIPM_INCREASE_BASE,
   VS_HIPM_INCREASE_WHEN_COMPLETE_PST,

   VS_APST_INCREASE_BASE          = 0x10000000,
} VendorSpecific_LpmCounter_EventType_t;


enum PowerStateCahngeTrigger_e
{
   VS_C0_HOST_INITIATE,
   VS_C0_HOST_COMPLETION,
   VS_C0_APST,
};
typedef enum PowerStateCahngeTrigger_e PowerStateCahngeTrigger_t;


typedef enum FE_BP_Partition_Identifier_e
{
   BP_PARTITION_0                    = 0x00,
   BP_PARTITION_1                    = 0x01,
   BP_DOWNLOAD_PARTITION             = 0x02,
   NUM_BOOTPARTITION                 = 0x03,
} FE_BP_Partition_Identifier_t;

typedef enum FE_FWImageDownloadMode_e
{
   FW_DOWNLOAD_MODE_BOOTPARTITION    = 0x00,
   FW_DOWNLOAD_MODE_FFU              = 0x01,
} FE_FWImageDownloadMode_t;

typedef enum NVMe_BP_Download_CommitFailureState_e
{
   NVME_BP_DOWNLOAD_OK               = 0x00,
   NVME_BP_DOWNLOAD_IMAGE_MISSED     = 0x01,
   NVME_BP_DOWNLOAD_IMAGE_OVERLAPPED = 0x02,
} NVMe_BP_Download_CommitFailureState_t;



enum FE_PMM_FWAI_MSG_ID_e
{
   FE_PMM_FWAI_MSG_TIMER_EXPIRED = 0,
   FE_PMM_FWAI_MSG_REENTRY,
};
typedef uint32_t FE_PMM_FWAI_MSG_ID_t;

#line 1005 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
typedef struct FE_Context_In_AON_Struct_s
{
   uint32_t signatureStart;
   uint32_t numBytes;
   uint8_t  *objInstancesPtr;
   uint32_t *signatureEndPtr;
}FE_Context_In_AON_Struct_t;


typedef union NVMe_SecureEraseActionList_u
{
   struct NVMe_SecureEraseActionList_s
   {
      uint32_t deallocate     : 1;
      uint32_t physicalErase  : 1;
      uint32_t cryptoErase    : 1;
   } bits;
   uint32_t all32;
} NVMe_SecureEraseActionList_t;



typedef void (FE_CB_FctnWithStatusAndArg_t)(Status_t status, uint32_t token);
typedef void (FE_CallbackWithArg_t)(uint32_t arg);
typedef void (FE_CallbackNoArg_t)(void);

typedef struct
{
   FE_CallbackWithArg_t*  callBkFncPtr;
   uint32_t                callBkArg;
   Status_t                status;
} FE_CallbackWithStatusAndArg_t;

typedef void (FE_CallbackWithNoArg_t)(void);


typedef struct NVMe_GetLogRsBuffer_s
{
   uint32_t    bufferIndex[ (8) ];
   uint32_t*   dataBuffer[ (8) ];
   uint32_t*   headerBuffer[ (8) ];
} NVMe_GetLogRsBuffer_t;


typedef struct NVMe_TelemetryLogContext_s
{
   uint64_t              cmdOffset;
   uint64_t              pageOffset;
   uint32_t              xferLength;
   uint32_t              cmdIndex;
   uint32_t              numBuffAlloc;
   uint32_t*             ftlBufferPtr;
   NVMe_GetLogRsBuffer_t rsBuffer;
   uint32_t              pageType;
   BOOL                  generateLog;
   uint8_t               MCDA;
   uint8_t               logPageID;
   BOOL                  isTelemetryInProgress;
} NVMe_TelemetryLogContext_t;


typedef union NVMe_ACSA_RPMBS_u
{
   struct NVMe_ACSA_RPMBS_s
   {
      uint32_t numRPMBTargets          : 3;
      uint32_t authenticationMethod    : 3;

      uint32_t reserved6_15            : 10;
      uint32_t totalSize               : 8;
      uint32_t accessSize              : 8;
   } bits;
   uint32_t all32;
}   NVMe_ACSA_RPMBS_t;


typedef struct VendorSpecific_SecurityAuditLog_Event_s
{
   uint64_t counter : 16;
   uint64_t lastEventPOH : 32;
   uint64_t reserved : 16;
} VendorSpecific_SecurityAuditLog_Event_t;



typedef struct VendorSpecific_SecurityAuditLog_s
{
   VendorSpecific_SecurityAuditLog_Event_t events[VS_SEC_AUDIT_LOG_EVENTS_NUMBER];
   uint16_t lifeTimeEventsNumBE;
   uint16_t lifeTimeEventsNumLE;
   uint32_t lastRecordedEventPOH;
   uint32_t hostTimestamp;
   uint32_t hostTimestampPOH;
   uint8_t  reserved2[432];
} VendorSpecific_SecurityAuditLogPage_t;



typedef struct NVMe_BootPartitionDownloadCommitContext_s
{
   uint32_t                              prevOffsetBytes;

   uint32_t                              failedOffsetBytes;
   NVMe_BP_Download_CommitFailureState_t state;
} NVMe_BootPartitionDownloadCommitContext_t;





typedef struct PCIe_CadenceRegisters_s
{
   uint32_t signature;
   uint32_t linkStatReg;
   uint32_t unCorrectableAERErrors;
   uint32_t correctableAERErrors;

   uint32_t creqRegisters[ (4) ][15];
   uint32_t deqRegisters[ (4) ][28];

#line 1128 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
   uint32_t cmn_plllc_status_a_preg;
   uint32_t cmn_plllc_status_c_preg;
   uint32_t cmn_ssm_state_preg;
   uint32_t PHY_PMA_CMN_CTRL;
   uint32_t PHY_PMA_ISO_PWRST_CTRL[ (4) ];
   uint32_t PHY_PIPE_ISO_RX_CTRL[ (4) ];
   uint32_t PHY_PIPE_ISO_RX_EQ_EVAL[ (4) ];
   uint32_t PHY_PMA_ISO_XCVR_CTRL[ (4) ];
   uint32_t PHY_PMA_ISO_RX_EQ_CTRL[ (4) ];
   uint32_t smpcal_calevncode_preg[ (4) ];
   uint32_t smpcal_caloddcode_preg[ (4) ];
   uint32_t cpical_status_preg[ (4) ];
   uint32_t sdcal_ctrl_preg[ (4) ];
   uint32_t G3_LINK_EQ;
   uint32_t PSM_STATE_L;
   uint32_t PSM_STATE_H;
}   PCIe_CadenceRegisters_t;

typedef  _Packed  struct SYS_Infra_Dell_Smart_s
{

   uint16_t minCompositeTemperature;
   uint16_t maxCompositeTemperature;
   uint8_t abnormalInputVccVoltageCount;
   uint8_t rsv[3];
}  SYS_Infra_Dell_Smart_t;


typedef struct pmaRegisterBase_s{
   uint32_t          pmaDumpRgn[ (0x03CC44)  / sizeof(uint32_t)];
}pmaRegisterBase_t;

#line 1175 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
typedef struct eyeSurfResponse_s
{
   struct eyeLane_s
   {
      struct eyeVoltage_s
      {
         struct eyeTime_s
         {


            char accumulator[8];
         } eyeX [ ((( ( 32)  - (-32)  + 1) / (2) ) + 1) ];
      } eyeY[ ((( ( 127)  - (-127)  + 1) / (2) ) + 1) ];
   } lane [ (4) ];
} eyeSurfResponse_t;

typedef struct RDC_PCIeDiagnosticOutput_s
{
   PCIe_CadenceRegisters_t cadenceRegisters;
   pmaRegisterBase_t       pmaRegion;
   uint8_t                 padding1[512 - ((sizeof(PCIe_CadenceRegisters_t) + sizeof(pmaRegisterBase_t)) % 512)];
   eyeSurfResponse_t       eyeSurfOutput;
   uint8_t                 padding2[512 - (sizeof(eyeSurfResponse_t) % 512)];
}  RDC_PCIeDiagnosticOutput_t;

Status_t PCIe_EyeSurf(uint8_t *telemetryBufferPointer, uint32_t maximumFetch, uint32_t offsetInDataSection);
Status_t PCIe_EOMEyeSurf(uint8_t *logBufferPointer);
Status_t RDC_PCIeDiagnosticRead(uint8_t *telemetryBufferPointer, uint32_t maximumFetch, uint32_t offsetInDataSection);





typedef union HIM_CC_DW16_u
{
   struct HIM_CC_DW16_s
   {
      uint32_t sectionTableErr      :4;




      uint32_t exceptionFlag        :1;
      uint32_t fuaFlag              :1;
      uint32_t hotRangeFlag         :1;
      uint32_t twoRanges            :1;
      uint32_t mSetStraddlingFlag   :1;
      uint32_t bptRequired          :1;
      uint32_t hnvmeParsingErr      :1;
      uint32_t overlapFlag          :5;
      uint32_t opCode               :8;







      uint32_t streamStatus         :2;




      uint32_t busError             :1;
      uint32_t hotLBAflag           :1;
      uint32_t size1                :1;
      uint32_t size2                :1;
      uint32_t size3                :1;
      uint32_t size4                :1;
   } bits;
   uint32_t all32;
} HIM_CC_DW16_t;

typedef union HIM_CC_DW17_u
{
   struct HIM_CC_DW17_s
   {
      uint32_t controlledExecAllowed :1;




      uint32_t reserved1             :7;
      uint32_t logicalBlockSize      :2;




      uint32_t transactionErr        :2;
      uint32_t errExceptionCode      :4;






      uint32_t protocolSpecifcErr    :9;

#line 1288 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
      uint32_t fwQueueReq            :5;





      uint32_t fusedFlag             :2;




   } bits;
   uint32_t all32;
} HIM_CC_DW17_t;

typedef union HIM_CC_DW22_u
{
   struct HIM_CC_DW22_s
   {
      uint16_t  submissionQueueId;
      uint16_t  commandIdTag;
   } words;

   uint32_t all32;
} HIM_CC_DW22_t;

typedef union HIM_CC_OI_u
{
   struct HIM_CC_OI_s
   {
      uint16_t    userID      :4;
      uint16_t    tableIndex  :12;
   } bits;
   uint16_t all16;
} HIM_CC_OI_t;

typedef union HIM_CC_SI_u
{
   struct HIM_CC_SI_s
   {
      uint16_t streamID       :8;
      uint16_t streamSeqNum   :4;
      uint16_t streamMomentum :1;


      uint16_t reserved       :3;
   } bits;
   uint16_t all16;
} HIM_CC_SI_t;

typedef union HIM_CC_HWD_u
{
   struct HIM_CC_HWD_s
   {
      uint32_t hwdIndex    :12;
      uint32_t acsIndex    :12;
      uint32_t hwdGroupID  :8;
   } bits;
   uint32_t all32;
} HIM_CC_HWD_t;

typedef union HIM_CC_DW30_u
{
   struct HIM_CC_DW30_s
   {
      uint32_t completionQueueID :16;
      uint32_t prpListNum        :12;
      uint32_t reserved          :2;
      uint32_t autoCompletion    :1;


      uint32_t statusFIFOmsg     :1;


   } bits;
   uint32_t all32;
} HIM_CC_DW30_t;

typedef union HIM_HWD_HF_DW0_u
{
   struct HIM_HWD_HF_s
   {
      uint16_t    multiStreamID     :1;


      uint16_t    hotRange          :1;


      uint16_t    fua               :1;


      uint16_t    last              :1;

      uint16_t    reserved_20_23    :4;
      uint16_t    numBuffers        :3;
      uint16_t    rmw               :1;


      uint16_t    sequential        :1;


      uint16_t    errorStatus       :1;


      uint16_t    dataType          :2;




   } bits;

   uint16_t all16;
} HIM_HWD_HF_DW0_t;

typedef union HIM_HWD_EF_u
{
   struct HIM_HWD_EF_s
   {
      uint16_t streamID          :8;
      uint16_t size              :3;
      uint16_t hotRange          :1;
      uint16_t fua               :1;
      uint16_t reserved_29       :1;
      uint16_t errorStatus       :1;
      uint16_t rmw               :1;
   } bits;

   uint16_t all16;
} HIM_HWD_EF_t;

typedef union HIM_HWD_UFLO_u
{
   struct HIM_HWD_UFLO_s
   {
      uint16_t upperFlatLBA      :11;
      uint16_t overlapBitmap     :5;
   } bits;
   uint16_t all16;
} HIM_HWD_UFLO_t;

typedef struct HIM_HWD_ED_s
{
   uint32_t       lowerFlatLBA;
   HIM_HWD_UFLO_t UFLO;
   HIM_HWD_EF_t   entryFlags;
} HIM_HWD_ED_t;







typedef struct FE_HAL_HostByteTransfer_Params_s
{
   TransferDirection_e  xferDirection;
   uint32_t             xferSizeInBytes;
   uint64_t             prpEntry1;
   uint64_t             prpEntry2;
   uint32_t             deviceBufferAddress;
} FE_HAL_HostByteTransfer_Params_t;

typedef struct FE_FTL_DeallocRange_s
{
   uint32_t fflba;
   uint32_t length;
} FE_FTL_DeallocRange_t;



typedef struct HIM_CommandContext_s
{
   uint32_t          hostCmd[16];
   HIM_CC_DW16_t     dword16;
   HIM_CC_DW17_t     dword17;
   uint32_t          namespaceID;
   uint32_t          deviceSideLen;
   uint64_t          startingLBA;
   HIM_CC_DW22_t     tag;
   uint32_t          lowerFlatLBA;
   uint16_t          upperFlatLBA;
   uint16_t          sectionTableIndex;
   uint16_t          securityTableIndex;
   uint16_t          physicalProperties;
   uint16_t          prevCmdIndex;
   uint16_t          nextCmdIndex;
   uint32_t          timestamp;
   HIM_CC_OI_t       overlapIndex;
   HIM_CC_SI_t       streamInfo;
   HIM_CC_HWD_t      hwdInfo;
   HIM_CC_DW30_t     dword30;
   uint16_t          prpPointerAindex;
   uint16_t          prpPointerBindex;
   uint64_t          prpPointerA;
   uint64_t          prpPointerB;
}   HIM_CommandContext_t;





typedef struct HIM_HAQ_CommandEntry_s
{

   uint32_t          hostCmd[16];
   HIM_CC_DW16_t     dword16;
   HIM_CC_DW17_t     dword17;

   uint32_t          namespaceID;

   uint32_t          deviceSideLen;

   uint64_t          startingLBA;
   HIM_CC_DW22_t     tag;

   uint32_t          lowerFlatLBA;

   uint16_t          upperFlatLBA;
   uint16_t          sectionTableIndex;

   uint16_t          securityTableIndex;
   uint16_t          physicalProperties;

   uint16_t          prevCmdIndex;
   uint16_t          nextCmdIndex;

   uint32_t          timestamp;

   HIM_CC_OI_t       overlapIndex;
   HIM_CC_SI_t       streamInfo;

   HIM_CC_HWD_t      hwdInfo;
   HIM_CC_DW30_t     dword30;

   uint16_t          cmdIndex;
   uint16_t          reserved_1;
}   HIM_HAQ_CommandEntry_t;


typedef struct HIM_HWD_RingBufferEntry_s
{
   uint16_t contextIndex;
   uint16_t reserved_16_31;
} HIM_HWD_RingBufferEntry_t;

typedef union HIM_HWD_HF_DW1_u
{
   struct bitsFUA_s
   {
      uint32_t hrcId:9;
      uint32_t reserved:7;
      uint32_t cmdIndex:16;
   }bitsFUA;
   struct bits_s
   {
      uint32_t hrcId:9;
      uint32_t dataLengthInBytes:23;
   }bits;
   uint32_t all32;
}HIM_HWD_HF_DW1_t;

typedef struct HIM_HWD_Context_s
{
   uint16_t             groupID;
   HIM_HWD_HF_DW0_t     headerFlags;
   HIM_HWD_HF_DW1_t     headerDW1;






   HIM_HWD_ED_t         entry[ (8) ];
   uint32_t             bufferListIndex[ (8) ];
   uint32_t             bufferPtr[ (8) ];
   uint32_t             metadataPtr[ (8) ];

} HIM_HWD_Context_t;

typedef union HIM_SSE_OutputContext_u
{
   struct HIM_SSE_OutputContext_s
   {
      uint32_t    status            :8;
      uint32_t    match             :1;
      uint32_t    bitmapUserID      :5;
      uint32_t    index             :12;
      uint32_t    reserved          :6;
   } bits;

   uint32_t all32;
} HIM_SSE_OutputContext_t;

typedef union HIM_ADP_TransferFlags_u
{
   struct HIM_ADP_TransferFlags_s
   {
      uint32_t bufferRelease           :1;
      uint32_t repeatBuffer            :1;
      uint32_t transferDirection       :1;
      uint32_t writeZeros              :1;
      uint32_t encryptData             :1;
      uint32_t securityIndex           :8;
      uint32_t waitForTransferComplete :1;

      uint32_t nonBlocking             :1;
      uint32_t notification            :3;
      uint32_t transferIndex           :8;
      uint32_t reserved                :6;

#line 1600 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
   } bits;

   uint32_t all32;

} HIM_ADP_TransferFlags_t;

typedef struct FE_HAL_DataTransferParams_s
{
   uint32_t                   cmdIndex;
   uint32_t * *               dataIndexListPtr;
   uint32_t * *               dataBufferListPtr;
   uint32_t * *               metadataBufferListPtr;
   uint32_t                   cmdOffsetInBytes;
   uint32_t                   sectorOffset;
   uint32_t                   transferSizeInBytes;
   uint32_t                   bytesTransferred;
   HIM_ADP_TransferFlags_t    flags;
} FE_HAL_DataTransferParams_t;

typedef struct HIM_ADP_SecurityParams_s
{
   FE_SecurityCryptoOperation_t  securityDirection;
   uint32_t                      sourceDataBuffPtr;
   uint32_t                      destDataBuffPtr;
   uint32_t                      sizeInBytes;
   uint32_t                      sectorOffset;
   uint32_t                      securityPtr;
   uint64_t                      flatLBA;
} HIM_ADP_SecurityParams_t;

typedef union FE_CrossIP_Token_u
{
   struct FE_CrossIP_Token_s
   {
      uint32_t cmdIndex             :9;
      uint32_t cmdSpecific          :23;
   } bits;
   uint32_t all32;
} FE_CrossIP_Token_t;


typedef union FE_CrossIP_Flag_u
{
   struct FE_CrossIP_Flag_s
   {
      uint32_t operationsCount      : 2;


      uint32_t PMM_CrossIP_Flag     : 1;
      uint32_t PMM_PST_AbortFlag    : 1;
      uint32_t Thermal_FlushNeeded  : 1;
      uint32_t reserved5_31         : 27;
   } bits;
   uint32_t all32;
} FE_CrossIP_Flag_t;










typedef struct FE_ST_SecurityAttributes_s
{
   uint32_t readAllowed       :1;
   uint32_t writeAllowed      :1;
   uint32_t writeAllowedSecIP :1;
   uint32_t readZeroes        :1;




   uint32_t securityIndex     :8;
   uint32_t reserved          :5;
} FE_ST_SecurityAttributes_t;



typedef uint32_t  FE_ST_Handle_t;




typedef union smart_BadBlocksAttribute_u
{
   struct smart_BadBlocksAttribute_s
   {
      uint64_t rawCount        :48;
      uint64_t normalizedValue :16;
   } bits;
   uint64_t all64;
} smart_BadBlocksAttribute_t;

typedef struct smart_UsrDataEraseCntAttribute_u
{
   uint32_t max;
   uint32_t min;
} smart_UsrDataEraseCntAttribute_t;






typedef struct FE_FTL_SMARTSharedCounters_s
{
   uint128_t                        ugsdCount;
   uint128_t                        gsdCount;
   uint128_t                        nandBytesWritten;
   uint128_t                        SLCSectWrittenInK;


   uint128_t                        TLCSectWrittenInK;
   uint8_t                          SLCEndurancePercent;
   uint8_t                          reserved65;
   uint8_t                          reassignedSecCount;
   uint8_t                          resBlkPercWcc;
   uint32_t                         tlcPECountMin;
   uint32_t                         tlcPECountMax;
   uint32_t                         tlcPECountAvg;
   uint32_t                         slcPECountMin;
   uint32_t                         slcPECountMax;
   uint32_t                         slcPECountAvg;
   uint64_t                         relocatedByReadScrub;

  uint128_t                         physicalMediaRead;
  smart_BadBlocksAttribute_t        badBlocks;

  uint8_t                           normalizedPEC;
  smart_UsrDataEraseCntAttribute_t  usrDataEraseCnt;
  uint8_t                           freeBlocks;

}   FE_FTL_SMARTSharedCounters_t;





typedef struct FE_FTL_XboxSpecificLogSharedCounters_s
{
   uint8_t     wearRangeDeltaTLC;
   uint8_t     wearRangeDeltaSLC;
   uint8_t     wearMostUsedTLC;
   uint8_t     wearMostUsedSLC;
   uint8_t     percentUsedTLC;
   uint8_t     percentUsedSLC;
}   FE_FTL_XboxSpecificLogSharedCounters_t;



typedef struct NVMe_DataSavedAON_s
{
   uint32_t  ASQS:12;
   uint32_t  ACQS:12;
   uint64_t  ASQ;
   uint64_t  ACQ;
}   NVMe_DataSavedAON_t;




typedef struct HIM_MemHdr_s
{
   FADI_ESL_Header_t  * cmdsHdrPtr;
   uint32_t             reserved_dword1;
   FADI_ESL_Header_t    cmdsHdr;
   uint32_t             reserved_dword2;
} HIM_MemHdr_t;



typedef struct HIM_CommandData_FA_s
{
   uint32_t             reserved_dword2;
   HIM_CommandContext_t HIM_CommandContextFA[ ( 0xFF  + 1)  +  ( 0x1F  + 1) ];
} HIM_CommandData_FA_t;

typedef struct  FE_FFU_Compatibility_s
{
   uint32_t minor;
   uint32_t upgrade;
   uint32_t immed;
   uint32_t CommitId;
   uint32_t downgrade;
   uint32_t reserved[3];
} FE_FFU_Compatibility_t;

typedef union FE_ExceptionFlags_u
{
   struct FE_ExceptionFlags_s
   {
      uint16_t errorToBeReported : 1;
      uint16_t reserved          :15;
   } bits;
   uint16_t    all16;
} FE_ExceptionFlags_t;

typedef struct FE_ExceptionCmdsDB_s
{
   uint32_t    cmdIndex;
   uint32_t    numSectorsFailed;
   uint32_t    sectorOffset;
   uint32_t    ueccType;
   uint32_t    cmdSpecificError;
   uint16_t    statusField;
   FE_ExceptionFlags_t flags;
}   FE_ExceptionCmdsDB_t;


typedef struct FE_ExceptionCmdsE2EDB_s
{
   uint32_t    hostLBA;
   uint32_t    cmdOffset;
   uint32_t    fmuIndex;
}   FE_ExceptionCmdsE2EDB_t;





typedef struct FE_FADIRT_DataElements_s
{
   uint32_t    elementAddress;
}FE_FADIRT_DataElements_t;


typedef struct FE_RTFADI_Data_s
{
   uint32_t    regValues[ (20) ];
}  FE_RTFADI_Data_t;

#line 1854 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
void                       FE_RomIdleLoop(void);
void                       FE_HAL_HostByteTransfer(FE_HAL_HostByteTransfer_Params_t * hbtParams);
uint32_t                   FE_HAL_GetCommandIndex(HIM_CommandContext_t * cmdContextPtr);
HIM_CommandContext_t*      FE_HAL_GetCommandContextPtr(uint32_t cmdIndex);
Status_t                   FE_API_ConfigureFE_HwEvents(BitMap_SetClear_t control, uint32_t eventsBitMap);







Status_t                   FE_API_ConfigureFE_HwEvents(BitMap_SetClear_t control, uint32_t eventsBitMap);
uint32_t                   FE_API_ReturnCurrentFE_HwEvents(void);
uint32_t                   FE_API_HWD_GetNewContextIndex(HAWA_WriteTypes_t writeType,
                                                         HAWA_ContextOperations_t contextOperation);
uint32_t                   FE_API_HWD_GetNewContextIndexList(HAWA_WriteTypes_t writeType, uint32_t* list);
HIM_HWD_Context_t*         FE_API_HWD_GetContextPtr(uint32_t hwdContextIndex);
uint32_t                   FE_API_HWD_QueueEntriesAndInterruptEnable(HAWA_WriteTypes_t writeType);
void                       FE_API_HWD_ReleaseContext(uint32_t hwdContextIndex);
uint32_t                   FE_API_HWD_GetLastAllocatedIndex(HAWA_WriteTypes_t writeType);
void                       FE_API_HWD_WriteTypeForceFlush(HAWA_WriteTypes_t writeType);
uint32_t                   FE_API_HWD_GetNumEntriesInQueue(HAWA_WriteTypes_t writeType);
BOOL32                     FE_API_HWD_IsPendingBufferInStream(HAWA_WriteTypes_t writeType);
BOOL32                     FE_API_HWD_IsOpenBufferInStream(HAWA_WriteTypes_t writeType);
void                       FE_API_HAWA_SetFlushMode(HAWA_FlushModes_t flushMode, FE_CallbackNoArg_t* callbackFnPtr);
BOOL32                     FE_API_HAWA_IsFlushNormalMode(void);


void                       FE_API_HAWA_SetRwModeBit(uint32_t rwCmdMode);
uint32_t                   FE_API_HAWA_GetRwModeBit(void);

BOOL32                     FE_API_HAWA_GetIsFlushInHWDCtxtState(void);
uint32_t                   FE_API_HAWA_GetFSMState(void);

uint32_t                   FE_API_HAWA_SetNumHwdContexts(uint32_t newNumHwdContexts);
void *                     FE_API_GetCustomNCRConfigPtr(void);
uint32_t                   FE_API_RS_GetRsDoneBaseAddress(void);

uint32_t                   FE_API_HA_GetBusyCount(void);

HIM_SSE_OutputContext_t    FE_API_SSE_GetIndex(HA_SSE_UserIDs_t userID);
uint32_t                   FE_API_PeekQueue ( uint32_t queueID );


HIM_SSE_OutputContext_t    FE_API_SSE_GetIndexAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                     uint32_t length, uint32_t groupID);
HIM_SSE_OutputContext_t    FE_API_SSE_Remove(HA_SSE_UserIDs_t userID, uint32_t index);
HIM_SSE_OutputContext_t    FE_API_SSE_RemoveByGroup(HA_SSE_UserIDs_t userID, uint32_t groupID);

HIM_SSE_OutputContext_t    FE_API_SSE_AllEntrySearch(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                     uint32_t length);
HIM_SSE_OutputContext_t    FE_API_SSE_AllEntrySearchAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                           uint32_t length, uint32_t groupID);
uint32_t                   FE_API_SSE_GetFreeEntriesInUserID ( uint32_t userID );

Status_t                   FE_HAL_HostDataTransfer(FE_HAL_DataTransferParams_t * dataTransferParams);

Status_t                   FE_HAL_ManualDataTransfer_ContiguousMem (TransferDirection_e xferDirection, uint32_t xferSizeInBytes, uint64_t hostAddr, uint32_t deviceAddr);

Status_t                   FE_HAL_SimpleSecurityDataTransfer(HIM_ADP_SecurityParams_t * ADP_SecurityParams);
Status_t                   FE_HAL_SecurityDataTransfer(HIM_ADP_SecurityParams_t * ADP_SecurityParams);
uint32_t                   FE_HAL_HA_GetNumEntriesInQueue(uint32_t queueID);

uint32_t                   FE_API_GetNumAutomatedIOsInSystem(void);

void                       FE_API_SendCompletion(Status_t status, uint32_t cmdIndex, FE_Errors_IP_e curIP);
void                       FE_API_SendCompletionByFTL(Status_t status, uint32_t cmdIndex);

uint32_t                   FE_API_GetNamespaceCount(void);
uint64_t                   FE_API_GetNumberBlocksInNamespace(uint32_t namespaceID);
uint32_t                   FE_API_GetNamespaceBlockSizeBytesLog2(uint32_t namespaceID);
uint32_t                   FE_API_GetFFLBAFromNamespaceLBA_4KB(uint8_t nsid, uint32_t lba_4K);
uint32_t                   FE_API_GetFFLBAFromNamespaceLBA(uint32_t nsid, uint64_t lba);
uint64_t                   FE_API_GetFLBAFromNamespaceLBA(uint32_t nsid, uint64_t lba);
uint32_t                   FE_API_GetNumberValidNSID(void);
uint32_t                   FE_API_GetCommandSizeInBytes(HIM_CommandContext_t * cmdContextPtr);
void                       FE_API_CrossIP_Callback(Status_t status, uint32_t token);
uint64_t                   FE_API_GetFLBAFromCmdIndexOffset(uint32_t cmdIndex, uint32_t cmdOffset);
BOOL32                     FE_API_IsLBAValid(uint32_t nsid, uint64_t lba);
uint32_t                   FE_API_GetMaxNSID(void);
Status_t                   FE_API_IsCommandSetSupported(uint32_t csi);

void                FE_Thread(uint32_t dummy);
Status_t                   FE_Init(SysBootPhase_t bootPhase);
Status_t                   FE_Init_Cont(SysBootPhase_t bootPhase, SYS_InitTypes_t initType);
Status_t                   FE_InitPreRtos(void);
Status_t                   FE_InitPostRtos(void);

void                       FE_API_PMMCallMeWhenComplete(PMM_PowerState_t powerState, PMM_TransitionStep_t PMM_Step, Status_t statusCode);

FE_ResetType_t             FE_API_GetCurrentReset(void);
uint32_t                   FE_API_GetMountState(void);
BOOL                       FE_API_isD3Hot_Entry(void);
void                       FE_API_SetMountState(uint32_t mountState);

uint32_t                   FE_API_GetSMARTSize(void);
uint32_t                   FE_API_GetSMARTVersion(void);
void*                      FE_API_GetDUWritten(void);
void*                      FE_API_GetDURead(void);
void                       FE_API_SetDUWritten(uint64_t valueToSet);
Status_t                   FE_API_SetDUWrittenForExtUsers(uint32_t* pBuffer);
void                       FE_API_SetHostWritten(uint64_t valueToSet);
void                       FE_API_GetAllSMARTCounters(uint32_t* smartBufferPtr, uint32_t* ftlBufferPtr);
void                       FE_API_PrepForControlSync(void);
void                       FE_API_ControlSyncDone(void);
void                       FE_API_TriggerAsyncEvent(uint32_t asyncEvent);
Status_t                   FE_API_FindAndInvalidateAER(uint32_t aerType, uint32_t logPageId);
Status_t                   FE_API_ResetAllSMARTCounters(BOOL32 isDiagCommand);
Status_t                   FE_API_InitFEResidents(BOOL32 isDiagCommand);
uint32_t                   FE_API_SMARTGetPowerOnHours(void);

void                       FE_API_ClearWarningBit(uint32_t warningBit);
void                       FE_API_SetWarningBit(uint32_t warningBit);
void                       FE_API_RegisterExceptionCmd(FE_ExceptionCmdsDB_t* exceptionEntryPtr);
Status_t                   FE_API_ProcessExceptions(void);
void                       FE_API_CheckPecTheshold(uint32_t normalizedPEC);
void                       FE_API_CheckSparesTheshold(uint32_t* psCalcSpareCounters);
void                       FE_API_GetTemperatureThresholds(uint16_t *overTempThreshold, uint16_t *underTempThreshold);
BOOL32                     FE_API_IsSMARTTimerRunning(void);
BOOL32                     FE_API_IsSMARTTimerSuspended(void);

void                       FE_API_EnterReadOnlyMode(uint8_t moduleID, uint16_t reason);
void                       FE_API_EnableFIPSErrorState(void);
BOOL32                     FE_API_IsFIPSRO(void);
void                       FE_API_notifyBkopsDone();
void                       FE_API_DST_TerminateForPSID(void);

Status_t                   FE_API_ST_SetNamespaceSecurityAttributes(uint32_t namespaceID, FE_ST_SecurityAttributes_t * attributesPtr);
Status_t                   FE_API_ST_SetSecurityRangeAttributes(uint32_t namespaceID, uint64_t startLBA, uint64_t endLBA,
                                                                FE_ST_SecurityAttributes_t * attributesPtr);
void                       FE_API_ST_SetSectionSecurityAttributes(FE_ST_Handle_t handle, FE_ST_SecurityAttributes_t *attributesPtr);
Status_t                   FE_API_ST_ResetSecurityRanges(void);
Status_t                   FE_API_ST_ReapplyUpdatedSecurity(void);
void                       FE_API_SyncSecuritySessionExpiration(void (*callBackFctn)(void));
FE_ST_Handle_t             FE_API_ST_QuerySection(uint32_t namespaceID, uint64_t LBA);
FE_ST_Handle_t             FE_API_ST_GetNextSection(uint32_t namespaceID, FE_ST_Handle_t handle);
Status_t                   FE_API_ST_GetSectionSecurityAttributes(FE_ST_Handle_t handle, FE_ST_SecurityAttributes_t * attributesPtr);
Status_t                   FE_API_ST_GetSectionBoundary(FE_ST_Handle_t handle, uint64_t *startLBA, uint64_t *endLBA);
uint32_t                   FE_API_ST_GetFFLBAFromSection(FE_ST_Handle_t handle, uint64_t LBA, FE_HAL_BlockConversion_t withinBlockLocation);

void                       FE_API_SKT_Reset(void);
void                       FE_API_SKT_SetEntry(uint32_t entryIndex, uint8_t *pEncryptionKey, uint8_t *pTweakKey, uint8_t *pCSV,
                                               uint32_t encryptionMode, uint32_t keySize, uint32_t ivMode, uint8_t versionNDEK, uint8_t versionSDEK);
void                       FE_API_SKT_WeaknessTest(uint8_t *pActiveDEKsBitmap, uint8_t *pWeaknessTestBitmap);
void                       FE_API_SKT_ChangeKeySplit(uint32_t entryIndex, const uint8_t *pCurrentEncryptionKeySplit, const uint8_t *pCurrentTweakKeySplit,
                                                     const uint8_t *pNewEncryptionKeySplit, const uint8_t *pNewTweakKeySplit, uint8_t versionNDEK);
uint16_t                   FE_API_SKT_GetKeyVersion(uint32_t entryIndex);
uint8_t *                  FE_API_GetSerialNumber(uint32_t * bufLen);
Status_t                   FE_API_GetIEEEOrganizationUniqueIdentifier(uint8_t *pBuffer, uint32_t length);
void                       FE_API_PMM_DisableBkOps(void);
void                       FE_API_PMM_EnableBkOps(void);
BOOL                       FE_API_PMM_GetBKOPsState(void);
void                       FE_API_LTR_EnableBitChangeMessage(uint32_t param);
void                       FE_API_SampleLTSSM(uint16_t ltssmSt, uint32_t timeInMs);
void                       FE_API_LED_MessageHandler(uint32_t param);
void                       FE_API_PLP_MessageHandler(uint32_t plp_msg_from_sys);
void                       FE_PMM_DelayLowPowerModeWait(uint32_t param);
void                       FE_API_PMMHIMIdleCheckTimerExpired(void);

#line 2017 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
void                       FE_API_PMM_PCIeL1IdleEventGenerateTO(void);

void                       FE_API_UpdateSerialModelFromDeviceUniqueInfo(uint8_t* pBuffer);

void                       FE_API_PMMWakeUpToCheckHIMIdleTimerExpired(void);
void                       FE_API_PMMBKOpsTimerExpired(void);
void                       FE_API_PMM_TimerExpired(uint16_t TimerExpiredId,uint16_t timerSessionId , uint32_t controllerBusyCount);
void                       FE_PMM_RestartTickingOfNonOperationalASPTTimer(void);
void                       FE_API_PMM_SecurityPSTCallback(void);
void                       FE_API_PMM_DeviceSelfTestCallback(uint32_t token);
void                       FE_API_PMM_FlushNonVolitaileCallback(uint32_t param);
void                       FE_API_PMM_SanitizeCallback(void);
BOOL32                     FE_API_PMM_HasHostUpdatedSQTailDB(void);
BOOL32                     FE_API_PMM_IsDPSBkop(void);
void                       FE_API_PMM_LowPowerEntryLogging(FE_PMM_LPMEntryState_t state);
FE_CallbackWithArg_t       FE_SetTokenAndEventCallback;

void                       FE_API_SetControllerFatal(void);
uint32_t                   FE_API_GetRegCCQueueEntrySize(BOOL32 isSQ);

BOOL                       FE_API_IsPCIeLinkInL0PowerState();
BOOL                       FE_API_IsPCIeLinkInL12Idle(void);
BOOL                       FE_API_IsPCIeLinkInL12Entry(void);
BOOL32                     FE_API_IsPERSTInterruptPending(void);
uint32_t                   FE_API_GetPERSTValue(void);
BOOL32                     FE_API_IsLinkDownInterruptPending(void);
BOOL32                     FE_API_IsPMETOInterruptPending(void);
BOOL                       FE_API_IsPCIeLinkInL10SubState(void);
BOOL32                     FE_HAL_IsPCIeInD3Hot(void);
BOOL32                     FE_HAL_IsPCIeInD0Active(void);
BOOL32                     FE_API_IsPCIeLinkInL1PowerState(void);
BOOL32                     FE_API_IsHIMReadyToEnterL1Substates(uint32_t);
uint32_t                   FE_API_GetPCIeLowPowerStatusReg(void);
uint32_t                   FE_API_GetPCIeLinkStatusReg(void);
BOOL                       FE_API_GetSideBandCLKREQValue(void);
void                       FE_API_PatchForRAMToROMSwitch(void);
BOOL32                     FE_API_IsAON_D3hotSHN_FlagSet(void);

#line 2060 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
BOOL32                     FE_API_IsASPMEnabled(void);
void                       FE_PMM_EnableASPM(uint32_t timeoutIn16nsInterval, BOOL txRxIdle);
void                       FE_PMM_DisableASPM(void);
void                       FE_PMM_SetNoIOCMDInterruptTimer(uint32_t timeout);
BOOL32                     FE_PMM_IsHostEnabledASPML1StateTransition(void);
BOOL32                     FE_PMM_IsHostEnabledASPML12SubstatesTransition(void);
void                       FE_PMM_EnableSubQDBUpdateIRQ(void);



PMM_VS_LMM_t               FE_API_GetMultiMode(void);


BOOL32                     FE_API_IsHaToHawaPipeEmpty(void);
void                       FE_API_RS_Callback(void);

BOOL32                     FE_API_IsHaToHawaFifoEmpty(void);

void                       FE_API_LTR_Disable(void);
void                       FE_API_LTR_Enable(void);
void                       FE_API_LTR_WaitDisabled(void);
uint32_t                   FE_API_XlateXferError(Status_t status);


void                       FE_API_ResetASIC( SoftRstSig_t  bootSignature);
void                       FE_API_ClearPerstInterruptIfNeeded(void);



BOOL                       FE_Check_FFU_Compatibilty(FE_FFU_Compatibility_t *  pNewVersionInfo,
                                                     FE_FFU_Compatibility_t *  pOldVersionInfo,
                                                     BOOL32                    isActivation,
                                                     uint8_t *                 pCommitAction);
Status_t                   NVMe_DownloadCommit_SetMTFAErrorFlag(BOOL isEnabled);
uint32_t                   FE_API_GetIOCmdCount(void);
void                       FE_API_DisableDeepPowerDownByFTL(void);
BOOL32                     FE_API_IsDeepPowerDownDisabled(void);
uint32_t                   FE_API_GeteFuseRDLimitCounter(void);

uint32_t                   FE_API_GetPCIeCRCCount(void);
uint32_t                   FE_API_FADI_GetFERealTimeData(FE_RTFADI_Data_t* pRTFADI_Data);


void                       NVMe_TelemetryCallback(Status_t status, uint32_t token);
void                       NVMe_Telemetry_SendControllerInitiatedAER(void);
Status_t                   NVMe_Telemetry_FEGetSMARTCounters(NVMe_TelemetryLogContext_t* telemetryLogContextPtr);

void                       PCIe_InitEscape(BOOL32 setValue);
BOOL32                     PCIe_EscapeInitRequested(void);

void *                     FE_API_PrepareCmdsTable(void);

void                       FE_API_SetFirmwareActivationCode(uint8_t fwActivationCode);
void                       FE_API_FTLLogMountCompleted(uint32_t prevPwrState);

void                       NVMe_PELog_LogUnsafeShutdownHWErrorEvent(uint128_t *ugsdCount);
Status_t                   NVMe_PELog_LogThermalExcursionEvent(uint8_t overTemp, uint8_t thresholdCrossing, BOOL32 missedEvents);
void                       FE_API_NVMe_PELog_SendSmartSnapshotMsg(void);
uint8_t                    FE_API_NVMe_PELog_GetTriggerSmartSnapshotLogFlag(void);
uint8_t                    FE_API_NVMe_PELog_GetSmartSnapshotLogMsgStatusFlag(void);
void                       FE_API_NVMe_PELog_SetSmartSnapshotLogMsgStatusFlag(void);

BOOL32                     NVMe_PELog_IsPersistentEventLogSupported(void);
BOOL32                     NVMe_PELog_IsPersistenEventIDSupported(uint8_t eventID);


void FE_API_ResetRoguePERSTCount(void);




void FE_API_HaqIpcIsr(uint32_t ipcBitMap);
uint32_t FE_API_HAQ_GetNextEntryAddress(uint32_t queueID);
uint32_t FE_API_HAQ_GetQueueSize(uint32_t queueID);
void     FE_API_HAQ_ReleaseFifoEntry(uint32_t queueID);
BOOL FE_API_HAQ_AccelerationEnabledForQueue(uint32_t queueID);

BOOL32 FE_PMM_L12_NotSupported(void);
BOOL32 FE_PMM_IsGotoDPS32(PMM_PowerState_t powerState);

#line 2146 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
typedef void (*RTOSMessageCallBackFnPtr_t)(uint32_t param);
Status_t FE_SendEventMsg(RTOSMessageCallBackFnPtr_t callBkFn, uint32_t param);




void                       FE_API_ModelSpecificPCIeLinkInL12(void);

#line 2180 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
__inline static  uint32_t FE_API_HA_GetNewCommandIndex(uint32_t queueID, uint32_t* queueSizePtr)
{
   return HA_CQM_FirmwarePop(queueID, queueSizePtr);
}








__inline static  void FE_API_HA_QueueInterruptEnable(uint32_t queueID)
{

#line 2201 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
   {

      HA_CQM_QueueInterruptEnable(queueID);
   }
}









__inline static  uint32_t FE_API_GetCmdCounterIO(void)
{
   return HNVMe_SQM_GetCmdCounterIO();
}




Status_t FE_API_SetDeviceUniqueInfo(void* pSourceBuffer, uint32_t numBytes);
Status_t FE_API_GetDeviceUniqueInfo(void * pSourceBuffer, uint32_t numBytes);
Status_t FE_API_SetDeviceModelIDsInfoCfg(void* pSourceBuffer, uint32_t numBytes);
Status_t FE_API_GetDeviceModelIDsInfoCfg(void * pSourceBuffer, uint32_t numBytes);
void FE_API_GetDeviceSerialNumber(void *pSourceBuffer, uint32_t numBytes);

void FE_API_CopyDeviceUniqueInfoCfg(void* pDestBuffer);
void FE_API_CopyDeviceModelIDsInfoCfg(void* pDestBuffer);

#line 2237 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
BOOL32 FE_API_GetSMBus_Enabled(void);
uint32_t NVMe_SMART_GetPowerCycleCounter(void);

uint32_t NVMe_SMART_GetReadCounts(void);
uint32_t NVMe_SMART_GetWriteCounts(void);
SYS_Custom_Features_t * FE_API_GetInfraCustomFeaturesPtr(void);


void  FE_API_ThermalThrottleChange_MessageHandler(FE_ThermalThrottle_Changed_t param);



void FE_API_PCIe_LTSSMEventChange(void);
void PCIe_Debug_CheckLtssmAerChanges(void);

#line 2258 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
void FE_API_PCIe_AERCheck(void);
void FE_API_PCIe_LogLinkStatus(void);


uint32_t FE_API_GetTargetGBW(void);



void FE_PMM_DutyCycleETT_TimerISR(void);
void FE_API_DutyCycleETT_MsgHandler(uint32_t param, BOOL32 isCalledByIntr);
BOOL32 FE_PMM_DutyCycleETT_isDisabled(void);
uint8_t FE_PMM_DutyCycleETT_getState(void);



Status_t FE_API_LoadDeviceUniqueInfo();
void FE_API_UnloadDeviceUniqueInfo();


void FE_PMM_DPDMAbort(void);
void FE_PMM_WaitPTOWakeUp(void);
Status_t FE_PMM_EnterD3LowPowerState(SYS_InitTypes_t initType);
Status_t FE_PMM_EnterLowPowerState(SYS_InitTypes_t initType);

void FE_PMM_WakeupByUART(void);
void FE_PMM_ForceWakeupFromIdle(void);
void FE_HAL_SetCLKREQO(BOOL32 IsDeassert);
void FE_HAL_Set_CLKREQSRC_AND_CLKREQI(BOOL32 enableDisable);

void FE_PMM_DPSEntryLPControl(void);

BOOL32 FE_API_PMM_IsActiveIdleEnabled(void);

void FE_DoNopDelay (uint32_t num_of_nops);

void NVMe_SMARTUpdateFECounters(void);


Status_t FE_API_HandlePCIeInitFail(void);
void FE_API_HandlePCUPCIeInitMsg(uint32_t PERSTflag);
FE_PCIe_Init_States_t FE_API_GetPCIe_Init_State(void);



uint32_t FE_API_GetActiveIdleTime(void);
void FE_API_EnableASPM(void);
void FE_API_DisableASPM(void);


void FE_API_EnableHimL12Revert(void);


void    FE_API_FlushNonVolatileInit(void);


uint32_t FE_API_GetHostLbaE2EDB(uint32_t cmdIndex);
uint32_t FE_API_GetCmdOffsetE2EDB(uint32_t cmdIndex);
uint32_t FE_API_FmuIndexE2EDB(uint32_t cmdIndex);


void FE_API_VS_PrepForSMARTControlSync(void);
void NVMe_GetInfraDellSMARTCounter(SYS_Infra_Dell_Smart_t * pInfraDellSmartCounters);
void NVMe_VS_IncreaseNonOpAPSTCounter(uint32_t targetPS);
void NVMe_VS_IncreaseNonOpHIPMCounter(VendorSpecific_LpmCounter_EventType_t reason, uint32_t targetPS);
void NVMe_VS_IncreaseChangePSCounter(PowerStateCahngeTrigger_t triger, uint32_t targetPS);
extern uint32_t SYS_SRAM_Get_SB_Err_Cnt(void);


BOOL32 FE_API_IsBootPartitionReadInProgress(void);
uint32_t FE_GetBootPartitionsTotalSizeInFmu(void);

#line 2359 "d:/gitrepo/atlas3_release/source/fe_nvme/inc_public/fe_api.h"
void   FE_API_PMM_ShutdownPending_FlagSetClear(BOOL32 flag);
BOOL32 FE_API_PMM_IsShutdownPending_FlagSet(void);
void   FE_API_PMM_ResumePendingShutdown_EnableCompleted(void);



void FE_API_ResetFWAISettings(void);
BOOL32 FE_API_IsCurrentPowerStateFWAI(void);
void  FE_API_FWAI_PERSTWakeUpHandler(void);
void FE_API_FWAI_EnableFastCMDFetch(void);
void FE_API_MPWakeUpFromFWAI(void);
void FE_API_FWAI_MessageHandler(FE_PMM_FWAI_MSG_ID_t msgID);
void FE_API_FWAI_SetExpiredTimerIDBitmap(uint8_t timerId, BOOL flag);
BOOL32 FE_API_FWAI_GetExpiredThermalTimerBitmap(void);
void FE_API_ChangeToLastOperationalPS(void);
void FE_API_FWAI_ReentryByThermal(void);
void FE_API_SetPhysicalFWAFlag(BOOL enable);
void FE_API_SetIsIncrementFWAIEntryCntFlag(BOOL flag);
BOOL FE_API_IsIncrementFWAIEntryCnt(void);


BOOL32 FE_API_NVMe_SMBusIsBasicMgmtTemp(void);

#line 33 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"

#line 79 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"
typedef enum HIM_DataType_e
{
    HIM_DATA_TYPE_RESERVED  = 0,
    HIM_DATA_TYPE_RANDOM     = 1,
    HIM_DATA_TYPE_SEQUENTIAL= 2,
    HIM_DATA_TYPE_LONG       = 3,
} HIM_DataType_t;





typedef struct HIM_SectionTableEntry_s
{
    uint32_t AT : 1;
    uint32_t RA : 1;
    uint32_t WA : 1;
    uint32_t FWF : 4;
    uint32_t NSID : 8;
    uint32_t LBA_RS_L : 16;
    uint32_t LBA_RS_M;
    uint32_t LBA_RE_L;
    uint32_t LBA_RE_M : 16;
    uint32_t FLBA_OFFSET_L : 16;
    uint32_t FLBA_OFFSET_M;
    uint32_t SEC_INDEX : 16;
    uint32_t PROP_INDEX : 16;
}   HIM_SectionTableEntry_t, *pHIM_SectionTableEntry_t;

typedef struct HIM_CommandContextStatus_s
{
    uint32_t STE : 4;
    uint32_t EXP : 1;
    uint32_t FUA : 1;
    uint32_t HR : 1;
    uint32_t TR : 1;
    uint32_t MS : 1;
    uint32_t BPT : 1;
    uint32_t HPE : 1;
    uint32_t OVP : 5;
    uint32_t OC : 8;
    uint32_t STS : 2;
    uint32_t BE : 1;
    uint32_t HOT : 1;
    uint32_t S1 : 1;
    uint32_t S2 : 1;
    uint32_t S3 : 1;
    uint32_t S4 : 1;
} HIM_CommandContextStatus_t;

#line 133 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"
typedef  _Packed  union MetaData_MountFields_u
{
   uint32_t all32;



   struct MetaData_MountFields_u_s
   {
      uint32_t openBlockId       :  (4) ;
      uint32_t pecDbg :  (4) ;
      uint32_t allocationTS :  (5) ;
      uint32_t metaBlockOffset :  (4) ;
      uint32_t jumboBlockId :  (13) ;
      uint32_t preventBmlRecovery :  (1) ;
      uint32_t pecLSB :  (1) ;
   }   fields;

}   MetaData_MountFields_t;

#line 201 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"
typedef  _Packed  struct FMU_Metadata_s
{
   uint32_t LDPC_SEED   : 16;
   uint32_t UECC        : 8;
   uint32_t NAME_SPACE  : 8;
   uint32_t HOST_LBA;
   uint16_t CRC[ (8) ];
   uint32_t SEQ_NUM;
   MetaData_MountFields_t MOUNT_FIELDS;
}   FMU_Metadata_t, *pFMU_Metadata_t;

#line 217 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"
typedef struct HIM_SDM_Entry_s
{
    uint64_t        sequenceNumber : 4;
    uint64_t        reserved1 : 12;
    uint64_t        lastFLBA : 48;
    uint16_t        commandCount;
    uint16_t        LRU;
    uint16_t        reserved2 : 14;
    uint16_t        streamMomentum : 1;
    uint16_t        isDetected : 1;
    uint16_t        lastCommandLength;
    uint64_t        startFLBA : 48;
    uint64_t        totalLength : 16;
} HIM_SDM_Entry_t;

typedef struct FTL_FMU_INFO_s
{
  uint8_t size;
  uint8_t rmw;
  uint16_t upperFlatLBA;
  uint32_t lowerFlatLBA;
}FTL_FMU_INFO_t;

#line 29 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_types.h"

#line 150 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_types.h"
enum
{
   VBA_UECC_INDICATOR = 0xFFFFFFFE,
   VBA_INVALID = 0xFFFFFFFF,
   VBA_MAX_FMU_OFFSET = (1 <<  ( 4) ),
   VBA_MAX_SLC_DIEPAGE = (1 <<  (14) ),
   VBA_MAX_METABLOCK = (1 <<  (10) ),

};







typedef enum BML_Partition_ID_e
{
   BML_PARTITION_FIRST,
   BML_PARTITION_SLC = BML_PARTITION_FIRST,


   BML_PARTITION_TLC,

   BML_NUM_PARTITIONS,

   BML_ALL_PARTITIONS = BML_NUM_PARTITIONS,

   BML_NUM_PARTITIONS_EXTENDED,

   BML_PARTITION_INVALID

}   BML_Partition_ID_t;

enum BML_BlockType_e
{
   BLOCK_SLC,
   BLOCK_TLC,

   NUM_BLOCK_TYPES
};

typedef uint8_t   BML_BlockType_t;


typedef enum BML_BlockUsage_e
{
   BLOCK_USAGE_STANDARD,
   BLOCK_USAGE_HSLC,

   BLOCK_USAGE_LAST,
} BML_BlockUsage_t;

typedef enum BML_CompositionStrategy_e
{
   BML_COMPOSITION_REGULAR,
   BML_COMPOSITION_IRREGULAR,
   BML_NUM_ALLOCATABLE_STRATEGIES,
   BML_COMPOSITION_UNALLOCATABLE = BML_NUM_ALLOCATABLE_STRATEGIES,
   BML_COMPOSITION_ALL,
}   BML_CompositionStrategy_t;

typedef enum BML_PecStrategy_e
{
   BML_PEC_LOWEST,
   BML_PEC_HIGHEST,

   BML_NUM_PEC_STRATEGIES_INTEREXCHANGEABLE,
   BML_PEC_RESERVED = BML_NUM_PEC_STRATEGIES_INTEREXCHANGEABLE,

   BML_NUM_PEC_STRAGIES,

   BML_PEC_STRATEGY_ALL_INTEREXCHANGEABLE

}   BML_PecStrategy_t;




typedef enum BML_RevrsTransInParityLocation_e
{
   BML_REVRS_TRANS_IN_PARITY_OUT = 0,
   BML_REVRS_TRANS_IN_PARITY_FIRST,
   BML_REVRS_TRANS_IN_PARITY_MIDDLE,
   BML_REVRS_TRANS_IN_PARITY_LAST,

   BML_REVRS_TRANS_IN_PARITY_MAX = 0xffff
}BML_RevrsTransInParityLocation_t;




typedef enum
{
   MBM_MOUNT_HYBRID_STATE_NOT_HYBRID,
   MBM_MOUNT_HYBRID_STATE_HYBRID_DETECTED,
   MBM_MOUNT_HYBRID_STATE_UNKNOWN,
} MBM_FlgpHybridState;



typedef uint16_t   BML_JumboBlock_ID_t;





typedef union
{
   struct
   {
      uint16_t metablockId;
      uint16_t  metadiesBitmap;
   } fields;
   uint32_t all;
} MBM_ReservedListMetablock_t;

typedef uint32_t BML_Iterator_ID_t;

typedef enum BML_FifoId_e
{
   BML_FIFO_HOST_CLOSED,
   BML_FIFO_SECURE_ERASED,
   BML_FIFO_HOST_CLOSED_HSLC,
   BML_MAX_NUM_FIFOS,
   BML_FIFO_INVALID = BML_MAX_NUM_FIFOS,
} BML_FifoId_t;

typedef enum BML_FifoOperation_e
{
   BML_FIFO_APPEND,
   BML_FIFO_REMOVE,
   BML_FIFO_MAX_OPR,
}BML_FifoOperation_t;

typedef struct JBA_s
{
   uint32_t fmuInBlock :  (32 - ( (11) )) ;
   uint32_t jumboBlockId :  (11) ;
}   JBA_t;

#line 305 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_types.h"
typedef struct BML_RTFADI_Data_s
{
   uint16_t JBMInternalListSize[BML_NUM_PARTITIONS][ (2) ];
   uint16_t JBMGenericListSize[BML_NUM_PARTITIONS][BML_MAX_NUM_FIFOS];
   uint16_t MBMMdPartBinaryHeapCount[BML_NUM_PARTITIONS];
   uint16_t MBMMdPartErasedBinaryHeapCount[BML_NUM_PARTITIONS];
   uint16_t JBMNbcsReqStat[ (7) ];
   uint16_t rfu[ (7)  % 2];
   uint32_t MBMPartMaxPec[BML_NUM_PARTITIONS];
   uint32_t MBMPartMinPec[BML_NUM_PARTITIONS];
   uint32_t MBMPartAvgPec[BML_NUM_PARTITIONS];
}  BML_RTFADI_Data_t;

#line 24 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_api.h"

#line 83 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_api.h"
typedef enum OBM_BlockType_e
{
    OBM_BLOCK_TYPE_DATA_BLK_BASE = 0,
    OBM_BLOCK_TYPE_TLC_BASE = OBM_BLOCK_TYPE_DATA_BLK_BASE,
    OBM_BLOCK_TYPE_DYN_RLC = OBM_BLOCK_TYPE_TLC_BASE,
    OBM_BLOCK_TYPE_STC_RLC,
    OBM_BLOCK_TYPE_HOST_SHARED_TLC ,
    OBM_BLOCK_TYPE_SLC_BASE,
    OBM_BLOCK_TYPE_HOST_SEQ_SLC = OBM_BLOCK_TYPE_SLC_BASE,
    OBM_BLOCK_TYPE_HOST_RND_SLC,
    OBM_BLOCK_TYPE_CTL_BLK_BASE,
    OBM_BLOCK_TYPE_CTL_BLK = OBM_BLOCK_TYPE_CTL_BLK_BASE,
    OBM_BLOCK_TYPE_XOR,
    OBM_BLOCK_TYPE_LOG,
    OBM_BLOCK_TYPE_BRLC,
    OBM_BLOCK_TYPE_MAX,
   OBM_FIRST_XOR_PROTECTED_TYPE = OBM_BLOCK_TYPE_TLC_BASE,
   OBM_LAST_XOR_PROTECTED_TYPE = OBM_BLOCK_TYPE_CTL_BLK,
   OBM_NUM_XOR_PROTECTED_TYPES = OBM_LAST_XOR_PROTECTED_TYPE + 1,
   OBM_NUM_TLC_TYPES = OBM_BLOCK_TYPE_SLC_BASE,
   OBM_NUM_TLC_HOST_TYPES = OBM_NUM_TLC_TYPES - 2,
   OBM_BLOCK_TYPE_PHYSICALLY_CLOSED = 0xff,
   OBM_BLOCK_TYPE_ILLEGAL = OBM_BLOCK_TYPE_PHYSICALLY_CLOSED,
}   OBM_BlockType_t;




Status_t FTL_Init(SysBootPhase_t bootPhase);

uint32_t FTL_Config_GetTotalCapacityInFMUs(void);

uint32_t FTL_Config_GetExportedCapacityInFMUs(void);

uint32_t FTL_Config_GetPaddedExportedCapacityInFMUs(void);

uint32_t FTL_Config_GetShadowSpaceCapacityInFMUs(void);

uint32_t FTL_Config_GetShadowSpaceStartFFLBA(void);

uint32_t  FTL_Config_GetBootPartitionsSpaceStartFFLBA(void);

uint32_t FTL_Config_GetBootPartitionsSpaceCapacityInFMUs(void);

uint32_t  FTL_Config_GetRPMBSpaceStartFFLBA(void);

uint32_t FTL_Config_GetRpmbCapacityInFMUs(void);

uint32_t FTL_Config_GetNumUlayerItems(void);


uint32_t FTL_RPMB_GetWriteCounter(uint32_t targetRPMBId);

#line 138 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_api.h"
Status_t FTL_DLE_VerifyBudget(uint8_t* pDataBuffer);

uint32_t FTL_Config_GetPartitionBudget(BML_Partition_ID_t partitionID);

BOOL32   FNVM_AbortOngoingFormat(void);

uint32_t SAT_CheckFflbaErased(uint32_t fflba);

uint16_t FTL_Config_GetWearLevelPecThrBkops(void);

uint32_t BML_GetAverageMetaBlockPec(BML_Partition_ID_t ptnId);

Status_t FTL_GetFTLMBStatusInfo(uint8_t* asd, uint32_t *pBuffer, uint32_t numBytes);

Status_t FTL_GetBlockComposition(uint8_t *pBuffer, uint32_t BufferSize, uint32_t SectionNum);

Status_t FTL_GetAllocBlockStatus(uint8_t *pBuffer, uint32_t BufferSize, uint32_t SectionNum);

Status_t FTL_GetMountLogData(uint8_t *pBuffer, uint32_t BufferSize);

Status_t FTL_GetFwConfiguration(uint8_t *pBuffer, uint32_t BufferSize);

Status_t FTL_GetMapDataInfo(uint8_t *pBuffer, uint32_t SubOpNum, uint32_t offset, uint32_t length);

Status_t FTL_TakeSnapshotInternal(void);

BOOL32   FTL_PMM_IS_FW_AI_Allowed(void);


void FEL_SaveE2EErrorLog(uint32_t cmdIndex);

#line 33 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"

#line 34 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"

#line 376 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"
typedef enum PartitionTypeEnum_e
{
   PARTITION_TYPE_SLC,
   PARTITION_TYPE_TLC,
   PARTITIONS_COUNT
}   PartitionTypeEnum_t;

typedef uint8_t PartitionType_t;

enum MemoryRegionType_e
{

   FTL_TEMPCAT_REGION,
   FTL_CAT_HEADERS_REGION,
   FTL_SAT_DST_REGION,

#line 401 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"
   FTL_SAT_DIRTY_BITMAP_REGION,
   FTL_SAT_UPDATE_CNT_REGION,

   FTL_DIRTY_BITMAP_BACKUP_REGION,



   ERR_INJ_IV_REGION,
   ERR_INJ_GLOBAL_PARAMS_REGION,
   ERR_INJ_MP_REGION,
   ERR_INJ_JB_REV_HDRS_REGION,

   FTL_LOG_REGION,

   FTL_ULAYER_ITEMS_REGION,


   FTL_JBM_REGION,

   FTL_MNT_HEADERS_REGION,
   FTL_RLC_REGION,

   FTL_READ_CACHE_REGION,

   FTL_MTM_REGION,
   FTL_MNT_REGION,
   FTL_DPS2_REGION,
   FTL_ZERO_REGION,
   FTL_DUMMY_HEADER_REGION,
   FTL_MBST_RESTORE_REGION,
   FTL_DIR_DATA_ORIGIN,

   FTL_MTM_LIST_POINTER_REGION,

#line 440 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"
   FTL_MEM_REGIONS
};


typedef enum MTM_RLC_Type_Enum_e
{
   MTM_32KREAD_32KWRITE = 0,
   MTM_32KREAD_64KWRITE,
   MTM_64KREAD_64KWRITE
} MTM_RLC_Type_Enum_t;
typedef uint16_t MTM_RLC_Type_t;

#line 467 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_common.h"
extern FMU_Metadata_t *DUMMY_HEADER;




uint8_t* FTL_MapMemoryRegion(uint8_t regionID);
uint32_t FTL_GetMemoryRegionSize(uint8_t regionID);
BOOL FTL_isDummyMetaDataHeader(uint32_t header);
uint32_t FTL_GetFFLBAFromNamespaceLBA_4KB(uint8_t nsid, uint32_t lba_4KB);
uint32_t FTL_GetFFLBAFromNamespaceLBA(uint8_t nsid, uint64_t lba);

#line 30 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"

#line 105 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
extern void PS_SetFakeDecommissionPeriod(uint32_t decommProbability);









typedef uint8_t EI_Percent_t;







typedef uint32_t EI_EPRCodeMapType_t;

#line 131 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
typedef enum EI_NestedProgEraseCode_e
{
   EI_NESTED_PF_EF_FIRST_SPECIAL_VAL = (0x6000 <<  (16) ),

   EI_NESTED_EPWR_START              = (0x6000 <<  (16) ),
   EI_NESTED_EPWR_END                = (0x6FFF <<  (16)  | ((1<< (16) )-1)),

   EI_NESTED_PROG_LATCH              = (( ( (0xFFFFFFFFUL) )  >> 1) - 1),
   EI_NESTED_PROG_ERASE_CODE_ERASE   = ( ( (0xFFFFFFFFUL) )  >> 1),

   EI_NESTED_PROG_ERASE_FLAG_PA      = ( ( (0xFFFFFFFFUL) )  ^ ( ( (0xFFFFFFFFUL) )  >> 1)),
}   EI_NestedProgEraseCode_t;



typedef enum EI_ReadFailureLevel_e
{
   EI_READ_FAILURE_LEVEL_NONE                    = 0,
   EI_READ_FAILURE_LEVEL_FIRST_FAIL              = 1,
   EI_READ_FAILURE_LEVEL_SW_TH                   = EI_READ_FAILURE_LEVEL_FIRST_FAIL,
   EI_READ_FAILURE_LEVEL_BES5_SB0                = 2,
   EI_READ_FAILURE_LEVEL_BES5_SB1                = 3,
   EI_READ_FAILURE_LEVEL_BES7_SB2_NOLA           = 4,
   EI_READ_FAILURE_LEVEL_BES7_SB1                = 5,
   EI_READ_FAILURE_LEVEL_BES7_SB0                = 6,
   EI_READ_FAILURE_LEVEL_UECC                    = 7,
   EI_READ_FAILURE_LEVEL_LDPC_RAM_BIT_FLIP       = 8,
   EI_READ_FAILURE_LEVEL_BES7_SB2_LA             = 9,
   EI_READ_FAILURE_LEVEL_TOTAL                   = 10
}   EI_ReadFailureLevel_t;


typedef enum EI_ProgFailurePattern_e
{
   EI_PROG_FAILURE_PATTERN_1WL             = 0,
   EI_PROG_FAILURE_PATTERN_WL2WL           = 1,
   EI_PROG_FAILURE_PATTERN_LWL2LWL         = 2,
   EI_PROG_FAILURE_PATTERN_1WL_2PLANES     = 3,
   EI_PROG_FAILURE_PATTERN_2PLANES_WL2WL   = 4,
   EI_PROG_FAILURE_PATTERN_WL2WL_P2P       = 5,
   EI_PROG_FAILURE_PATTERN_WRITE_ABORT     = 6,
   EI_PROG_FAILURE_PATTERN_EPWR            = 7,
   EI_PROG_FAILURE_PATTERN_1LWL            = 8,

   EI_PROG_FAILURE_PATTERN_SKIP_PAR_PAGES  = 9,
   EI_PROG_FAILURE_PATTERN_EPWR_BES5       = 10,
   EI_PROG_FAILURE_PATTERN_EPWR_BES7       = 11,



   EI_PROG_FAILURE_PATTERN_BLU             = 12,
   EI_PROG_FAILURE_PATTERN_BLU_2PLANES     = 13,
   EI_PROG_FAILURE_PATTERN_BLU_P2P         = 14,
   EI_PROG_FAILURE_PATTERN_BLU_STRING      = 15,
   EI_PROG_FAILURE_PATTERN_SILENT_BLU_EPWR = 16,

   EI_PROG_FAILURE_PATTERN_TOTAL           = 17
}   EI_ProgFailurePattern_t;




typedef enum EI_EraseFailurePattern_e
{
   EI_ERASE_FAILURE_PATTERN_SIMPLE      = 0,
   EI_ERASE_FAILURE_PATTERN_WRITE_ABORT = 1,
   EI_ERASE_FAILURE_PATTERN_SGD_ONLY    = 2,
   EI_ERASE_FAILURE_PATTERN_SUSRES_PRER = 3,
   EI_ERASE_FAILURE_PATTERN_TOTAL
}   EI_EraseFailurePattern_t;

typedef enum EI_DstFailureType_e
{
   EI_DST_FAILURE_TYPE_NONE             = 0,
   EI_DST_FAILURE_TYPE_LDPC_TIMEOUT     = 1,
   EI_DST_FAILURE_TYPE_TOTAL            = 2
}   EI_DstFailureType_t;


typedef enum EI_State_e
{
   EI_STATE_FREE        = 0,
   EI_STATE_ONGOING     = 1,
   EI_STATE_FAILED      = 2,
   EI_STATE_PENDING_FTL = 3,
   EI_STATE_COMPLETED   = 4,
   EI_STATE_TOTAL       = 5
} EI_State_t;

typedef enum EI_InjEntryType_e
{
   EI_INJ_ENTRY_TYPE_PROG_ERASE = 0,
   EI_INJ_ENTRY_TYPE_READ       = 1,
   EI_INJ_ENTRY_TYPE_XOR_REC    = 2,
   EI_INJ_ENTRY_TYPE_DST        = 3,
   EI_INJ_ENTRY_TYPE_DRD        = 4,
   EI_INJ_ENTRY_TYPE_TOTAL      = 5
}EI_InjEntryType_t;





typedef struct EI_InjDescCommon_s
{
   uint16_t mpOperationId;
   uint8_t  state;
   uint8_t  enableElOnInjected;
   uint8_t  injEntryType;
   uint8_t  rfu[3];
   uint64_t lastAccessTime;
} EI_InjDescCommon_t;



typedef union EI_EPWRStringPlaneBitmap_s
{
   EI_EPRCodeMapType_t all;
   struct
   {
      EI_EPRCodeMapType_t strP0:3;
      EI_EPRCodeMapType_t strP0EpwrStatus:2;
      EI_EPRCodeMapType_t strP1:3;
      EI_EPRCodeMapType_t strP1EpwrStatus:2;
      EI_EPRCodeMapType_t strP2:3;
      EI_EPRCodeMapType_t strP2EpwrStatus:2;
      EI_EPRCodeMapType_t strP3:3;
      EI_EPRCodeMapType_t strP3EpwrStatus:2;
      EI_EPRCodeMapType_t EpwrWordLine:8;
      EI_EPRCodeMapType_t header:4;
   }bits;
}EI_EPWRStringPlaneBitmap_t;

#line 278 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
typedef union EI_NestedEPWR_s
{
   EI_EPWRStringPlaneBitmap_t nestBitmap;
}EI_NestedEPWR_t;

enum EI_SGD_TYPE_e
{
   EI_SGD_TYPE_INACTIVE                      = (0),
   EI_SGD_TYPE_FORCE_SGD_DOWNSHIFT           = (1<<0),
   EI_SGD_TYPE_DETECT_DOWNSHIFT_FAIL         = (1<<1),
   EI_SGD_TYPE_SOFT_PROG_FAILURE             = (1<<2),
   EI_SGD_TYPE_EF_AFTER_SOFT_PROG_OR_OP      = (1<<3),
   EI_SGD_TYPE_OP_DOWNSHIFT                  = (1<<4),
   EI_SGD_TYPE_FORCE_SGD_UPSHIFT             = (1<<5),
   EI_SGD_TYPE_DETECT_UPSHIFT_FAIL           = (1<<6),
   EI_SGD_TYPE_EF_AFTER_UPSHIFT_FAIL         = (1<<7)
};

typedef struct
{
   uint8_t   numPreEraseSuspendRead;
   uint8_t   numPostEraseSuspendRead;
   uint8_t   disablePreEraseTimeLimit:1;
   uint8_t   disablePostEraseTimeLimit:1;
   uint8_t   reserved:6;
}EI_SuspendOrPreErase_t;

typedef union EI_NestProgReadOrNestEraseSgd_s
{
   struct
   {
      uint16_t nestedReadPagesList     [ ( (4)  * (2) ) ][ (8) ];
      uint8_t  nestedReadBytemapsList  [ ( (4)  * (2) ) ][ (8) ][ (4) ];
      uint8_t  nestedReadListSize      [ ( (4)  * (2) ) ];
      uint8_t  nestedReadListCurr      [ ( (4)  * (2) ) ];
   }prog;
   struct
   {

      uint16_t  lowTailSgdDetectFailWLBitMap[ ( (4) ) ];
      uint32_t  lowTailSgdDetectFailStringInWLBitMap[ ( (4) ) ];
      uint8_t   lowTailSgdCorrectFailWL[ ( (4) ) ];
      uint8_t   lowTailSgdCorrectFailStringInWL[ ( (4) ) ];
      uint8_t   lowTailSgdOverProgramWL[ ( (4) ) ];
      uint8_t   lowTailSgdOverProgramStringInWL[ ( (4) ) ];

      uint8_t   upTailSgdDetectFailWL[ ( (4) ) ];
      uint8_t   upTailSgdDetectFailStringInWL[ ( (4) ) ];

      uint8_t   numOfNestedLowTailSgdDetectErrTotal [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdDetectErrCurr  [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdCorrectErrTotal[ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdCorrectErrCurr [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdOverProgErrTotal[ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdOverProgErrCurr [ ( (4) ) ];
      uint8_t   numOfNestedUpTailSgdDetectErrTotal [ ( (4) ) ];
      uint8_t   numOfNestedUpTailSgdDetectErrCurr  [ ( (4) ) ];
      EI_SuspendOrPreErase_t suspendOrPreErase;
   }erase;
}EI_NestProgReadOrNestEraseSgd_t;

typedef struct EI_InjDescProgErase_s
{
   uint8_t  injBitmap;
   uint8_t  progInjPattern;
   uint8_t  isParityPage;

   uint8_t  rfu[1];

   uint8_t  sgdHeaderErase[ (4) ];
   EI_NestedEPWR_t  EPWRBitmap;

   EI_EPRCodeMapType_t nestedProgEraseList     [ ( (4)  * (2) ) ][ (4) ];
   uint8_t  nestedProgEraseListSize [ ( (4)  * (2) ) ];
   uint8_t  nestedProgEraseListCurr [ ( (4)  * (2) ) ];


   EI_NestProgReadOrNestEraseSgd_t  otherNest;
} EI_InjDescProgErase_t;

typedef struct EI_InjDescRead_s
{

   uint8_t  injBytemap[ (2) ][ ( ( (4)  * (4) ) ) ];

   uint8_t  triggerRlc;
   uint8_t  rfu[419];
} EI_InjDescRead_t;

typedef struct EI_InjXor_s
{

   uint8_t readInjBytemap[ ( (4) ) ];





   uint16_t offsetInBin;








   uint8_t binNumber;



   uint8_t secInjFlag;

#line 393 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
}   EI_InjXor_t;

typedef struct EI_InjDescXor_s
{
   EI_InjXor_t    ei[ (8) ];






   uint32_t       size;
   uint8_t        rfu[12];
}   EI_InjDescXor_t;

typedef struct EI_InjDescDst_s
{
   uint8_t  failureType[ ( ( ( ( 8 ) / ( 2 ) )  * (1)  * (4) ) ) ];
   uint8_t  rfu[80 -  ( ( ( ( 8 ) / ( 2 ) )  * (1)  * (4) ) ) ];
} EI_InjDescDst_t;

typedef struct EI_InjDescDrd_s
{
   uint16_t  opbBitmap;
   uint8_t   rfu[62];
} EI_InjDescDrd_t;

typedef union EI_InjDescSpecific_u
{
   EI_InjDescProgErase_t progErase;
   EI_InjDescRead_t      read;
   EI_InjDescXor_t       xor;
   EI_InjDescDst_t       dst;
   EI_InjDescDrd_t       drd;
} EI_InjDescSpecific_t;

typedef struct EI_InjectionDescriptor_u
{
   EI_InjDescCommon_t common;
   EI_InjDescSpecific_t injection;
} EI_InjectionDescriptor_t;

typedef struct EI_PlpModeParameters_s
{
   uint16_t                   plpFirstTriggerId;
   uint16_t                   plpSecondTriggerId;
   EI_Percent_t               plpChance;
   uint8_t                    isPlpActionDpa;
   uint8_t                    isPlpUsingWaitingLoop;
   uint8_t                    isPlpAllowedDuringMount;
   uint16_t                   plpMaxDelayInMilliSeconds;
   uint8_t                    isPfEfAllowedDuringPlp;
   uint8_t                    rfu[1];
}   EI_PlpModeParameters_t;









typedef struct EI_SharedGlobalParams_s
{
   uint32_t canaryValStart;
   uint32_t  mbReviveEnablePs;
   uint32_t  jbReviveEnablePs;
   uint32_t  *pBaseRlcFflbaTbl;
   uint32_t  *pBaseEiRlcHeadersTbl;
   uint8_t   forcePreErase:1;
   uint8_t   reserved:7;
   uint8_t   rfu;
   uint32_t canaryValEnd;
} EI_SharedGlobalParams_t;

typedef struct   EI_JBreviveSharedParams_s
{

      uint32_t                       jbRevRlcHdrTblPtrs[ ( 8  * 96) * 6 ];

      FMU_Metadata_t   jbRevRlcHdrTbl[ ( 8  * 96) * 6 ];
}EI_JBreviveSharedParams_t ;

#line 510 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
typedef struct EI_InjectionSgdBitmap_s
{
   uint16_t  lowTailSgdEnableSlcWLBitmap;
   uint16_t  upTailSgdEnableSlcWLBitmap;
   uint16_t  lowTailSgdEnableTlcWLBitmap;
   uint16_t  upTailSgdEnableTlcWLBitmap;
}EI_InjectionSgdBitmap_t;

#line 525 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
typedef struct EI_InjectionVector_s
{
   EI_InjectionDescriptor_t injDesc[ ( ( 2 ) ) ][ (16) ];
   EI_InjectionSgdBitmap_t  sgdMap;

#line 534 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_ps_api.h"
}EI_InjectionVector_t;

#line 28 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"

#line 85 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"
typedef uint8_t EI_Percent_t;





typedef enum EI_OpId_e
{

   EI_OP_ID_HOST             = 0,
   EI_OP_ID_RMW              = 1,
   EI_OP_ID_FUA              = 2,
   EI_OP_ID_DEALLOC          = 3,


   EI_OP_ID_LOG              = 4,
   EI_OP_ID_RLA              = 5,
   EI_OP_ID_MTM              = 6,
   EI_OP_ID_XOR              = 7,
   EI_OP_ID_XOR_ZONE_REBUILD = 8,
   EI_OP_ID_ACTIVE_RS        = 9,


   EI_OP_ID_FLGP             = 10,
   EI_OP_ID_SCAN_FWD         = 11,
   EI_OP_ID_READ_HEADERS     = 12,


   EI_OP_ID_RLC_HOST_VC      = 13,
   EI_OP_ID_RLC_HOST         = 14,
   EI_OP_ID_RLC_MTM          = 15,
   EI_OP_ID_RLC_XOR          = 16,
   EI_OP_ID_BRLC_HOST        = 17,
   EI_OP_ID_BRLC_RLC         = 18,
   EI_OP_ID_BRLC_MTM         = 19,
   EI_OP_ID_BRLC_XOR         = 20,


   EI_OP_ID_INFRA_IFS        = 21,
   EI_OP_ID_INFRA_FADI       = 22,
   EI_OP_ID_INFRA_BOOT       = 23,
   EI_OP_ID_INFRA_DIR        = 24,


   EI_OP_ID_HOSTLESS         = 25,




   EI_NUM_OF_OP_IDS          = 26,
   EI_INVALID_OP             = 0xFF
}   EI_OpId_stub_t;
typedef uint32_t EI_OpId_t;


enum EI_IntOpId_e
{
   EI_INT_OP_ID_XOR_REC_FIRST = EI_NUM_OF_OP_IDS,
   EI_INT_OP_ID_XOR_REC_LOAD_PAGE = EI_INT_OP_ID_XOR_REC_FIRST,
   EI_INT_OP_ID_XOR_REC_START,
   EI_INT_OP_ID_XOR_REC_LAST = EI_INT_OP_ID_XOR_REC_START,
   EI_OP_ID_INFRA_ERASE,
   EI_OP_ID_INFRA_FADI_JTAG,

   EI_UNUSED_OP_ID,
   EI_TOTAL_NUM_OF_OP_IDS,
   EI_INVALID_OP_ID,

#line 155 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"
   EI_INT_OP_ID_XOR_REC_TOTAL = EI_INT_OP_ID_XOR_REC_LAST - EI_INT_OP_ID_XOR_REC_FIRST + 1,
};
typedef EI_OpId_t EI_IntOpId_t;


typedef enum EI_ConfType_e
{
   EI_CONF_TYPE_RANDOM,
   EI_CONF_TYPE_SINGLE,
   EI_CONF_TYPE_TOTAL,
}   EI_ConfType_stub_t;
typedef uint32_t EI_ConfType_t;

typedef enum EI_ReadFailureType_e
{
   EI_READ_SW_TH = 0,
   EI_READ_BES5_SB_0,
   EI_READ_BES5_SB_1,
   EI_READ_BES7_SB_2_NOLA,
   EI_READ_BES7_SB_1,
   EI_READ_BES7_SB_0,
   EI_READ_UECC_REC,
   EI_READ_UECC_UNREC,
   EI_READ_LDPC_RAM_BIT_FLIP,
   EI_NUM_OF_READ_FAILURE_TYPES
}   EI_ReadFailureType_stub_t;
typedef uint32_t EI_ReadFailureType_t;

typedef enum EI_ProgFailureType_e
{
   EI_PROG_FAILURE_TYPE_1WL               = 0,
   EI_PROG_FAILURE_TYPE_WL2WL             = 1,
   EI_PROG_FAILURE_TYPE_LWL2LWL           = 2,
   EI_PROG_FAILURE_TYPE_1WL_2PLANES       = 3,
   EI_PROG_FAILURE_TYPE_2PLANES_WL2WL     = 4,
   EI_PROG_FAILURE_TYPE_WL2WL_P2P         = 5,
   EI_PROG_FAILURE_TYPE_WRITE_ABORT       = 6,
   EI_PROG_FAILURE_TYPE_EPWR              = 7,
   EI_PROG_FAILURE_TYPE_1LWL              = 8,

   EI_PROG_FAILURE_TYPE_SKIP_PAR_PAGES    = 9,
   EI_PROG_FAILURE_TYPE_EPWR_BES7         = 10,
   EI_PROG_FAILURE_TYPE_EPWR_BES5         = 11,
   EI_PROG_FAILURE_TYPE_BLU_FAILURES      = 12,

   EI_NUM_OF_PROG_FAILURE_TYPES,
}   EI_ProgFailureType_stub_t;
typedef uint32_t EI_ProgFailureType_t;

typedef enum EI_ProgBluFailureType_e
{
   EI_PROG_BLU_FAILURE_TYPE_BLU                       = 0,
   EI_PROG_BLU_FAILURE_TYPE_BLU_2PLANES               = 1,
   EI_PROG_BLU_FAILURE_TYPE_BLU_P2P                   = 2,
   EI_PROG_BLU_FAILURE_TYPE_BLU_STRING                = 3,
   EI_PROG_BLU_FAILURE_TYPE_SILENT_BLU_EPWR           = 4,

   EI_NUM_OF_PROG_BLU_FAILURE_TYPES,
}   EI_ProgBluFailureType_stub_t;
typedef uint32_t EI_ProgBluFailureType_t;


typedef enum EI_EraseFailureType_e
{
   EI_ERASE_SINGLE = 0,
   EI_ERASE_WRITE_ABORT,
   EI_ERASE_SGD,
   EI_ERASE_SR_PRER,
   EI_NUM_OF_ERASE_FAILURE_TYPES
}   EI_EraseFailureType_stub_t;
typedef uint32_t EI_EraseFailureType_t;

typedef enum EI_NestedProgFailureType_e
{
   EI_NESTED_PROG_INJ_ERASE = 0,
   EI_NESTED_PROG_INJ_PAGE_0,
   EI_NESTED_PROG_INJ_PAGE_1,
   EI_NESTED_PROG_INJ_PAGE_LAST,
   EI_NESTED_PROG_INJ_PAGE_PRE_LAST,
   EI_NESTED_PROG_INJ_PAGE_OTHER,
   EI_NESTED_PROG_INJ_LATCH,
   EI_NESTED_PROG_INJ_RAND_EPWR,

   EI_NUM_OF_NESTED_PROG_FAILURE_TYPES,
}   EI_NestedProgFailureType_stub_t;
typedef uint32_t EI_NestedProgFailureType_t;

typedef enum EI_NestedEraseFailureType_s
{
   EI_NESTED_ERASE_INJ_ERASE = 0,

   EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES,
}   EI_NestedEraseFailureType_stub_t;
typedef uint32_t EI_NestedEraseFailureType_t;

typedef enum EI_CfgDstFailureType_e
{
   EI_CFG_DST_FAILURE_TYPE_LDPC_TIMEOUT   = 0,
   EI_NUM_OF_CFG_DST_FAILURE_TYPES
}   EI_CfgDstFailureType_t;

typedef enum EI_CfgSgdFailureType_e
{
   EI_CFG_SGD_FAILURE_TYPE_DETECT_DOWNSHIFT_FAIL = 0,
   EI_CFG_SGD_FAILURE_TYPE_SOFT_PROG_FAILURE,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_CORRECT_OK,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_CORRECT_FAIL,
   EI_CFG_SGD_FAILURE_TYPE_EF_BEFORE_SGD,
   EI_CFG_SGD_FAILURE_TYPE_OVER_PROG,
   EI_CFG_SGD_FAILURE_TYPE_DETECT_UPSHIFT_FAIL,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_UPSHIFT_FAIL,
   EI_NUM_OF_CFG_SGD_FAILURE_TYPES
}   EI_CfgSgdFailureType_t;

typedef enum EI_FlashAccessType_e
{
   EI_FLASH_READ = 0,
   EI_FLASH_PROG,

   EI_NUM_OF_OP_TBL_ACCESS_TYPES,

   EI_FLASH_ERASE = EI_NUM_OF_OP_TBL_ACCESS_TYPES,
   EI_NUM_OF_STANDARD_FLASH_ACCESS_TYPES,

   EI_FLASH_XOR_REC = EI_NUM_OF_STANDARD_FLASH_ACCESS_TYPES,
   EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS,

   EI_FLASH_DST = EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS,
   EI_FLASH_DRD,

   EI_NUM_OF_FLASH_ACCESS_TYPES,

   EI_ILLEGAL_FLASH_ACCESS_TYPE,
}   EI_FlashAccessType_stub_t;
typedef uint8_t EI_FlashAccessType_t;

typedef enum EI_OperationToInject_e
{
   EI_INJ_OP_READ = 0,
   EI_INJ_OP_PROG,
   EI_INJ_OP_ERASE,

   EI_INJ_OP_XOR_LOAD,
   EI_INJ_OP_XOR_REBUILD,

   EI_INJ_OP_XOR_REC_LOAD,
   EI_INJ_OP_XOR_REC_UNROLL_PS0,
   EI_INJ_OP_XOR_REC_UNROLL_PS1,

   EI_INJ_OP_DST,
   EI_INJ_OP_DRD,
   EI_INJ_OP_XOR_STORE,

   EI_NUM_OF_INJ_OP_TYPES,
   EI_ILLEGAL_INJ_OP_TYPE
}   EI_OperationToInject_stub_t;
typedef uint8_t EI_OpToInject_t;

typedef enum EI_SingleInjAddrType_e
{
   EI_ADDR_TYPE_VBA = 0,
   EI_ADDR_TYPE_DEVBA,
   EI_ADDR_TYPE_LBA,
   EI_ADDR_TYPE_OPID,

   EI_NUM_OF_ADDR_TYPES,
}   EI_SingleInjAddrType_stub_t;
typedef uint8_t EI_SingleInjAddrType_t;

typedef enum EI_PageFailurePlacement_e
{
   EI_PLACEMENT_PAGE_0,
   EI_PLACEMENT_PAGE_1,
   EI_PLACEMENT_PAGE_LAST,
   EI_PLACEMENT_PAGE_PRE_LAST,
   EI_PLACEMENT_PAGE_OTHER,

   EI_PLACEMENT_PAGE_TOTAL,
   EI_PLACEMENT_PAGE_ILLEGAL

}   EI_PageFailurePlacement_stub_t;
typedef uint32_t EI_PageFailurePlacement_t;

typedef enum EI_ZoneState_e
{
   EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK,
   EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK,
   EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK,
   EI_ZONE_STATE_TOTAL,
   EI_ZONE_STATE_ILLEGAL,
   EI_ZONE_STATE_WORKAROUND_RLC_HOST,
}   EI_ZoneState_stub_t;
typedef uint32_t EI_ZoneState_t;

typedef enum EI_NestedFailueChances_e
{
   EI_NESTED_PF_EF_DURING_PF,
   EI_NESTED_READ_DURING_PF,
   EI_NESTED_TOTAL,
}   EI_NestedFailueChances_stub_t;
typedef uint32_t EI_NestedFailueChances_t;

typedef enum EI_BlockType_e
{
   EI_BLOCK_TYPE_SLC = 0,
   EI_BLOCK_TYPE_MLC,
   EI_BLOCK_TYPE_HYBRID,
   EI_BLOCK_TYPE_IRJB,
   EI_NUM_OF_BLOCK_TYPES
}   EI_BlockType_stub_t;
typedef uint32_t EI_BlockType_t;

typedef enum EI_OperationalState_e
{
   EI_OPERATIONAL_STATE_SPECIAL = 0,
   EI_OPERATIONAL_STATE_MOUNT,
   EI_OPERATIONAL_STATE_MOUNT_DPS,
   EI_OPERATIONAL_STATE_NORMAL,
   EI_OPERATIONAL_STATE_TOTAL,
} EI_OperationalState_stub_t;
typedef uint8_t EI_OperationalState_t;

typedef enum EI_SpecialOpst_e
{
   EI_SPECIAL_OPST_FNVM_OBM_CLOSE_OPNBLKS = 0x1,
   EI_SPECIAL_OPST_FNVM_OTHER_CASES       = 0x2,
   EI_SPECIAL_OPST_BKOPS                  = 0x4,
   EI_SPECIAL_OPST_PLP                    = 0x8,


   EI_SPECIAL_OPST_ALL                    = 0xFF,
} EI_SpecialOpst_stub_t;
typedef uint8_t EI_SpecialOpst_t;

typedef enum EI_LogCopyLocation_e
{
   EI_LOG_COPY_0_BEGINNING = 0,
   EI_LOG_COPY_0_MIDDLE,
   EI_LOG_COPY_0_ENDING,
   EI_LOG_COPY_1_BEGINNING,
   EI_LOG_COPY_1_MIDDLE,
   EI_LOG_COPY_1_ENDING,
   EI_LOG_COPY_LOCATION_TOTAL,
} EI_LogCopyLocation_stub_t;
typedef uint8_t EI_LogCopyLocation_t;

typedef enum
{
   EI_LOG_WRITE_REASON_FIRST_MOUNT = 0,
   EI_LOG_WRITE_REASON_MOUNT_GSD_DONE,
   EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE,
   EI_LOG_WRITE_REASON_GSD,
   EI_LOG_WRITE_REASON_BLOCK_ALLOCATED,
   EI_LOG_WRITE_REASON_FLASH_FILL,
   EI_LOG_WRITE_REASON_PWS,
   EI_LOG_WRITE_REASON_FNVM,
   EI_LOG_WRITE_REASON_DECOMMISSIONED,
   EI_LOG_WRITE_REASON_FE_SMART,
   EI_LOG_WRITE_REASON_INFRA_SMART,
   EI_LOG_WRITE_REASON_FTL_SMART,
   EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE,
   EI_LOG_WRITE_REASON_BRLC_COMPLETE,
   EI_LOG_WRITE_REASON_FMBL_NOT_FULL,
   EI_LOG_WRITE_REASON_READONLY,
   EI_LOG_WRITE_REASON_TOTAL,
} EI_LogWriteReason_stub_t;
typedef uint8_t EI_LogWriteReason_t;

typedef enum EI_XorLoadType_e
{
   EI_XOR_LOAD_TYPE_XRAM = 0,
   EI_XOR_LOAD_TYPE_DRAM,
   EI_XOR_LOAD_TYPE_TOTAL,
} EI_XorLoadType_stub_t;
typedef uint8_t EI_XorLoadType_t;

typedef enum EI_RebuildTarget_e
{
   EI_REBUILD_TARGET_XRAM = 0,
   EI_REBUILD_TARGET_DRAM,
   EI_REBUILD_TARGET_TOTAL,
} EI_RebuildTarget_stub_t;
typedef uint8_t EI_RebuildTarget_t;

typedef enum EI_RebuildReason_e
{
   EI_REBUILD_REASON_UGSD = 0,
   EI_REBUILD_REASON_LOAD_FAILURE,
   EI_REBUILD_REASON_TOTAL,
} EI_RebuildReason_stub_t;
typedef uint8_t EI_RebuildReason_t;

typedef enum EI_RlcType_e
{
   EI_RLC_TYPE_OTHER = 0,
   EI_RLC_TYPE_STATIC,
   EI_RLC_TYPE_TOTAL,
} EI_RlcType_stub_t;
typedef uint8_t EI_RlcType_t;

typedef enum EI_RlcOperation_e
{
   EI_RLC_OPERATION_BOTH = 0,
   EI_RLC_OPERATION_NORMAL_ONLY,
   EI_RLC_OPERATION_INTERLEAVED_ONLY,
   EI_RLC_OPERATION_TOTAL,
} EI_RlcOperation_stub_t;
typedef uint8_t EI_RlcOperation_t;

typedef enum EI_FadiType_e
{
   EI_FADI_TYPE_OTHER = 0,
   EI_FADI_TYPE_JTAG,
   EI_FADI_TYPE_TOTAL,
} EI_FadiType_stub_t;
typedef uint8_t EI_FadiType_t;

typedef enum EI_HostlessType_e
{
   EI_HOSTLESS_TYPE_OTHER = 0,
   EI_HOSTLESS_TYPE_RPMB,
   EI_HOSTLESS_TYPE_BOOTPARTITION,
   EI_HOSTLESS_TYPE_TOTAL,
} EI_HostlessType_stub_t;
typedef uint8_t EI_HostlessType_t;

enum EI_eraseType_e
{
   EI_ERASE_TYPE_NORMAL,
   EI_ERASE_TYPE_FNVM,
   EI_ERASE_TYPE_PRE_ERASE,
   EI_ERASE_TYPE_RE_ERASE,
   EI_ERASE_TYPE_COUNT,
   EI_ERASE_TYPE_INVALID = 0xFF
};
typedef uint8_t EI_eraseType_t;





typedef struct EI_SingleReadConfigParams_s
{
   EI_ReadFailureLevel_t   failureType;
   uint8_t                 triggerRlc;
   uint8_t                 rfu1[3];
   uint8_t                 failurePerFmuMap[ ( (4)  * (4) ) ];
   uint8_t                 rfu[ (80)  - 24];
}   EI_SingleReadConfigParams_t;

typedef struct EI_SingleProgConfigParams_s
{
   EI_ProgFailurePattern_t failureType;

   uint16_t nestedInjReadPagesList[ (8) ];
   uint8_t  nestedInjReadByteMapsList[ (8) ][ (4) ];

   EI_EPRCodeMapType_t nestedInjProgEraseList[ (4) ];
   uint8_t  nestedListProgEraseSize;
   uint8_t  nestedListReadSize;

   uint8_t  doInjectMultiplane;
   uint8_t  isParityPage;
   EI_EPRCodeMapType_t EPWRbitmap;
   uint8_t  XORStoreMetaPgOffs;

   uint8_t  rfu[ (80)  - 77];
}   EI_SingleProgConfigParams_t;

typedef struct EI_SingleSgdBitmapParams_s
{
   uint16_t  lowTailSgdDetectFailWLBitmap;
   uint16_t  rfu;

   uint32_t  lowTailSgdDetectFailStringInWLBitmap;

   uint8_t   lowTailSgdCorrectFailWL;
   uint8_t   lowTailSgdCorrectFailStringInWL;
   uint8_t   lowTailSgdOverProgramWL;
   uint8_t   lowTailSgdOverProgramStringInWL;

   uint8_t   upTailSgdDetectFailWL;
   uint8_t   upTailSgdDetectFailStringInWL;
   uint8_t   rfu1[2];
}EI_SingleSgdBitmapParam_t;


typedef struct EI_SingleEraseConfigParams_s
{
   EI_EraseFailurePattern_t   failureType;
   uint8_t                    numNestedEraseInjections;
   uint8_t                    doInjectMultiplane;
   uint8_t                    doPowerAbortOnLastNestedInjection;
   uint8_t                    sgdHeaderErase[ (4) ];
   uint8_t                    rfu0;

   uint8_t                    forcePreErase;

#line 555 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"
   uint8_t                    rfu1[3];
   EI_SingleSgdBitmapParam_t  sgdEIBitmap[ (4) ];
}   EI_SingleEraseConfigParams_t;


typedef struct EI_RestrictionsConfig_s
{
   uint32_t cooldownTime;
   uint32_t consecutiveGap;
   uint8_t  fullCS;
   uint8_t  multyDiesPfEnable;
   uint8_t  avoidRoOnMtmUecc;
   uint8_t  multiPlanePfDisable;
   uint8_t  maxNumberOfNestedRecoverableReadsDuringPf;
   uint8_t  rfu [3];
}   EI_RestrictionsConfig_t;


typedef struct EI_GeneralConfig_s
{
   EI_ConfType_t confType;
   uint32_t      randomSeed;
   uint8_t       errLogEnable;
   uint8_t       mbReviveEnableFull;
   uint8_t       jbReviveEnable;
   uint8_t       doSurvivePowerCycles;
   uint8_t       mbReviveDisableFtl;
   uint8_t       rfu0 [1];
   uint16_t      drdOpbBitmap;
   uint8_t       planeAffinityMask_part1[ (2) ][ (4) ];









   uint8_t       specialOpstBitmap;
   uint8_t       rfu1 [7];
}   EI_GeneralConfig_t;






typedef union EI_OpidSpecificChancesTable_u
{
   uint8_t                      flat[ (3 * (8) ) ];

   struct
   {
      EI_Percent_t              locations[EI_LOG_COPY_LOCATION_TOTAL];
      EI_Percent_t              reasons[EI_LOG_WRITE_REASON_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_LOG_COPY_LOCATION_TOTAL - EI_LOG_WRITE_REASON_TOTAL];
   } logChances;

   struct
   {
      EI_Percent_t              xorLoadTypes[EI_XOR_LOAD_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_XOR_LOAD_TYPE_TOTAL];
   } xorChances;

   struct
   {
      EI_Percent_t              rebuildTargets[EI_REBUILD_TARGET_TOTAL];
      EI_Percent_t              rfu0[ (8)  - EI_REBUILD_TARGET_TOTAL];
      EI_Percent_t              rebuildReasons[EI_REBUILD_REASON_TOTAL];
      EI_Percent_t              rfu1[ (3 * (8) )  -  (8)  - EI_REBUILD_REASON_TOTAL];
   } rebuildChances;

   struct
   {
      EI_Percent_t              rlcTypes[EI_RLC_TYPE_TOTAL];
      EI_Percent_t              rlcOperation;
      EI_Percent_t              rfu[ (3 * (8) )  - EI_RLC_TYPE_TOTAL - sizeof(EI_Percent_t)];
   } rlcChances;

   struct
   {
      EI_Percent_t              fadiTypes[EI_FADI_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_FADI_TYPE_TOTAL];
   } fadiChances;

   struct
   {
      EI_Percent_t              hostlessTypes[EI_HOSTLESS_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_HOSTLESS_TYPE_TOTAL];
   } hostlessChances;

} EI_OpidSpecificChancesTable_t;

typedef union EI_SingleConfigParams_u
{
   EI_SingleReadConfigParams_t  read;
   EI_SingleProgConfigParams_t  prog;
   EI_SingleEraseConfigParams_t erase;
   EI_InjDescXor_t              xor_rec;
   EI_InjDescDst_t              dst;
   EI_InjDescDrd_t              drd;
   uint8_t                      bytes[ (80) ];
}   EI_SingleConfigParams_t;





typedef struct EI_OpTableEntry_s
{
   uint8_t                       valid;
   uint8_t                       isParticipantInBurst;
   EI_Percent_t                  chanceToInitiateBurstOnRead;
   EI_Percent_t                  chanceToInitiateBurstOnProg;
   EI_Percent_t                  operationalStateChances  [EI_OPERATIONAL_STATE_TOTAL];
   EI_Percent_t                  opTypeFailureChances     [ (8) ];
   EI_Percent_t                  blockTypeFailureChances  [ (8) ];
   EI_Percent_t                  pagePlacementChances     [ (8) ];
   EI_Percent_t                  zoneStateChances         [ (8) ];
   EI_OpidSpecificChancesTable_t opidSpecificChances;
   EI_Percent_t                  nestedFailuresChances    [ (8) ];
}   EI_OpTableEntry_t;

typedef struct EI_ChancesTable_s
{
   EI_Percent_t              failChanceOriginalRead   [ (16) ];
   EI_Percent_t              failChanceXorRecRead     [ (16) ];
   EI_Percent_t              failChancePfRecRead      [ (16) ];
   EI_Percent_t              failChanceOriginalProg   [ (16) ];
   EI_Percent_t              failChanceNestedProg     [ (16) ];
   EI_Percent_t              failChanceOriginalErase  [ (16) ];
   EI_Percent_t              failChanceNestedErase    [ (16) ];
   EI_Percent_t              failChanceDst            [ (16) ];
   EI_Percent_t              failChanceSgd            [ (16) ];
   EI_Percent_t              failChanceProgBlu        [ (16) ];
   EI_Percent_t              rfuTbl3                  [ (16) ];
   EI_Percent_t              rfuTbl4                  [ (16) ];
   EI_Percent_t              rfuTbl5                  [ (16) ];
   EI_Percent_t              rfuTbl6                  [ (16) ];
   EI_Percent_t              rfuTbl7                  [ (16) ];
   EI_Percent_t              rfuTbl8                  [ (16) ];
}   EI_ChancesTable_t;

typedef struct EI_AllOpsFailureChances_s
{
   EI_Percent_t              chanceEraseFailure;
   EI_Percent_t              chanceXorRecDuringPfRecFailure;
   EI_Percent_t              chanceNestedEraseFailureDuringEraseFailure;
   EI_Percent_t              chancePsDecommissionRequests;
   EI_Percent_t              chanceProgParityPage;
   EI_Percent_t              chanceDstFailure;
   EI_Percent_t              chanceUnrecXorRecRead;
   EI_Percent_t              chanceToTriggerRlcAfterReadInj;
   EI_Percent_t              chanceNestedWriteAbort;
   EI_Percent_t              chanceNestedEraseAbort;
   EI_Percent_t              chanceEraseFailureDuringFnvm;
   EI_Percent_t              chanceDrd;
   EI_Percent_t              chanceSgdDownShift;
   EI_Percent_t              chanceSgdUpShift;
   EI_Percent_t              rfu [2];
}   EI_AllOpsFailureChances_t;

typedef struct EI_BurstModeParameters_s
{
   uint32_t                  cooldownTimeBurst;
   uint32_t                  consecutiveGapBurst;
   uint8_t                   maxInjectionsPerBurst;
   uint8_t                   minInjectionsPerBurst;
   uint8_t                   isBackToBack;
   uint8_t                   chanceToInitiateBurstOnErase;
   uint8_t                   chanceEraseFailureDuringBurst;
   uint8_t                   isSolePfDuringBurst;
   uint8_t                   rfu[2];
}   EI_BurstModeParameters_t;

typedef struct EI_EraseChances_s
{
   EI_Percent_t eraseFailureChances[EI_ERASE_TYPE_COUNT];
   uint8_t rfu[4];
   EI_Percent_t blockTypeFailureChances[ (8) ];
}   EI_EraseChances_t;

typedef struct EI_ConfigArraysExtenstion_s
{

#line 744 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_config.h"
   uint8_t                   planeAffinityMask_part2[ (2) ][ ( ((( (16)  )> ( (4) )) ? ( (16) )  : ( (4) )) )  -  (4) ];
   EI_PlpModeParameters_t    plpModeParameters;
   EI_Percent_t              chanceCapTestFailure;
   EI_Percent_t              chancePlpProcessFailure;
   EI_EraseChances_t         eraseChances;
   uint8_t                   rfuBuffer[226];
}   EI_ConfigArraysExtenstion_t;


typedef struct EI_SingleInjTableEntry_s
{
   uint64_t                  addr;
   uint8_t                   addrType;
   uint8_t                   nsId;
   uint8_t                   opToInject;
   uint8_t                   isValid;
   uint8_t                   nthOpCounter;
   uint8_t                   rfu[3];

   EI_SingleConfigParams_t   injParams;
}   EI_SingleInjTableEntry_t;


typedef struct EI_MetaDieDecommissionTable_s
{
   uint32_t                   currentTableSize;
   uint16_t metaBlockTable[ (128) ];
}   EI_MetaDieDecommissionTable_t;

typedef struct EI_revive_s
{
   EI_MetaDieDecommissionTable_t  metaDieDecommissionTable[ (16) ];

}   EI_Revive_t;







typedef struct EI_Config_s
{

   uint32_t                  canaryValStart;
   uint32_t                  version;
   uint8_t                   rfu0 [8];


   EI_GeneralConfig_t        generalConfig;


   EI_RestrictionsConfig_t   restrictions;
   EI_AllOpsFailureChances_t allOpsChance;
   EI_ChancesTable_t         chances;
   EI_OpTableEntry_t         operations[ (40) ];


   EI_SingleInjTableEntry_t  singleInjections[ (6) ];


   EI_BurstModeParameters_t  burstMode;
   EI_ConfigArraysExtenstion_t   configArraysExtenstion;




   uint8_t                   rfu1[3];
   uint8_t                   isConfigValid;
   uint32_t                  canaryValEnd;
}   EI_Config_t;





void EI_ConfFixBackwardCompatibility(EI_Config_t* config);
Status_t EI_ConfigInputValidation(const EI_Config_t *config);
void EI_ValidateConfigStructureOffsets(void);
BOOL32 EI_Config_IsReadfailurePerFmuMapConfigure(const uint8_t* pFReadFailurePerFmuMap);

Status_t EI_GetOpSpecRestrictions(const uint32_t opId, BOOL32 *slcOnly, BOOL32 *readOnly, BOOL32 *progOnly, BOOL32 *openZoneOnly);
void EI_ConfDisableP2PPatternInjections(EI_Config_t* pRawConf);

#line 36 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/winfw_adapter.h"

#line 227 "d:/gitrepo/atlas3_release/source/ftl/inc_public/winfw_adapter.h"
typedef struct TAG_S_FM_STATISTICS_ENTRY
{
   unsigned int count;
   unsigned int breakOn;
}S_FM_STATISTICS_ENTRY;

typedef struct TAG_S_FM_STATISTICS_ENTRY_64Bit
{
   unsigned long long int count;
   unsigned long long int breakOn;
}S_FM_STATISTICS_ENTRY_64bit;

typedef struct TAG_S_FM_STATISTICS
{

   S_FM_STATISTICS_ENTRY writeLog;
   S_FM_STATISTICS_ENTRY fml;
   S_FM_STATISTICS_ENTRY hostWrite;
   S_FM_STATISTICS_ENTRY hostRead;
   S_FM_STATISTICS_ENTRY hostDealloc;
   S_FM_STATISTICS_ENTRY fmQDispatch;
   S_FM_STATISTICS_ENTRY powerCycle;
   S_FM_STATISTICS_ENTRY powerCycleNormal;
   S_FM_STATISTICS_ENTRY powerCycleUGSD;
   S_FM_STATISTICS_ENTRY backOps;
   S_FM_STATISTICS_ENTRY lowResources;
   S_FM_STATISTICS_ENTRY mailboxHandler;


   S_FM_STATISTICS_ENTRY slcRlc;
   S_FM_STATISTICS_ENTRY tlcRlc;
   S_FM_STATISTICS_ENTRY IRLCStartCnt;
   S_FM_STATISTICS_ENTRY IRLCInterruptCnt;
   S_FM_STATISTICS_ENTRY IRLCCompleteCnt;
   S_FM_STATISTICS_ENTRY interleavedRlc;
   S_FM_STATISTICS_ENTRY staticTlcRlc;
   S_FM_STATISTICS_ENTRY staticSlcRlc;
   S_FM_STATISTICS_ENTRY rsRlc;
   S_FM_STATISTICS_ENTRY blindRlc;
   S_FM_STATISTICS_ENTRY FnvmRlc;
   S_FM_STATISTICS_ENTRY rlcSourceBlksReleased;
   S_FM_STATISTICS_ENTRY rlcInvalidBlksReleased;
   S_FM_STATISTICS_ENTRY AutoFreeTlcBlksDuringRlc;
   S_FM_STATISTICS_ENTRY AutoFreeTlcBlks;
   S_FM_STATISTICS_ENTRY AutoFreeSlcBlks;
   S_FM_STATISTICS_ENTRY rlcFlashTranslates;
   S_FM_STATISTICS_ENTRY slcMinBlockPec;
   S_FM_STATISTICS_ENTRY slcMaxBlockPec;
   S_FM_STATISTICS_ENTRY tlcMinBlockPec;
   S_FM_STATISTICS_ENTRY tlcMaxBlockPec;
   S_FM_STATISTICS_ENTRY rlcScanfwdCnt[3];
   S_FM_STATISTICS_ENTRY rlcSrcNormalCnt[3];
   S_FM_STATISTICS_ENTRY rlcSrcResumeCnt[3];
   S_FM_STATISTICS_ENTRY rlcScanfwdSkippedCnt[3];


   S_FM_STATISTICS_ENTRY mrmWaExceptions;
   S_FM_STATISTICS_ENTRY mrmEaExceptions;


   S_FM_STATISTICS_ENTRY mtmStaticForceCount;
   S_FM_STATISTICS_ENTRY mtmStaticBamReads;


   S_FM_STATISTICS_ENTRY xormNopSwapReqs;
   S_FM_STATISTICS_ENTRY xormSwapReqs;
   S_FM_STATISTICS_ENTRY xormSwapQueuedReqs;
   S_FM_STATISTICS_ENTRY xormSwapDroppedReqs;
   S_FM_STATISTICS_ENTRY xormRSQReqs;
   S_FM_STATISTICS_ENTRY xormBRLCInitiated;
   S_FM_STATISTICS_ENTRY xormLoadFailures;
   S_FM_STATISTICS_ENTRY xormCompactionsRequested;
   S_FM_STATISTICS_ENTRY xormNonemptyCompactionsRequested;


   S_FM_STATISTICS_ENTRY controlWritesCnt;
   S_FM_STATISTICS_ENTRY controlWritesLogCnt;
   S_FM_STATISTICS_ENTRY controlReadCnt;
   S_FM_STATISTICS_ENTRY controlSyncCnt;
   S_FM_STATISTICS_ENTRY PsrHostWriteCnt;
   S_FM_STATISTICS_ENTRY blockEraseCnt;
   S_FM_STATISTICS_ENTRY consolidationCnt;
   S_FM_STATISTICS_ENTRY rlaReadCnt;
   S_FM_STATISTICS_ENTRY bmlJBAllocSLC;
   S_FM_STATISTICS_ENTRY bmlJBAllocTLC;
   S_FM_STATISTICS_ENTRY fmuWrittenPerBlockType[10];
   S_FM_STATISTICS_ENTRY PsrHostReadFmus;
   S_FM_STATISTICS_ENTRY satTranslateByCUQ;
   S_FM_STATISTICS_ENTRY satTranslateByCAT;
   S_FM_STATISTICS_ENTRY satTranslateByULYR;
   S_FM_STATISTICS_ENTRY satTranslateByTempCAT;
   S_FM_STATISTICS_ENTRY satTranslateByErasedBM;
   S_FM_STATISTICS_ENTRY satTranslateByErasedPart;

   S_FM_STATISTICS_ENTRY satCUQEnterLRM;
   S_FM_STATISTICS_ENTRY satCUQExitLRM;
   S_FM_STATISTICS_ENTRY satCUQUpdateCnt;

   S_FM_STATISTICS_ENTRY mntUgsd;
   S_FM_STATISTICS_ENTRY_64bit sectorsWritten;


   S_FM_STATISTICS_ENTRY lrmRestrictions[10];
   S_FM_STATISTICS_ENTRY lrmRlcReadQueue;


   S_FM_STATISTICS_ENTRY eiTotalReads;
   S_FM_STATISTICS_ENTRY eiTotalProgs;
   S_FM_STATISTICS_ENTRY eiTotalErases;
   S_FM_STATISTICS_ENTRY eiTotalXORs;
   S_FM_STATISTICS_ENTRY eiLogReads;
   S_FM_STATISTICS_ENTRY eiLogProgs;
   S_FM_STATISTICS_ENTRY eiMtmReads;
   S_FM_STATISTICS_ENTRY eiMtmProgs;
   S_FM_STATISTICS_ENTRY eiXorProgs;
   S_FM_STATISTICS_ENTRY eiRlcMtmProgs;
   S_FM_STATISTICS_ENTRY eiRlcXorProgs;
   S_FM_STATISTICS_ENTRY eiBrlcXorProgs;
   S_FM_STATISTICS_ENTRY eiBrlcHostProgs;
   S_FM_STATISTICS_ENTRY eiHostlessReads;
   S_FM_STATISTICS_ENTRY eiParityProgs;


   S_FM_STATISTICS_ENTRY waCounter;
   S_FM_STATISTICS_ENTRY waOpbId[9 ];
   S_FM_STATISTICS_ENTRY ugsdOpbId_notWa[9 ];
   S_FM_STATISTICS_ENTRY logWaByReason[20];
   S_FM_STATISTICS_ENTRY WAParityCounter;
   S_FM_STATISTICS_ENTRY mntUgsdBegin;
   S_FM_STATISTICS_ENTRY mntUgsdB2Bbrlc;



   S_FM_STATISTICS_ENTRY uicFlushByConsolidation;
   S_FM_STATISTICS_ENTRY uicFlushByItemFull;
   S_FM_STATISTICS_ENTRY uicLoadItem;



   S_FM_STATISTICS_ENTRY rcFetchFirstCmd;
   S_FM_STATISTICS_ENTRY rcFetchNextCmd;
   S_FM_STATISTICS_ENTRY rcReadCurrentFromCache;
   S_FM_STATISTICS_ENTRY rcReadNextFromCache;


   S_FM_STATISTICS_ENTRY rcInitFail;
   S_FM_STATISTICS_ENTRY rcCandidate[16];
   S_FM_STATISTICS_ENTRY rcNonCandidate;
   S_FM_STATISTICS_ENTRY rcActivate;
   S_FM_STATISTICS_ENTRY rcDeactivateByWrite;
   S_FM_STATISTICS_ENTRY rcDeactivateByNewCmd;
   S_FM_STATISTICS_ENTRY rcDeactivateByNextCmd;
   S_FM_STATISTICS_ENTRY rcDeactivateByDealoc;
   S_FM_STATISTICS_ENTRY rcDeactivateByWriteBuffer;
   S_FM_STATISTICS_ENTRY rcDeactivateByFetchError;
   S_FM_STATISTICS_ENTRY rcDeactivateByFNVM;
   S_FM_STATISTICS_ENTRY rcDeactivateDuringFetchingCurrent;
   S_FM_STATISTICS_ENTRY rcDeactivateDuringFetchingNext;
   S_FM_STATISTICS_ENTRY rcFetchFailOverCap;
   S_FM_STATISTICS_ENTRY rcFetchFailTranslateFail;
   S_FM_STATISTICS_ENTRY rcFetchFailLRM;
   S_FM_STATISTICS_ENTRY rcFetchFailBufferInUse;
   S_FM_STATISTICS_ENTRY rcNextCmdStillFetching;



   S_FM_STATISTICS_ENTRY enterRwMode;
   S_FM_STATISTICS_ENTRY ExitRwMode;



   S_FM_STATISTICS_ENTRY flush_NV_numGetNumBlocksLeftInPtnCalls[2];
   S_FM_STATISTICS_ENTRY flush_NV_NumGetNumBlocksLeftInPtrIters[2];
}S_FM_STATISTICS;






extern S_FM_STATISTICS G_fm;
extern unsigned long int G_logLastCsReason;

#line 428 "d:/gitrepo/atlas3_release/source/ftl/inc_public/winfw_adapter.h"
typedef struct TAG_S_U64
{

   unsigned int lowBits;


   unsigned int highBits;

}S_U64, *S_U64_PTR;

#line 30 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_waypoint.h"

#line 79 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_waypoint.h"
typedef enum
{



   WP_FIRST_MOUNT_START=1,
   WP_FIRST_MOUNT_END,

   WP_MNT_STATE_START,
   WP_MNT_STATE_HANDLE_LOG,
   WP_MNT_STATE_READONLY,
   WP_MNT_STATE_NOTIFY_PS,
   WP_MNT_STATE_MOUNT_BML,
   WP_MNT_STATE_SEND_DEVICE_HEALTH,
   WP_MNT_STATE_CHECK_GSD_FLAG,
   WP_MNT_STATE_GSD_MOUNT_OBM,
   WP_MNT_STATE_GSD_MOUNT_MTM,
   WP_MNT_STATE_GSD_MOUNT_SAT,
   WP_MNT_STATE_GSD_MOUNT_MVP,
   WP_MNT_STATE_GSD_MOUNT_PEM,
   WP_MNT_STATE_GSD_MOUNT_RSQ,
   WP_MNT_STATE_GSD_MOUNT_RS,
   WP_MNT_STATE_GSD_LOAD_XOR,
   WP_MNT_STATE_DR_CHECK_REQ,
   WP_MNT_STATE_ENABLE_READ,
   WP_MNT_STATE_OPBS_REBUILD_XOR_PAR,
   WP_MNT_STATE_OPBS_BRLC,
   WP_MNT_STATE_MOUNT_HWD,
   WP_MNT_STATE_CONTROL_SYNC,
   WP_MNT_STATE_UGSD_BML_RECOVERY,
   WP_MNT_STATE_UGSD_OBM_RECOVERY,
   WP_MNT_STATE_UGSD_EXTRACT_METADATA,
   WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD,
   WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_MOUNT_MVP,
   WP_MNT_STATE_UGSD_MOUNT_RSQ,
   WP_MNT_STATE_UGSD_MOUNT_RS,
   WP_MNT_STATE_MOUNT_COMPLETE,
   WP_MNT_HANDLE_DRD_RESPONSE,
   WP_MNT_HANDLE_FLGP_RESPONSE,
   WP_MNT_HANDLE_DRD_REQUEST,
   WP_MNT_STATE_GSD_MOUNT_FNVM,
   WP_MNT_STATE_MOUNT_XORM,
   WP_MNT_STATE_MOUNT_RLC,
   WP_MNT_SF_HOST_RECOVERY,
   WP_MNT_SF_HOST_RECOVERY_DONE,
   WP_MNT_PERFORM_BRLC,
   WP_MNT_ALIGN_HOST_BLOCKS_FER,
   WP_MNT_STATE_MOUNT_SMART,
   WP_MNT_HANDLE_FLGP_RESP_WA_LGW,
   WP_MNT_HANDLE_FLGP_RESP_WA_FER,
   WP_MNT_HANDLE_FLGP_RESP_WA_DIFF,
   WP_MNT_UGSD_HAS_WA,
   WP_MNT_HANDLE_FLGP_RESP_END,
   WP_MNT_COMBINE_FLGP_RES,
   WP_MNT_ALGN_FLGP_LGW_TO_LOG,
   WP_MNT_DALOC_SENT_RD,
   WP_MNT_DALOC_READ_DONE,
   WP_MNT_UGSD_HOST_RD_RES,
   WP_MNT_HOST_RECOVERY_FLAGS,
   WA_MNT_UGSD_MARK_4_LATER,
   WP_MNT_MOUNT_START,
   WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE,
   WP_MNT_SET_LAST_VALID_JBA,
   WP_MNT_CALCULATE_LGW_JBA,
   WP_MNT_EXTRACT_FFLBA,
   WP_MNT_INIT_HEADER_PTRS_LIST,
   WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK,
   WP_MNT_HOST_RECOVERY_READ_AFTER_LGW,
   WP_MNT_HOST_RECOVERY_READ_START,
   WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB,
   WP_MNT_HOST_RECOVERY_READ_STATUS,
   WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START,
   WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS,
   WP_MNT_HOST_RECOVERY_PROCESS_START,
   WP_MNT_UGSD_CHECK_CS_NEEDED,
   WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID,
   WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK,
   WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE,
   WP_MNT_HOST_RECOVERY_HANDLER_START,
   WP_MNT_HOST_RECOVERY_HANDLER_PROCESS,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2,
   WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED,
   WP_MNT_HOST_RECOVERY_HANDLE_DALOC,
   WP_MNT_HOST_RECOVERY_DALOC_CALLBACK,
   WP_MNT_HOST_RECOVERY_START,
   WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG,
   WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED,
   WP_MNT_VALIDATE_B2B_DATA,
   WP_MNT_INVALIDATE_LATE_B2B_DATA,
   WP_MNT_INVALIDATE_NOW_B2B_DATA,
   WP_MNT_DELAY_INVALIDATE_B2B_DATA,
   WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE,
   WP_MNT_USE_B2B_DATA,
   WP_MNT_STATE_MOUNT_SYNC_ALL_VC,
   WP_MNT_STATE_LOAD_ON_BEGINNING_OF_ZONE,
   WP_MNT_NAND_DEFECT,
   WP_MNT_HOST_FLGP_BITMAP_FMU,





   WP_HOST_WRITE_COMPLETE,
   WP_HOST_READ_COMPLETE,






   WP_SAT_START_CONSOLIDATION,
   WP_SAT_ENDED_CONSOLIDATION,
   WP_SAT_CONSOLIDATION_ADDING_MSET,
   WP_SAT_CONSOLIDATION_REUSING_MSET,
   WP_SAT_CONSOLIDATION_SENT_ALL_READS,
   WP_SAT_CONSOLIDATION_START_COPY_BACK,
   WP_CAT_ADDED_MSET,
   WP_CAT_REMOVED_MSET,
   WP_CUQ_ADDED_ENTRY,
   WP_CUQ_REMOVED_ENTRY,
   WP_SAT_WRITE_ENTRY,
   WP_SAT_UPDATE_VC,
   WP_SAT_SEND_CONTROL_READ,
   WP_SAT_PARTIAL_RESET_COMPLETE,
   WP_SAT_CANCELED_CONSOLIDATION,
   WP_SAT_STARTED_DEALLOCATE,
   WP_SAT_UECC_ON_CONTROL_READ,
   WP_SAT_UNITTEST_CALLBACK,
   WP_CAT_SLOT_DETACHED,
   WP_CAT_SLOT_ATTACHED,
   WP_SATRRACKING_JB_ALLOC,
   WP_SAT_TRANSLATE_AFTER_CALLBACK,
   WP_DST_VC_CHECK_FINISHED,
   WP_SAT_SKIP_DIRTY_MSET,

   WP_LOG_READ_LOG_COPIES,
   WP_LOG_DECIDE_ACTIVE_COPY,
   WP_LOG_READ_ACTIVE_LOG,
   WP_LOG_CONTROL_SYNC_REQUESTED,
   WP_LOG_CONTROL_SYNC_IN_PROCESS,
   WP_LOG_CHECK_FOR_UECC,
   WP_LOG_GO_BACK_ONE_COPY,
   WP_LOG_GO_BACK_ONE_ENTRY,
   WP_LOG_GO_BACK_ONE_BLOCK,
   WP_LOG_REPLACE_BLOCK,
   WP_LOG_ALLOC_NEW,
   WP_LOG_MOUNT_COMPLETE,
   WP_LOG_WRITING_LOG_BLOCK,
   WP_LOG_JUMBO_BLOCK_WL,

   WP_BKOPS_STARTED,
   WP_BKOPS_COMPLETED,
   WP_BKOPS_HANDLER_PROCESS_SAT,
   WP_BKOPS_HANDLER_RELOCATION,
   WP_BKOPS_LOAD_MSETS_HANDLER_START,
   WP_BKOPS_LOAD_MSETS_HANDLER_END,
   WP_BKOPS_RS_HANDLER_START,
   WP_BKOPS_RS_HANDLER_END,
   WP_BKOPS_MTM_HANDLER_START,
   WP_BKOPS_MTM_HANDLER_END,
   WP_BKOPS_SAT_HANDLER_START,
   WP_BKOPS_SAT_HANDLER_END,
   WP_BKOPS_RELOCATION_HANDLER_START,
   WP_BKOPS_RELOCATION_HANDLER_END,
   WP_BKOPS_MAIN_LOOP_HANDLER_START,
   WP_BKOPS_MAIN_LOOP_HANDLER_END,
   WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS,

   WP_MTM_WINFW_TEST,
   WP_MTM_ALLOCATE_BLOCK,
   WP_MTM_CLOSE_BLOCK,
   WP_MTM_RELEASE_BLOCK,
   WP_MTM_STARTED_GC,
   WP_MTM_GC_COMPLETE,
   WP_MTM_WRITE_PART,
   WP_MTM_VC_UPDATE,
   WP_MTM_CHECK_BLOCK_STUCK_START,
   WP_MTM_CHECK_BLOCK_STUCK_FINISH,
   WP_MTM_PROCESS_GC,
   WP_FTL_MTM_JB_VBA,

WP_PSR_CONTROL_READ_VBA,
WP_PSR_SET_OPEN_BLOCK,
WP_PSR_RD_RMW_VBA,
WP_PSR_ERASE_META_BLOCK,
WP_PSR_ERASE_DIE_BLOCK,
WP_PSR_FLASHFILL_META_BLOCK,


WP_MTM_SEND_REQ_WRITE,
WP_MTM_WRITE_DONE,


WP_MVP_FREE_CYCLE,
WP_MVP_START_RELOCATION,
WP_MVP_PARTITION_FREE_SPACE,
WP_MVP_INIT,
WP_MVP_RELOCATION_COMPLETE,
WP_MVP_CALC_FREE_SPACE,
WP_MVP_SWAP_START,
WP_MVP_HSLC_UNDER_MINVC,
WP_MVP_HSLC_REDUCTION_FG,
WP_MVP_HSLC_REDUCTION_BG,
WP_MVP_HSLC_NO_MORE_GC,
WP_MVP_HSLC_HAR_PLAN_STEP_ROW,
WP_MVP_HSLC_HOST_GC_STATUS,
WP_MVP_HSLC_HOST_GC_IN_STATUS,


WP_FLUSH_NV_CMD_START,
WP_FLUSH_NV_CMD_STOP,
WP_FLUSH_NV_CMD_PROGRESS,
WP_FLUSH_NV_CMD_NOTIFY,


WP_FML_LOW_RESOURCES_START,
WP_FML_LOW_RESOURCES_END,
WP_FML_PS_Q_LOW_RESOURCE_START,
WP_FML_PS_Q_LOW_RESOURCE_END,


WP_FTL_BML_JUMBOBLOCK_ALLOCATED,

WP_FTL_BML_JUMBOBLOCK_CLOSE,

WP_FTL_MBM_METABLOCK_RELEASED,
WP_FTL_MBM_METABLOCK_REVIVE,
WP_FTL_MBM_CS_DONE_LIST_NOT_FULL,
WP_FTL_MBM_METABLOCK_ERASED,
WP_FTL_MBM_METABLOCK_FLASH_FILLED,
WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY,
WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML,
WP_FTL_MBM_WA_METABLOCK_ERASED,
WP_FTL_MBM_ALLOCATE_PREERASED_MB,
WP_FTL_MBM_REFILL_RESERVED,


D_MODEL_FTL_HWD_ROUTING_RULES,

D_MODEL_FTL_HWD_PADDING,
D_MODEL_FTL_HWD_START_WRITE,
D_MODEL_FTL_HWD_RMW,
D_MODEL_FTL_HWD_RMW_DONE,
D_MODEL_FTL_HWD_FUA,
D_MODEL_FTL_HWD_FUA_DONE,
D_MODEL_FTL_HWD_STREAM_STATUS,
WP_FTL_HWD_WRITE_JB_VBA,


D_MODEL_FTL_HRF_STREAM_STATUS,
WP_FTL_HRF_UECC_HANDLING,


WP_FTL_OVP_START_SYNC,
WP_FTL_OVP_PROCESS_ENTRY,
WP_FTL_OVP_FEADMIN_PROCESS_ENTRY,
WP_FTL_OVP_FEADMIN_BLOCKED,
WP_FTL_OVP_FEADMIN_CALLBACK,
WP_FTL_OVP_START_STREAM_WRITE_SYNC,
WP_FTL_OVP_STREAM_EMPTY,
WP_FTL_OVP_START_STREAM_RMW_SYNC,
WP_FTL_OVP_START_STREAM_TLC_SYNC,
WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST,


WP_FTL_RLC_RLC_START,
WP_FTL_RLC_SCAN_FWD,
WP_FTL_RLC_SOURCE_BLOCK_SELECTED,
WP_FTL_RLC_SOURCE_BLOCK_RESELECTED,
WP_FTL_RLC_SOURCE_BLOCK_RELEASED,
WP_FTL_RLC_TARGET_BLOCK_SELECTED,
WP_FTL_RLC_COPY_FMUS,
WP_FTL_RLC_FLASH_TRANSLATE,
WP_FTL_RLC_TARGET_BLOCK_OPEN,
WP_FTL_RLC_TARGET_BLOCK_FULL,
WP_FTL_RLC_AUTO_FREE_JB_RELEASED,
WP_FTL_RLC_START_FNVM,
WP_FTL_RLC_END_FNVM,
WP_FTL_RLC_CYCLE_TERMINATE,
WP_FTL_RLC_RLC_COMPLETE,
WP_FTL_RLC_READ_LRM_ENTER,
WP_FTL_RLC_READ_LRM_EXIT,
WP_FTL_RLC_JB_REL_LRM_ENTER,
WP_FTL_RLC_JB_REL_LRM_EXIT,
WP_FTL_RLC_WRITE_JB_VBA,
WP_FTL_RLC_WA_STATISTICS_BLOCK_ALLOC,

WP_FTL_RLC_START_BRLC,
WP_FTL_RLC_ALLOC_BRLC_BLOCK,
WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE,
WP_FTL_RLC_END_BRLC,
WP_FTL_RLC_TIME_UP_HSLC,
WP_FTL_RLC_SLC_SHORTAGE,
WP_FTL_RLC_RSQ_REQUEST,
WP_FTL_RLC_START_AND_ADVANCE_RLC,
WP_FTL_RLC_FG_RS_SET_READ_TH,
WP_FTL_RLC_FG_RS_FAST_READ,


WP_FTL_OBM_JUMBO_BLOCK_ALLOC,
WP_FTL_OBM_META_BLOCK_CONF,
WP_FTL_OBM_JUMBO_BLOCK_FMU_INC,
WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED,
WP_FTL_OBM_JUMBO_BLOCK_CLOSED,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL,
WP_FTL_OBM_JUMBO_BLOCK_WL,
WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD,
WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK,
WP_FTL_OBM_JUMBO_BLOCK_REUSE,
WP_FTL_OBM_ALLOC_BLOCK,
WP_FTL_OBM_ALLOC_BLOCK_FINISHED,
WP_FTL_HSLC_ALLOCATION,


   WP_FTL_RLA_REGISTER_OVERLAP,

   WP_FTL_RLA_INIT,
   WP_FTL_RLA_ABORT_ALL,
   WP_FTL_RLA_READ_RACE,

   WP_FTL_RLA_RELEASE_STREAM,
   WP_FTL_RLA_TRANSLATION_FAILURE,


   WP_FTL_RLA_COMPLEMENTARY_READ,


   WP_FTL_RLA_CHECK_AND_READ_ALL,

   WP_FTL_RLA_READ_OVERLAP_FROM_FE,

   WP_FTL_RLA_READ_AHEAD_EVENT,
   WP_FTL_RLA_TRANSLATE_TRAP,
   WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED,
   WP_FTL_RLA_BUFF_IN_PS_NOT_FREED,
   WP_FTL_RLA_ASYNC_TRANSFER_DONE,
   WP_FTL_RLA_ALLOCATE_STREAM,
   WP_FTL_RLA_ALLOCATE_BUFFERS,
   WP_FTL_RLA_SEND_HIM_RESPONSE,
   WP_FTL_RLA_RESTART,
   WP_FTL_RLA_BL_ALLOC_SUCCESS,
   WP_FTL_RLA_BL_START_INT,
   WP_FTL_RLA_SAVE_CALC_MPD,
   WP_FTL_RLA_CALC_GBI_WINDOW,
   WP_FTL_RLA_SKIP_2ND_ADDR_TRANSLATION,


   WP_FTL_DALOC_PROCESS_ENTRY,


   WP_FTL_DHM_SEND_MAX_PEC_TO_PS,


   WP_FTL_FNVM_HOST_CMD_PARAM,
   WP_FTL_FNVM_UGSD_RECOVERY_PARAM,
   WP_FNVM_WINFW_TEST,


   WP_FTL_XOR_BARRIER_DONE,
   WP_FTL_XOR_STORE_PARITY_REQ,
   WP_FTL_XOR_LOAD_PARITY_REQ,
   WP_FTL_XOR_REBUILD_PARITY_REQ,
   WP_FTL_XOR_REBUILD_PARITY_COMPLETE,
   WP_FTL_XOR_COMPACTION_START,
   WP_FTL_XOR_COMPACTION_JWL0_WRITE,
   WP_FTL_XOR_COMPACTION_END,
   WP_FTL_XOR_JB_VBA,
   WP_FTL_XOR_PARITY_LOC,


   WP_FTL_READONLY_TRIGGER,
   WP_FTL_READONLY_HANDLER_START,
   WP_FTL_READONLY_HANDLER_COMPLETED,


   WP_FTL_RS_SEND_ACTIVE_RS_REQ,
   WP_FTL_RS_SET_NEW_SCANNED_BLOCK,
   WP_FTL_RS_FINISHED_ENTIRE_SCAN,
   WP_FTL_RS_SCAN_TOO_LONG,
   WP_FTL_RS_PROCESS_SCAN,
   WP_FTL_RS_MODE_SET,
   WP_FTL_RS_ENABLE_FG_SCAN,
   WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE,
   WP_FTL_RS_READONLY_DISABLE_RS,


   WP_FTL_RSQ_NEW_RLC_REQ,
   WP_FTL_RSQ_RLC_REQ_REMOVED,
   WP_FTL_RSQ_LRM,
   WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS,
   WP_FTL_RSQ_RECOVER_DURING_MOUNT,

   WP_FTL_SHD_START_SHUTDOWN,
   WP_FTL_SHD_STATE_SHD_COMPLETE,
   WP_FTL_SHD_COUNT_INC,


   WP_FTL_PWS_STATE_EXIT_COMPLETE,
   WP_FTL_PWS_DPS3_NOT_SUPPORTED,


   WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE,


   WP_FTL_PEM_PRE_ERASE_START,
   WP_FTL_PEM_PRE_ERASE_BLOCK,
   WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK,
   WP_FTL_PEM_RETARGET_ERASE,


   WP_FTL_STATS,




   WP_FE_COMPARE_START,
   WP_FE_COMPARE_END,
   WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED,
   WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED,
   WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH,




   WP_PS_INIT,

   WP_PS_UT_FIRST_MOUNT_START,
   WP_PS_UT_ENTER_SLC_EWR,
   WP_PS_UT_EXIT_SLC_EWR,
   WP_PS_UT_ENTER_INFRA_SLC_EWR,
   WP_PS_UT_EXIT_INFRA_SLC_EWR,
   WP_PS_UT_ENTER_TLC_EWR,
   WP_PS_UT_EXIT_TLC_EWR,
   WP_PS_UT_ENTER_RESET,
   WP_PS_UT_EXIT_RESET,
   WP_PS_UT_ENTER_SLC_CACHED_EWR,
   WP_PS_UT_EXIT_SLC_CACHED_EWR,
   WP_PS_UT_ENTER_SWAP,


   WP_PS_HEALTH_UPDATE_PEC,


   WP_PS_CVD_MB_CLOSURE,
   WP_PS_CVD_BER_LATT,
   WP_PS_CVD_BER_DEF,
   WP_PS_CVD_BER_COMP,
   WP_PS_CVD_BER_OPT,
   WP_PS_CVD_BES5,
   WP_PS_CVD_BES7,
   WP_PS_CVD_MB_ASSIGN,
   WP_PS_CVD_ALLOCATE_NEW,
   WP_PS_CVD_MB_UNASSIGN,
   WP_PS_CVD_PTTU_START,
   WP_PS_CVD_PTTU_END,
   WP_PS_CVD_READ_PARAMS,
   WP_PS_CVD_READ_PARAMS_TABLES,
   WP_PS_CVD_READ_PARAM_TT,
   WP_PS_CVD_MB_RELEASE,
   WP_PS_CVD_MB_CACHE_RELEASE,
   WP_PS_CVD_CACHE_ENTRY_RELEASE,
   WP_PS_CVD_ADD_TO_CACHE,
   WP_PS_CVD_CACHE_ENTRY_HEAD,
   WP_PS_CVD_BER_SEND,
   WP_PS_CVD_BER_SEND_WITHOUT_THR,
   WP_PS_CVD_BES_SEND,
   WP_PS_CVD_BES_RES,
   WP_PS_CVD_BES_RLC,
   WP_PS_CVD_BER_OPT_RLC,
   WP_PS_CVD_TT_ALLOC,
   WP_PS_CVD_DEALLOCATE,
   WP_PS_CVD_TTU_START,
   WP_PS_CVD_TTU_BER_VER0,
   WP_PS_CVD_TTU_BES_START,
   WP_PS_CVD_TTU_BES5,
   WP_PS_CVD_TTU_BES7,
   WP_PS_CVD_TTU_BER_OPT,
   WP_PS_CVD_TTU_RLC_VERS,
   WP_PS_CVD_TTU_RLC_VER0,
   WP_PS_CVD_MB_TTU_UPDATED,
   WP_PS_CVD_TICK_CNT,
   WP_PS_CVD_COMPACTION_START,
   WP_PS_CVD_COMPACTION_TT1,
   WP_PS_CVD_COMPACTION_TT2,
   WP_PS_CVD_COMPACTION_END,
   WP_PS_CVD_DRD_BER,
   WP_PS_CVD_DRI,
   WP_PS_CVD_ADD_TASK,
   WP_PS_CVD_ACTIVATE_TASK,
   WP_PS_CVD_COMPLETE_TASK,
   WP_PS_CVD_BARRIER_STATE,
   WP_PS_CVD_INVALIDATE_LATT,
   WP_PS_CVD_MORPH_SECT_UPDATE,
   WP_PS_CVD_IS_HBER,
   WP_PS_CVD_SET_BKOPS,
   WP_PS_CVD_PERIODIC_EVENT_NOTIFY,


   WP_PS_RFM_STATE_CHANGE,
   WP_PS_RFM_REFRESH_OP_DISPATCH,
   WP_PS_RFM_ISOLATE_OP_DISPATCH,
   WP_PS_RFM_REFRESH_OP_COMPLETE,
   WP_PS_RFM_ISOLATE_OP_COMPLETE,
   WP_PS_RFM_INIT_COMPLETE,
   WP_PS_RFM_REFRESH_TRIGGER,


   WP_PS_RS_RANDOM_SCAN_START,
   WP_PS_RS_RANDOM_SCAN_END,
   WP_PS_RS_ACTIVE_SCAN_START,
   WP_PS_RS_ACTIVE_SCAN_END,
   WP_PS_RS_HIGH_BER_EVENT,
   WP_PS_RS_BLOCK_SENT_TO_RLC,
   WP_PS_RS_ADD_BLOCK_TO_RSCQ,
   WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ,
   WP_PS_RS_PROCESS_BLOCK_FROM_REH,
   WP_PS_RS_READ_BER_REQUEST,
   WP_PS_RS_READ_BER_RESPONSE,
   WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID,
   WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST,


   WP_PS_REH_START,
   WP_PS_REH_REREAD_WITH_CF,
   WP_PS_REH_BES5,
   WP_PS_REH_BES7,
   WP_PS_REH_SB0,
   WP_PS_REH_SB1,
   WP_PS_REH_SB2,
   WP_PS_REH_SB2_DLA,
   WP_PS_REH_XOR_START,
   WP_PS_REH_XOR_PAUSE,
   WP_PS_REH_RESULT,
   WP_PS_REH_LDPC_ISR,
   WP_PS_REH_NO_FIRST_REREAD,

   WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0,
   WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1,
   WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES,
   WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0,
   WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1,
   WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES,
   WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0,
   WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1,
   WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES,
   WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0,
   WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1,
   WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES,
   WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0,
   WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1,
   WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES,
   WP_PS_PF_16_UECC_COPY_READ,
   WP_PS_PF_17_XOR_FAIL_COPY_READ,
   WP_PS_PF_18_XOR_DONE_COPY_READ,
   WP_PS_PF_19_NESTED,
   WP_PS_PF_25_CVD_DIST_REQUEST,
   WP_PS_PF_26_CVD_DIST_INSUFFICIENT_BUFFER,
   WP_PS_PF_27_CVD_DIST_READ_EL_DONE,

   WP_PS_EF_01_START,
   WP_PS_EF_02_CHECK_STATUS,
   WP_PS_EF_03_SET_FAILED_PLANE,
   WP_PS_EF_04_RESET_DIE,
   WP_PS_EF_05_RELINK_BLOCK,
   WP_PS_EF_06_ERASE_BLOCK,
   WP_PS_EF_07_UPDATE_GBBT,
   WP_PS_EF_08_CLEANUP,
   WP_PS_EF_09_NESTED_ERASE,


   WP_PS_EPWR_BER_COMPLETE,
   WP_PS_EPWR_BES_COMPLETE,
   WP_PS_EPWR_RELOCATION,
   WP_PS_EPWR_RELINK_FAILURE,


   WP_PS_DGM_ADDR_BEFORE_SUSPEND,
   WP_PS_DGM_SUSPEND_BY_PROG_OR_READ,
   WP_PS_DGM_ADDR_AFTER_SUSPEND,
   WP_PS_DGM_FAST_READ_DISABLE_ON_PEC,
   WP_PS_DGM_FAST_READ_DISABLE_ON_UECC,
   WP_PS_DGM_PHYSICAL_READ,
   WP_PS_DGM_FIRST_READ,
   WP_PS_DGM_READ,
   WP_PS_DGM_READ_SHIFT,
   WP_PS_DGM_ISOLATE_LATCH,
   WP_PS_DGM_FAST_READ_CMD,
   WP_PS_DGM_FTL_BWL_READ,
   WP_PS_DGM_INFRA_BWL_READ,
   WP_PS_DGM_BES,
   WP_PS_DGM_BES_CALC_NEW_SHIFT,
   WP_PS_DGM_BES_NEW_SHIFTS,
   WP_PS_DGM_CHANGE_C6_PREREAD,
   WP_PS_DGM_CHANGE_C6_FLASHFILL,
   WP_PS_DGM_AIPR_SET_FEATURE,
   WP_PS_DGM_SIPR_SUBMIT_REQUESTS,
   WP_PS_DGM_RUN_SIPR_READ,
   WP_PS_DGM_SIPR_FAST_RD_CMD,
   WP_PS_DGM_ENDIS_SIPR_FEATURE,
   WP_PS_DGM_BER_SHIFT,
   WP_PS_DGM_FLASHWRITE,
   WP_PS_DGM_VPGMU,
   WP_PS_DGM_ERASE,
   WP_PS_PMP_SENSE_AHEAD,
   WP_PS_MP32_ENABLE_DISABLE,
   WP_PS_DGM_CHANGE_PREPROG,
   WP_PS_DGM_TLC_ERASE,
   WP_PS_DGM_SUSPEND_ERASE,
   WP_PS_DGM_SUSPEND_ERASE_STATE,
   WP_PS_DGM_SUSPEND_ERASE_READ,
   WP_PS_DGM_READ_TRANSFER,
   WP_PS_DGM_READ_SENSE,







   WP_PS_FLGP_MARK_START,
   WP_PS_FLGP_FTL_MSG_PART1,
   WP_PS_FLGP_FTL_MSG_PART2,
   WP_PS_FLGP_FOUND_NER,
   WP_PS_FLGP_FOUND_NP1,
   WP_PS_FLGP_FOUND_LMW,
   WP_PS_FLGP_FOUND_LGW,
   WP_PS_FLGP_FOUND_TER,
   WP_PS_FLGP_FOUND_FER,
   WP_PS_FLGP_NER_BINARY_DMC_RESULT,
   WP_PS_FLGP_LGW_BACKWARD_BER_RESULT,
   WP_PS_FLGP_TER_FORWARD_DMC_RESULT,
   WP_PS_FLGP_SEND_FTL_FINAL_RESULTS,
   WP_PS_FLGP_SEND_DMC_REQ,
   WP_PS_FLGP_SEND_BER_REQ,
   WP_PS_FLGP_SEND_DMC_REQ_FAIL,
   WP_PS_FLGP_SEND_BER_REQ_FAIL,
   WP_PS_FLGP_SLC_TLC_VBA,
   WP_PS_FLGP_TLC_SLC_VBA,
   WP_PS_FLGP_VBA_FIRST_FMU,
   WP_PS_FLGP_VBA_LAST_FMU,
   WP_PS_FLGP_MIDDLE_WL_VBA,
   WP_PS_FLGP_NEXT_WL_VBA,
   WP_PS_FLGP_PREV_WL_VBA,
   WP_PS_FLGP_NEXT_FMU_VBA,
   WP_PS_FLGP_PREV_FMU_VBA,
   WP_PS_FLGP_LGW_MB_RESULT,
   WP_PS_FLGP_LGW_PS_RESULT,
   WP_PS_FLGP_FER_MB_RESULT,
   WP_PS_FLGP_FER_PS_RESULT,
   WP_PS_FLGP_MORPHEUS_PARAM,
   WP_PS_FLGP_TED_ZONE_IDX,
   WP_PS_FLGP_SHIFT_CHECK,
   WP_PS_FLGP_BES5,
   WP_PS_FLGP_MARK_END,


   WP_PS_OTG_SEED_SD,
   WP_PS_OTG_SEED_SR,
   WP_PS_OTG_SEED,
   WP_PS_OTG_SIPR_SENSE,
   WP_PS_OTG_SET_PARAM,


   WP_PS_ADM_SET_OPEN_BLOCK,


   WP_PS_XOR_ZONE_END,
   WP_PS_XOR_WRITE_PAR_PAGES_DONE,
   WP_PS_XOR_STORE_PAR_REQ,
   WP_PS_XOR_LOAD_PAR_REQ,
   WP_PS_XOR_REBUILD_PAR_START,
   WP_PS_XOR_REBUILD_PAR_END,
   WP_PS_XOR_REBUILD_PAR_NEW_ZONE,
   WP_PS_XOR_RECOVERY_START,
   WP_PS_XOR_RECOVERY_END,
   WP_PS_XOR_ISSUE_CF,
   WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC,
   WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC,
   WP_PS_XOR_RECOVERY_WUC_DETECTED,


   WP_PS_XOR_WRITE_PAR_PAGES_START,
   WP_PS_XOR_SKIP_WRITE_PAR_PAGES,


   WP_PS_THM_TEMP_TICK_REQ_RECEIVED,
   WP_PS_THM_TEMP_INT_REQS,
   WP_PS_THM_INFRA_MEASURED_TEMP,
   WP_PS_THM_DIAG_MEASURED_TEMP,
   WP_PS_THM_TEMP_REQ_START,
   WP_PS_THM_TEMP_REQ_COMPLETED,
   WP_PS_THM_INFRA_FAKE_TEMPCODE,


   WP_PMM_ENTER_NONOP_POWER_STATE,
   WP_PMM_EXIT_NONOP_POWER_STATE,
   WP_PMM_POWER_OFF,


   WP_PS_UEBM_UECC_STRIKE,
   WP_PS_UEBM_RETIRE_BLK,
   WP_PS_UEBM_UECC_ADD_BLKFOUND,
   WP_PS_UEBM_UECC_ADD_FLIPFLOPSET,
   WP_PS_UEBM_UECC_ADD_NEWENTRY,
   WP_PS_UEBM_UECC_ADD_LISTFULL,
   WP_PS_UEBM_UECC_ADD_ERROR,
   WP_PS_UEBM_UECC_REMOVE_FOUNDBLK,
   WP_PS_UEBM_UECC_REMOVE_ERROR,
   WP_PS_UEBM_UECC_FLIPFLOP_RESET,
   WP_PS_UEBM_UECC_FLIPFLOP_ERROR,
   WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT,
   WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE,
   WP_PS_UEBM_UECC_FSWRITE_INPROGRESS,
   WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD,
   WP_PS_UEBM_UECC_FSWRITE_STARTED,
   WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL,
   WP_PS_UEBM_RETIRE_FOUND,
   WP_PS_UEBM_RETIRE_ERROR,
   WP_PS_UEBM_ERASEEH_FOUNDINLIST,
   WP_PS_UEBM_ERASEEH_THRESHOLDREACHED,
   WP_PS_UEBM_ERASEEH_REMOVEFROMLIST,
   WP_PS_UEBM_ERASEEH_ERROR,


   WP_PS_NPARAM_HEALTH_MSG_ACCEPTED,
   WP_PS_NPARAM_INTERNAL_REQS,
   WP_PS_DGM_SET_PARAM,
   WP_PS_DGM_SET_FEATURE,
   WP_PS_OTG_SET_FEATURE,


   WP_PS_BBM_PH_BLOCK_RELINK,
   WP_PS_BBM_RELINK_DATA_UPDATED,
   WP_PS_BBM_RELINK_DATA_FLUSH_START,
   WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED,
   WP_PS_BBM_DECOMM_START,
   WP_PS_BBM_DECOMM_COMPLETED,
   WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED,
   WP_PS_BBM_TRANSLATE_RELINKED_BLK,
   WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK,
   WP_PS_BBM_PROD_MBBT_BOOT_BLOCK,
   WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK,
   WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA,


   WP_PS_SE_START_GBB,
   WP_PS_SE_START_SPARE,
   WP_PS_SE_GET_FLASH_PARAM,
   WP_PS_SE_SET_FLASH_PARAM,
   WP_PS_SE_EXECUTE_SECURE_ERASE,
   WP_PS_SE_FINISHED_REQUEST,
   WP_PS_SE_RECEIVED_BARRIER,
   WP_PS_SE_USE_PREALLOCATED_REQUEST,
   WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS,


   WP_PS_MRPH_USERROM_READ_START,
   WP_PS_MRPH_WL_STRING_UROM_LOOP,
   WP_PS_MRPH_NPDP_USERROM_READ_FAIL,
   WP_PS_MRPH_USERROM_READ_FAIL,
   WP_PS_MRPH_USERROM_READ_END,
   WP_PS_MRPH_WL_STRING_LOOP_FMU,
   WP_PS_MRPH_UROM_LOOP_FMU,
   WP_PS_MRPH_FMU_LOOP_FMU,
   WP_PS_MRPH_FMU_LOOP_COPY,
   WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE,


   WP_PS_IFT_START,
   WP_PS_IFT_END,
   WP_PS_IFT_TEMP_TRIGGER,
   WP_PS_IFT_TEMP_LAST_IFT_UPDATED,
   WP_PS_IFT_ASIC_ZQC_DONE,
   WP_PS_IFT_NAND_ZQC_DONE,
   WP_PS_IFT_SET_TOGGLE_MODE,
   WP_PS_IFT_DCC_DONE,
   WP_PS_IFT_INIT_ALL_DELAYS_TO_0,
   WP_PS_IFT_RT_RDQS_LEFT_EDGE,
   WP_PS_IFT_RT_DQ_LEFT_EDGE,
   WP_PS_IFT_RT_RDQS_RIGHT_EDGE,


   WP_PS_IFT_OPT_ACTIVE,


   WP_PS_SFA_D5_AVOID,
   WP_PS_SFA_5D_AVOID,
   WP_PS_SFA_RESET,
   WP_PS_DO_SF_WITH_READ,






   WP_INFRA_IFS_IN_WRITE_FILE,
   WP_INFRA_IFS_IN_COMPACTION,
   WP_INFRA_IFS_IN_COMPAC_START,
   WP_INFRA_IFS_IN_COMPAC_END,
   WP_INFRA_IFS_IN_BOOTPAGE_UPDATE,
   WP_INFRA_READ_IFS_BOOT_LAST_PAGE,
   WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED,
   WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS,
   WP_INFRA_IFS_CODE_LAST_PAGE,
   WP_INFRA_IFS_IN_HIGH_BER,
   WP_INFRA_IFS_FFU_IN_DL_WRITE,
   WP_INFRA_IFS_FFU_IN_COMMIT_START,

   WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE,
   WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG,
   WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS,
   WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE,
   WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET,
   WP_FADI_DATA_DUMP_MESSAGE_SENT,
   WP_INFRA_FADI_DATA_WRITE_END,
   WP_INFRA_FADI_DATA_WRITE_FAILED,
   WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK,
   WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY,
   WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL,
   WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED,
   WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU,
   WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS,
   WP_INFRA_FADI_DUMP_MANAGER_INIT,
   WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD,
   WP_INFRA_TM_UPDATED_THERMAL_THROTTLING,
   WP_INFRA_TM_UPDATE_NAND_PEAK_TEMP,
   WP_INFRA_TM_UPDATE_NHTEC_PARAM,
   WP_INFRA_TM_COLD_BOOT_UPDATE,
   WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE,
   WP_INFRA_TM_UPDATE_DOEC_PARAM,
   WP_INFRA_FADI_BLOCKS_REGION,
   WP_INFRA_READ_REGION_LAST_PAGE,
   WP_INFRA_WRITE_REGION_LAST_PAGE,
   WP_INFRA_BLOCK_ISOLATION,
   WP_INFRA_INIT,





   WP_SEC_NEW_COMMAND_STARTED,
   WP_SEC_COMMAND_FINISHED,
   WP_SEC_TCG_SESSION_STARTED,
   WP_SEC_TCG_SESSION_ABORTED,
   WP_SEC_RESET_HANDLING,
   WP_SEC_FS_READ,
   WP_SEC_FS_WRITE,
   WP_SEC_FS_COMMIT_TRANSACTION,
   WP_SEC_FS_REVERT_TRANSACTION,
   WP_SEC_FS_CLEANUP,
   WP_SEC_FTL_HOSTLESS_READ,
   WP_SEC_FTL_WRITE_BUFFER,
   WP_SEC_FTL_DEALLOCATE,
   WP_SEC_FTL_FORMAT_NVM,
   WP_SEC_FE_TRANSFER_REQUEST,
   WP_SEC_FE_TRANSFER_RESPONSE,




   WP_EI_UECC_OCCURRED,
   WP_EI_RLC_UECC_SCAN,
   WP_EI_RLC_UECC_TRANSLATION,
   WP_EI_UECC_HOSTLESS_READ,
   WP_EI_UECC_INJECT_UECC_TO_HEADER,
   WP_EI_UECC_RMW,
   WP_EI_MB_REVIVE,
   WP_EI_JB_REVIVE,
   WP_EI_INJECTION,




   WP_NPDP_DCVD_ROM,




   WP_FE_PMM_WAKEUP_REASON,




   WP_FWR_CMD_COMPLETION,
   WP_FWR_ASYNC_REPORT_EVENT_TO_HOST,
   WP_FWR_CS_NOTIFY_CS_COMPLETED,
   WP_FWR_CS_NOTIFY_USERS,
   WP_FWR_DATA_TRANSFER,
   WP_FWR_FLUSH_FE_END,
   WP_FWR_FLUSH_FE_START,
   WP_FWR_FLUSH_FTL,
   WP_FWR_FORMAT_AFTER_ABORT_REQUEST,
   WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK,
   WP_FWR_FORMAT_AFTER_FTL,
   WP_FWR_FORMAT_BEFORE_ABORT_REQUEST,
   WP_FWR_FORMAT_BEFORE_FTL,
   WP_FWR_FORMAT_ENHANCED_CASE1,
   WP_FWR_FORMAT_ENHANCED_CASE2,
   WP_FWR_FORMAT_UPDATE_LOG_BLOCKS,
   WP_FWR_GETLOG_COMMAND,
   WP_FWR_GETLOG_SMART,
   WP_FWR_IDENTIFY_COMMAND,
   WP_FWR_IO_COMMANDS_EXEPTION_Q,
   WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS,
   WP_FWR_LOG_CS_SEND_BARRIER,
   WP_FWR_LOG_MANAGE,
   WP_FWR_LOG_PENDING_CS_START,
   WP_FWR_MNT_BML_RECOVERY,
   WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL,
   WP_FWR_PS_BRM_HANDLE_BARRIER_REQ,
   WP_FWR_PS_BRM_IS_CS,
   WP_FWR_PS_DGM_HANDLE_BARRIER,
   WP_FWR_PS_MQD_HANDLE_BARRIER_REQ,
   WP_FWR_PS_OTG_RELEASE_ON_COMPLETION,
   WP_FWR_READ_ARRIVED_TO_FTL,
   WP_FWR_RLA_ARRIVED_TO_FTL,
   WP_FWR_RLA_TRANSFER_DONE_TO_FTL,

   WP_FWR_RESET_DETAILES,
   WP_FWR_SAT_CONSOLIDATION_ACTIVE,
   WP_FWR_SET_FEATURES_COMMAND,
   WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL,
   WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL,
   WP_FWR_SET_PMM_ALL_READY,
   WP_FWR_SET_PMM_BEFORE_INFRA,
   WP_FWR_SET_PMM_FE_ACK,
   WP_FWR_SET_PMM_FTL_ACK,
   WP_FWR_SET_PMM_IFS_ACK,
   WP_FWR_SET_PMM_IN_FTL,
   WP_FWR_SET_PMM_IN_IFS,
   WP_FWR_SET_PMM_IN_PS,
   WP_FWR_SET_PMM_IN_SECURITY,
   WP_FWR_SET_PMM_PS_ACK,
   WP_FWR_SET_PMM_SECURITY_ACK,
   WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL,
   WP_FWR_DEALLOC_IN_FE,
   WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK,
   WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC,
   WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE,
   WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE,
   WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE,

   WP_FWR_COMPARE_VALIDATION_STAGE,
   WP_FWR_COMPARE_END,
   WP_FWR_COMPARE_READ_FROM_FLASH_STAGE,
   WP_FWR_COMPARE_READ_4K_STAGE,

   WP_FWR_WRITE_IN_FTL_GENERAL,
   WP_FWR_WRITE_IN_FTL_RMW_STAGE,
   WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE,

   WP_FWR_WUC_FE,
   WP_FWR_WUC_FTL,
   WP_FWR_WUC_CALL_FROM_FTL_STAGE,
   WP_FWR_WRITE_ZEROS_VALIDATION_FE,
   WP_FWR_WRITE_ZEROS_DIVISION,
   WP_FWR_WRITE_ZEROS_READ,
   WP_FWR_WRITE_ZEROS_READ_4K,

   WP_FWR_DOWNLOAD_FFU_MAIN_LOOP,
   WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END,
   WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS,
   WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP,

   WP_FWR_MOUNT_START,
   WP_FWR_GSD_MOUNT_START,
   WP_FWR_UGSD_MOUNT_START,
   WP_FWR_MOUNT_BEFORE_ENABLE_WR,
   WP_FWR_AFTER_MOUNT_COMPLITION,

   WP_FWR_SHUTDOWN_STATE_START,
   WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR,
   WP_FWR_SHUTDOWN_STATE_REQ_CS,
   WP_FWR_RESET,
   WP_FWR_BML_RELEASE_BLOCK,
   WP_FWR_FE_HANDLER_FORMAT_NVME,
   WP_FWR_FE_NVME_FORMAT_CB,
   WP_FWR_FE_NVME_NCR_CHST_UPDATE,
   WP_FWR_FE_NVME_NCR_CC_EVENT_IS_SEND,
   WP_FWR_FTL_CMD_FNVM_FORMAT_START,
   WP_FWR_FTL_CMD_FNVM_FORMAT_END,
   WP_FWR_FE_FORMAT_PROCESS_END,
   WP_FWR_LOG_FIRST_MOUNT,

   WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC,
   WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC,
   WP_FWR_LOG_WRITING_LOG_BLOCK,
   WP_FWR_PS_XOR_STORE_PAR_REQ,
   WP_FWR_XORM_COMPACTION_START,
   WP_FWR_XROM_COMPACTION_IN_PROCESS,
   WP_FWR_XORM_COMPACTION_END,
   WP_FWR_MVP_PARTITION_FREE_SPACE,
   WP_FWR_LOG_WRITE_LOG_COPY,
   WP_FWR_LOG_DEBUG_ALLOC,

   WP_FWR_RLC_BRLC_COPY_STEP,
   WP_FWR_FTL_RSQ_RLC_REQ_REMOVED,
   WP_FWR_LOG_WRITE_REQ,
   WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK,
   WP_FWR_INFRA_IFS_STATUS_ERROR,
   WP_FWR_INFRA_IFS_STATUS_WRITE,
   WP_FWR_FNVM_ABORT_ONGOING_FORMAT,
   WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS,
   WP_FWR_INFRA_FFU_WRITE_PARAMETERS,
   WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS,
   WP_FWR_MNT_JMB_SWAP_MB,
   WP_FWR_INFRA_READ_SCRUB_START,
   WP_FWR_FTL_HWD_ROUTING_UPDATE_STATE,

   WP_FE_PMM_IDLETIMER_EXPIRED,

   WP_FWR_PMM_STARTPST_DISABLE_TIMER,
   WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA,
   WP_FWR_PMM_INFRA_ISSUEPST,
   WP_FWR_PMM_ISSUEPST_NO_PREV_REQ,
   WP_FWR_PMM_ISSUEPST_TERMAL,
   WP_FWR_PMM_ISSUEPST_THROTTLING,
   WP_FWR_PMM_ISSUEPST_FE_PARAM,
   WP_FWR_PMM_EXECUTEPST_FTL,
   WP_FWR_PMM_EXECUTEPST_SEC,
   WP_FWR_PMM_EXECUTEPST_PS,
   WP_FWR_PMM_EXECUTEPST_PCU,
   WP_FWR_PMM_EXECUTEPST_AON,
   WP_FWR_PMM_AON_ENTER_LOW_POWER,
   WP_FWR_PS_EH_COPY_HANDLER,
   WP_FWR_PS_EH_ERROR_LOG_FLUSH,
   WP_FWR_PS_EH_PF_EF_ISR,
   WP_FWR_PS_DGM_GSD_HALT,
   WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION,
   WP_FWR_PMM_INFRA_ISSUEPST_END,
   WP_FWR_PMM_ABORT_END,
   WP_FWR_PMM_END,
   WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO,


   WP_FWR_PS_WRITE_SLC_RND_USER_DATA,
   WP_FWR_PS_WRITE_TLC_RND_USER_DATA,
   WP_FWR_PS_WRITE_CONTROL_DATA,
   WP_FWR_PS_WRITE_FS_DATA,
   WP_FWR_PS_ERASE_SLC_RND_USER_DATA,
   WP_FWR_PS_ERASE_TLC_RND_USER_DATA,
   WP_FWR_PS_ERASE_FS_DATA,
   WP_FWR_PS_READ_SLC_RND_USER_DATA,
   WP_FWR_PS_READ_TLC_RND_USER_DATA,
   WP_FWR_PS_READ_CONTROL_DATA,
   WP_FWR_PS_READ_FS_DATA,


   WP_FWR_PS_EH_READ_RETRY_CFH,
   WP_FWR_PS_BES5_PARAMS,
   WP_FWR_PS_BES7_PARAMS,
   WP_FWR_PS_ERASE_RETIRED_BLOCK,
   WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE,
   WP_FWR_PS_EH_END,
   WP_FWR_PS_EH_READ_RETRY_SB1,
   WP_FWR_PS_EH_READ_RETRY_SB2,
   WP_FWR_PS_EH_RF_ISR,


   WP_SGD_DETECTION_START,
   WP_SGD_DETECTION_END,
   WP_SGD_DETECTION_FAIL,
   WP_SGD_CORRECTION_START,
   WP_SGD_CORRECTION_END,
   WP_SGD_CORRECTION_FAIL,

   WP_MNT_MBM_META_DATA_PHY_BLOCK,
   WP_MNT_MBM_UGSD_NEW_MB,
   WP_MNT_MBM_UGSD_RECOVERY_NEW_MB,
   WP_MNT_MBM_UGSD_RECOVERY_OLD_MB,
   WP_MNT_MBM_UGSD_RECOVERY_ERASE,
   WP_MNT_MBM_UGSD_RECOVERY_FLASH_FILL,


   WP_QUITPROG_DATA,


   WP_PS_IFT_WT_WDQS_LEFT_EDGE,
   WP_PS_IFT_WT_DQ_LEFT_EDGE,
   WP_PS_IFT_WT_WDQS_RIGHT_EDGE,
   WP_PS_IFT_RT_OPT_TEST_LOG,
   WP_PS_IFT_WT_OPT_TEST_LOG,


   WP_PS_IFT_NAND_ZQC_START,
   WP_PS_IFT_ASIC_ZQC_START,
   WP_PS_IFT_DQS_LEFT_EDGE,
   WP_PS_IFT_DQS_RIGHT_EDGE,
   WP_PS_IFT_DQ_LEFT_EDGE,
   WP_PS_IFT_OPT_TEST_LOG,
   WP_PS_IFT_INIT_ALL_DELAYS,
   WP_PS_IFT_RT_SKIP,
   WP_PS_IFT_RT_START,
   WP_PS_IFT_RT_END,
   WP_PS_IFT_WT_SKIP,
   WP_PS_IFT_WT_START,
   WP_PS_IFT_WT_END,

   WP_PS_IFT_DIE_RESET,
   WP_PS_IFT_DCC_START,


   WP_DC_ETT_TERMAL_START,
   WP_DC_ETT_TERMAL_STOP,
   WP_DC_ETT_FE_START,
   WP_DC_ETT_FE_STARTED,
   WP_DC_ETT_FE_START_PIPELINE,
   WP_DC_ETT_FE_NON_OP,
   WP_DC_ETT_FE_OP,
   WP_DC_ETT_FE_NON_OP_PIPELINE,
   WP_DC_ETT_FE_STOP,
   WP_DC_ETT_FE_STOP_PIPELINE,
   WP_DC_ETT_FE_STOPPED,




   WP_PS_DGM_1P0V,
   WP_PS_DGM_1P0V_COUNTERS,
   WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE,





   WP_PS_SENSE_AVOID,
   WP_PS_FTL_PHY_ERASE_REQ_BLOCK,
   WP_PS_RS_COUNTERS,
   WP_PS_CVD_TCO_CMD33,
   WP_PS_VALIDATE_CMD_FF,
   WP_PS_VALIDATE_CMD_FB,


   WP_PS_REH_NON_CACHE_MODE,
   WP_PS_DGM_BES_TEST_READ_CMD,
   WP_PS_EF_10_ELC_LOOP_COUNTER,


   WP_MTM_SRC_VC_ZERO,
   WP_MTM_64K_RUN,
   WP_MTM_START_RELOCATION,



   WP_BKOPS_RELOCATION_COMPLETE,


   WP_MVP_CAL_SCALE_QUOTA,
   WP_MVP_EMERGENCY_GC,
   WP_MVP_EMERGENCY_GC2,
   WP_MVP_SBR_RLC_START,
   WP_MVP_HOST_QUOTA_CONSUME,
   WP_MVP_HOST_QUOTA_CONSUME_I,
   WP_MVP_GC_QUOTA_CONSUME1,
   WP_MVP_GC_QUOTA_CONSUME2,
   WP_MVP_GC_QUOTA_CONSUME_I,
   WP_MVP_NEED_STOP_RLC_1,
   WP_MVP_NEED_STOP_RLC_2,
   WP_MVP_STOP_DONE_RLC,
   WP_MVP_IRLC_TRIGGER,
   WP_MVP_IRLC_SWITCH,
   WP_MVP_IRLC_TERMINATE,


   WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK,
   WP_FTL_RLC_RESUME_USE_SAVED_INFO,
   WP_FTL_RLC_RESUME_CLEAR_INFO,
   WP_FTL_RLC_RESUME_CHANGE_JB,
   WP_FTL_RLC_RESUME_SAVE_CS,


   WP_PS_DGM_DMC_CH,


   WP_PS_RPZ_START,
   WP_PS_RPZ_P0_RESULT_FF,
   WP_PS_RPZ_P0_RESULT_UECC,
   WP_PS_RPZ_P0_RESULT_OK,
   WP_PS_RPZ_P0_RESULT_SLC_ERASE,
   WP_PS_RPZ_P1_RESULT_SLC_ERASE,
   WP_PS_RPZ_P1_RESULT_UECC,





   WP_MNT_UGSD_PAGE0_READ_RESPONSE,
   WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP,
   WP_MNT_MBM_META_DATA_REC,
   WP_MNT_MBM_META_DATA_NO_NEW_REC,
   WP_MNT_MBM_META_DATA_READ_FROM_LIST,
   WP_MNT_MBM_META_DATA_READ_FROM_HEAP,
   WP_MNT_STATE_MOUNT_BKOPS,
   WP_MNT_STATE_MOUNT_INIT_MNT_CB,

   WP_PS_DGM_1P0V_SET_FEATURE,
   WP_PS_DGM_1P0V_CMD,



   WP_PS_SFA_SKIP_SET_FEATURE,
   WP_PS_SFA_SKIP_5D_PREFIX,

   WP_PS_NPARAM_GET_PARAM_EH,


   WP_PS_OTG_AVPGM,




   WP_RPMB_WRITE_COUNTER,
   WP_RPMB_WRITE_STATUS,
   WP_RPMB_UGSD_RECOVERED,
   WP_RPMB_UGSD_LOST,
   WP_FWR_WRITE_RPMB,

#line 1315 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_waypoint.h"
   WP_PS_IRJB_OPENED,
   WP_PS_IRJB_PRE_TRANSLATION,
   WP_PS_IRJB_POST_TRANSLATION,
   WP_PS_IRJB_INV_TRANSLATION,

   WP_PS_XOR_RECOVERY_UNROLLING_VBA,
   WP_PS_XOR_IS_XOR_SUPPORTED,

   WP_PS_REH_MARK_UECC,
   WP_REH_CVD_DUMP_TRIGGER,
   WP_PS_REH_INDICATE_HEADER_BIT_SET,
   WP_PS_REH_FMU_MARK_UECC,
   WP_PS_REH_READ_FAIL_SHIFTS,
   WP_PS_REH_READ_RETRY_SHIFTS,
   WP_PS_REH_DMC_RES,
   WP_PS_REH_SBR_CMD_C2,

   WP_PS_PF_20_INDICATE_GBB_AND_RELINK,
   WP_PS_PF_23_CHECK_STATUS,
   WP_PS_PF_24_COPY_SOURCE_BLK_INFO,
   WP_PS_PF_25_COPY_DESTINATION_BLK_INFO,

   WP_PS_EF_11_NPD_START,
   WP_PS_EF_12_NPD_CHECK,
   WP_PS_EF_13_NPD_CHECK_DONE,

   WP_PS_FLGP_NER_DMC_THRESHOLDS,
   WP_PS_FLGP_TER_DMC_THRESHOLDS,
   WP_PS_FLGP_LGW_BER_THRESHOLDS,
   WP_PS_CVD_APPLY_WL_COMP,

   WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION,
   WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE,



   WP_PS_DGM_32K_WRITE,


   WP_PS_XOR_STORE_PAR_START_REQ,
   WP_PS_XOR_PAR_LOAD_FROM_DRAM_REQ,

   WP_PS_APPLY_WL_DECOMPENSATION,


   WP_PS_MRPH_MT_VERSION,



   N_WAYPOINTS,
   MAX_WAYPOINT = 0x7FFFFFFF,
} WaypointEventKey_e;

#line 1379 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_waypoint.h"
__inline static  void RegisterAllWaypoints(void)
{



   RegisterWaypoint(WP_FIRST_MOUNT_START, "WP_FIRST_MOUNT_START") ;
   RegisterWaypoint(WP_FIRST_MOUNT_END, "WP_FIRST_MOUNT_END") ;

   RegisterWaypoint(WP_MNT_STATE_START, "WP_MNT_STATE_START") ;
   RegisterWaypoint(WP_MNT_STATE_HANDLE_LOG, "WP_MNT_STATE_HANDLE_LOG") ;
   RegisterWaypoint(WP_MNT_STATE_READONLY, "WP_MNT_STATE_READONLY") ;
   RegisterWaypoint(WP_MNT_STATE_NOTIFY_PS, "WP_MNT_STATE_NOTIFY_PS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_BML, "WP_MNT_STATE_MOUNT_BML") ;
   RegisterWaypoint(WP_MNT_STATE_SEND_DEVICE_HEALTH, "WP_MNT_STATE_SEND_DEVICE_HEALTH") ;
   RegisterWaypoint(WP_MNT_STATE_CHECK_GSD_FLAG, "WP_MNT_STATE_CHECK_GSD_FLAG") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_OBM, "WP_MNT_STATE_GSD_MOUNT_OBM") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_MTM, "WP_MNT_STATE_GSD_MOUNT_MTM") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_SAT, "WP_MNT_STATE_GSD_MOUNT_SAT") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_MVP, "WP_MNT_STATE_GSD_MOUNT_MVP") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_PEM, "WP_MNT_STATE_GSD_MOUNT_PEM") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_RSQ, "WP_MNT_STATE_GSD_MOUNT_RSQ") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_RS, "WP_MNT_STATE_GSD_MOUNT_RS") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_LOAD_XOR, "WP_MNT_STATE_GSD_LOAD_XOR") ;
   RegisterWaypoint(WP_MNT_STATE_DR_CHECK_REQ, "WP_MNT_STATE_DR_CHECK_REQ") ;
   RegisterWaypoint(WP_MNT_STATE_ENABLE_READ, "WP_MNT_STATE_ENABLE_READ") ;
   RegisterWaypoint(WP_MNT_STATE_OPBS_REBUILD_XOR_PAR, "WP_MNT_STATE_OPBS_REBUILD_XOR_PAR") ;
   RegisterWaypoint(WP_MNT_STATE_OPBS_BRLC, "WP_MNT_STATE_OPBS_BRLC") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_HWD, "WP_MNT_STATE_MOUNT_HWD") ;
   RegisterWaypoint(WP_MNT_STATE_CONTROL_SYNC, "WP_MNT_STATE_CONTROL_SYNC") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_BML_RECOVERY, "WP_MNT_STATE_UGSD_BML_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_OBM_RECOVERY, "WP_MNT_STATE_UGSD_OBM_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_EXTRACT_METADATA, "WP_MNT_STATE_UGSD_EXTRACT_METADATA") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP, "WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP, "WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD, "WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP, "WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP, "WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP, "WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_MVP, "WP_MNT_STATE_UGSD_MOUNT_MVP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_RSQ, "WP_MNT_STATE_UGSD_MOUNT_RSQ") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_RS, "WP_MNT_STATE_UGSD_MOUNT_RS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_COMPLETE, "WP_MNT_STATE_MOUNT_COMPLETE") ;
   RegisterWaypoint(WP_MNT_HANDLE_DRD_RESPONSE, "WP_MNT_HANDLE_DRD_RESPONSE") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESPONSE, "WP_MNT_HANDLE_FLGP_RESPONSE") ;
   RegisterWaypoint(WP_MNT_HANDLE_DRD_REQUEST, "WP_MNT_HANDLE_DRD_REQUEST") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_FNVM, "WP_MNT_STATE_GSD_MOUNT_FNVM") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_XORM, "WP_MNT_STATE_MOUNT_XORM") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_RLC, "WP_MNT_STATE_MOUNT_RLC") ;
   RegisterWaypoint(WP_MNT_SF_HOST_RECOVERY, "WP_MNT_SF_HOST_RECOVERY") ;
   RegisterWaypoint(WP_MNT_SF_HOST_RECOVERY_DONE, "WP_MNT_SF_HOST_RECOVERY_DONE") ;
   RegisterWaypoint(WP_MNT_PERFORM_BRLC, "WP_MNT_PERFORM_BRLC") ;
   RegisterWaypoint(WP_MNT_ALIGN_HOST_BLOCKS_FER, "WP_MNT_ALIGN_HOST_BLOCKS_FER") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_SMART, "WP_MNT_STATE_MOUNT_SMART") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_LGW, "WP_MNT_HANDLE_FLGP_RESP_WA_LGW") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_FER, "WP_MNT_HANDLE_FLGP_RESP_WA_FER") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_DIFF, "WP_MNT_HANDLE_FLGP_RESP_WA_DIFF") ;
   RegisterWaypoint(WP_MNT_UGSD_HAS_WA, "WP_MNT_UGSD_HAS_WA") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_END, "WP_MNT_HANDLE_FLGP_RESP_END") ;
   RegisterWaypoint(WP_MNT_COMBINE_FLGP_RES, "WP_MNT_COMBINE_FLGP_RES") ;
   RegisterWaypoint(WP_MNT_ALGN_FLGP_LGW_TO_LOG, "WP_MNT_ALGN_FLGP_LGW_TO_LOG") ;
   RegisterWaypoint(WP_MNT_DALOC_SENT_RD, "WP_MNT_DALOC_SENT_RD") ;
   RegisterWaypoint(WP_MNT_DALOC_READ_DONE, "WP_MNT_DALOC_READ_DONE") ;
   RegisterWaypoint(WP_MNT_UGSD_HOST_RD_RES, "WP_MNT_UGSD_HOST_RD_RES") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_FLAGS, "WP_MNT_HOST_RECOVERY_FLAGS") ;
   RegisterWaypoint(WA_MNT_UGSD_MARK_4_LATER, "WA_MNT_UGSD_MARK_4_LATER") ;
   RegisterWaypoint(WP_MNT_MOUNT_START, "WP_MNT_MOUNT_START") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE, "WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE") ;
   RegisterWaypoint(WP_MNT_SET_LAST_VALID_JBA, "WP_MNT_SET_LAST_VALID_JBA") ;
   RegisterWaypoint(WP_MNT_CALCULATE_LGW_JBA, "WP_MNT_CALCULATE_LGW_JBA") ;
   RegisterWaypoint(WP_MNT_EXTRACT_FFLBA, "WP_MNT_EXTRACT_FFLBA") ;
   RegisterWaypoint(WP_MNT_INIT_HEADER_PTRS_LIST, "WP_MNT_INIT_HEADER_PTRS_LIST") ;
   RegisterWaypoint(WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK, "WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_AFTER_LGW, "WP_MNT_HOST_RECOVERY_READ_AFTER_LGW") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_START, "WP_MNT_HOST_RECOVERY_READ_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB, "WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_STATUS, "WP_MNT_HOST_RECOVERY_READ_STATUS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START, "WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS, "WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_START, "WP_MNT_HOST_RECOVERY_PROCESS_START") ;
   RegisterWaypoint(WP_MNT_UGSD_CHECK_CS_NEEDED, "WP_MNT_UGSD_CHECK_CS_NEEDED") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID, "WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK, "WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE, "WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_START, "WP_MNT_HOST_RECOVERY_HANDLER_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_PROCESS, "WP_MNT_HOST_RECOVERY_HANDLER_PROCESS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED, "WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_DALOC, "WP_MNT_HOST_RECOVERY_HANDLE_DALOC") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_DALOC_CALLBACK, "WP_MNT_HOST_RECOVERY_DALOC_CALLBACK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_START, "WP_MNT_HOST_RECOVERY_START") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG, "WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG") ;
   RegisterWaypoint(WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED, "WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED") ;
   RegisterWaypoint(WP_MNT_VALIDATE_B2B_DATA, "WP_MNT_VALIDATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_INVALIDATE_LATE_B2B_DATA, "WP_MNT_INVALIDATE_LATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_INVALIDATE_NOW_B2B_DATA, "WP_MNT_INVALIDATE_NOW_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_DELAY_INVALIDATE_B2B_DATA, "WP_MNT_DELAY_INVALIDATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE, "WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE") ;
   RegisterWaypoint(WP_MNT_USE_B2B_DATA, "WP_MNT_USE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_SYNC_ALL_VC, "WP_MNT_STATE_MOUNT_SYNC_ALL_VC") ;
   RegisterWaypoint(WP_MNT_STATE_LOAD_ON_BEGINNING_OF_ZONE, "WP_MNT_STATE_LOAD_ON_BEGINNING_OF_ZONE") ;
   RegisterWaypoint(WP_MNT_NAND_DEFECT, "WP_MNT_NAND_DEFECT") ;
   RegisterWaypoint(WP_MNT_HOST_FLGP_BITMAP_FMU, "WP_MNT_HOST_FLGP_BITMAP_FMU") ;

   RegisterWaypoint(WP_MNT_UGSD_PAGE0_READ_RESPONSE, "WP_MNT_UGSD_PAGE0_READ_RESPONSE") ;
   RegisterWaypoint(WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP, "WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP") ;

   RegisterWaypoint(WP_MNT_MBM_META_DATA_REC, "WP_MNT_MBM_META_DATA_REC") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_NO_NEW_REC, "WP_MNT_MBM_META_DATA_NO_NEW_REC") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_READ_FROM_LIST, "WP_MNT_MBM_META_DATA_READ_FROM_LIST") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_READ_FROM_HEAP, "WP_MNT_MBM_META_DATA_READ_FROM_HEAP") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_BKOPS, "WP_MNT_STATE_MOUNT_BKOPS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_INIT_MNT_CB, "WP_MNT_STATE_MOUNT_INIT_MNT_CB") ;


   RegisterWaypoint(WP_HOST_WRITE_COMPLETE, "WP_HOST_WRITE_COMPLETE") ;
   RegisterWaypoint(WP_HOST_READ_COMPLETE, "WP_HOST_READ_COMPLETE") ;
   RegisterWaypoint(WP_SAT_START_CONSOLIDATION, "WP_SAT_START_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_ENDED_CONSOLIDATION, "WP_SAT_ENDED_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_ADDING_MSET, "WP_SAT_CONSOLIDATION_ADDING_MSET") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_REUSING_MSET, "WP_SAT_CONSOLIDATION_REUSING_MSET") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_SENT_ALL_READS, "WP_SAT_CONSOLIDATION_SENT_ALL_READS") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_START_COPY_BACK, "WP_SAT_CONSOLIDATION_START_COPY_BACK") ;
   RegisterWaypoint(WP_CAT_ADDED_MSET, "WP_CAT_ADDED_MSET") ;
   RegisterWaypoint(WP_CAT_REMOVED_MSET, "WP_CAT_REMOVED_MSET") ;
   RegisterWaypoint(WP_CUQ_ADDED_ENTRY, "WP_CUQ_ADDED_ENTRY") ;
   RegisterWaypoint(WP_CUQ_REMOVED_ENTRY, "WP_CUQ_REMOVED_ENTRY") ;
   RegisterWaypoint(WP_SAT_WRITE_ENTRY, "WP_SAT_WRITE_ENTRY") ;
   RegisterWaypoint(WP_SAT_UPDATE_VC, "WP_SAT_UPDATE_VC") ;
   RegisterWaypoint(WP_SAT_SEND_CONTROL_READ, "WP_SAT_SEND_CONTROL_READ") ;
   RegisterWaypoint(WP_SAT_PARTIAL_RESET_COMPLETE, "WP_SAT_PARTIAL_RESET_COMPLETE") ;
   RegisterWaypoint(WP_SAT_CANCELED_CONSOLIDATION, "WP_SAT_CANCELED_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_STARTED_DEALLOCATE, "WP_SAT_STARTED_DEALLOCATE") ;
   RegisterWaypoint(WP_SAT_UECC_ON_CONTROL_READ, "WP_SAT_UECC_ON_CONTROL_READ") ;
   RegisterWaypoint(WP_SAT_UNITTEST_CALLBACK, "WP_SAT_UNITTEST_CALLBACK") ;
   RegisterWaypoint(WP_CAT_SLOT_DETACHED, "WP_CAT_SLOT_DETACHED") ;
   RegisterWaypoint(WP_CAT_SLOT_ATTACHED, "WP_CAT_SLOT_ATTACHED") ;
   RegisterWaypoint(WP_SATRRACKING_JB_ALLOC, "WP_SATRRACKING_JB_ALLOC") ;
   RegisterWaypoint(WP_SAT_TRANSLATE_AFTER_CALLBACK, "WP_SAT_TRANSLATE_AFTER_CALLBACK") ;
   RegisterWaypoint(WP_DST_VC_CHECK_FINISHED, "WP_DST_VC_CHECK_FINISHED") ;
   RegisterWaypoint(WP_LOG_READ_LOG_COPIES, "WP_LOG_READ_LOG_COPIES") ;
   RegisterWaypoint(WP_LOG_DECIDE_ACTIVE_COPY, "WP_LOG_DECIDE_ACTIVE_COPY") ;
   RegisterWaypoint(WP_LOG_READ_ACTIVE_LOG, "WP_LOG_READ_ACTIVE_LOG") ;
   RegisterWaypoint(WP_LOG_CONTROL_SYNC_REQUESTED, "WP_LOG_CONTROL_SYNC_REQUESTED") ;
   RegisterWaypoint(WP_LOG_CONTROL_SYNC_IN_PROCESS, "WP_LOG_CONTROL_SYNC_IN_PROCESS") ;
   RegisterWaypoint(WP_LOG_CHECK_FOR_UECC, "WP_LOG_CHECK_FOR_UECC") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_COPY, "WP_LOG_GO_BACK_ONE_COPY") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_ENTRY, "WP_LOG_GO_BACK_ONE_ENTRY") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_BLOCK, "WP_LOG_GO_BACK_ONE_BLOCK") ;
   RegisterWaypoint(WP_LOG_REPLACE_BLOCK, "WP_LOG_REPLACE_BLOCK") ;
   RegisterWaypoint(WP_LOG_ALLOC_NEW, "WP_LOG_ALLOC_NEW") ;
   RegisterWaypoint(WP_LOG_MOUNT_COMPLETE, "WP_LOG_MOUNT_COMPLETE") ;
   RegisterWaypoint(WP_LOG_WRITING_LOG_BLOCK, "WP_LOG_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_LOG_JUMBO_BLOCK_WL, "WP_LOG_JUMBO_BLOCK_WL") ;

   RegisterWaypoint(WP_BKOPS_STARTED, "WP_BKOPS_STARTED") ;
   RegisterWaypoint(WP_BKOPS_COMPLETED, "WP_BKOPS_COMPLETED") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_PROCESS_SAT, "WP_BKOPS_HANDLER_PROCESS_SAT") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_RELOCATION, "WP_BKOPS_HANDLER_RELOCATION") ;
   RegisterWaypoint(WP_BKOPS_LOAD_MSETS_HANDLER_START, "WP_BKOPS_LOAD_MSETS_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_LOAD_MSETS_HANDLER_END, "WP_BKOPS_LOAD_MSETS_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_RS_HANDLER_START, "WP_BKOPS_RS_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_RS_HANDLER_END, "WP_BKOPS_RS_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_MTM_HANDLER_START, "WP_BKOPS_MTM_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_MTM_HANDLER_END, "WP_BKOPS_MTM_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_SAT_HANDLER_START, "WP_BKOPS_SAT_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_SAT_HANDLER_END, "WP_BKOPS_SAT_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_HANDLER_START, "WP_BKOPS_RELOCATION_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_HANDLER_END, "WP_BKOPS_RELOCATION_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_MAIN_LOOP_HANDLER_START, "WP_BKOPS_MAIN_LOOP_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_MAIN_LOOP_HANDLER_END, "WP_BKOPS_MAIN_LOOP_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS, "WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS") ;

   RegisterWaypoint(WP_MTM_WINFW_TEST, "WP_MTM_WINFW_TEST") ;
   RegisterWaypoint(WP_MTM_ALLOCATE_BLOCK, "WP_MTM_ALLOCATE_BLOCK") ;
   RegisterWaypoint(WP_MTM_CLOSE_BLOCK, "WP_MTM_CLOSE_BLOCK") ;
   RegisterWaypoint(WP_MTM_RELEASE_BLOCK, "WP_MTM_RELEASE_BLOCK") ;
   RegisterWaypoint(WP_MTM_STARTED_GC, "WP_MTM_STARTED_GC") ;
   RegisterWaypoint(WP_MTM_GC_COMPLETE, "WP_MTM_GC_COMPLETE") ;
   RegisterWaypoint(WP_MTM_WRITE_PART, "WP_MTM_WRITE_PART") ;
   RegisterWaypoint(WP_MTM_VC_UPDATE, "WP_MTM_VC_UPDATE") ;
   RegisterWaypoint(WP_MTM_CHECK_BLOCK_STUCK_START, "WP_MTM_CHECK_BLOCK_STUCK_START") ;
   RegisterWaypoint(WP_MTM_CHECK_BLOCK_STUCK_FINISH, "WP_MTM_CHECK_BLOCK_STUCK_FINISH") ;
   RegisterWaypoint(WP_MTM_PROCESS_GC, "WP_MTM_PROCESS_GC") ;
   RegisterWaypoint(WP_MTM_SRC_VC_ZERO, "WP_MTM_SRC_VC_ZERO") ;

   RegisterWaypoint(WP_MTM_64K_RUN, "WP_MTM_64K_RUN") ;

   RegisterWaypoint(WP_FTL_MTM_JB_VBA, "WP_FTL_MTM_JB_VBA") ;

   RegisterWaypoint(WP_PSR_CONTROL_READ_VBA, "WP_PSR_CONTROL_READ_VBA") ;
   RegisterWaypoint(WP_PSR_SET_OPEN_BLOCK, "WP_PSR_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_PSR_RD_RMW_VBA, "WP_PSR_RD_RMW_VBA") ;
   RegisterWaypoint(WP_PSR_ERASE_META_BLOCK, "WP_PSR_ERASE_META_BLOCK") ;
   RegisterWaypoint(WP_PSR_ERASE_DIE_BLOCK, "WP_PSR_ERASE_DIE_BLOCK") ;
   RegisterWaypoint(WP_PSR_FLASHFILL_META_BLOCK, "WP_PSR_FLASHFILL_META_BLOCK") ;
   RegisterWaypoint(WP_SAT_SKIP_DIRTY_MSET, "WP_SAT_SKIP_DIRTY_MSET") ;





   RegisterWaypoint(WP_FTL_STATS, "WP_FTL_STATS") ;





   RegisterWaypoint(WP_FE_COMPARE_START, "WP_FE_COMPARE_START") ;
   RegisterWaypoint(WP_FE_COMPARE_END, "WP_FE_COMPARE_END") ;
   RegisterWaypoint(WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED, "WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED") ;
   RegisterWaypoint(WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED, "WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED") ;
   RegisterWaypoint(WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH, "WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH") ;


   RegisterWaypoint(WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE, "WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE") ;


   RegisterWaypoint(WP_FTL_PEM_PRE_ERASE_BLOCK, "WP_FTL_PEM_PRE_ERASE_BLOCK") ;
   RegisterWaypoint(WP_FTL_PEM_PRE_ERASE_START, "WP_FTL_PEM_PRE_ERASE_START") ;
   RegisterWaypoint(WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK, "WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK") ;
   RegisterWaypoint(WP_FTL_PEM_RETARGET_ERASE, "WP_FTL_PEM_RETARGET_ERASE") ;


   RegisterWaypoint(WP_MVP_FREE_CYCLE, "WP_MVP_FREE_CYCLE") ;
   RegisterWaypoint(WP_MVP_START_RELOCATION, "WP_MVP_START_RELOCATION") ;
   RegisterWaypoint(WP_MVP_PARTITION_FREE_SPACE, "WP_MVP_PARTITION_FREE_SPACE") ;
   RegisterWaypoint(WP_MVP_INIT, "WP_MVP_INIT") ;
   RegisterWaypoint(WP_MVP_RELOCATION_COMPLETE, "WP_MVP_RELOCATION_COMPLETE") ;
   RegisterWaypoint(WP_MVP_CALC_FREE_SPACE, "WP_MVP_CALC_FREE_SPACE") ;
   RegisterWaypoint(WP_MVP_SWAP_START, "WP_MVP_SWAP_START") ;
   RegisterWaypoint(WP_MVP_HSLC_UNDER_MINVC, "WP_MVP_HSLC_UNDER_MINVC") ;
   RegisterWaypoint(WP_MVP_HSLC_REDUCTION_FG, "WP_MVP_HSLC_REDUCTION_FG") ;
   RegisterWaypoint(WP_MVP_HSLC_REDUCTION_BG, "WP_MVP_HSLC_REDUCTION_BG") ;
   RegisterWaypoint(WP_MVP_HSLC_NO_MORE_GC, "WP_MVP_HSLC_NO_MORE_GC") ;
   RegisterWaypoint(WP_MVP_HSLC_HAR_PLAN_STEP_ROW, "WP_MVP_HSLC_HAR_PLAN_STEP_ROW") ;
   RegisterWaypoint(WP_MVP_HSLC_HOST_GC_STATUS, "WP_MVP_HSLC_HOST_GC_STATUS") ;
   RegisterWaypoint(WP_MVP_HSLC_HOST_GC_IN_STATUS, "WP_MVP_HSLC_HOST_GC_IN_STATUS") ;


   RegisterWaypoint(WP_FLUSH_NV_CMD_START, "WP_FLUSH_NV_CMD_START") ;
   RegisterWaypoint(WP_FLUSH_NV_CMD_STOP, "WP_FLUSH_NV_CMD_STOP") ;
   RegisterWaypoint(WP_FLUSH_NV_CMD_PROGRESS, "WP_FLUSH_NV_CMD_PROGRESS") ;
   RegisterWaypoint(WP_FLUSH_NV_CMD_NOTIFY, "WP_FLUSH_NV_CMD_NOTIFY") ;


   RegisterWaypoint(WP_FML_LOW_RESOURCES_START, "WP_FML_LOW_RESOURCES_START") ;
   RegisterWaypoint(WP_FML_LOW_RESOURCES_END, "WP_FML_LOW_RESOURCES_END") ;
   RegisterWaypoint(WP_FML_PS_Q_LOW_RESOURCE_START, "WP_FML_PS_Q_LOW_RESOURCE_START") ;
   RegisterWaypoint(WP_FML_PS_Q_LOW_RESOURCE_END, "WP_FML_PS_Q_LOW_RESOURCE_END") ;


   RegisterWaypoint(WP_MTM_SEND_REQ_WRITE, "WP_MTM_SEND_REQ_WRITE") ;
   RegisterWaypoint(WP_MTM_WRITE_DONE, "WP_MTM_WRITE_DONE") ;
   RegisterWaypoint(WP_MTM_START_RELOCATION, "WP_MTM_START_RELOCATION") ;


   RegisterWaypoint(WP_FTL_BML_JUMBOBLOCK_ALLOCATED, "WP_FTL_BML_JUMBOBLOCK_ALLOCATED") ;
   RegisterWaypoint(WP_FTL_BML_JUMBOBLOCK_CLOSE, "WP_FTL_BML_JUMBOBLOCK_CLOSE") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_RELEASED, "WP_FTL_MBM_METABLOCK_RELEASED") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_REVIVE, "WP_FTL_MBM_METABLOCK_REVIVE") ;
   RegisterWaypoint(WP_FTL_MBM_CS_DONE_LIST_NOT_FULL, "WP_FTL_MBM_CS_DONE_LIST_NOT_FULL") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_ERASED, "WP_FTL_MBM_METABLOCK_ERASED") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_FLASH_FILLED, "WP_FTL_MBM_METABLOCK_FLASH_FILLED") ;
   RegisterWaypoint(WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY, "WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY") ;
   RegisterWaypoint(WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML, "WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML") ;
   RegisterWaypoint(WP_FTL_MBM_WA_METABLOCK_ERASED, "WP_FTL_MBM_WA_METABLOCK_ERASED") ;
   RegisterWaypoint(WP_FTL_MBM_ALLOCATE_PREERASED_MB, "WP_FTL_MBM_ALLOCATE_PREERASED_MB") ;
   RegisterWaypoint(WP_FTL_MBM_REFILL_RESERVED, "WP_FTL_MBM_REFILL_RESERVED") ;


   RegisterWaypoint(D_MODEL_FTL_HWD_ROUTING_RULES, "D_MODEL_FTL_HWD_ROUTING_RULES") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_PADDING, "D_MODEL_FTL_HWD_PADDING") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_START_WRITE, "D_MODEL_FTL_HWD_START_WRITE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_RMW, "D_MODEL_FTL_HWD_RMW") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_RMW_DONE, "D_MODEL_FTL_HWD_RMW_DONE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_FUA, "D_MODEL_FTL_HWD_FUA") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_FUA_DONE, "D_MODEL_FTL_HWD_FUA_DONE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_STREAM_STATUS, "D_MODEL_FTL_HWD_STREAM_STATUS") ;
   RegisterWaypoint(WP_FTL_HWD_WRITE_JB_VBA, "WP_FTL_HWD_WRITE_JB_VBA") ;


   RegisterWaypoint(D_MODEL_FTL_HRF_STREAM_STATUS, "D_MODEL_FTL_HRF_STREAM_STATUS") ;
   RegisterWaypoint(WP_FTL_HRF_UECC_HANDLING, "WP_FTL_HRF_UECC_HANDLING") ;



   RegisterWaypoint(WP_FTL_OVP_START_SYNC, "WP_FTL_OVP_START_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_PROCESS_ENTRY, "WP_FTL_OVP_PROCESS_ENTRY") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_PROCESS_ENTRY, "WP_FTL_OVP_FEADMIN_PROCESS_ENTRY") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_BLOCKED, "WP_FTL_OVP_FEADMIN_BLOCKED") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_CALLBACK, "WP_FTL_OVP_FEADMIN_CALLBACK") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_WRITE_SYNC, "WP_FTL_OVP_START_STREAM_WRITE_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_STREAM_EMPTY, "WP_FTL_OVP_STREAM_EMPTY") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_RMW_SYNC, "WP_FTL_OVP_START_STREAM_RMW_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_TLC_SYNC, "WP_FTL_OVP_START_STREAM_TLC_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST, "WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST") ;


   RegisterWaypoint(WP_FTL_RLC_RLC_START, "WP_FTL_RLC_RLC_START") ;
   RegisterWaypoint(WP_FTL_RLC_SCAN_FWD, "WP_FTL_RLC_SCAN_FWD") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_SELECTED, "WP_FTL_RLC_SOURCE_BLOCK_SELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_RESELECTED, "WP_FTL_RLC_SOURCE_BLOCK_RESELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_RELEASED, "WP_FTL_RLC_SOURCE_BLOCK_RELEASED") ;
   RegisterWaypoint(WP_FTL_RLC_TARGET_BLOCK_SELECTED, "WP_FTL_RLC_TARGET_BLOCK_SELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_COPY_FMUS, "WP_FTL_RLC_COPY_FMUS") ;
   RegisterWaypoint(WP_FTL_RLC_FLASH_TRANSLATE, "WP_FTL_RLC_FLASH_TRANSLATE") ;
   RegisterWaypoint(WP_FTL_RLC_TARGET_BLOCK_OPEN, "WP_FTL_RLC_TARGET_BLOCK_OPEN") ;
   RegisterWaypoint(WP_FTL_RLC_TARGET_BLOCK_FULL, "WP_FTL_RLC_TARGET_BLOCK_FULL") ;
   RegisterWaypoint(WP_FTL_RLC_AUTO_FREE_JB_RELEASED, "WP_FTL_RLC_AUTO_FREE_JB_RELEASED") ;
   RegisterWaypoint(WP_FTL_RLC_START_FNVM, "WP_FTL_RLC_START_FNVM") ;
   RegisterWaypoint(WP_FTL_RLC_END_FNVM, "WP_FTL_RLC_END_FNVM") ;
   RegisterWaypoint(WP_FTL_RLC_CYCLE_TERMINATE, "WP_FTL_RLC_CYCLE_TERMINATE") ;
   RegisterWaypoint(WP_FTL_RLC_RLC_COMPLETE, "WP_FTL_RLC_RLC_COMPLETE") ;
   RegisterWaypoint(WP_FTL_RLC_READ_LRM_ENTER, "WP_FTL_RLC_READ_LRM_ENTER") ;
   RegisterWaypoint(WP_FTL_RLC_READ_LRM_EXIT, "WP_FTL_RLC_READ_LRM_EXIT") ;
   RegisterWaypoint(WP_FTL_RLC_JB_REL_LRM_ENTER, "WP_FTL_RLC_JB_REL_LRM_ENTER") ;
   RegisterWaypoint(WP_FTL_RLC_JB_REL_LRM_EXIT, "WP_FTL_RLC_JB_REL_LRM_EXIT") ;
   RegisterWaypoint(WP_FTL_RLC_WRITE_JB_VBA, "WP_FTL_RLC_WRITE_JB_VBA") ;
   RegisterWaypoint(WP_FTL_RLC_WA_STATISTICS_BLOCK_ALLOC, "WP_FTL_RLC_WA_STATISTICS_BLOCK_ALLOC") ;
   RegisterWaypoint(WP_FTL_RLC_START_BRLC, "WP_FTL_RLC_START_BRLC") ;
   RegisterWaypoint(WP_FTL_RLC_ALLOC_BRLC_BLOCK, "WP_FTL_RLC_ALLOC_BRLC_BLOCK") ;
   RegisterWaypoint(WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE, "WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE") ;
   RegisterWaypoint(WP_FTL_RLC_END_BRLC, "WP_FTL_RLC_END_BRLC") ;
   RegisterWaypoint(WP_FTL_RLC_TIME_UP_HSLC, "WP_FTL_RLC_TIME_UP_HSLC") ;
   RegisterWaypoint(WP_FTL_RLC_SLC_SHORTAGE, "WP_FTL_RLC_SLC_SHORTAGE") ;
   RegisterWaypoint(WP_FTL_RLC_RSQ_REQUEST, "WP_FTL_RLC_RSQ_REQUEST") ;
   RegisterWaypoint(WP_FTL_RLC_START_AND_ADVANCE_RLC, "WP_FTL_RLC_START_AND_ADVANCE_RLC") ;
   RegisterWaypoint(WP_FTL_RLC_FG_RS_SET_READ_TH, "WP_FTL_RLC_FG_RS_SET_READ_TH") ;
   RegisterWaypoint(WP_FTL_RLC_FG_RS_FAST_READ, "WP_FTL_RLC_FG_RS_FAST_READ") ;


   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC") ;
   RegisterWaypoint(WP_FTL_OBM_META_BLOCK_CONF, "WP_FTL_OBM_META_BLOCK_CONF") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_FMU_INC, "WP_FTL_OBM_JUMBO_BLOCK_FMU_INC") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED, "WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_CLOSED, "WP_FTL_OBM_JUMBO_BLOCK_CLOSED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_WL, "WP_FTL_OBM_JUMBO_BLOCK_WL") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD, "WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD, "WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_REUSE, "WP_FTL_OBM_JUMBO_BLOCK_REUSE") ;
   RegisterWaypoint(WP_FTL_OBM_ALLOC_BLOCK, "WP_FTL_OBM_ALLOC_BLOCK") ;
   RegisterWaypoint(WP_FTL_OBM_ALLOC_BLOCK_FINISHED, "WP_FTL_OBM_ALLOC_BLOCK_FINISHED") ;
   RegisterWaypoint(WP_FTL_HSLC_ALLOCATION, "WP_FTL_HSLC_ALLOCATION") ;


   RegisterWaypoint(WP_FTL_RLA_REGISTER_OVERLAP, "WP_FTL_RLA_REGISTER_OVERLAP") ;
   RegisterWaypoint(WP_FTL_RLA_INIT, "WP_FTL_RLA_INIT") ;
   RegisterWaypoint(WP_FTL_RLA_ABORT_ALL, "WP_FTL_RLA_ABORT_ALL") ;
   RegisterWaypoint(WP_FTL_RLA_READ_RACE, "WP_FTL_RLA_READ_RACE") ;
   RegisterWaypoint(WP_FTL_RLA_RELEASE_STREAM, "WP_FTL_RLA_RELEASE_STREAM") ;
   RegisterWaypoint(WP_FTL_RLA_TRANSLATION_FAILURE, "WP_FTL_RLA_TRANSLATION_FAILURE") ;
   RegisterWaypoint(WP_FTL_RLA_COMPLEMENTARY_READ, "WP_FTL_RLA_COMPLEMENTARY_READ") ;
   RegisterWaypoint(WP_FTL_RLA_CHECK_AND_READ_ALL, "WP_FTL_RLA_CHECK_AND_READ_ALL") ;
   RegisterWaypoint(WP_FTL_RLA_READ_OVERLAP_FROM_FE, "WP_FTL_RLA_READ_OVERLAP_FROM_FE") ;
   RegisterWaypoint(WP_FTL_RLA_READ_AHEAD_EVENT, "WP_FTL_RLA_READ_AHEAD_EVENT") ;
   RegisterWaypoint(WP_FTL_RLA_TRANSLATE_TRAP, "WP_FTL_RLA_TRANSLATE_TRAP") ;
   RegisterWaypoint(WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED, "WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED") ;
   RegisterWaypoint(WP_FTL_RLA_BUFF_IN_PS_NOT_FREED, "WP_FTL_RLA_BUFF_IN_PS_NOT_FREED") ;
   RegisterWaypoint(WP_FTL_RLA_ASYNC_TRANSFER_DONE, "WP_FTL_RLA_ASYNC_TRANSFER_DONE") ;
   RegisterWaypoint(WP_FTL_RLA_ALLOCATE_STREAM, "WP_FTL_RLA_ALLOCATE_STREAM") ;
   RegisterWaypoint(WP_FTL_RLA_ALLOCATE_BUFFERS, "WP_FTL_RLA_ALLOCATE_BUFFERS") ;
   RegisterWaypoint(WP_FTL_RLA_SEND_HIM_RESPONSE, "WP_FTL_RLA_SEND_HIM_RESPONSE") ;
   RegisterWaypoint(WP_FTL_RLA_RESTART, "WP_FTL_RLA_RESTART") ;
   RegisterWaypoint(WP_FTL_RLA_BL_ALLOC_SUCCESS, "WP_FTL_RLA_BL_ALLOC_SUCCESS") ;
   RegisterWaypoint(WP_FTL_RLA_BL_START_INT, "WP_FTL_RLA_BL_START_INT") ;
   RegisterWaypoint(WP_FTL_RLA_SAVE_CALC_MPD, "WP_FTL_RLA_SAVE_CALC_MPD") ;
   RegisterWaypoint(WP_FTL_RLA_CALC_GBI_WINDOW, "WP_FTL_RLA_CALC_GBI_WINDOW") ;
   RegisterWaypoint(WP_FTL_RLA_SKIP_2ND_ADDR_TRANSLATION, "WP_FTL_RLA_SKIP_2ND_ADDR_TRANSLATION") ;

   RegisterWaypoint(WP_FTL_DALOC_PROCESS_ENTRY, "WP_FTL_DALOC_PROCESS_ENTRY") ;


   RegisterWaypoint(WP_FTL_DHM_SEND_MAX_PEC_TO_PS, "WP_FTL_DHM_SEND_MAX_PEC_TO_PS") ;


   RegisterWaypoint(WP_FTL_FNVM_HOST_CMD_PARAM, "WP_FTL_FNVM_HOST_CMD_PARAM") ;
   RegisterWaypoint(WP_FNVM_WINFW_TEST, "WP_FNVM_WINFW_TEST") ;


   RegisterWaypoint(WP_FTL_XOR_BARRIER_DONE, "WP_FTL_XOR_BARRIER_DONE") ;
   RegisterWaypoint(WP_FTL_XOR_STORE_PARITY_REQ, "WP_FTL_XOR_STORE_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_LOAD_PARITY_REQ, "WP_FTL_XOR_LOAD_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_REBUILD_PARITY_REQ, "WP_FTL_XOR_REBUILD_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_REBUILD_PARITY_COMPLETE, "WP_FTL_XOR_REBUILD_PARITY_COMPLETE") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_START, "WP_FTL_XOR_COMPACTION_START") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_JWL0_WRITE, "WP_FTL_XOR_COMPACTION_JWL0_WRITE") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_END, "WP_FTL_XOR_COMPACTION_END") ;
   RegisterWaypoint(WP_FTL_XOR_JB_VBA, "WP_FTL_XOR_JB_VBA") ;
   RegisterWaypoint(WP_FTL_XOR_PARITY_LOC, "WP_FTL_XOR_PARITY_LOC") ;


   RegisterWaypoint(WP_FTL_READONLY_TRIGGER, "WP_FTL_READONLY_TRIGGER") ;
   RegisterWaypoint(WP_FTL_READONLY_HANDLER_START, "WP_FTL_READONLY_HANDLER_START") ;
   RegisterWaypoint(WP_FTL_READONLY_HANDLER_COMPLETED, "WP_FTL_READONLY_HANDLER_COMPLETED") ;


   RegisterWaypoint(WP_FTL_RS_SEND_ACTIVE_RS_REQ, "WP_FTL_RS_SEND_ACTIVE_RS_REQ") ;
   RegisterWaypoint(WP_FTL_RS_SET_NEW_SCANNED_BLOCK, "WP_FTL_RS_SET_NEW_SCANNED_BLOCK") ;
   RegisterWaypoint(WP_FTL_RS_FINISHED_ENTIRE_SCAN, "WP_FTL_RS_FINISHED_ENTIRE_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_SCAN_TOO_LONG, "WP_FTL_RS_SCAN_TOO_LONG") ;
   RegisterWaypoint(WP_FTL_RS_PROCESS_SCAN, "WP_FTL_RS_PROCESS_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_MODE_SET, "WP_FTL_RS_MODE_SET") ;
   RegisterWaypoint(WP_FTL_RS_ENABLE_FG_SCAN, "WP_FTL_RS_ENABLE_FG_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE, "WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE") ;
   RegisterWaypoint(WP_FTL_RS_READONLY_DISABLE_RS, "WP_FTL_RS_READONLY_DISABLE_RS") ;


   RegisterWaypoint(WP_FTL_RSQ_NEW_RLC_REQ, "WP_FTL_RSQ_NEW_RLC_REQ") ;
   RegisterWaypoint(WP_FTL_RSQ_RLC_REQ_REMOVED, "WP_FTL_RSQ_RLC_REQ_REMOVED") ;
   RegisterWaypoint(WP_FTL_RSQ_LRM, "WP_FTL_RSQ_LRM") ;
   RegisterWaypoint(WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS, "WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS") ;
   RegisterWaypoint(WP_FTL_RSQ_RECOVER_DURING_MOUNT, "WP_FTL_RSQ_RECOVER_DURING_MOUNT") ;


   RegisterWaypoint(WP_FTL_SHD_START_SHUTDOWN, "WP_FTL_SHD_START_SHUTDOWN") ;
   RegisterWaypoint(WP_FTL_SHD_STATE_SHD_COMPLETE, "WP_FTL_SHD_STATE_SHD_COMPLETE") ;
   RegisterWaypoint(WP_FTL_SHD_COUNT_INC, "WP_FTL_SHD_COUNT_INC") ;


   RegisterWaypoint(WP_FTL_PWS_DPS3_NOT_SUPPORTED, "WP_FTL_PWS_DPS3_NOT_SUPPORTED") ;




   RegisterWaypoint(WP_PS_INIT, "WP_PS_INIT") ;

   RegisterWaypoint(WP_PS_UT_FIRST_MOUNT_START, "WP_PS_UT_FIRST_MOUNT_START") ;
   RegisterWaypoint(WP_PS_UT_ENTER_SLC_EWR, "WP_PS_UT_ENTER_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_SLC_EWR, "WP_PS_UT_EXIT_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_INFRA_SLC_EWR, "WP_PS_UT_ENTER_INFRA_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_INFRA_SLC_EWR, "WP_PS_UT_EXIT_INFRA_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_TLC_EWR, "WP_PS_UT_ENTER_TLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_TLC_EWR, "WP_PS_UT_EXIT_TLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_RESET, "WP_PS_UT_ENTER_RESET") ;
   RegisterWaypoint(WP_PS_UT_EXIT_RESET, "WP_PS_UT_EXIT_RESET") ;
   RegisterWaypoint(WP_PS_UT_ENTER_SWAP, "WP_PS_UT_ENTER_SWAP") ;


   RegisterWaypoint(WP_PS_HEALTH_UPDATE_PEC, "WP_PS_HEALTH_UPDATE_PEC") ;


   RegisterWaypoint(WP_PS_CVD_MB_CLOSURE, "WP_PS_CVD_MB_CLOSURE") ;
   RegisterWaypoint(WP_PS_CVD_BER_LATT, "WP_PS_CVD_BER_LATT") ;
   RegisterWaypoint(WP_PS_CVD_BER_DEF, "WP_PS_CVD_BER_DEF") ;
   RegisterWaypoint(WP_PS_CVD_BER_COMP, "WP_PS_CVD_BER_COMP") ;
   RegisterWaypoint(WP_PS_CVD_BER_OPT, "WP_PS_CVD_BER_OPT") ;

#line 1840 "d:/gitrepo/atlas3_release/source/infra/inc_public/sys_waypoint.h"
   RegisterWaypoint(WP_PS_CVD_BES5, "WP_PS_CVD_BES5") ;
   RegisterWaypoint(WP_PS_CVD_BES7, "WP_PS_CVD_BES7") ;
   RegisterWaypoint(WP_PS_CVD_MB_ASSIGN, "WP_PS_CVD_MB_ASSIGN") ;
   RegisterWaypoint(WP_PS_CVD_ALLOCATE_NEW, "WP_PS_CVD_ALLOCATE_NEW") ;
   RegisterWaypoint(WP_PS_CVD_MB_UNASSIGN, "WP_PS_CVD_MB_UNASSIGN") ;
   RegisterWaypoint(WP_PS_CVD_PTTU_START, "WP_PS_CVD_PTTU_START") ;
   RegisterWaypoint(WP_PS_CVD_PTTU_END, "WP_PS_CVD_PTTU_END") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAMS, "WP_PS_CVD_READ_PARAMS") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAMS_TABLES, "WP_PS_CVD_READ_PARAMS_TABLES") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAM_TT, "WP_PS_CVD_READ_PARAM_TT") ;
   RegisterWaypoint(WP_PS_CVD_MB_RELEASE, "WP_PS_CVD_MB_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_MB_CACHE_RELEASE, "WP_PS_CVD_MB_CACHE_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_CACHE_ENTRY_RELEASE, "WP_PS_CVD_CACHE_ENTRY_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_ADD_TO_CACHE, "WP_PS_CVD_ADD_TO_CACHE") ;
   RegisterWaypoint(WP_PS_CVD_CACHE_ENTRY_HEAD, "WP_PS_CVD_CACHE_ENTRY_HEAD") ;
   RegisterWaypoint(WP_PS_CVD_BER_SEND, "WP_PS_CVD_BER_SEND") ;
   RegisterWaypoint(WP_PS_CVD_BER_SEND_WITHOUT_THR, "WP_PS_CVD_BER_SEND_WITHOUT_THR") ;
   RegisterWaypoint(WP_PS_CVD_BES_SEND, "WP_PS_CVD_BES_SEND") ;
   RegisterWaypoint(WP_PS_CVD_BES_RES, "WP_PS_CVD_BES_RES") ;
   RegisterWaypoint(WP_PS_CVD_BES_RLC, "WP_PS_CVD_BES_RLC") ;
   RegisterWaypoint(WP_PS_CVD_BER_OPT_RLC, "WP_PS_CVD_BER_OPT_RLC") ;
   RegisterWaypoint(WP_PS_CVD_TT_ALLOC, "WP_PS_CVD_TT_ALLOC") ;
   RegisterWaypoint(WP_PS_CVD_DEALLOCATE, "WP_PS_CVD_DEALLOCATE") ;
   RegisterWaypoint(WP_PS_CVD_TTU_START, "WP_PS_CVD_TTU_START") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BER_VER0, "WP_PS_CVD_TTU_BER_VER0") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES_START, "WP_PS_CVD_TTU_BES_START") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES5, "WP_PS_CVD_TTU_BES5") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES7, "WP_PS_CVD_TTU_BES7") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BER_OPT, "WP_PS_CVD_TTU_BER_OPT") ;
   RegisterWaypoint(WP_PS_CVD_TTU_RLC_VERS, "WP_PS_CVD_TTU_RLC_VERS") ;
   RegisterWaypoint(WP_PS_CVD_TTU_RLC_VER0, "WP_PS_CVD_TTU_RLC_VER0") ;
   RegisterWaypoint(WP_PS_CVD_MB_TTU_UPDATED, "WP_PS_CVD_MB_TTU_UPDATED") ;
   RegisterWaypoint(WP_PS_CVD_TICK_CNT, "WP_PS_CVD_TICK_CNT") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_START, "WP_PS_CVD_COMPACTION_START") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_TT1, "WP_PS_CVD_COMPACTION_TT1") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_TT2, "WP_PS_CVD_COMPACTION_TT2") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_END, "WP_PS_CVD_COMPACTION_END") ;
   RegisterWaypoint(WP_PS_CVD_DRD_BER, "WP_PS_CVD_DRD_BER") ;
   RegisterWaypoint(WP_PS_CVD_DRI, "WP_PS_CVD_DRI") ;
   RegisterWaypoint(WP_PS_CVD_ADD_TASK, "WP_PS_CVD_ADD_TASK") ;
   RegisterWaypoint(WP_PS_CVD_ACTIVATE_TASK, "WP_PS_CVD_ACTIVATE_TASK") ;
   RegisterWaypoint(WP_PS_CVD_COMPLETE_TASK, "WP_PS_CVD_COMPLETE_TASK") ;
   RegisterWaypoint(WP_PS_CVD_BARRIER_STATE, "WP_PS_CVD_BARRIER_STATE") ;
   RegisterWaypoint(WP_PS_CVD_INVALIDATE_LATT, "WP_PS_CVD_INVALIDATE_LATT") ;
   RegisterWaypoint(WP_PS_CVD_MORPH_SECT_UPDATE, "WP_PS_CVD_MORPH_SECT_UPDATE") ;
   RegisterWaypoint(WP_PS_CVD_IS_HBER, "WP_PS_CVD_IS_HBER") ;
   RegisterWaypoint(WP_PS_CVD_SET_BKOPS, "WP_PS_CVD_SET_BKOPS") ;
   RegisterWaypoint(WP_PS_CVD_PERIODIC_EVENT_NOTIFY, "WP_PS_CVD_PERIODIC_EVENT_NOTIFY") ;
   RegisterWaypoint(WP_PS_CVD_APPLY_WL_COMP, "WP_PS_CVD_APPLY_WL_COMP") ;
   RegisterWaypoint(WP_PS_APPLY_WL_DECOMPENSATION, "WP_PS_APPLY_WL_DECOMPENSATION") ;



   RegisterWaypoint(WP_PS_RFM_STATE_CHANGE, "WP_PS_RFM_STATE_CHANGE") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_OP_DISPATCH, "WP_PS_RFM_REFRESH_OP_DISPATCH") ;
   RegisterWaypoint(WP_PS_RFM_ISOLATE_OP_DISPATCH, "WP_PS_RFM_ISOLATE_OP_DISPATCH") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_OP_COMPLETE, "WP_PS_RFM_REFRESH_OP_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_ISOLATE_OP_COMPLETE, "WP_PS_RFM_ISOLATE_OP_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_INIT_COMPLETE, "WP_PS_RFM_INIT_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_TRIGGER, "WP_PS_RFM_REFRESH_TRIGGER") ;


   RegisterWaypoint(WP_PS_RS_RANDOM_SCAN_START, "WP_PS_RS_RANDOM_SCAN_START") ;
   RegisterWaypoint(WP_PS_RS_RANDOM_SCAN_END, "WP_PS_RS_RANDOM_SCAN_END") ;
   RegisterWaypoint(WP_PS_RS_ACTIVE_SCAN_START, "WP_PS_RS_ACTIVE_SCAN_START") ;
   RegisterWaypoint(WP_PS_RS_ACTIVE_SCAN_END, "WP_PS_RS_ACTIVE_SCAN_END") ;
   RegisterWaypoint(WP_PS_RS_HIGH_BER_EVENT, "WP_PS_RS_HIGH_BER_EVENT") ;
   RegisterWaypoint(WP_PS_RS_BLOCK_SENT_TO_RLC, "WP_PS_RS_BLOCK_SENT_TO_RLC") ;
   RegisterWaypoint(WP_PS_RS_ADD_BLOCK_TO_RSCQ, "WP_PS_RS_ADD_BLOCK_TO_RSCQ") ;
   RegisterWaypoint(WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ, "WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ") ;
   RegisterWaypoint(WP_PS_RS_PROCESS_BLOCK_FROM_REH, "WP_PS_RS_PROCESS_BLOCK_FROM_REH") ;
   RegisterWaypoint(WP_PS_RS_READ_BER_REQUEST, "WP_PS_RS_READ_BER_REQUEST") ;
   RegisterWaypoint(WP_PS_RS_READ_BER_RESPONSE, "WP_PS_RS_READ_BER_RESPONSE") ;
   RegisterWaypoint(WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID, "WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID") ;
   RegisterWaypoint(WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST, "WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST") ;


   RegisterWaypoint(WP_PS_REH_START, "WP_PS_REH_START") ;
   RegisterWaypoint(WP_PS_REH_REREAD_WITH_CF, "WP_PS_REH_REREAD_WITH_CF") ;
   RegisterWaypoint(WP_PS_REH_BES5, "WP_PS_REH_BES5") ;
   RegisterWaypoint(WP_PS_REH_BES7, "WP_PS_REH_BES7") ;
   RegisterWaypoint(WP_PS_REH_SB0, "WP_PS_REH_SB0") ;
   RegisterWaypoint(WP_PS_REH_SB1, "WP_PS_REH_SB1") ;
   RegisterWaypoint(WP_PS_REH_SB2, "WP_PS_REH_SB2") ;
   RegisterWaypoint(WP_PS_REH_SB2_DLA, "WP_PS_REH_SB2_DLA") ;
   RegisterWaypoint(WP_PS_REH_XOR_START, "WP_PS_REH_XOR_START") ;
   RegisterWaypoint(WP_PS_REH_XOR_PAUSE, "WP_PS_REH_XOR_PAUSE") ;
   RegisterWaypoint(WP_PS_REH_RESULT, "WP_PS_REH_RESULT") ;
   RegisterWaypoint(WP_PS_REH_LDPC_ISR, "WP_PS_REH_LDPC_ISR") ;
   RegisterWaypoint(WP_PS_REH_NO_FIRST_REREAD, "WP_PS_REH_NO_FIRST_REREAD") ;

   RegisterWaypoint(WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0, "WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1, "WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES, "WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0, "WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1, "WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES, "WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0, "WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1, "WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES, "WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0, "WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1, "WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES, "WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0, "WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1, "WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES, "WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_16_UECC_COPY_READ, "WP_PS_PF_16_UECC_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_17_XOR_FAIL_COPY_READ, "WP_PS_PF_17_XOR_FAIL_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_18_XOR_DONE_COPY_READ, "WP_PS_PF_18_XOR_DONE_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_19_NESTED, "WP_PS_PF_19_NESTED") ;
   RegisterWaypoint(WP_PS_PF_25_CVD_DIST_REQUEST, "WP_PS_PF_25_CVD_DIST_REQUEST") ;
   RegisterWaypoint(WP_PS_PF_26_CVD_DIST_INSUFFICIENT_BUFFER, "WP_PS_PF_26_CVD_DIST_INSUFFICIENT_BUFFER") ;
   RegisterWaypoint(WP_PS_PF_27_CVD_DIST_READ_EL_DONE, "WP_PS_PF_27_CVD_DIST_READ_EL_DONE") ;

   RegisterWaypoint(WP_PS_EF_01_START, "WP_PS_EF_01_START") ;
   RegisterWaypoint(WP_PS_EF_02_CHECK_STATUS, "WP_PS_EF_02_CHECK_STATUS") ;
   RegisterWaypoint(WP_PS_EF_03_SET_FAILED_PLANE, "WP_PS_EF_03_SET_FAILED_PLANE") ;
   RegisterWaypoint(WP_PS_EF_04_RESET_DIE, "WP_PS_EF_04_RESET_DIE") ;
   RegisterWaypoint(WP_PS_EF_05_RELINK_BLOCK, "WP_PS_EF_05_RELINK_BLOCK") ;
   RegisterWaypoint(WP_PS_EF_06_ERASE_BLOCK, "WP_PS_EF_06_ERASE_BLOCK") ;
   RegisterWaypoint(WP_PS_EF_07_UPDATE_GBBT, "WP_PS_EF_07_UPDATE_GBBT") ;
   RegisterWaypoint(WP_PS_EF_08_CLEANUP, "WP_PS_EF_08_CLEANUP") ;
   RegisterWaypoint(WP_PS_EF_09_NESTED_ERASE, "WP_PS_EF_09_NESTED_ERASE") ;
   RegisterWaypoint(WP_PS_EF_10_ELC_LOOP_COUNTER, "WP_PS_EF_10_ELC_LOOP_COUNTER") ;


   RegisterWaypoint(WP_PS_EPWR_BER_COMPLETE, "WP_PS_EPWR_BER_COMPLETE") ;
   RegisterWaypoint(WP_PS_EPWR_BES_COMPLETE, "WP_PS_EPWR_BES_COMPLETE") ;
   RegisterWaypoint(WP_PS_EPWR_RELOCATION, "WP_PS_EPWR_RELOCATION") ;
   RegisterWaypoint(WP_PS_EPWR_RELINK_FAILURE, "WP_PS_EPWR_RELINK_FAILURE") ;


   RegisterWaypoint(WP_PS_DGM_ADDR_BEFORE_SUSPEND, "WP_PS_DGM_ADDR_BEFORE_SUSPEND") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_BY_PROG_OR_READ, "WP_PS_DGM_SUSPEND_BY_PROG_OR_READ") ;
   RegisterWaypoint(WP_PS_DGM_ADDR_AFTER_SUSPEND, "WP_PS_DGM_ADDR_AFTER_SUSPEND") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_DISABLE_ON_PEC, "WP_PS_DGM_FAST_READ_DISABLE_ON_PEC") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_DISABLE_ON_UECC, "WP_PS_DGM_FAST_READ_DISABLE_ON_UECC") ;
   RegisterWaypoint(WP_PS_DGM_ISOLATE_LATCH, "WP_PS_DGM_ISOLATE_LATCH") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_CMD, "WP_PS_DGM_FAST_READ_CMD") ;
   RegisterWaypoint(WP_PS_DGM_FTL_BWL_READ, "WP_PS_DGM_FTL_BWL_READ") ;
   RegisterWaypoint(WP_PS_DGM_INFRA_BWL_READ, "WP_PS_DGM_INFRA_BWL_READ") ;

   RegisterWaypoint(WP_PS_DGM_PHYSICAL_READ, "WP_PS_DGM_PHYSICAL_READ") ;
   RegisterWaypoint(WP_PS_DGM_FIRST_READ, "WP_PS_DGM_FIRST_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ, "WP_PS_DGM_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ_SHIFT, "WP_PS_DGM_READ_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_BES, "WP_PS_DGM_BES") ;
   RegisterWaypoint(WP_PS_DGM_BES_CALC_NEW_SHIFT, "WP_PS_DGM_BES_CALC_NEW_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_BES_NEW_SHIFTS, "WP_PS_DGM_BES_NEW_SHIFTS") ;
   RegisterWaypoint(WP_PS_DGM_BES_TEST_READ_CMD, "WP_PS_DGM_BES_TEST_READ_CMD") ;
   RegisterWaypoint(WP_PS_DGM_CHANGE_C6_PREREAD, "WP_PS_DGM_CHANGE_C6_PREREAD") ;
   RegisterWaypoint(WP_PS_DGM_CHANGE_C6_FLASHFILL, "WP_PS_DGM_CHANGE_C6_FLASHFILL") ;

   RegisterWaypoint(WP_PS_DGM_AIPR_SET_FEATURE, "WP_PS_DGM_AIPR_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_DGM_SIPR_SUBMIT_REQUESTS, "WP_PS_DGM_SIPR_SUBMIT_REQUESTS") ;
   RegisterWaypoint(WP_PS_DGM_RUN_SIPR_READ, "WP_PS_DGM_RUN_SIPR_READ") ;
   RegisterWaypoint(WP_PS_DGM_SIPR_FAST_RD_CMD, "WP_PS_DGM_SIPR_FAST_RD_CMD") ;
   RegisterWaypoint(WP_PS_DGM_ENDIS_SIPR_FEATURE, "WP_PS_DGM_ENDIS_SIPR_FEATURE") ;
   RegisterWaypoint(WP_PS_DGM_BER_SHIFT, "WP_PS_DGM_BER_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_FLASHWRITE, "WP_PS_DGM_FLASHWRITE") ;
   RegisterWaypoint(WP_PS_DGM_VPGMU, "WP_PS_DGM_VPGMU") ;
   RegisterWaypoint(WP_PS_DGM_ERASE, "WP_PS_DGM_ERASE") ;
   RegisterWaypoint(WP_PS_PMP_SENSE_AHEAD, "WP_PS_PMP_SENSE_AHEAD") ;
   RegisterWaypoint(WP_PS_MP32_ENABLE_DISABLE, "WP_PS_MP32_ENABLE_DISABLE") ;
   RegisterWaypoint(WP_PS_DGM_CHANGE_PREPROG, "WP_PS_DGM_CHANGE_PREPROG") ;
   RegisterWaypoint(WP_PS_DGM_TLC_ERASE, "WP_PS_DGM_TLC_ERASE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE, "WP_PS_DGM_SUSPEND_ERASE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE_STATE, "WP_PS_DGM_SUSPEND_ERASE_STATE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE_READ, "WP_PS_DGM_SUSPEND_ERASE_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ_TRANSFER, "WP_PS_DGM_READ_TRANSFER") ;
   RegisterWaypoint(WP_PS_DGM_READ_SENSE, "WP_PS_DGM_READ_SENSE") ;


   RegisterWaypoint(WP_PS_NPARAM_GET_PARAM_EH, "WP_PS_NPARAM_GET_PARAM_EH") ;


   RegisterWaypoint(WP_PS_FLGP_MARK_START, "WP_PS_FLGP_MARK_START") ;
   RegisterWaypoint(WP_PS_FLGP_FTL_MSG_PART1, "WP_PS_FLGP_FTL_MSG_PART1") ;
   RegisterWaypoint(WP_PS_FLGP_FTL_MSG_PART2, "WP_PS_FLGP_FTL_MSG_PART2") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_NER, "WP_PS_FLGP_FOUND_NER") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_LMW, "WP_PS_FLGP_FOUND_LMW") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_LGW, "WP_PS_FLGP_FOUND_LGW") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_TER, "WP_PS_FLGP_FOUND_TER") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_FER, "WP_PS_FLGP_FOUND_FER") ;
   RegisterWaypoint(WP_PS_FLGP_NER_BINARY_DMC_RESULT, "WP_PS_FLGP_NER_BINARY_DMC_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_LGW_BACKWARD_BER_RESULT, "WP_PS_FLGP_LGW_BACKWARD_BER_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_TER_FORWARD_DMC_RESULT, "WP_PS_FLGP_TER_FORWARD_DMC_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_SEND_FTL_FINAL_RESULTS, "WP_PS_FLGP_SEND_FTL_FINAL_RESULTS") ;
   RegisterWaypoint(WP_PS_FLGP_MORPHEUS_PARAM, "WP_PS_FLGP_MORPHEUS_PARAM") ;
   RegisterWaypoint(WP_PS_FLGP_TED_ZONE_IDX, "WP_PS_FLGP_TED_ZONE_IDX") ;
   RegisterWaypoint(WP_PS_FLGP_SHIFT_CHECK, "WP_PS_FLGP_SHIFT_CHECK") ;
   RegisterWaypoint(WP_PS_FLGP_BES5, "WP_PS_FLGP_BES5") ;
   RegisterWaypoint(WP_PS_FLGP_MARK_END, "WP_PS_FLGP_MARK_END") ;


   RegisterWaypoint(WP_PS_OTG_SEED_SD, "WP_PS_OTG_SEED_SD") ;
   RegisterWaypoint(WP_PS_OTG_SEED_SR, "WP_PS_OTG_SEED_SR") ;
   RegisterWaypoint(WP_PS_OTG_SEED, "WP_PS_OTG_SEED") ;
   RegisterWaypoint(WP_PS_OTG_SIPR_SENSE, "WP_PS_OTG_SIPR_SENSE") ;
   RegisterWaypoint(WP_PS_OTG_SET_PARAM, "WP_PS_OTG_SET_PARAM") ;
   RegisterWaypoint(WP_PS_OTG_AVPGM, "WP_PS_OTG_AVPGM") ;


   RegisterWaypoint(WP_PS_ADM_SET_OPEN_BLOCK, "WP_PS_ADM_SET_OPEN_BLOCK") ;



   RegisterWaypoint(WP_PS_THM_TEMP_TICK_REQ_RECEIVED, "WP_PS_THM_TEMP_TICK_REQ_RECEIVED") ;
   RegisterWaypoint(WP_PS_THM_TEMP_INT_REQS, "WP_PS_THM_TEMP_INT_REQS") ;
   RegisterWaypoint(WP_PS_THM_INFRA_MEASURED_TEMP, "WP_PS_THM_INFRA_MEASURED_TEMP") ;
   RegisterWaypoint(WP_PS_THM_DIAG_MEASURED_TEMP, "WP_PS_THM_DIAG_MEASURED_TEMP") ;
   RegisterWaypoint(WP_PS_THM_TEMP_REQ_START, "WP_PS_THM_TEMP_REQ_START") ;
   RegisterWaypoint(WP_PS_THM_TEMP_REQ_COMPLETED, "WP_PS_THM_TEMP_REQ_COMPLETED") ;
   RegisterWaypoint(WP_PS_THM_INFRA_FAKE_TEMPCODE, "WP_PS_THM_INFRA_FAKE_TEMPCODE") ;


   RegisterWaypoint(WP_PS_ADM_SET_OPEN_BLOCK, "WP_PS_ADM_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_PS_XOR_ZONE_END, "WP_PS_XOR_ZONE_END") ;

   RegisterWaypoint(WP_PS_XOR_WRITE_PAR_PAGES_DONE, "WP_PS_XOR_WRITE_PAR_PAGES_DONE") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_START, "WP_PS_XOR_RECOVERY_START") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_END, "WP_PS_XOR_RECOVERY_END") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC, "WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC, "WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_UNROLLING_VBA, "WP_PS_XOR_RECOVERY_UNROLLING_VBA") ;
   RegisterWaypoint(WP_PS_XOR_IS_XOR_SUPPORTED, "WP_PS_XOR_IS_XOR_SUPPORTED") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_WUC_DETECTED, "WP_PS_XOR_RECOVERY_WUC_DETECTED") ;
   RegisterWaypoint(WP_PS_XOR_STORE_PAR_REQ, "WP_PS_XOR_STORE_PAR_REQ") ;
   RegisterWaypoint(WP_PS_XOR_LOAD_PAR_REQ, "WP_PS_XOR_LOAD_PAR_REQ") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_START, "WP_PS_XOR_REBUILD_PAR_START") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_END, "WP_PS_XOR_REBUILD_PAR_END") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_NEW_ZONE, "WP_PS_XOR_REBUILD_PAR_NEW_ZONE") ;
   RegisterWaypoint(WP_PS_XOR_ISSUE_CF, "WP_PS_XOR_ISSUE_CF") ;
   RegisterWaypoint(WP_PS_XOR_WRITE_PAR_PAGES_START, "WP_PS_XOR_WRITE_PAR_PAGES_START") ;
   RegisterWaypoint(WP_PS_XOR_SKIP_WRITE_PAR_PAGES, "WP_PS_XOR_SKIP_WRITE_PAR_PAGES") ;


   RegisterWaypoint(WP_PMM_ENTER_NONOP_POWER_STATE, "WP_PMM_ENTER_NONOP_POWER_STATE") ;
   RegisterWaypoint(WP_PMM_EXIT_NONOP_POWER_STATE, "WP_PMM_EXIT_NONOP_POWER_STATE") ;
   RegisterWaypoint(WP_PMM_POWER_OFF, "WP_PMM_POWER_OFF") ;



   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE, "WP_PS_UEBM_UECC_STRIKE") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_BLK, "WP_PS_UEBM_RETIRE_BLK") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_BLKFOUND, "WP_PS_UEBM_UECC_ADD_BLKFOUND") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_FLIPFLOPSET, "WP_PS_UEBM_UECC_ADD_FLIPFLOPSET") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_NEWENTRY, "WP_PS_UEBM_UECC_ADD_NEWENTRY") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_LISTFULL, "WP_PS_UEBM_UECC_ADD_LISTFULL") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_ERROR, "WP_PS_UEBM_UECC_ADD_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_REMOVE_FOUNDBLK, "WP_PS_UEBM_UECC_REMOVE_FOUNDBLK") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_REMOVE_ERROR, "WP_PS_UEBM_UECC_REMOVE_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FLIPFLOP_RESET, "WP_PS_UEBM_UECC_FLIPFLOP_RESET") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FLIPFLOP_ERROR, "WP_PS_UEBM_UECC_FLIPFLOP_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT, "WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE, "WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_INPROGRESS, "WP_PS_UEBM_UECC_FSWRITE_INPROGRESS") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD, "WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_STARTED, "WP_PS_UEBM_UECC_FSWRITE_STARTED") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL, "WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_FOUND, "WP_PS_UEBM_RETIRE_FOUND") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_ERROR, "WP_PS_UEBM_RETIRE_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_FOUNDINLIST, "WP_PS_UEBM_ERASEEH_FOUNDINLIST") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_THRESHOLDREACHED, "WP_PS_UEBM_ERASEEH_THRESHOLDREACHED") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_REMOVEFROMLIST, "WP_PS_UEBM_ERASEEH_REMOVEFROMLIST") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_ERROR, "WP_PS_UEBM_ERASEEH_ERROR") ;

   RegisterWaypoint(WP_PS_DGM_SET_FEATURE, "WP_PS_DGM_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_OTG_SET_FEATURE, "WP_PS_OTG_SET_FEATURE") ;


   RegisterWaypoint(WP_PS_BBM_PH_BLOCK_RELINK, "WP_PS_BBM_PH_BLOCK_RELINK") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_UPDATED, "WP_PS_BBM_RELINK_DATA_UPDATED") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_START, "WP_PS_BBM_RELINK_DATA_FLUSH_START") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED, "WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED") ;
   RegisterWaypoint(WP_PS_BBM_DECOMM_START, "WP_PS_BBM_DECOMM_START") ;
   RegisterWaypoint(WP_PS_BBM_DECOMM_COMPLETED, "WP_PS_BBM_DECOMM_COMPLETED") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED, "WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED") ;
   RegisterWaypoint(WP_PS_BBM_TRANSLATE_RELINKED_BLK, "WP_PS_BBM_TRANSLATE_RELINKED_BLK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK, "WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_MBBT_BOOT_BLOCK, "WP_PS_BBM_PROD_MBBT_BOOT_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK, "WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA, "WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA") ;


   RegisterWaypoint(WP_PS_SE_START_GBB, "WP_PS_SE_START_GBB") ;
   RegisterWaypoint(WP_PS_SE_START_SPARE, "WP_PS_SE_START_SPARE") ;
   RegisterWaypoint(WP_PS_SE_GET_FLASH_PARAM, "WP_PS_SE_GET_FLASH_PARAM") ;
   RegisterWaypoint(WP_PS_SE_SET_FLASH_PARAM, "WP_PS_SE_SET_FLASH_PARAM") ;
   RegisterWaypoint(WP_PS_SE_EXECUTE_SECURE_ERASE, "WP_PS_SE_EXECUTE_SECURE_ERASE") ;
   RegisterWaypoint(WP_PS_SE_FINISHED_REQUEST, "WP_PS_SE_FINISHED_REQUEST") ;
   RegisterWaypoint(WP_PS_SE_RECEIVED_BARRIER, "WP_PS_SE_RECEIVED_BARRIER") ;
   RegisterWaypoint(WP_PS_SE_USE_PREALLOCATED_REQUEST, "WP_PS_SE_USE_PREALLOCATED_REQUEST") ;
   RegisterWaypoint(WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS, "WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS") ;


   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_START, "WP_PS_MRPH_USERROM_READ_START") ;
   RegisterWaypoint(WP_PS_MRPH_WL_STRING_UROM_LOOP, "WP_PS_MRPH_WL_STRING_UROM_LOOP") ;
   RegisterWaypoint(WP_PS_MRPH_NPDP_USERROM_READ_FAIL, "WP_PS_MRPH_NPDP_USERROM_READ_FAIL") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_FAIL, "WP_PS_MRPH_USERROM_READ_FAIL") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_END, "WP_PS_MRPH_USERROM_READ_END") ;
   RegisterWaypoint(WP_PS_MRPH_WL_STRING_LOOP_FMU, "WP_PS_MRPH_WL_STRING_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_UROM_LOOP_FMU, "WP_PS_MRPH_UROM_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_FMU_LOOP_FMU, "WP_PS_MRPH_FMU_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_FMU_LOOP_COPY, "WP_PS_MRPH_FMU_LOOP_COPY") ;
   RegisterWaypoint(WP_PS_MRPH_MT_VERSION, "WP_PS_MRPH_MT_VERSION") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE, "WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE") ;


   RegisterWaypoint(WP_PS_IFT_START, "WP_PS_IFT_START") ;
   RegisterWaypoint(WP_PS_IFT_END, "WP_PS_IFT_END") ;
   RegisterWaypoint(WP_PS_IFT_TEMP_TRIGGER, "WP_PS_IFT_TEMP_TRIGGER") ;
   RegisterWaypoint(WP_PS_IFT_TEMP_LAST_IFT_UPDATED, "WP_PS_IFT_TEMP_LAST_IFT_UPDATED") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_DONE, "WP_PS_IFT_ASIC_ZQC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_NAND_ZQC_DONE, "WP_PS_IFT_NAND_ZQC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_SET_TOGGLE_MODE, "WP_PS_IFT_SET_TOGGLE_MODE") ;
   RegisterWaypoint(WP_PS_IFT_DCC_DONE, "WP_PS_IFT_DCC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_INIT_ALL_DELAYS_TO_0, "WP_PS_IFT_INIT_ALL_DELAYS_TO_0") ;
   RegisterWaypoint(WP_PS_IFT_RT_RDQS_LEFT_EDGE, "WP_PS_IFT_RT_RDQS_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_DQ_LEFT_EDGE, "WP_PS_IFT_RT_DQ_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_RDQS_RIGHT_EDGE, "WP_PS_IFT_RT_RDQS_RIGHT_EDGE") ;


   RegisterWaypoint(WP_PS_IFT_OPT_ACTIVE, "WP_PS_IFT_OPT_ACTIVE") ;


   RegisterWaypoint(WP_PS_SFA_D5_AVOID, "WP_PS_SFA_D5_AVOID") ;
   RegisterWaypoint(WP_PS_SFA_5D_AVOID, "WP_PS_SFA_5D_AVOID") ;
   RegisterWaypoint(WP_PS_SFA_RESET, "WP_PS_SFA_RESET") ;
   RegisterWaypoint(WP_PS_DO_SF_WITH_READ, "WP_PS_DO_SF_WITH_READ") ;


   RegisterWaypoint(WP_INFRA_IFS_IN_WRITE_FILE, "WP_INFRA_IFS_IN_WRITE_FILE") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPACTION, "WP_INFRA_IFS_IN_COMPACTION") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_BOOTPAGE_UPDATE, "WP_INFRA_IFS_IN_BOOTPAGE_UPDATE") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_LAST_PAGE, "WP_INFRA_READ_IFS_BOOT_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED, "WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS, "WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS") ;
   RegisterWaypoint(WP_INFRA_IFS_CODE_LAST_PAGE, "WP_INFRA_IFS_CODE_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_HIGH_BER, "WP_INFRA_IFS_IN_HIGH_BER") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPAC_START, "WP_INFRA_IFS_IN_COMPAC_START") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPAC_END, "WP_INFRA_IFS_IN_COMPAC_END") ;

   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_DL_WRITE, "WP_INFRA_IFS_FFU_IN_DL_WRITE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_START, "WP_INFRA_IFS_FFU_IN_COMMIT_START") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE, "WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG, "WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS, "WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE, "WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET, "WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET") ;

   RegisterWaypoint(WP_FADI_DATA_DUMP_MESSAGE_SENT, "WP_FADI_DATA_DUMP_MESSAGE_SENT") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_WRITE_END, "WP_INFRA_FADI_DATA_WRITE_END") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_WRITE_FAILED, "WP_INFRA_FADI_DATA_WRITE_FAILED") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK, "WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY, "WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL, "WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED, "WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU, "WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS, "WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_INIT, "WP_INFRA_FADI_DUMP_MANAGER_INIT") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD, "WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATED_THERMAL_THROTTLING, "WP_INFRA_TM_UPDATED_THERMAL_THROTTLING") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATE_NAND_PEAK_TEMP, "WP_INFRA_TM_UPDATE_NAND_PEAK_TEMP") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATE_NHTEC_PARAM, "WP_INFRA_TM_UPDATE_NHTEC_PARAM") ;
   RegisterWaypoint(WP_INFRA_TM_COLD_BOOT_UPDATE, "WP_INFRA_TM_COLD_BOOT_UPDATE") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE, "WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATE_DOEC_PARAM, "WP_INFRA_TM_UPDATE_DOEC_PARAM") ;
   RegisterWaypoint(WP_INFRA_FADI_BLOCKS_REGION, "WP_INFRA_FADI_BLOCKS_REGION") ;
   RegisterWaypoint(WP_INFRA_READ_REGION_LAST_PAGE, "WP_INFRA_READ_REGION_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_WRITE_REGION_LAST_PAGE, "WP_INFRA_WRITE_REGION_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_BLOCK_ISOLATION, "WP_INFRA_BLOCK_ISOLATION") ;
   RegisterWaypoint(WP_INFRA_INIT, "WP_INFRA_INIT") ;


   RegisterWaypoint(WP_SEC_NEW_COMMAND_STARTED, "WP_SEC_NEW_COMMAND_STARTED") ;
   RegisterWaypoint(WP_SEC_COMMAND_FINISHED, "WP_SEC_COMMAND_FINISHED") ;
   RegisterWaypoint(WP_SEC_TCG_SESSION_STARTED, "WP_SEC_TCG_SESSION_STARTED") ;
   RegisterWaypoint(WP_SEC_TCG_SESSION_ABORTED, "WP_SEC_TCG_SESSION_ABORTED") ;
   RegisterWaypoint(WP_SEC_RESET_HANDLING, "WP_SEC_RESET_HANDLING") ;
   RegisterWaypoint(WP_SEC_FS_READ, "WP_SEC_FS_READ") ;
   RegisterWaypoint(WP_SEC_FS_WRITE, "WP_SEC_FS_WRITE") ;
   RegisterWaypoint(WP_SEC_FS_COMMIT_TRANSACTION, "WP_SEC_FS_COMMIT_TRANSACTION") ;
   RegisterWaypoint(WP_SEC_FS_REVERT_TRANSACTION, "WP_SEC_FS_REVERT_TRANSACTION") ;
   RegisterWaypoint(WP_SEC_FS_CLEANUP, "WP_SEC_FS_CLEANUP") ;
   RegisterWaypoint(WP_SEC_FTL_HOSTLESS_READ, "WP_SEC_FTL_HOSTLESS_READ") ;
   RegisterWaypoint(WP_SEC_FTL_WRITE_BUFFER, "WP_SEC_FTL_WRITE_BUFFER") ;
   RegisterWaypoint(WP_SEC_FTL_DEALLOCATE, "WP_SEC_FTL_DEALLOCATE") ;
   RegisterWaypoint(WP_SEC_FTL_FORMAT_NVM, "WP_SEC_FTL_FORMAT_NVM") ;
   RegisterWaypoint(WP_SEC_FE_TRANSFER_REQUEST, "WP_SEC_FE_TRANSFER_REQUEST") ;
   RegisterWaypoint(WP_SEC_FE_TRANSFER_RESPONSE, "WP_SEC_FE_TRANSFER_RESPONSE") ;


   RegisterWaypoint(WP_EI_UECC_OCCURRED, "WP_EI_UECC_OCCURRED") ;
   RegisterWaypoint(WP_EI_RLC_UECC_SCAN, "WP_EI_RLC_UECC_SCAN") ;
   RegisterWaypoint(WP_EI_RLC_UECC_TRANSLATION, "WP_EI_RLC_UECC_TRANSLATION") ;
   RegisterWaypoint(WP_EI_UECC_HOSTLESS_READ, "WP_EI_UECC_HOSTLESS_READ") ;
   RegisterWaypoint(WP_EI_UECC_INJECT_UECC_TO_HEADER, "WP_EI_UECC_INJECT_UECC_TO_HEADER") ;
   RegisterWaypoint(WP_EI_UECC_RMW, "WP_EI_UECC_RMW") ;
   RegisterWaypoint(WP_EI_MB_REVIVE, "WP_EI_MB_REVIVE") ;
   RegisterWaypoint(WP_EI_JB_REVIVE, "WP_EI_JB_REVIVE") ;
   RegisterWaypoint(WP_EI_INJECTION, "WP_EI_INJECTION") ;

   RegisterWaypoint(WP_NPDP_DCVD_ROM, "WP_NPDP_DCVD_ROM") ;


   RegisterWaypoint(WP_FE_PMM_WAKEUP_REASON, "WP_FE_PMM_WAKEUP_REASON") ;


   RegisterWaypoint(WP_FE_PMM_IDLETIMER_EXPIRED, "WP_FE_PMM_IDLETIMER_EXPIRED") ;


   RegisterWaypoint(WP_FWR_CMD_COMPLETION, "WP_FWR_CMD_COMPLETION") ;
   RegisterWaypoint(WP_FWR_ASYNC_REPORT_EVENT_TO_HOST, "WP_FWR_ASYNC_REPORT_EVENT_TO_HOST") ;
   RegisterWaypoint(WP_FWR_CS_NOTIFY_CS_COMPLETED, "WP_FWR_CS_NOTIFY_CS_COMPLETED") ;
   RegisterWaypoint(WP_FWR_CS_NOTIFY_USERS, "WP_FWR_CS_NOTIFY_USERS") ;
   RegisterWaypoint(WP_FWR_IDENTIFY_COMMAND, "WP_FWR_IDENTIFY_COMMAND") ;
   RegisterWaypoint(WP_FWR_FLUSH_FE_END, "WP_FWR_FLUSH_FE_END") ;
   RegisterWaypoint(WP_FWR_FLUSH_FE_START, "WP_FWR_FLUSH_FE_START") ;
   RegisterWaypoint(WP_FWR_FLUSH_FTL, "WP_FWR_FLUSH_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_ABORT_REQUEST, "WP_FWR_FORMAT_AFTER_ABORT_REQUEST") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK, "WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_FTL, "WP_FWR_FORMAT_AFTER_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_BEFORE_ABORT_REQUEST, "WP_FWR_FORMAT_BEFORE_ABORT_REQUEST") ;
   RegisterWaypoint(WP_FWR_FORMAT_BEFORE_FTL, "WP_FWR_FORMAT_BEFORE_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_ENHANCED_CASE1, "WP_FWR_FORMAT_ENHANCED_CASE1") ;
   RegisterWaypoint(WP_FWR_FORMAT_ENHANCED_CASE2, "WP_FWR_FORMAT_ENHANCED_CASE2") ;
   RegisterWaypoint(WP_FWR_FORMAT_UPDATE_LOG_BLOCKS, "WP_FWR_FORMAT_UPDATE_LOG_BLOCKS") ;
   RegisterWaypoint(WP_FWR_GETLOG_COMMAND, "WP_FWR_GETLOG_COMMAND") ;
   RegisterWaypoint(WP_FWR_DATA_TRANSFER, "WP_FWR_DATA_TRANSFER") ;

   RegisterWaypoint(WP_FWR_IO_COMMANDS_EXEPTION_Q, "WP_FWR_IO_COMMANDS_EXEPTION_Q") ;
   RegisterWaypoint(WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS, "WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS") ;
   RegisterWaypoint(WP_FWR_LOG_CS_SEND_BARRIER, "WP_FWR_LOG_CS_SEND_BARRIER") ;
   RegisterWaypoint(WP_FWR_LOG_MANAGE, "WP_FWR_LOG_MANAGE") ;
   RegisterWaypoint(WP_FWR_LOG_PENDING_CS_START, "WP_FWR_LOG_PENDING_CS_START") ;
   RegisterWaypoint(WP_FWR_MNT_BML_RECOVERY, "WP_FWR_MNT_BML_RECOVERY") ;
   RegisterWaypoint(WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL, "WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL") ;
   RegisterWaypoint(WP_FWR_PS_BRM_HANDLE_BARRIER_REQ, "WP_FWR_PS_BRM_HANDLE_BARRIER_REQ") ;
   RegisterWaypoint(WP_FWR_PS_BRM_IS_CS, "WP_FWR_PS_BRM_IS_CS") ;
   RegisterWaypoint(WP_FWR_PS_DGM_HANDLE_BARRIER, "WP_FWR_PS_DGM_HANDLE_BARRIER") ;
   RegisterWaypoint(WP_FWR_PS_MQD_HANDLE_BARRIER_REQ, "WP_FWR_PS_MQD_HANDLE_BARRIER_REQ") ;
   RegisterWaypoint(WP_FWR_PS_OTG_RELEASE_ON_COMPLETION, "WP_FWR_PS_OTG_RELEASE_ON_COMPLETION") ;
   RegisterWaypoint(WP_FWR_READ_ARRIVED_TO_FTL, "WP_FWR_READ_ARRIVED_TO_FTL") ;
   RegisterWaypoint(WP_FWR_RLA_ARRIVED_TO_FTL, "WP_FWR_RLA_ARRIVED_TO_FTL") ;
   RegisterWaypoint(WP_FWR_RLA_TRANSFER_DONE_TO_FTL, "WP_FWR_RLA_TRANSFER_DONE_TO_FTL") ;
   RegisterWaypoint(WP_FWR_RESET_DETAILES, "WP_FWR_RESET_DETAILES") ;
   RegisterWaypoint(WP_FWR_GETLOG_SMART, "WP_FWR_GETLOG_SMART") ;
   RegisterWaypoint(WP_FWR_SAT_CONSOLIDATION_ACTIVE, "WP_FWR_SAT_CONSOLIDATION_ACTIVE") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_COMMAND, "WP_FWR_SET_FEATURES_COMMAND") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL, "WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL, "WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL") ;
   RegisterWaypoint(WP_FWR_SET_PMM_ALL_READY, "WP_FWR_SET_PMM_ALL_READY") ;
   RegisterWaypoint(WP_FWR_SET_PMM_BEFORE_INFRA, "WP_FWR_SET_PMM_BEFORE_INFRA") ;
   RegisterWaypoint(WP_FWR_SET_PMM_FE_ACK, "WP_FWR_SET_PMM_FE_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_FTL_ACK, "WP_FWR_SET_PMM_FTL_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IFS_ACK, "WP_FWR_SET_PMM_IFS_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_FTL, "WP_FWR_SET_PMM_IN_FTL") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_IFS, "WP_FWR_SET_PMM_IN_IFS") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_PS, "WP_FWR_SET_PMM_IN_PS") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_SECURITY, "WP_FWR_SET_PMM_IN_SECURITY") ;
   RegisterWaypoint(WP_FWR_SET_PMM_PS_ACK, "WP_FWR_SET_PMM_PS_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_SECURITY_ACK, "WP_FWR_SET_PMM_SECURITY_ACK") ;
   RegisterWaypoint(WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL, "WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FE, "WP_FWR_DEALLOC_IN_FE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK, "WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC, "WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE, "WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE, "WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE, "WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE") ;
   RegisterWaypoint(WP_FWR_COMPARE_VALIDATION_STAGE, "WP_FWR_COMPARE_VALIDATION_STAGE") ;
   RegisterWaypoint(WP_FWR_COMPARE_END, "WP_FWR_COMPARE_END") ;
   RegisterWaypoint(WP_FWR_COMPARE_READ_FROM_FLASH_STAGE, "WP_FWR_COMPARE_READ_FROM_FLASH_STAGE") ;
   RegisterWaypoint(WP_FWR_COMPARE_READ_4K_STAGE, "WP_FWR_COMPARE_READ_4K_STAGE") ;

   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_GENERAL, "WP_FWR_WRITE_IN_FTL_GENERAL") ;
   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_RMW_STAGE, "WP_FWR_WRITE_IN_FTL_RMW_STAGE") ;
   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE, "WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE") ;

   RegisterWaypoint(WP_FWR_WUC_FE, "WP_FWR_WUC_FE") ;
   RegisterWaypoint(WP_FWR_WUC_FTL, "WP_FWR_WUC_FTL") ;
   RegisterWaypoint(WP_FWR_WUC_CALL_FROM_FTL_STAGE, "WP_FWR_WUC_CALL_FROM_FTL_STAGE") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_VALIDATION_FE, "WP_FWR_WRITE_ZEROS_VALIDATION_FE") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_DIVISION, "WP_FWR_WRITE_ZEROS_DIVISION") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_READ, "WP_FWR_WRITE_ZEROS_READ") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_READ_4K, "WP_FWR_WRITE_ZEROS_READ_4K") ;

   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_MAIN_LOOP, "WP_FWR_DOWNLOAD_FFU_MAIN_LOOP") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END, "WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS, "WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP, "WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP") ;

   RegisterWaypoint(WP_FWR_MOUNT_START, "WP_FWR_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_GSD_MOUNT_START, "WP_FWR_GSD_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_UGSD_MOUNT_START, "WP_FWR_UGSD_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_MOUNT_BEFORE_ENABLE_WR, "WP_FWR_MOUNT_BEFORE_ENABLE_WR") ;
   RegisterWaypoint(WP_FWR_AFTER_MOUNT_COMPLITION, "WP_FWR_AFTER_MOUNT_COMPLITION") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_START, "WP_FWR_SHUTDOWN_STATE_START") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR, "WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_REQ_CS, "WP_FWR_SHUTDOWN_STATE_REQ_CS") ;

   RegisterWaypoint(WP_FWR_RESET, "WP_FWR_RESET") ;
   RegisterWaypoint(WP_FWR_BML_RELEASE_BLOCK, "WP_FWR_BML_RELEASE_BLOCK") ;
   RegisterWaypoint(WP_FWR_FE_HANDLER_FORMAT_NVME, "WP_FWR_FE_HANDLER_FORMAT_NVME") ;
   RegisterWaypoint(WP_FWR_FE_NVME_FORMAT_CB, "WP_FWR_FE_NVME_FORMAT_CB") ;
   RegisterWaypoint(WP_FWR_FE_NVME_NCR_CHST_UPDATE, "WP_FWR_FE_NVME_NCR_CHST_UPDATE") ;
   RegisterWaypoint(WP_FWR_FE_NVME_NCR_CC_EVENT_IS_SEND, "WP_FWR_FE_NVME_NCR_CC_EVENT_IS_SEND") ;
   RegisterWaypoint(WP_FWR_FTL_CMD_FNVM_FORMAT_START, "WP_FWR_FTL_CMD_FNVM_FORMAT_START") ;
   RegisterWaypoint(WP_FWR_FTL_CMD_FNVM_FORMAT_END, "WP_FWR_FTL_CMD_FNVM_FORMAT_END") ;

   RegisterWaypoint(WP_FWR_FE_FORMAT_PROCESS_END, "WP_FWR_FE_FORMAT_PROCESS_END") ;

   RegisterWaypoint(WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC, "WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC") ;
   RegisterWaypoint(WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC, "WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC") ;
   RegisterWaypoint(WP_FWR_LOG_WRITING_LOG_BLOCK, "WP_FWR_LOG_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_FWR_PS_XOR_STORE_PAR_REQ, "WP_FWR_PS_XOR_STORE_PAR_REQ") ;
   RegisterWaypoint(WP_FWR_XORM_COMPACTION_START, "WP_FWR_XORM_COMPACTION_START") ;
   RegisterWaypoint(WP_FWR_XROM_COMPACTION_IN_PROCESS, "WP_FWR_XROM_COMPACTION_IN_PROCESS") ;
   RegisterWaypoint(WP_FWR_XORM_COMPACTION_END, "WP_FWR_XORM_COMPACTION_END") ;
   RegisterWaypoint(WP_FWR_MVP_PARTITION_FREE_SPACE, "WP_FWR_MVP_PARTITION_FREE_SPACE") ;
   RegisterWaypoint(WP_FWR_LOG_FIRST_MOUNT, "WP_FWR_LOG_FIRST_MOUNT") ;
   RegisterWaypoint(WP_FWR_LOG_WRITE_LOG_COPY, "WP_FWR_LOG_WRITE_LOG_COPY") ;
   RegisterWaypoint(WP_FWR_LOG_DEBUG_ALLOC, "WP_FWR_LOG_DEBUG_ALLOC") ;

   RegisterWaypoint(WP_FWR_RLC_BRLC_COPY_STEP, "WP_FWR_RLC_BRLC_COPY_STEP") ;
   RegisterWaypoint(WP_FWR_FTL_RSQ_RLC_REQ_REMOVED, "WP_FWR_FTL_RSQ_RLC_REQ_REMOVED") ;
   RegisterWaypoint(WP_FWR_LOG_WRITE_REQ, "WP_FWR_LOG_WRITE_REQ") ;
   RegisterWaypoint(WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK, "WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_STATUS_ERROR, "WP_FWR_INFRA_IFS_STATUS_ERROR") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_STATUS_WRITE, "WP_FWR_INFRA_IFS_STATUS_WRITE") ;
   RegisterWaypoint(WP_FWR_FNVM_ABORT_ONGOING_FORMAT, "WP_FWR_FNVM_ABORT_ONGOING_FORMAT") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS, "WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS") ;
   RegisterWaypoint(WP_FWR_INFRA_FFU_WRITE_PARAMETERS, "WP_FWR_INFRA_FFU_WRITE_PARAMETERS") ;
   RegisterWaypoint(WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS, "WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS") ;
   RegisterWaypoint(WP_FWR_MNT_JMB_SWAP_MB, "WP_FWR_MNT_JMB_SWAP_MB") ;
   RegisterWaypoint(WP_FWR_INFRA_READ_SCRUB_START, "WP_FWR_INFRA_READ_SCRUB_START") ;
   RegisterWaypoint(WP_FWR_FTL_HWD_ROUTING_UPDATE_STATE, "WP_FWR_FTL_HWD_ROUTING_UPDATE_STATE") ;


   RegisterWaypoint(WP_FWR_PMM_STARTPST_DISABLE_TIMER, "WP_FWR_PMM_STARTPST_DISABLE_TIMER") ;
   RegisterWaypoint(WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA, "WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA") ;
   RegisterWaypoint(WP_FWR_PMM_INFRA_ISSUEPST, "WP_FWR_PMM_INFRA_ISSUEPST") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_NO_PREV_REQ, "WP_FWR_PMM_ISSUEPST_NO_PREV_REQ") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_TERMAL, "WP_FWR_PMM_ISSUEPST_TERMAL") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_THROTTLING, "WP_FWR_PMM_ISSUEPST_THROTTLING") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_FE_PARAM, "WP_FWR_PMM_ISSUEPST_FE_PARAM") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_FTL, "WP_FWR_PMM_EXECUTEPST_FTL") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_SEC, "WP_FWR_PMM_EXECUTEPST_SEC") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_PS, "WP_FWR_PMM_EXECUTEPST_PS") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_PCU, "WP_FWR_PMM_EXECUTEPST_PCU") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_AON, "WP_FWR_PMM_EXECUTEPST_AON") ;
   RegisterWaypoint(WP_FWR_PMM_AON_ENTER_LOW_POWER, "WP_FWR_PMM_AON_ENTER_LOW_POWER") ;
   RegisterWaypoint(WP_FWR_PMM_INFRA_ISSUEPST_END, "WP_FWR_PMM_INFRA_ISSUEPST_END") ;
   RegisterWaypoint(WP_FWR_PMM_END, "WP_FWR_PMM_END") ;
   RegisterWaypoint(WP_FWR_PS_EH_COPY_HANDLER, "WP_FWR_PS_EH_COPY_HANDLER") ;
   RegisterWaypoint(WP_FWR_PS_EH_ERROR_LOG_FLUSH, "WP_FWR_PS_EH_ERROR_LOG_FLUSH") ;
   RegisterWaypoint(WP_FWR_PS_EH_PF_EF_ISR, "WP_FWR_PS_EH_PF_EF_ISR") ;
   RegisterWaypoint(WP_FWR_PS_DGM_GSD_HALT, "WP_FWR_PS_DGM_GSD_HALT") ;
   RegisterWaypoint(WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION, "WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION") ;
   RegisterWaypoint(WP_FWR_PMM_ABORT_END, "WP_FWR_PMM_ABORT_END") ;
   RegisterWaypoint(WP_FWR_PMM_END, "WP_FWR_PMM_END") ;
   RegisterWaypoint(WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO, "WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO") ;

   RegisterWaypoint(WP_FWR_PS_WRITE_SLC_RND_USER_DATA, "WP_FWR_PS_WRITE_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_TLC_RND_USER_DATA, "WP_FWR_PS_WRITE_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_CONTROL_DATA, "WP_FWR_PS_WRITE_CONTROL_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_FS_DATA, "WP_FWR_PS_WRITE_FS_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_SLC_RND_USER_DATA, "WP_FWR_PS_ERASE_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_TLC_RND_USER_DATA, "WP_FWR_PS_ERASE_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_FS_DATA, "WP_FWR_PS_ERASE_FS_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_SLC_RND_USER_DATA, "WP_FWR_PS_READ_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_TLC_RND_USER_DATA, "WP_FWR_PS_READ_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_CONTROL_DATA, "WP_FWR_PS_READ_CONTROL_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_FS_DATA, "WP_FWR_PS_READ_FS_DATA") ;

   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_CFH, "WP_FWR_PS_EH_READ_RETRY_CFH") ;
   RegisterWaypoint(WP_FWR_PS_BES5_PARAMS, "WP_FWR_PS_BES5_PARAMS") ;
   RegisterWaypoint(WP_FWR_PS_BES7_PARAMS, "WP_FWR_PS_BES7_PARAMS") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_RETIRED_BLOCK, "WP_FWR_PS_ERASE_RETIRED_BLOCK") ;
   RegisterWaypoint(WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE, "WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE") ;
   RegisterWaypoint(WP_FWR_PS_EH_END, "WP_FWR_PS_EH_END") ;
   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_SB1, "WP_FWR_PS_EH_READ_RETRY_SB1") ;
   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_SB2, "WP_FWR_PS_EH_READ_RETRY_SB2") ;
   RegisterWaypoint(WP_FWR_PS_EH_RF_ISR, "WP_FWR_PS_EH_RF_ISR") ;

   RegisterWaypoint(WP_SGD_DETECTION_START, "WP_SGD_DETECTION_START") ;
   RegisterWaypoint(WP_SGD_DETECTION_END, "WP_SGD_DETECTION_END") ;
   RegisterWaypoint(WP_SGD_DETECTION_FAIL, "WP_SGD_DETECTION_FAIL") ;
   RegisterWaypoint(WP_SGD_CORRECTION_START, "WP_SGD_CORRECTION_START") ;
   RegisterWaypoint(WP_SGD_CORRECTION_END, "WP_SGD_CORRECTION_END") ;
   RegisterWaypoint(WP_SGD_CORRECTION_FAIL, "WP_SGD_CORRECTION_FAIL") ;

   RegisterWaypoint(WP_MNT_MBM_META_DATA_PHY_BLOCK, "WP_MNT_MBM_META_DATA_PHY_BLOCK") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_NEW_MB, "WP_MNT_MBM_UGSD_NEW_MB") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_RECOVERY_NEW_MB, "WP_MNT_MBM_UGSD_RECOVERY_NEW_MB") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_RECOVERY_OLD_MB, "WP_MNT_MBM_UGSD_RECOVERY_OLD_MB") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_RECOVERY_ERASE, "WP_MNT_MBM_UGSD_RECOVERY_ERASE") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_RECOVERY_FLASH_FILL, "WP_MNT_MBM_UGSD_RECOVERY_FLASH_FILL") ;
   RegisterWaypoint(WP_QUITPROG_DATA, "WP_QUITPROG_DATA") ;


   RegisterWaypoint(WP_PS_IFT_WT_WDQS_LEFT_EDGE, "WP_PS_IFT_WT_WDQS_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_WT_DQ_LEFT_EDGE, "WP_PS_IFT_WT_DQ_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_WT_WDQS_RIGHT_EDGE, "WP_PS_IFT_WT_WDQS_RIGHT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_OPT_TEST_LOG, "WP_PS_IFT_RT_OPT_TEST_LOG") ;
   RegisterWaypoint(WP_PS_IFT_WT_OPT_TEST_LOG, "WP_PS_IFT_WT_OPT_TEST_LOG") ;

   RegisterWaypoint(WP_PS_IFT_NAND_ZQC_START, "WP_PS_IFT_NAND_ZQC_START") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_START, "WP_PS_IFT_ASIC_ZQC_START") ;

   RegisterWaypoint(WP_PS_IFT_DQS_LEFT_EDGE, "WP_PS_IFT_DQS_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_DQS_RIGHT_EDGE, "WP_PS_IFT_DQS_RIGHT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_DQ_LEFT_EDGE, "WP_PS_IFT_DQ_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_OPT_TEST_LOG, "WP_PS_IFT_OPT_TEST_LOG") ;
   RegisterWaypoint(WP_PS_IFT_INIT_ALL_DELAYS, "WP_PS_IFT_INIT_ALL_DELAYS") ;
   RegisterWaypoint(WP_PS_IFT_RT_SKIP, "WP_PS_IFT_RT_SKIP") ;
   RegisterWaypoint(WP_PS_IFT_RT_START, "WP_PS_IFT_RT_START") ;
   RegisterWaypoint(WP_PS_IFT_RT_END, "WP_PS_IFT_RT_END") ;
   RegisterWaypoint(WP_PS_IFT_WT_SKIP, "WP_PS_IFT_WT_SKIP") ;
   RegisterWaypoint(WP_PS_IFT_WT_START, "WP_PS_IFT_WT_START") ;
   RegisterWaypoint(WP_PS_IFT_WT_END, "WP_PS_IFT_WT_END") ;
   RegisterWaypoint(WP_PS_IFT_DIE_RESET, "WP_PS_IFT_DIE_RESET") ;
   RegisterWaypoint(WP_PS_IFT_DCC_START, "WP_PS_IFT_DCC_START") ;


   RegisterWaypoint(WP_DC_ETT_TERMAL_START, "WP_DC_ETT_TERMAL_START") ;
   RegisterWaypoint(WP_DC_ETT_TERMAL_STOP, "WP_DC_ETT_TERMAL_STOP") ;
   RegisterWaypoint(WP_DC_ETT_FE_START, "WP_DC_ETT_FE_START") ;
   RegisterWaypoint(WP_DC_ETT_FE_STARTED, "WP_DC_ETT_FE_STARTED") ;
   RegisterWaypoint(WP_DC_ETT_FE_START_PIPELINE, "WP_DC_ETT_FE_START_PIPELINE") ;
   RegisterWaypoint(WP_DC_ETT_FE_NON_OP, "WP_DC_ETT_FE_NON_OP") ;
   RegisterWaypoint(WP_DC_ETT_FE_OP, "WP_DC_ETT_FE_OP") ;
   RegisterWaypoint(WP_DC_ETT_FE_NON_OP_PIPELINE, "WP_DC_ETT_FE_NON_OP_PIPELINE") ;
   RegisterWaypoint(WP_DC_ETT_FE_STOP, "WP_DC_ETT_FE_STOP") ;
   RegisterWaypoint(WP_DC_ETT_FE_STOP_PIPELINE, "WP_DC_ETT_FE_STOP_PIPELINE") ;
   RegisterWaypoint(WP_DC_ETT_FE_STOPPED, "WP_DC_ETT_FE_STOPPED") ;




   RegisterWaypoint(WP_PS_DGM_1P0V, "WP_PS_DGM_1P0V") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_COUNTERS, "WP_PS_DGM_1P0V_COUNTERS") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE, "WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE") ;





   RegisterWaypoint(WP_PS_SENSE_AVOID, "WP_PS_SENSE_AVOID") ;
   RegisterWaypoint(WP_PS_FTL_PHY_ERASE_REQ_BLOCK, "WP_PS_FTL_PHY_ERASE_REQ_BLOCK") ;
   RegisterWaypoint(WP_PS_RS_COUNTERS, "WP_PS_RS_COUNTERS") ;
   RegisterWaypoint(WP_PS_CVD_TCO_CMD33, "WP_PS_CVD_TCO_CMD33") ;
   RegisterWaypoint(WP_PS_VALIDATE_CMD_FF, "WP_PS_VALIDATE_CMD_FF") ;
   RegisterWaypoint(WP_PS_VALIDATE_CMD_FB, "WP_PS_VALIDATE_CMD_FB") ;

   RegisterWaypoint(WP_PS_REH_NON_CACHE_MODE, "WP_PS_REH_NON_CACHE_MODE") ;

   RegisterWaypoint(WP_PS_DGM_1P0V_SET_FEATURE, "WP_PS_DGM_1P0V_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_CMD, "WP_PS_DGM_1P0V_CMD") ;

   RegisterWaypoint(WP_BKOPS_RELOCATION_COMPLETE, "WP_BKOPS_RELOCATION_COMPLETE") ;


   RegisterWaypoint(WP_MVP_CAL_SCALE_QUOTA, "WP_MVP_CAL_SCALE_QUOTA") ;
   RegisterWaypoint(WP_MVP_EMERGENCY_GC, "WP_MVP_EMERGENCY_GC") ;
   RegisterWaypoint(WP_MVP_EMERGENCY_GC2, "WP_MVP_EMERGENCY_GC2") ;
   RegisterWaypoint(WP_MVP_SBR_RLC_START, "WP_MVP_SBR_RLC_START") ;
   RegisterWaypoint(WP_MVP_HOST_QUOTA_CONSUME, "WP_MVP_HOST_QUOTA_CONSUME") ;
   RegisterWaypoint(WP_MVP_HOST_QUOTA_CONSUME_I, "WP_MVP_HOST_QUOTA_CONSUME_I") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME1, "WP_MVP_GC_QUOTA_CONSUME1") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME2, "WP_MVP_GC_QUOTA_CONSUME2") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME_I, "WP_MVP_GC_QUOTA_CONSUME_I") ;
   RegisterWaypoint(WP_MVP_NEED_STOP_RLC_1, "WP_MVP_NEED_STOP_RLC_1") ;
   RegisterWaypoint(WP_MVP_NEED_STOP_RLC_2, "WP_MVP_NEED_STOP_RLC_2") ;
   RegisterWaypoint(WP_MVP_STOP_DONE_RLC, "WP_MVP_STOP_DONE_RLC") ;
   RegisterWaypoint(WP_MVP_IRLC_TRIGGER, "WP_MVP_IRLC_TRIGGER") ;
   RegisterWaypoint(WP_MVP_IRLC_SWITCH, "WP_MVP_IRLC_SWITCH") ;
   RegisterWaypoint(WP_MVP_IRLC_TERMINATE, "WP_MVP_IRLC_TERMINATE") ;


   RegisterWaypoint(WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK, "WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_USE_SAVED_INFO, "WP_FTL_RLC_RESUME_USE_SAVED_INFO") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_CLEAR_INFO, "WP_FTL_RLC_RESUME_CLEAR_INFO") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_CHANGE_JB, "WP_FTL_RLC_RESUME_CHANGE_JB") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_SAVE_CS, "WP_FTL_RLC_RESUME_SAVE_CS") ;




   RegisterWaypoint(WP_PS_SFA_SKIP_SET_FEATURE, "WP_PS_SFA_SKIP_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_SFA_SKIP_5D_PREFIX, "WP_PS_SFA_SKIP_5D_PREFIX") ;



   RegisterWaypoint(WP_RPMB_WRITE_COUNTER, "WP_RPMB_WRITE_COUNTER") ;
   RegisterWaypoint(WP_RPMB_WRITE_STATUS, "WP_RPMB_WRITE_STATUS") ;
   RegisterWaypoint(WP_RPMB_UGSD_RECOVERED, "WP_RPMB_UGSD_RECOVERED") ;
   RegisterWaypoint(WP_FWR_WRITE_RPMB, "WP_FWR_WRITE_RPMB") ;
   RegisterWaypoint(WP_RPMB_UGSD_LOST, "WP_RPMB_UGSD_LOST") ;


   RegisterWaypoint(WP_PS_IRJB_OPENED, "WP_PS_IRJB_OPENED") ;
   RegisterWaypoint(WP_PS_IRJB_PRE_TRANSLATION, "WP_PS_IRJB_PRE_TRANSLATION") ;
   RegisterWaypoint(WP_PS_IRJB_POST_TRANSLATION, "WP_PS_IRJB_POST_TRANSLATION") ;
   RegisterWaypoint(WP_PS_IRJB_INV_TRANSLATION, "WP_PS_IRJB_INV_TRANSLATION") ;


   RegisterWaypoint(WP_PS_REH_MARK_UECC, "WP_PS_REH_MARK_UECC") ;
   RegisterWaypoint(WP_REH_CVD_DUMP_TRIGGER, "WP_REH_CVD_DUMP_TRIGGER") ;
   RegisterWaypoint(WP_PS_REH_INDICATE_HEADER_BIT_SET, "WP_PS_REH_INDICATE_HEADER_BIT_SET") ;
   RegisterWaypoint(WP_PS_REH_FMU_MARK_UECC, "WP_PS_REH_FMU_MARK_UECC") ;
   RegisterWaypoint(WP_PS_REH_READ_FAIL_SHIFTS, "WP_PS_REH_READ_FAIL_SHIFTS") ;
   RegisterWaypoint(WP_PS_REH_READ_RETRY_SHIFTS, "WP_PS_REH_READ_RETRY_SHIFTS") ;
   RegisterWaypoint(WP_PS_REH_DMC_RES, "WP_PS_REH_DMC_RES") ;
   RegisterWaypoint(WP_PS_REH_SBR_CMD_C2, "WP_PS_REH_SBR_CMD_C2") ;

   RegisterWaypoint(WP_PS_PF_20_INDICATE_GBB_AND_RELINK, "WP_PS_PF_20_INDICATE_GBB_AND_RELINK") ;
   RegisterWaypoint(WP_PS_PF_23_CHECK_STATUS, "WP_PS_PF_23_CHECK_STATUS") ;
   RegisterWaypoint(WP_PS_PF_24_COPY_SOURCE_BLK_INFO, "WP_PS_PF_24_COPY_SOURCE_BLK_INFO") ;
   RegisterWaypoint(WP_PS_PF_25_COPY_DESTINATION_BLK_INFO, "WP_PS_PF_25_COPY_DESTINATION_BLK_INFO") ;

   RegisterWaypoint(WP_PS_EF_11_NPD_START, "WP_PS_EF_11_NPD_START") ;
   RegisterWaypoint(WP_PS_EF_12_NPD_CHECK, "WP_PS_EF_12_NPD_CHECK") ;
   RegisterWaypoint(WP_PS_EF_13_NPD_CHECK_DONE, "WP_PS_EF_13_NPD_CHECK_DONE") ;

   RegisterWaypoint(WP_PS_FLGP_NER_DMC_THRESHOLDS, "WP_PS_FLGP_NER_DMC_THRESHOLDS") ;
   RegisterWaypoint(WP_PS_FLGP_TER_DMC_THRESHOLDS, "WP_PS_FLGP_TER_DMC_THRESHOLDS") ;
   RegisterWaypoint(WP_PS_FLGP_LGW_BER_THRESHOLDS, "WP_PS_FLGP_LGW_BER_THRESHOLDS") ;

   RegisterWaypoint(WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION, "WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION") ;
   RegisterWaypoint(WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE, "WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE") ;

   RegisterWaypoint(WP_PS_DGM_32K_WRITE, "WP_PS_DGM_32K_WRITE") ;


   RegisterWaypoint(WP_PS_XOR_STORE_PAR_START_REQ, "WP_PS_XOR_STORE_PAR_START_REQ") ;
   RegisterWaypoint(WP_PS_XOR_PAR_LOAD_FROM_DRAM_REQ, "WP_PS_XOR_PAR_LOAD_FROM_DRAM_REQ") ;


}

#line 33 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml_dbgutils.h"

#line 107 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml_dbgutils.h"
typedef struct FML_DbgUtilsResourcesUse_s
{
   uint32_t handlerId;
   uint64_t startTime;
   uint64_t endTime;
   uint64_t totalTime;
   uint32_t cuqCnt;
   uint32_t pendingCompletions[ (2) ];
   uint32_t ctxtAllocs;
   uint32_t uaAllocs     [ (6) ];
   uint32_t blockAllocs  [ (2) ];
   uint32_t blockReleases[ (2) ];
   uint32_t psOperations [ (2) ][ (5) ];
} FML_DbgUtilsResourcesUse_t;

typedef struct FML_DbgUtilsResourcesUseCb_s
{
   FML_DbgUtilsResourcesUse_t currUse;
   FML_DbgUtilsResourcesUse_t maxUse;
   FML_DbgUtilsResourcesUse_t maxHandlerId;
   FML_DbgUtilsResourcesUse_t threshUse;
} FML_DbgUtilsResourcesUseCb_t;


typedef struct FML_DbgUtilsCb_s
{
   FML_DbgUtilsResourcesUseCb_t resUseCb;
} FML_DbgUtilsCb_t;




extern FML_DbgUtilsCb_t FML_DbgUtilsCb;









void FML_DbgUtilsInit(void);






void FML_DbgUtilsMeasureFlowStart(uint32_t handlerId);






void FML_DbgUtilsMeasureFlowEnd(void);

void FTL_GetStats(void);

#line 34 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml_handlers_api.h"

#line 29 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml_handlers_api.h"
typedef enum
{
   FML_HID_PS_ADMIN_URGENT_0,
   FML_HID_PS_ADMIN_URGENT_1,
   FML_HID_FMG_EXCLUSIVE,
   FML_HID_PS_COMP_0,
   FML_HID_PS_COMP_1,
   FML_HID_PS_ADMIN_NORMAL_0,
   FML_HID_PS_ADMIN_NORMAL_1,
   FML_HID_FMG_MANAGEMENT,
   FML_HID_FMG_WRITE,
   FML_HID_FE_ADMIN,
   FML_HID_HOST_READ,
   FML_HID_HOST_READ_OVP,
   FML_HID_HOST_WRITE_W_BALANCING,
   FML_HID_HOST_WRITE_W_BALANCING_RW = FML_HID_HOST_WRITE_W_BALANCING,
   FML_HID_HOST_WRITE_W_BALANCING_SW,
   FML_HID_HOST_WRITE_W_BALANCING_OVP,
   FML_HID_FMG_BKOPS,
   FML_HID_IDLE,
   FML_HID_NUM,
   FML_HID_ILLEGAL,
}FML_HanderId;

#line 40 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"

typedef struct __S_FML_HAS_WORK S_FML_HAS_WORK;

#line 220 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
typedef enum
{
   FML_RESTRICT_1ST,
   FML_RESTRICT_FMG = FML_RESTRICT_1ST,
   FML_RESTRICT_PS_Q,
   FML_RESTRICT_JB_ALLOC,
   FML_RESTRICT_SIDE_Q,
   FML_RESTRICT_ULAYER,
   FML_RESTRICT_BRLC,
   FML_RESTRICT_WRITE_QUOTA,
   FML_RESTRICT_WRITE_SYNC,
   FML_RESTRICT_RMW_BY_FE,
   FML_RESTRICT_HWD_GRP_ID,
   FML_RESTRICT_OVP_SYNCH,
   FML_RESTRICT_OVP_RMW,
   FML_RESTRICT_WRITE_ON_RMW,
   FML_RESTRICT_DEALLOC_ON_RMW,
   FML_RESTRICT_LIMITED_BKOPS,
   FML_RESTRICT_FORMAT_NVME,
   FML_RESTRICT_RS_DB_FULL,
   FML_RESTRICT_RS_PEM_ACTIVE,
   FML_RESTRICT_MOUNT_NO_RD_WR,

#line 245 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
   FML_RESTRICT_MOUNT_NO_WR,
   FML_RESTRICT_IDALIZING_FTL,
   FML_RESTRICT_RO_MODE,
   FML_RESTRICT_FNVM,
   FML_RESTRICT_BRLC_NO_RD,
   FML_RESTRICT_MOUNT_NO_FE_Q,
   FML_RESTRICT_RS_DISABLED,
   FML_RESTRICT_READ_OVP,
   FML_RESTRICT_WRITE_Q,
   FML_RESTRICT_FW_ACTIVE_IDLE,
   FML_RESTRICT_NUM,
}FML_ResRestrictions;

enum FML_GoIdleState_s
{
    FML_GO_IDLE_STATE_IDLE,
    FML_GO_IDLE_STATE_EMPTY_HA_FIFO_AND_FLUSH_HAWA,
    FML_GO_IDLE_STATE_WAIT_OVP,
    FML_GO_IDLE_STATE_WAIT_IDLE,
    FML_GO_IDLE_STATE_WAIT_BARRIER,
    FML_GO_IDLE_STATE_POST_IDLE,
    FML_GO_IDLE_STATE_CALLBACK,
    FML_GO_IDLE_STATE_MAX
};

typedef uint32_t FML_GoIdleState_t;




typedef void (*fmlHander)(void);
typedef void (*fmlIdleHandler)(uint32_t);



typedef struct __S_FML_RESTRICT
{
   uint32_t FML_RESTRICT_FMG : 1;
   uint32_t FML_RESTRICT_PS_Q : 1;
   uint32_t FML_RESTRICT_JB_ALLOC : 1;
   uint32_t FML_RESTRICT_SIDE_Q : 1;
   uint32_t FML_RESTRICT_ULAYER : 1;
   uint32_t FML_RESTRICT_BRLC : 1;
   uint32_t FML_RESTRICT_WRITE_QUOTA : 1;
   uint32_t FML_RESTRICT_WRITE_SYNC : 1;
   uint32_t FML_RESTRICT_RMW_BY_FE : 1;
   uint32_t FML_RESTRICT_HWD_GRP_ID: 1;
   uint32_t FML_RESTRICT_OVP_SYNCH : 1;
   uint32_t FML_RESTRICT_OVP_RMW : 1;
   uint32_t FML_RESTRICT_WRITE_ON_RMW : 1;
   uint32_t FML_RESTRICT_DEALLOC_ON_RMW: 1;
   uint32_t FML_RESTRICT_LIMITED_BKOPS : 1;
   uint32_t FML_RESTRICT_FORMAT_NVME : 1;
   uint32_t FML_RESTRICT_RS_DB_FULL : 1;
   uint32_t FML_RESTRICT_RS_PEM_ACTIVE : 1;
   uint32_t FML_RESTRICT_MOUNT_NO_RD_WR : 1;

#line 304 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
   uint32_t FML_RESTRICT_MOUNT_NO_WR : 1;
   uint32_t FML_RESTRICT_IDALIZING_FTL : 1;
   uint32_t FML_RESTRICT_RO_MODE : 1;
   uint32_t FML_RESTRICT_FNVM : 1;
   uint32_t FML_RESTRICT_BRLC_NO_RD : 1;
   uint32_t FML_RESTRICT_MOUNT_NO_FE_Q : 1;
   uint32_t FML_RESTRICT_RS_DISABLED : 1;
   uint32_t FML_RESTRICT_READ_OVP : 1;
   uint32_t FML_RESTRICT_WRITE_Q : 1;
   uint32_t FML_RESTRICT_FW_ACTIVE_IDLE : 1;
   uint32_t reserved : 32 - FML_RESTRICT_NUM;
} S_FML_RESTRICT;

typedef struct FML_Handler_s
{
   uint32_t hasWorkMask;
   fmlHander func;
   uint32_t handlerNum;

#line 325 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
} FML_Handler_t;




typedef struct FML_Cb_s
{
   uint32_t numberOfQs;

   FML_Handler_t handlers[ (32) ];
   uint8_t myRRpoints[ (32) ];
   uint8_t currentRRpoints[ (32) ];

   FML_Handler_t *handler;

   uint16_t       idleizationCtxt;
   uint16_t       padding;
   FML_GoIdleState_t idleizationState;
   fmlIdleHandler idleReqCallback;
   uint32_t       idleReqCallbackParam;

   uint32_t hostQueues;

   uint32_t hasWRRmask;





   uint32_t currRestrictorsCombination;


   uint32_t currActiveHandlersBitmap;


   uint32_t activeHandlersBitmapsPerRestrictor[FML_RESTRICT_NUM];

   uint32_t maskOnFullResources;

   S_FML_HAS_WORK * dbgHasWorkBits;
   S_FML_HAS_WORK * dbgActiveHandlerBits;
   S_FML_RESTRICT * dbgFmlRestrictorsBits;

   uint32_t FTL_ThreadID;

   uint32_t IsOnGoingSHD;
   uint32_t IsOnGoingRO;

   uint32_t amountOfRecoveredUserDataInFMU;

#line 377 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
} FML_Cb_t;





typedef struct FML_RTFADI_Data_s
{
   uint32_t workRegister;
   uint32_t currRestrictorsCombination;
   uint8_t idleizationState;
   uint8_t rfu[3];
   uint32_t toatlDurationMsPerRestriction[FML_RESTRICT_NUM];
}  FML_RTFADI_Data_t;








extern FML_Cb_t FML_CB;

#line 415 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void FML_Init (void);

#line 427 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void  __attribute__((section("TRW")))  FML_Init_II(void);

#line 440 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void   FML_Execute(void);

#line 453 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void FML_FADIStatsSetRestriction(FML_ResRestrictions res);






__inline static  uint32_t MVP_CheckWritesActive(void)
{
   uint32_t fmlWriteMask =  (1 << (FML_HID_HOST_WRITE_W_BALANCING_RW))  |  (1 << (FML_HID_HOST_WRITE_W_BALANCING_SW))  |  (1 << (FML_HID_HOST_WRITE_W_BALANCING_OVP)) ;
   return ( ReadRegister( (unsigned long)( ( 0xf108e000  + (0x100) ) ) )  & fmlWriteMask);
}

#line 477 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  BOOL32 FML_IsInFTL(void)
{
   RTOS_ThreadInfo_t  threadInfo = RTOS_GetThreadInfo();

   return (threadInfo.threadType == THREAD_RAM_FTL);
}

#line 497 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  void FML_Register(FML_HanderId handlerId, const FML_Handler_t * handlerCfg, uint8_t RRweight)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)handlerId < (32)), "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h" , 499 , "(uint32_t)handlerId < (32)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(handlerCfg), "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h" , 500 , "handlerCfg");                         "BullseyeCoverage restore"; } ;

   LivetMemcpy (&FML_CB.handlers[handlerId], handlerCfg, sizeof(FML_Handler_t));
   FML_CB.myRRpoints[handlerId] = RRweight;
}

#line 518 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  void FML_SetResRestriction(FML_ResRestrictions res)
{

   uint32_t oldPosture;

   if (! (uint32_t)((FML_CB.currRestrictorsCombination) & ( (1 << (res)) )) )
   {

      oldPosture =  DisableInt() ;

      (FML_CB.currRestrictorsCombination) |= (uint32_t)( (1 << (res)) ) ;
      {((G_fm.lowResources).count++); if((G_fm.lowResources).breakOn && ((G_fm.lowResources).breakOn == (G_fm.lowResources).count)){ printf("[DBG_MSG_INFO]      "); printf("got to debug break"); printf("\n");fflush( (&__iob_func()[1]) ); ;for(;;){;} ;} ;} ;

      FML_CB.currActiveHandlersBitmap &= FML_CB.activeHandlersBitmapsPerRestrictor[res];

      ;
      WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_DEBUG_RMA_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(res) ) ;
      WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_DEBUG_RMA_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(FML_CB.currActiveHandlersBitmap) ) ;
      WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_DEBUG_RMA_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_FML_SET_REST_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;

      {$inst("Suspend"); if(WaypointMap[WP_FML_LOW_RESOURCES_START]){ Waypoint(WP_FML_LOW_RESOURCES_START, 1, res);} $inst("Resume");} ;

      ;

      FML_FADIStatsSetRestriction(res);


      RestoreInt(oldPosture) ;
   }
}

#line 561 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void FML_ClearRestrictionInternal(FML_ResRestrictions res);

#line 573 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
BOOL32 FML_IsFmlIdleAndNoPsCompl(void);

#line 586 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
BOOL32 FML_IsFtlIdleAndNoPsCompl(void);

#line 598 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
BOOL32 FML_IsFullyIdle(void);










void FML_DeactivateAndIdle(fmlIdleHandler func, uint32_t param, BOOL32 deactivateBeforeIdle);

#line 622 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void FML_PrepareIdleForFWAI(fmlIdleHandler func, uint32_t param);

#line 634 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
void FML_Activate(BOOL32 Activate);

void FML_FEAdminQLogState(void);

#line 650 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  void FML_ClearResRestriction(FML_ResRestrictions res)
{
   if ( (uint32_t)((FML_CB.currRestrictorsCombination) & ( (1 << (res)) ))  !=  (0) )
   {
      FML_ClearRestrictionInternal(res);
   }
}










__inline static  BOOL32 FML_IsCurrActiveHandler(FML_HanderId handlerId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(handlerId <= FML_HID_NUM), "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h" , 669 , "handlerId <= FML_HID_NUM");                         "BullseyeCoverage restore"; } ;
   return  (uint32_t)((FML_CB.currActiveHandlersBitmap) & ( (1 << (handlerId)) )) ;
}










__inline static  BOOL32 FML_IsLowResRestriction(FML_ResRestrictions res)
{
   return  (uint32_t)((FML_CB.currRestrictorsCombination) & ( (1 << (res)) )) ;
}

#line 697 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  BOOL32 FML_IsPendingForIdle(void)
{
   return (FML_CB.idleizationState >= FML_GO_IDLE_STATE_WAIT_OVP);
}


   uint32_t FML_GetRTFADIStatistics(FML_RTFADI_Data_t * pFMLRTFADI);


void FML_ReturnToGoIdleFromTLCFlushBuffers(void);

#line 718 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
BOOL32 FML_CanRlaWork(uint32_t lastCommandSectorCount);








void   __attribute__((section("CODE_SLOW")))  FML_DiagSetFtlWorkingMode(uint8_t mode);

#line 749 "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h"
__inline static  uint32_t FML_UtilFindFirstSet(uint32_t bitMap)
{
   const uint32_t distinctFiveBitsSequence = 0x077CB531U;


   static const uint32_t bit_position[32] =
   {
      0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
      31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9
   };

   uint32_t isolated_lsb_bit = (bitMap & (~bitMap + 1));
   uint32_t sequence = ((uint32_t)(isolated_lsb_bit * distinctFiveBitsSequence)) >> (32 - 5);


   { "BullseyeCoverage save off";                          _AssertImpl((int)(bitMap != 0), "d:/gitrepo/atlas3_release/source/ftl/inc_public/fml.h" , 764 , "bitMap != 0");                         "BullseyeCoverage restore"; } ;

   return bit_position[sequence];
}

#line 34 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"

#line 1 "d:/gitrepo/atlas3_release/source/infra/rtos/inc_public/rtos_eventflagdefines.h"

#line 37 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"

#line 135 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
typedef enum FMG_CtxtLoc_s
{
   FMG_CTXT_LOC_FREE,
   FMG_CTXT_LOC_FLOW,
   FMG_CTXT_LOC_PENDING_QUEUE,
   FMG_CTXT_LOC_READY_QUEUE,
   FMG_CTXT_LOC_PS,
   FMG_CTXT_LOC_WAIT_FOR_TIMER,
   FMG_CTXT_LOC_TOTAL,
} FMG_CtxtLoc_t;


typedef enum FMG_ExecStatus_s
{
   FMG_STATUS_OK,
   FMG_STATUS_FAIL,
   FMG_STATUS_TOTAL,
} FMG_ExecStatus_t;







typedef void (*FMG_CallbackFunc_t)(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);




typedef struct FMG_Ctxt_s
{
   FMG_CallbackFunc_t   pCallbackFunc;
   void*                pUserArea;
   uint32_t             failureReport;
   uint32_t             pendingCompletions;
   uint16_t             nextCtxtIdx;
   uint16_t             thisCtxtIdx;
   uint8_t              weightToAquire;
   uint8_t              dstRdyQueue;
   uint8_t              allowedNestedAlloc : 2;
   uint8_t              isCounting         : 1;
   uint8_t              isAggregating      : 1;
   uint8_t              dismissStatusCheck : 1;
   uint8_t              allRdsErased       : 1;
   uint8_t              isLastComplectionErased : 1;
   uint8_t              failureWUC         : 1;



   uint8_t              locationId         : 3;
   uint8_t              status             : 1;
   uint8_t              isScheduled        : 1;
   uint8_t              rfu8_2 : 3;


   uint32_t             dbgCounter;


} FMG_Ctxt_t;




typedef struct FMG_CtxtQueue_s
{
   uint16_t firstIdx;
   uint16_t lastIdx;
   uint16_t count;
} FMG_CtxtQueue_t;




typedef struct FMG_CtxtCb_s
{
   FMG_Ctxt_t        pContextsTbl    [ (512) ];
   FMG_CtxtQueue_t   pReadyQueuesTbl [FML_HID_NUM];

#line 216 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
   uint32_t          freeCtxtCount;
   uint32_t          freeLstHeadIdx;
   uint32_t          dbgCallbackStartFreeCtxtCount;
} FMG_CtxtCb_t;





extern FMG_CtxtCb_t FMG_CtxtCb;

#line 239 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
FMG_Ctxt_t* FMG_i_CtxtQueuePop (FMG_CtxtQueue_t* pQueue);

#line 251 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
void FMG_i_CtxtQueueAdd (uint32_t ctxtId, FMG_CtxtQueue_t* pQueue);

#line 264 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
void FMG_i_CtxtQueueAddToReady (uint32_t ctxtId, FMG_ExecStatus_t execStatus, uint32_t failureReport);

#line 277 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
void FMG_CtxtQueueAddToPending (uint32_t ctxtId, FMG_CtxtQueue_t* pQueue, uint8_t weight);

#line 296 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
uint32_t FMG_CtxtReportFailure (MP_MQD_PSType_t psid, PS_GenericExceptionReq_t* req);

#line 311 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
void FMG_CtxtHandleMailbox (uint32_t cookie);




void FMG_CtxtHandleReadyQueueManagement(void);
void FMG_CtxtHandleReadyQueueWrite(void);
void FMG_CtxtHandleReadyQueueExclusive(void);
void FMG_CtxtHandleReadyQueueBkops(void);

#line 336 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
uint16_t FMG_CtxtAllocate (FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue, BOOL32 countCompletions);










void FMG_CtxtRelease (uint32_t ctxtId);










void FMG_CtxtInitContexts (void);

#line 374 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint8_t          FMG_Ctxt_GetLocationId (FMG_Ctxt_t *pCtxt) { return                   pCtxt->locationId ; }
__inline static  FMG_ExecStatus_t FMG_Ctxt_GetStatus     (FMG_Ctxt_t *pCtxt) { return (FMG_ExecStatus_t)pCtxt->status     ; }
__inline static  BOOL             FMG_Ctxt_GetIsScheduled(FMG_Ctxt_t *pCtxt) { return                   pCtxt->isScheduled; }

#line 388 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void    FMG_Ctxt_SetLocationId (FMG_Ctxt_t *pCtxt, uint8_t          locationId ) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->locationId = locationId;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }
__inline static  void    FMG_Ctxt_SetStatus     (FMG_Ctxt_t *pCtxt, FMG_ExecStatus_t status     ) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->status = (uint8_t)status;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }
__inline static  void    FMG_Ctxt_SetIsScheduled(FMG_Ctxt_t *pCtxt, BOOL             isScheduled) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->isScheduled = isScheduled;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }

#line 404 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtQueueInit (FMG_CtxtQueue_t* pQueue)
{
   pQueue->firstIdx  =  ( (0xFFFF)  - 1) ;
   pQueue->lastIdx   =  ( (0xFFFF)  - 1) ;
   pQueue->count     = 0;
}










__inline static  uint32_t FMG_CtxtQueuePeek (FMG_CtxtQueue_t* pQueue)
{
   return pQueue->firstIdx;
}










__inline static  void FMG_CtxtQueueMoveToReady (FMG_CtxtQueue_t* pSrcQueue)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(FML_IsInFTL()), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 436 , "FML_IsInFTL()");                         "BullseyeCoverage restore"; } ;
   FMG_i_CtxtQueueAddToReady(FMG_i_CtxtQueuePop(pSrcQueue)->thisCtxtIdx, FMG_STATUS_OK, 0);
}

#line 454 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint16_t FMG_CtxtAllocateNonCountingCompletions(FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue)
{
   return FMG_CtxtAllocate(pCallbackFunc, pUserArea, destRdyQueue,  (0) );
}

#line 470 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint16_t FMG_CtxtAllocateCountingCompletions(FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue)
{
   return FMG_CtxtAllocate(pCallbackFunc, pUserArea, destRdyQueue,  (1) );
}










__inline static  void FMG_CtxtFlowScheduleForLater (uint32_t ctxtId)
{
   FMG_i_CtxtQueueAddToReady(ctxtId, FMG_STATUS_OK, 0);
   if (!FML_IsInFTL())
   {
      RTOS_LightWeightEventSet(EVENT_GROUP_FTL,  0x00000001 );
   }
}

#line 504 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtFlowScheduleForLaterWithStatus (uint32_t ctxtId, FMG_ExecStatus_t execStatus, uint32_t failureReport)
{
   FMG_i_CtxtQueueAddToReady(ctxtId, execStatus, failureReport);
   if (!FML_IsInFTL())
   {
      RTOS_LightWeightEventSet(EVENT_GROUP_FTL,  0x00000001 );
   }
}

#line 523 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtFlowNotifyPsOpStart (uint32_t ctxtId, uint32_t amountPsOps)
{

   FMG_Ctxt_t* pCtxt =  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((pCtxt->pendingCompletions == 0) || ((pCtxt->isAggregating == (1) ) && (pCtxt->isCounting == (1) ))), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 529 , "(pCtxt->pendingCompletions == 0) || ((pCtxt->isAggregating == (1)) && (pCtxt->isCounting == (1)))");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(pCtxt->dismissStatusCheck || (FMG_Ctxt_GetStatus(pCtxt) == FMG_STATUS_OK)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 532 , "pCtxt->dismissStatusCheck || (FMG_Ctxt_GetStatus(pCtxt) == FMG_STATUS_OK)");                         "BullseyeCoverage restore"; } ;


   FMG_Ctxt_SetLocationId((pCtxt), (FMG_CTXT_LOC_PS)) ;


   if (pCtxt->isCounting ==  (1) )
   {
      pCtxt->pendingCompletions += (uint8_t)amountPsOps;
   }

   pCtxt->dbgCounter +=amountPsOps;

}

#line 557 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint32_t FMG_CtxtCookieBuild(uint32_t ctxtId, uint16_t payload)
{
  return ((ctxtId &  ((1 << (9) ) - 1) ) <<  (0) ) | ((payload &  ((1 << (16) ) - 1) ) <<  ( (6)  + ( (1)  + ( (9)  + (0) ) ) ) );
}










__inline static  BOOL32 FMG_IsCtxtScheduled(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 573 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return FMG_Ctxt_GetIsScheduled( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) );
}










__inline static  BOOL FMG_CtxtFlowScheduleForLaterSafe (uint32_t ctxtId)
{
   BOOL canSchedule = !FMG_IsCtxtScheduled(ctxtId);

   if (canSchedule)
   {
      FMG_CtxtFlowScheduleForLater(ctxtId);
   }

   return canSchedule;
}




__inline static  void FMG_CtxtSetCallbackFunc(uint32_t ctxtId, FMG_CallbackFunc_t pCallbackFunc)
{

   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(ctxtId) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)((uint32_t)pCallbackFunc) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_FMG_CTXT_FLOW_SET_CALLBACK_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pCallbackFunc = pCallbackFunc;
}
__inline static  void FMG_CtxtSetUserArea(uint32_t ctxtId, void* pUserArea)
{

   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(ctxtId) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)((uint32_t)pUserArea) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_FMG_CTXT_FLOW_SET_UA_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pUserArea = pUserArea;
}
__inline static  void FMG_CtxtSetDstRdyQueue(uint32_t ctxtId, FML_HanderId dstRdyQueue)
{

   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(ctxtId) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 3     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(dstRdyQueue) ) ;
   WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_FMG_CTXT_FLOW_SET_RDY_QUEUE_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dstRdyQueue = (uint8_t)dstRdyQueue;
}
__inline static  void FMG_CtxtSetWeightToAquire(uint32_t ctxtId, uint8_t weightToAquire)
{
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->weightToAquire = weightToAquire;
}
__inline static  void FMG_CtxtSetStartCompletionsAggregation(uint32_t ctxtId)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)(( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pendingCompletions == 0) && ( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isCounting == (1) )), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 635 , "((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->pendingCompletions == 0) && ((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->isCounting == (1))");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating =  (1) ;
}
__inline static  void FMG_CtxtSetStopCompletionsAggregation(uint32_t ctxtId)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)((&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isCounting == (1)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 641 , "(&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->isCounting == (1)");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating =  (0) ;
}

__inline static  void FMG_CtxtSetDismissFailureCheck(uint32_t ctxtId)
{
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dismissStatusCheck =  (1) ;

}

__inline static  void FMG_CtxtSetAllowedNestedAllocations(uint32_t ctxtId, uint8_t allowedAlloc)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(allowedAlloc <= (3)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 653 , "allowedAlloc <= (3)");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allowedNestedAlloc = allowedAlloc;
}




__inline static  FMG_CallbackFunc_t FMG_CtxtGetCallbackFunc(uint32_t ctxtId)
{
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pCallbackFunc;
}
__inline static  void* FMG_CtxtGetUserArea(uint32_t ctxtId)
{
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pUserArea;
}
__inline static  FML_HanderId FMG_CtxtGetDstRdyQueue(uint32_t ctxtId)
{
   return (FML_HanderId)( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dstRdyQueue);
}
__inline static  uint8_t FMG_CtxtGetWeightToAquire(uint32_t ctxtId)
{
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->weightToAquire;
}
__inline static  uint32_t FMG_CtxtGetFailureReport(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)((&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isCounting == (0)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 678 , "(&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->isCounting == (0)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->failureReport;
}

__inline static  uint32_t FMG_CtxtGetRdEraseErr(uint32_t ctxtId)
{
   return ( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allRdsErased == 1);
}
__inline static  void FMG_CtxtResetStatusNRdEraseErr(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(FMG_Ctxt_GetIsScheduled( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ) == (0)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 688 , "FMG_Ctxt_GetIsScheduled((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))) == (0)");                         "BullseyeCoverage restore"; } ;

   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isLastComplectionErased = 0;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allRdsErased = 1;
   FMG_Ctxt_SetStatus( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) , FMG_STATUS_OK);
}

__inline static  BOOL32 FMG_CtxtGetIsAggregatingCompletions(uint32_t ctxtId)
{
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating;
}

__inline static  uint32_t FMG_CtxtGetLrmThreshold()
{
   return  (10) ;
}

__inline static  uint32_t FMG_CtxtGetPendingCompletions(uint32_t ctxtId)
{
   FMG_Ctxt_t *pCtxt;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_contexts.h" , 709 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   pCtxt =  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ;

   return pCtxt->pendingCompletions;
}

__inline static  uint32_t FMG_CtxtIsInLowResources(void)
{
   return (FMG_CtxtCb.freeCtxtCount <  (10) );
}

#line 43 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"

#line 58 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"
typedef struct FMG_Lock_s
{
   FMG_CtxtQueue_t   pendingContextsQueue;
   uint8_t           currWeight;
   uint8_t           padding;
} FMG_Lock_t;




typedef struct FMG_LockCb_s
{
   FMG_Lock_t pLocks [ (288) ];
} FMG_LockCb_t;





extern FMG_LockCb_t FMG_LockCb;

#line 101 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"
BOOL32 FMG_LockAcquire (uint32_t lockId, uint16_t ctxtId, uint8_t weight, BOOL32 addToPendingQueue);

#line 119 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"
void FMG_LockRelease (uint32_t lockId, uint8_t weight);

#line 131 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"
void FMG_LockSetWeight (uint32_t lockId, uint8_t weight);










void FMG_LockInitLocks (void);

#line 157 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_locks.h"
__inline static  BOOL32 FMG_LockIsAquirable (uint32_t lockId, uint8_t weight)
{

   FMG_Lock_t* pLock = &(FMG_LockCb.pLocks[lockId]);
   return ((pLock->currWeight >= weight) && ( ((&(pLock->pendingContextsQueue))->firstIdx == ( (0xFFFF)  - 1) ) ));
}

#line 44 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_userarea.h"

#line 60 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_userarea.h"
typedef enum FMG_UaPoolType_s
{
   FMG_UA_POOL_TYPE_T0,
   FMG_UA_POOL_TYPE_T1,
   FMG_UA_POOL_TYPE_T2,
   FMG_UA_POOL_TYPE_T3,
   FMG_UA_POOL_TYPE_T4,
   FMG_UA_POOL_TYPE_T5,
   FMG_UA_POOL_TYPE_TOTAL,
   FMG_UA_POOL_TYPE_ILLEGAL = 0xFFFFFFFF,
} FMG_UaPoolType_t;





typedef enum FMG_UaBufferSize_s
{
   FMG_UA_BUFF_SIZE_T0 = 20,
   FMG_UA_BUFF_SIZE_T1 =  (0) ,
   FMG_UA_BUFF_SIZE_T2 =  (0) ,
   FMG_UA_BUFF_SIZE_T3 = 104,
   FMG_UA_BUFF_SIZE_T4 = 196,
   FMG_UA_BUFF_SIZE_T5 =  (0) ,
} FMG_UaBufferSize_t;




typedef enum FMG_UaPoolSize_s
{
   FMG_UA_POOL_SIZE_T0 = 16,
   FMG_UA_POOL_SIZE_T1 =  (0) ,
   FMG_UA_POOL_SIZE_T2 =  (0) ,
   FMG_UA_POOL_SIZE_T3 = 96,
   FMG_UA_POOL_SIZE_T4 = 16,
   FMG_UA_POOL_SIZE_T5 =  (0) ,
} FMG_UaPoolSize_t;



typedef enum FMG_UaPoolSizeMin_s
{
   FMG_UA_POOL_SIZE_MIN_T0 = 1,
   FMG_UA_POOL_SIZE_MIN_T1 =  (0) ,
   FMG_UA_POOL_SIZE_MIN_T2 =  (0) ,
   FMG_UA_POOL_SIZE_MIN_T3 = 1,
   FMG_UA_POOL_SIZE_MIN_T4 = 1,
   FMG_UA_POOL_SIZE_MIN_T5 =  (0) ,
} FMG_UaPoolSizeMin_t;







typedef struct FMG_UaHiddenHeader_s
{
   uint16_t canary16;
   uint8_t  canary08;
   uint8_t  poolType;
} FMG_UaHiddenHeader_t;




typedef struct FMG_UaBuffHeader_s
{
   FMG_UaHiddenHeader_t       hiddenHdr;
   struct FMG_UaBuffHeader_s* pNext;
} FMG_UaBuffHeader_t;








typedef struct FMG_UaPool_s
{
   FMG_UaBuffHeader_t*  pFirstFree;
   uint32_t             freeBuffCount;
   uint32_t             minBuffCount;
   uint32_t             nextPoolIdx;
   BOOL32               dbgIsValid;
} FMG_UaPool_t;




typedef struct FMG_UaCb_s
{
   uint32_t       firstPoolIdx;
   FMG_UaPool_t   pPools [FMG_UA_POOL_TYPE_TOTAL];
   uint8_t        pRawBuffer [ ((FMG_UA_POOL_SIZE_T0 * ((FMG_UA_BUFF_SIZE_T0) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T1 * ((FMG_UA_BUFF_SIZE_T1) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T2 * ((FMG_UA_BUFF_SIZE_T2) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T3 * ((FMG_UA_BUFF_SIZE_T3) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T4 * ((FMG_UA_BUFF_SIZE_T4) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T5 * ((FMG_UA_BUFF_SIZE_T5) + sizeof(FMG_UaHiddenHeader_t)) )) ];
} FMG_UaCb_t;





extern FMG_UaCb_t FMG_UaCb;

#line 182 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_userarea.h"
void* FMG_UaAllocate (FMG_UaPoolType_t poolType);










void FMG_UaFree (void* pUserBuff);










void FMG_UaInitUserArea (void);




__inline static  uint32_t FMG_UaGetFreeBuffCount(FMG_UaPoolType_t poolType)
{
    return FMG_UaCb.pPools[poolType].freeBuffCount;
}

#line 45 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_rtfadi.h"

#line 33 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_rtfadi.h"
typedef struct MTM_RTFADI_Data_s
{
   uint8_t numClosedBlocks;
   uint8_t isRlcActive;
   uint8_t isSourcePendingRelease;
   uint8_t rfu;
}  MTM_RTFADI_Data_t;

typedef struct ULayer_RTFADI_Data_s
{
   uint16_t numFreeItems;
   uint16_t rfu;
}  ULayer_RTFADI_Data_t;

typedef struct MVP_RTFADI_Data_s
{
   uint16_t freeBlocksSLC;
   uint16_t freeBlocksTLC;
   uint32_t ratioHost;
   uint32_t ratioGc;
   uint8_t relocationType;
   uint8_t prevRelocationType;
   uint16_t numSourcesReleased;
}  MVP_RTFADI_Data_t;


typedef struct FML_FEAdminQ_RTFADI_Data_s
{
   uint32_t numItems;
   uint16_t headIndex;
   uint16_t tailIndex;
   uint8_t  cmdId[3];
   uint8_t  rfu;
}   FML_FEAdminQ_RTFADI_Data_t;

typedef struct FMG_RTFADI_Data_s
{
   uint32_t lowResourcesBitmap;
}  FMG_RTFADI_Data_t;

typedef struct FQD_RTFADI_Data_s
{
   uint16_t mailboxPendingCompletionsPS0;
   uint16_t mailboxPendingCompletionsPS1;
}  FQD_RTFADI_Data_t;


typedef struct WL_RTFADI_Stat_s
{
   uint32_t            avgPec;
   uint32_t            maxPec;
   uint32_t            minPec;
   uint16_t            minJbid;
   uint8_t             minBlockExist;
   uint8_t             rfu;
}   WL_RTFADI_Stat_t;









typedef struct RLC_RTFADI_Data_s
{
   uint8_t           rlcState;
   uint8_t           rlcType;
   uint8_t           activeSourceBlocksNum;
   uint8_t           rlcReadQueueInLRM;
   uint32_t          srcJBA;
   uint32_t          sourceVC;
}  RLC_RTFADI_Data_t;


typedef struct RSQ_RTFADI_Data_s
{
   uint32_t          ReqCnt;
   uint8_t           QReqCnt[ 4 ];
   uint8_t           QReqHead[ 4 ];
   uint8_t           QReqTail[ 4 ];
}  RSQ_RTFADI_Data_t;


typedef struct FTL_RTFADI_Data_s
{
   BML_RTFADI_Data_t          bmlData;
   MTM_RTFADI_Data_t          mtmData;
   ULayer_RTFADI_Data_t       ulayerData;
   MVP_RTFADI_Data_t          mvpData;
   FML_RTFADI_Data_t          fmlData;
   FML_FEAdminQ_RTFADI_Data_t fmlAdmQData;
   FMG_RTFADI_Data_t          fmgData;
   FQD_RTFADI_Data_t          fqdData;
   RLC_RTFADI_Data_t          rlcData;
   RSQ_RTFADI_Data_t          rsqData;
   MQD_RTFADI_Data_t          mqdData;
}  FTL_RTFADI_Data_t;

#line 143 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_rtfadi.h"
uint32_t FTL_CopyRTFadiData(FTL_RTFADI_Data_t *pFTLRTFADI);

#line 48 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 82 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"
void FMG_Init (void);


   uint32_t FMG_GetRTFADIStatistics(FMG_RTFADI_Data_t *pFMGRTFADI);

#line 47 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fnvm/inc/fnvm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/log_common.h"

#line 57 "d:/gitrepo/atlas3_release/source/ftl/inc_public/log_common.h"
typedef struct LOG_JumboBlockDecomposition_s
{
   VBA_t vba[ (16) ];
}   LOG_JumboBlockDecomposition_t;

typedef struct LOG_DataInIfs_s
{
   LOG_JumboBlockDecomposition_t decompositions[ (2) ];

#line 68 "d:/gitrepo/atlas3_release/source/ftl/inc_public/log_common.h"
   uint32_t logSizeInBytes;
   uint32_t logBlockPEC[ (2) ];
}   LOG_DataInIfs_t;

typedef struct LOG_FlgpResult_s
{
   VBA_t np1[ (2) ][ ( 2 ) ];
   VBA_t lgw[ (2) ][ ( 2 ) ];
   VBA_t fer[ (2) ][ ( 2 ) ];
}   LOG_FlgpResult_t;

typedef struct LOG_PwsData_s
{
   LOG_DataInIfs_t ifsData;
   LOG_FlgpResult_t flgpRes;
   uint32_t activeBlockIdx;
}   LOG_PwsData_t;

typedef struct LOG_IfsStatus_s
{
   Status_t fileSysytemReadStatus;
   Status_t fileSysytemVerifyStatus;
} LOG_IfsStatus_t;

#line 30 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h"





typedef enum PWS_DPS_type
{
   PWS_DPS_2 = 2,
   PWS_DPS_3 = 3,
   PWS_SHUTDOWN,
   PWS_RST_DEACTIVATE,
   PWS_RST_ACTIVATE,
   PWS_POWER_ON_ACTIVATE,
   PWS_READONLY,
   PWS_WAKEUP_ACTIVATE,
   PWS_RST_ACTIVATE_DPS,
   PWS_DPS_3_2,

   PWS_ACTIVE_IDLE_DPS_1_1,
   PWS_ACTIVE_IDLE_WAKEUP,

   PWS_DPS_type_invalid = 0x3fffffff,
} PWS_DPS_type_t;




typedef struct PWS_SleepData_s
{
   uint64_t totalSleepTime;
   LOG_PwsData_t logPwsData;
}   PWS_SleepData_t;

typedef void(*FTL_InfraRetainedMemCbFunc)(uint8_t* memAddr);










   __inline static  PWS_DPS_type_t FTL_PWS_ConvertPMMPSToPws(PMM_PowerState_t pmmState, PMM_PS_DPS_t psDps)
{
   PWS_DPS_type_t dps;

   switch (pmmState)
   {
      case PMM_PS0:
      case PMM_PS1:
      case PMM_PS2:
      case PMM_PST_ACTIVE:
      case PMM_PST_FFU_IA_ACTIVATE:
         dps = PWS_RST_ACTIVATE;
         break;

      case PMM_PS3:
         dps = PWS_DPS_2;
         break;


      case PMM_PST_FW_ACTIVE_IDLE:
          dps = PWS_ACTIVE_IDLE_DPS_1_1;
          break;

      case PMM_PST_FW_ACTIVE_IDLE_ABORT:
          dps = PWS_ACTIVE_IDLE_WAKEUP;
          break;


      case PMM_PS4:
         if(psDps == PMM_PS4_DPS3_2)
         {
            dps = PWS_DPS_3_2;
         }
         else
         {
            dps = PWS_DPS_3;
         }
         break;

      case PMM_PST_SHN:
      case PMM_PST_FFU_IA_SHUTDOWN:
      case PMM_PST_FFU_RESET_SHUTDOWN:
         dps = PWS_SHUTDOWN;
         break;

      case PMM_PST_RO:
         dps = PWS_READONLY;
         break;

      case PMM_PST_RESET_DEACTIVATE:
         dps = PWS_RST_DEACTIVATE;
         break;

      case PMM_PST_RESET_ACTIVATE:
         dps = PWS_RST_ACTIVATE;
         break;

      case PMM_PST_POWER_ON_ACTIVATE:
         dps = PWS_POWER_ON_ACTIVATE;
         break;

      case PMM_PST_WAKEUP:
         dps = PWS_RST_ACTIVATE_DPS;

         break;

      case PMM_PST_NA:
      default:
         dps = PWS_DPS_type_invalid;
         { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h" , 143 , "0");                         "BullseyeCoverage restore"; } ;
         break;
   }

   return dps;
}

#line 163 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h"
PWS_DPS_type_t PWS_GetSysInitType(void);

#line 175 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h"
void PWS_HandlePowerStateChange(PWS_DPS_type_t pwsType);

#line 187 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_pws_api.h"
void FTL_PWS_PMMHandler(PWS_DPS_type_t enterDPS_type);








void FTL_PWS_RequestRetainedMemory(FTL_InfraRetainedMemCbFunc callBkFun, uint32_t requestedBSize);

#line 32 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_dst_api.h"

#line 31 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_dst_api.h"
typedef enum
{
   DST_MetadataTestStart = 0,
   DST_MetadataTestContinue,
   DST_NandTest
} DST_Test_t;

#line 27 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"

#line 28 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"





typedef void (*FTL_AsynchClBkFunc)(Status_t status ,uint32_t token);
typedef void (*FTL_AsynchClBkFuncWithParams)(uint32_t* result);









typedef enum
{
   FTL_WRITE_BUFFER_MSG_RMW_STATE_NOT_RMW = 0,
   FTL_WRITE_BUFFER_MSG_RMW_STATE_RMW,
   FTL_WRITE_BUFFER_MSG_RMW_STATE_DEALLOCATE_RMW,
} FTL_WriteBufferMsg_RwmState;

typedef struct FTL_HostlessReadResult_s
{
   FTL_AsynchClBkFuncWithParams  pCallBkFnc;
   uint32_t                      token;
   Status_t                      status;
   uint8_t                       dataInvalidBitmap;
   uint8_t                       ctrlRdUECCBitmap;
   uint8_t                       res[2];
}FTL_HostlessReadResult_t;


typedef struct FlushNV_Progress_s
{
   uint8_t  progressInPercent;
   uint32_t timeEstimationInSec;
} FlushNV_Progress_t;

void FlushNV_GetProgress(FlushNV_Progress_t* progress);
void FTL_AsyncFlushNV_Start(FTL_AsynchClBkFunc callbackFunc, uint32_t token, uint16_t namespaceId);
void FTL_AsyncFlushNV_Stop(FTL_AsynchClBkFunc callbackFunc, uint32_t token);






void FTL_AsyncDeallocateAligned(uint32_t* pPayload, uint32_t* pHeader, uint32_t numEntries, uint32_t fmuCount, FTL_AsynchClBkFunc callBkFun, uint32_t token);
void FTL_AsyncFormatNvm(uint32_t* pPayload, uint16_t cmdType, uint16_t nsId, FTL_AsynchClBkFunc callBkFun, uint32_t token);
uint32_t FNVM_ProgressPercentage(void);
void FTL_AsyncAbortFormatNvm();
void FTL_AsyncFlush(FTL_AsynchClBkFunc callBkFun, uint32_t cmdIndex);
void FTL_AsyncPwsPmmHandler(PWS_DPS_type_t psState);
void FTL_AsyncRequestRetMem(FTL_InfraRetainedMemCbFunc callBkFun, uint32_t requestedMemSz);
void FTL_AsyncSctpFtlOperationStart(uint8_t state, uint8_t *pAsd, uint32_t *pBuffer,uint32_t numBytes, uint32_t* pRetStatus);
void FTL_AsyncSmartRequestCs(uint32_t smartClientId);
void FTL_AsyncPingRequest(void);

void FTL_AsyncWriteBuffer(FTL_AsynchClBkFunc callBkFun, uint32_t token, uint8_t numFmus,BOOL32 isRMW,
                          FTL_FMU_INFO_t* writeInfo, uint32_t *buffers, uint32_t *headers );

void FTL_AsyncWriteRPMBBuffer(FTL_AsynchClBkFunc callBkFun, uint32_t token, uint32_t fflba,
                          uint8_t targetId, uint32_t writeCounter, uint8_t numFmus, FTL_FMU_INFO_t* writeInfo, uint32_t *buffers, uint32_t *headers);

#line 100 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
void FTL_AsyncHostRead (uint16_t cmdIndex);

void FTL_AsyncGoToROmode();

void FTL_AsyncHostlessRead(FTL_HostlessReadResult_t* pResult,
                           uint32_t    fflba,
                           uint8_t     firstSectorOffset,
                           uint8_t     nbrSectors,
                           uint32_t    overlapBitMask,
                           uint32_t**  pDataBuffers,
                           uint32_t**  pHeaderBuffers) ;

void FTL_asyncStartBkops(void);
void FTL_asyncStopBkops(void);


BOOL FTL_IsBkOpsNeeded(void);

#line 121 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
void FTL_AsyncSmartGetCounters(FTL_AsynchClBkFunc callBkFun, uint32_t *pBuffer, uint32_t token);
void FTL_AsyncSmartGetCountersForInfra(FTL_AsynchClBkFunc callBkFun, uint32_t *pBuffer, uint32_t token);

void FTL_AsyncDST(DST_Test_t testType, BOOL32 isExtended, FTL_AsynchClBkFunc callBkFun, uint32_t token);
void FTL_ReqErrorLogEntry( uint32_t severity, uint32_t *pParams);

void  FTL_AsyncRequestDirectCS(FTL_AsynchClBkFunc callBkFun, uint32_t token);

#line 134 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
BOOL32 FTL_isMountComplete(void);

#line 149 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ftl_feadmincmdapi.h"
void FTL_AsyncTransferDone(uint32_t notification, uint32_t transferIndex);




void FTL_AsyncResetHslcContRndBurstCounter(void);

#line 33 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"

#line 66 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
extern void FE_AdminCmdCompletion(Status_t status, uint32_t param);








enum
{

   FTL_ADMIN_CMD_NO_WSYNC_BASE          = 0x00,


   FTL_ADMIN_CMD_CUQ_READ,

#line 85 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
   FTL_ADMIN_CMD_DIAG,
   FTL_ADMIN_CMD_SMART_REQ_CS,
   FTL_ADMIN_CMD_PING_REQ,
   FTL_ADMIN_CMD_STOP_BKOPS,
   FTL_ADMIN_CMD_SMART_COUNTER_REQ,
   FTL_INFRA_CMD_SMART_COUNTER_REQ,
   FTL_ADMIN_CMD_GENERATE_ERROR_LOG,
   FTL_ADMIN_CMD_DST,
   FTL_ADMIN_CMD_FNVM_ABORT,

   FTL_ADMIN_CMD_RLA_TRANSFER_DONE,



   FTL_ADMIN_CMD_RESET_HSLC_CONT_RND_BURST_CNT,

   FTL_ADMIN_CMD_FE_REQ_SYNC,


   FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED,



   FTL_ADMIN_CMD_WSYNC_BASE          = 0x80,

   FTL_ADMIN_CMD_FLUSH_SYNC,
   FTL_ADMIN_CMD_READ_SYNC,
   FTL_ADMIN_CMD_WRITE_BUFFER_SYNC,

   FTL_ADMIN_CMD_WRITE_RPMB_SYNC,

   FTL_ADMIN_CMD_DALOC_ALIGNED_SYNC,
   FTL_ADMIN_CMD_PWS_SYNC,
   FTL_ADMIN_CMD_HOSTLESS_READ_SYNC,
   FTL_ADMIN_CMD_RET_MEM_SYNC,
   FTL_ADMIN_CMD_FNVM_SYNC,





   FTL_ADMIN_CMD_START_BKOPS,

   FTL_ADMIN_CMD_FLUSH_NV_START,
   FTL_ADMIN_CMD_FLUSH_NV_STOP,



   FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED,

   FTL_ADMIN_CMD_INVALID               = 0xff,
};
typedef uint8_t FML_FEAdminCmdId_t;









typedef struct
{
   uint8_t             fmusCount;
   uint8_t             isRmw;
   uint16_t            res;
   FTL_FMU_INFO_t*     pWriteInfoFmus;
   uint32_t*           pDataList;
   uint32_t*           pHeaderList;
}FTL_FAQ_WriteBufferMsg_t, FTL_FakeHwdCntx_t;

typedef struct
{
   uint8_t                    sectorsNum;
   uint8_t                    firstSectorOffset;
   uint16_t                   res;
   uint32_t                   overlapBitMask;
   uint32_t                   fflba;
   uint32_t**                 pData;
   uint32_t**                 pHeader;
   FTL_HostlessReadResult_t*  pResult;
}FTL_FAQ_HostlessReadMsg_t;




typedef struct
{
   uint32_t *pPayload;
   uint32_t *pHeader;
   uint32_t validCount;
   uint32_t fmusCount;
}FTL_FAQ_AlgnDeallocMsg_t;





typedef struct
{
   uint8_t  overlapFlag;
   uint8_t  resv;
   uint16_t HIMCmdIdx;
}FTL_FAQ_ReadMsg_t;


typedef struct
{
   PWS_DPS_type_t pwsType;
   uint8_t  resv1;
   uint16_t resv2;

}FTL_FAQ_PowerStateMsg_t;




typedef struct
{
   uint32_t *pPayload;
   uint16_t namespaceId;
   uint16_t cmdType;
   BOOL32   isPowerCycleSafe;
}FTL_FAQ_FormatNvmMsg_t;


typedef struct
{
   uint16_t namespaceId;



}FTL_FAQ_FlushNvMsg_t;


typedef struct FTL_DiagMsg_s
{
   uint8_t state;
   uint8_t rfu0[3];
   uint8_t *pAsd;
   uint32_t *pBuffer;
   uint32_t numBytes;
   uint32_t *pRetStatus;
} FTL_FAQ_DiagMsg_t;


typedef struct FTL_SmartCSMsg_s
{
   uint32_t smartClientId;
} FTL_FAQ_SmartCSMsg_t;

typedef struct FTL_SmartCounterMsg_s
{
   uint32_t* pSmartFtlCounters;
} FTL_FAQ_SmartCounterMsg_t;


typedef struct FTL_FAQ_GetRetMemMsg_s
{
   FTL_InfraRetainedMemCbFunc  callBkFncWithParam;
   uint32_t requestedMemSz;

} FTL_FAQ_GetRetMemMsg_t;

typedef struct FTL_FAQ_DstMsg_s
{
   uint8_t testType;
   uint8_t isExtended;
   uint8_t reserved[2];
} FTL_FAQ_DstMsg_t;

typedef struct FTL_InjectErrorLogMsg_s
{
   uint32_t severity;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
}FTL_InjectErrorLogMsg_t;


typedef struct FTL_FAQ_RlaTransferDoneMsg_s
{
   uint32_t transferIndex;
} FTL_FAQ_RlaTransferDoneMsg_t;





typedef struct
{

   FML_FEAdminCmdId_t      cmdId;
   uint8_t                 res1;
   uint16_t                writeFmgCtxtID;
   FTL_AsynchClBkFunc      clBkFun;
   uint32_t                clBkFunToken;
   union
   {

      FTL_FAQ_ReadMsg_t             readMsg;
      FTL_FAQ_PowerStateMsg_t       pwsMsg;
      FTL_FAQ_DiagMsg_t             diagMsg;
      FTL_FAQ_SmartCSMsg_t          smartCsMsg;
      FTL_FAQ_SmartCounterMsg_t     smartCounterMsg;
      FTL_InjectErrorLogMsg_t       generateErrorLogMsg;

      FTL_FAQ_RlaTransferDoneMsg_t  rlaTransferDoneMsg;



      FTL_FAQ_FormatNvmMsg_t        formatNvmMsg;
      FTL_FAQ_AlgnDeallocMsg_t      aligenDeallocMsg;
      FTL_FAQ_WriteBufferMsg_t      writeBufferMsg;
      FTL_FAQ_HostlessReadMsg_t     hostlessReadMsg;
      FTL_FAQ_GetRetMemMsg_t        getRetMemMsg;
      FTL_FAQ_DstMsg_t              dstMsg;

      FTL_FAQ_FlushNvMsg_t          flushNvMsg;


   }specific;
}FML_FEAdminQEntry_t;




typedef struct
{
   uint32_t             tailIndex;
   uint32_t             headIndex;
   uint32_t             numItems;
   FML_FEAdminQEntry_t  entries[ (( 0xFF  + 1) + ( (FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_WSYNC_BASE)  + (FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_NO_WSYNC_BASE) ) *2) ];
}FML_FEAdminQConfig_t;




extern FML_FEAdminQConfig_t gFML_FEAdminQueue;

#line 344 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  void FML_FEAdminQInit(void)
   {
      LivetMemset (&gFML_FEAdminQueue, 0, sizeof(FML_FEAdminQConfig_t));
   }

#line 361 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  uint32_t FML_FEAdminQGetnumEntries(void)
   {
      return gFML_FEAdminQueue.numItems;
   }

#line 378 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  FML_FEAdminQEntry_t* FML_FEAdminQPeek(void)
   {

      { "BullseyeCoverage save off";                          _AssertImpl((int)(gFML_FEAdminQueue.numItems), "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h" , 381 , "gFML_FEAdminQueue.numItems");                         "BullseyeCoverage restore"; } ;

      return &gFML_FEAdminQueue.entries[gFML_FEAdminQueue.headIndex];
   }

#line 396 "d:/gitrepo/atlas3_release/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  uint32_t FML_FEAdminQ_GetRTFADIStatistics(FML_FEAdminQ_RTFADI_Data_t *pAdminQRTFADI)
   {
      uint8_t i;
      uint32_t entryIdx = gFML_FEAdminQueue.headIndex;

      pAdminQRTFADI->numItems = gFML_FEAdminQueue.numItems;
      pAdminQRTFADI->headIndex = (uint16_t)gFML_FEAdminQueue.headIndex;
      pAdminQRTFADI->tailIndex = (uint16_t)gFML_FEAdminQueue.tailIndex;

      for (i = 0; i <  (3) ; i++)
      {
         pAdminQRTFADI->cmdId[i] = (uint8_t)gFML_FEAdminQueue.entries[entryIdx++].cmdId;


         if ( (entryIdx ==  (( 0xFF  + 1) + ( (FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_WSYNC_BASE)  + (FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_NO_WSYNC_BASE) ) *2) ))
         {
            entryIdx = 0;
         }
      }

      return sizeof(FML_FEAdminQ_RTFADI_Data_t);
   }


void FML_FEAdminQPop(void);

void FML_FEAdminQPush(FML_FEAdminQEntry_t *pQEntry);

void FML_HandleAdminQueueFE(void);

BOOL8 BootPartition_IsLegaFFLBA(uint32_t hostFFLBA);

#line 28 "d:/gitrepo/atlas3_release/source/ftl/fnvm/inc/fnvm_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 29 "d:/gitrepo/atlas3_release/source/ftl/fnvm/inc/fnvm_api.h"






typedef void (*FNVM_CLBK_FUNC)(uint32_t);

void  __attribute__((section("CODE_MEDIUM")))  FNVM_FirstMount(void);
void  __attribute__((section("CODE_MEDIUM")))  FNVM_NormalMount(uint16_t mountCtxtId);
void  __attribute__((section("CODE_MEDIUM")))  FNVM_FMGCallBack(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void  __attribute__((section("CODE_MEDIUM")))  FNVM_HostCmdProcess(FML_FEAdminQEntry_t *pAdminQEntry);
BOOL32 FNVM_IsInProgress(void);
BOOL32 FNVM_IsRecoveryNeeded(void);
BOOL32  __attribute__((section("CODE_MEDIUM")))  FNVM_AbortOngoingFormat(void);
BOOL32 FNVM_ShouldBeIdle(void);

#line 31 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config_values.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config_values_bics6.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_irjb_api.h"

#line 21 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config_values_bics6.h"

#line 24 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config_values.h"

#line 44 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config_values.h"
typedef enum
{
   SST_512GB_512Gb,
   SST_1024GB_512Gb,
   SST_1024GB_1Tb,
   SST_2048GB_1Tb,
   SST_4096GB_1Tb,
   SST_500GB_512Gb,
   SST_1000GB_512Gb,
   SST_1000GB_1TGb,
   SST_2000GB_1TGb,
   SST_4000GB_1TGb,
   SST_CAPACITY_TOTAL,
   SST_CAPACITY_INVALID,
} FTLShortStrokeCapacity_t;

#line 24 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_config.h"

#line 51 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_config.h"
typedef struct BML_Config_s
{
   uint8_t numChannelGroups;
   uint8_t numChannelGroupsMask;
   uint8_t log2ChannelGroups;

   uint8_t numMetaDieGroups;
   uint8_t numMetaDieGroupsMask;
   uint8_t log2numMetaDieGroups;

   uint8_t numMetaDies;
   uint8_t numMetaDiesPerChannelGroup;

   uint8_t numMetaDieGroupsPerChannelGroup;
   uint8_t numMetaDiesInMetaDieGroup;

#line 68 "d:/gitrepo/atlas3_release/source/ftl/inc_public/bml_config.h"
   uint8_t reserved;
   uint8_t diesPerMetadie;

   uint16_t log2slcMetapage;
   uint16_t slcMetapageMask;

   uint16_t metaPageSize[NUM_BLOCK_TYPES];
   uint32_t jumboBlockSize[NUM_BLOCK_TYPES];

   uint32_t xorZoneSize[NUM_BLOCK_TYPES];
   uint32_t numBlksNeededPerMd;

   uint32_t xorLogicalZoneSizeAccum[NUM_BLOCK_TYPES][ (16) ];
   uint32_t xorZoneSizeAccum[NUM_BLOCK_TYPES][ (16) ];
   uint32_t xorLogicalZoneSizeMin[NUM_BLOCK_TYPES];
   uint32_t xorZoneSizeMin[NUM_BLOCK_TYPES];


}   BML_Config_t;

extern BML_Config_t *BML_Config;

void BML_InitializeConfig(uint32_t numOfChannelGroups, uint32_t numOfMetaDies, uint32_t diesPerMetaDie, uint32_t xorZonesPerPartion[BML_NUM_PARTITIONS]);

#line 26 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_config.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_enums.h"

#line 33 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_enums.h"
typedef enum MBM_RequestType_e
{
   MBM_REQUEST_ALLOCATE_MBG    = 1,
   MBM_REQUEST_REUSE_MBG       = 2,
   MBM_REQUEST_RELEASE_MBG     = 4,
   MBM_REQUEST_DECOMMISSION_MB = 8,

}   MBM_RequestType_t;

typedef uint32_t MBM_RequestType_Filter_t;

typedef enum MBM_RequestState_e
{
   MBM_REQUEST_VALID,
   MBM_REQUEST_INVALID

}   MBM_RequestState_t;

typedef enum MBM_RequestQueueType_e
{
   MBM_REQUESTQUEUE_UNBLOCKED,
   MBM_REQUESTQUEUE_DELAYED

} MBM_RequestQueueType_t;

typedef enum MBM_MountState_e
{
   MBM_MOUNT_FIRST_TIME,
   MBM_MOUNT_NORMAL,
   MBM_MOUNT_COMPLETE

} MBM_MountState_t;

typedef enum MBM_ControlSyncState_e
{
   MBM_CONTROLSYNC_INACTIVE,
   MBM_CONTROLSYNC_PROCESS_COMPLETION,
   MBM_CONTROLSYNC_ACTIVE

} MBM_ControlSyncState_t;

typedef enum MBM_MetaBlockState_e
{
   MBM_METABLOCK_UNALLOCATED,
   MBM_METABLOCK_ALLOCATED,
   MBM_METABLOCK_DECOMMISSIONED

#line 82 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_enums.h"
} MBM_MetaBlockState_t;

typedef enum MBM_ListType_e
{
   MBM_LIST_FIRST,

   MBM_LIST_RESERVED = MBM_LIST_FIRST,

   MBM_LIST_FIRST_INTEREXCHANGABLE,

   MBM_LIST_FREECOLD = MBM_LIST_FIRST_INTEREXCHANGABLE,
   MBM_LIST_FREEHOT,


   MBM_NUM_LISTTYPES =  (3) ,

}   MBM_ListType_t;
typedef enum MBM_BinaryHeapType_e
{
   MBM_BH_MINPEC_UNERASED,
   MBM_BH_MINPEC_ERASED,
   MBM_BH_MINATS,

   MBM_NUM_BHTYPES

} MBM_BinaryHeapType_t;

typedef enum MBM_metablockSourceList_e
{
   MBM_MB_SRC_FMBL_COLD     = 0,
   MBM_MB_SRC_FMBL_HOT      = 1,
   MBM_MB_SRC_UNERASED_HEAP = 2,
   MBM_MB_SRC_ERASED_HEAP   = 3,
   MBM_MB_SRC_LIST_MAX      = 4
} MBM_metablockSourceList_t;

#line 133 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_enums.h"
typedef enum MBM_MetaDataDescriptorState_e
{
   MBM_MDD_UNALLOCATED      = 1,
   MBM_MDD_INITIALIZING     = 2,
   MBM_MDD_VALID            = 4,
   MBM_MDD_CORRUPTED        = 8,
   MBM_MDD_INVALID          = 16,
   MBM_MDD_FAILED_RECOVERY  = 32,
   MBM_MDD_PREVENT_RECOVERY = 64,
   MBM_MDD_ERASED           = 128,

   MBM_MDD_ALL = -1

} MBM_MetaDataDescriptorState_t;

typedef uint32_t MBM_MetaDataDescriptorState_Filter_t;

typedef enum MBM_FlashFillReq_e
{
   NO_FLASH_FILL_REQ,
   REG_FLASH_FILL_REQ,
   FORCE_FLASH_FILL_REQ = 0x03
} MBM_FlashFillReq_t;

#line 34 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_config.h"





typedef union MBM_Address_u MBM_Address_t;
typedef struct DUI_Section_PEC_s DUI_Section_PEC_t;

#line 96 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_config.h"
typedef struct slc_s{
    uint16_t metablockPecLowBits;
    uint16_t metablockPecHighBits :  6 ;
    uint16_t rfu :  ( (8)  * 2 - 1  - 2  - 1  - 6 ) ;
    uint16_t partition :  1 ;
    uint16_t metablockState :  2 ;
    uint16_t isPreErased :  1 ;
} slc_t;

typedef struct tlc_s {
    uint16_t metablockPecLowBits :  8 ;
    uint16_t metablockHybridPecLowBits :  8 ;
    uint16_t metablockPecHighBits :  6 ;
    uint16_t metablockHybridPecHighBits :  6 ;
    uint16_t partition :  1 ;
    uint16_t metablockState :  2 ;
    uint16_t isPreErased :  1 ;
} tlc_t;

typedef union MBM_StatusTableEntry_s
{
    slc_t slc;
    tlc_t tlc;
    struct {
        uint16_t pecRawLowBits;
        uint16_t pecRawHighBits :  12 ;
        uint16_t partition :  1 ;
        uint16_t metablockState :  2 ;
        uint16_t isPreErased :  1 ;
    } all;
}   MBM_StatusTableEntry_t;

#line 153 "d:/gitrepo/atlas3_release/source/ftl/inc_public/mbm_config.h"
typedef struct MBM_FlatBmlStatusTable_s
{
    uint16_t size;
    uint16_t rfu;

    MBM_StatusTableEntry_t entry[ ((( (467) ) > ( (915) )) ? ( (467) ) : ( (915) )) ];

} MBM_FlatBmlStatusTable_t;

typedef struct MBM_ListConfig_s
{
   uint8_t refillThreshold;


   uint8_t refreshThresholdInPec;


   uint8_t lowResourceModeThreshold;



   uint8_t rfu;
}   MBM_ListConfig_t;

typedef int32_t(*MBM_BinaryHeap_CompareFunc_t)(uint32_t, uint32_t, uint32_t);

typedef struct MBM_BinaryHeapConfig_s
{
   MBM_BinaryHeap_CompareFunc_t compareFunc[MBM_NUM_BHTYPES];

} MBM_BinaryHeapConfig_t;


typedef struct MBM_PartitionConfig_s
{
   uint8_t blockType;



   uint8_t unusedMetaBlocksDistributionRatio;

   uint8_t irregularMetaBlocksDistributionRatio;

   uint8_t listSize[MBM_NUM_LISTTYPES];

   uint8_t reserved[2];

}   MBM_PartitionConfig_t;


typedef struct MBM_PartitionParametersConfig_s
{
   MBM_ListConfig_t listConfig[MBM_NUM_LISTTYPES];

}   MBM_PartitionParametersConfig_t;

typedef struct
{
   uint32_t numMetadies;
   uint32_t numMetadieMetablocks[ (16) ];
} MBM_MBST_Header_t;





uint32_t MBM_DUI_GetMetaBlocksPec(DUI_Section_PEC_t * pecInfo);

#line 27 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/jbm_config.h"

#line 35 "d:/gitrepo/atlas3_release/source/ftl/inc_public/jbm_config.h"
typedef struct JBM_PartitionConfig_s
{
   uint8_t  blockType;
   uint8_t  reservedJBIDsForUECC;
   uint8_t  numGenericLists;
   uint8_t  rfu0;
}   JBM_PartitionConfig_t;


typedef struct JBM_PartitionParametersConfig_s
{
   uint8_t  freeIDsThreshold;

   uint8_t  rfu0[3];
}   JBM_PartitionParametersConfig_t;









uint32_t JBM_GetTLCJumboBlocksSizeFMU(void);

#line 28 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/rs/inc/ftl_rs.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 7 "d:/gitrepo/atlas3_release/source/ftl/rs/inc/ftl_rs.h"

#line 40 "d:/gitrepo/atlas3_release/source/ftl/rs/inc/ftl_rs.h"
typedef enum
{
   RS_MODE_CLIENT_FML,
   RS_MODE_CLIENT_RO,
   RS_MODE_CLIENT_RSQ,
   RS_MODE_CLIENT_RS,
   RS_MODE_CLIENT_MAX
} RS_ModeClients_t;


typedef struct RS_ConfigCB_s_s
{

   uint8_t BackgroundScanPossible;
   uint8_t ForegroundScanPossible;
   uint8_t BackgroundScanEnabledInitValue;
   uint8_t ForegroundScanEnabledInitValue;


   uint32_t BgMediaScanTotalTimeMs;
   uint32_t FgMediaScanTotalTimeMs;


   uint32_t MediaScanTimeToAllowFgScanMs;


   uint32_t MediaScanTimeTooLongMs;
   uint32_t MediaScanTimeTooFastMs;
   uint32_t MediaScanTimeTooLongEventIntervalMs;
   uint32_t MediaScanTimeTooLongMaxEvents;


   uint32_t NumJPagesToScanHighPrio;
   uint32_t NumJPagesToScanMedPrio;
   uint32_t NumJPagesToScanLowPrio;
   uint32_t PendingScanHighPrioPercent;
   uint32_t PendingScanMedPrioPercent;


   uint16_t FirstJbIdxToScan;


   uint16_t MinNumScanOps;


   uint32_t WaitBeforeFirstCallMs;


   uint32_t NumJwlsToScanPerJb;


   uint32_t NumJPagesToScan;


   uint32_t BgJPageScanIntervalMsec;
   uint32_t FgJPageScanIntervalMsec;


   uint32_t MaxNumScanOpsNormalPrioQ;
   uint32_t MaxNumScanOpsHighPrioQ;

   uint32_t PendingJPagesToScanToSetHighPrio;
   uint32_t PendingJPagesToScanToSetMedPrio;


   uint32_t rsrv;

}   RS_ConfigCB_s, *RS_ConfigCB_p;


typedef struct RS_Statistics_s
{
   uint32_t StatsNumMediaScans;
   uint32_t StatsNumBlocksScanFgMode;
   uint32_t StatsNumBlocksScanBgMode;
   uint32_t rfu[4];
}   RS_Statistics_t;






typedef struct RS_StateCB_tagname_s
{
   uint64_t BgScanStartTimeUs;
   uint64_t FgScanStartTimeUs;
   uint64_t CurrTimeUs;
   uint64_t ScheduleNextFgScanTimeUs;

   uint32_t CurrJbNextToWriteFmu;
   uint32_t CurrJbIsAllocated;
   uint32_t CurrJbObId;
   uint32_t CurrJbQueueType;
   uint32_t CurrJbMaxScanOps;
   uint32_t NextJPageIdxToScanInMedia;
   uint32_t ReInit;
   uint32_t RsModeClientsBitmap;
   RS_Statistics_t rsStatistics;
   uint16_t CurrJbIdx;
   uint16_t CtxtId;

   uint8_t  CurrStringInWl;
   uint8_t  RsEnable;
   uint8_t  CurrJwlIdxInBlock;
   uint8_t  CurrJpageInJwl;
   uint8_t  CurrJbIsClosed;
   uint8_t  CurrJbType;
   uint8_t BackgroundScanEnabled;
   uint8_t ForegroundScanEnabled;
   uint8_t MediaScanTimeTooLongNumEventsCount;
   uint8_t ScanWasStoppedDueToQueueFull;
   uint8_t  RsPaused;
   uint8_t  RsInitialized;
   uint8_t timeCallBackNum;
   uint8_t res_1;
   uint8_t res_2;
   uint8_t res_3;

}   RS_StateCB_s, *RS_StateCB_p;



typedef struct
{
   RS_ConfigCB_p RS_Config_p;
   RS_StateCB_p  RS_State_p;
   RS_MorpheusParamsCB_p RS_MrphParamsCB_p;
} RS_CB_s;

#line 181 "d:/gitrepo/atlas3_release/source/ftl/rs/inc/ftl_rs.h"
void RS_Mount(void);
void RS_NormalMount(uint16_t mountCtxtId);

void RS_NormalMountSetLogInfo();
void RS_NormalMountAll(uint16_t mountCtxtId);

void RS_FirstMount(void);
void RS_Init(void);


void RS_Enable(uint8_t shouldEnable, RS_ModeClients_t clientId, uint64_t forceTime);
void RS_PrepareDPS2(void);


void RS_ControlSyncPrepare(void);

void RS_PrepareDPS2(void);


void RS_ProcessActiveScan(uint16_t contextId, uint16_t payload, FMG_ExecStatus_t execStatus);


void  __attribute__((section("CODE_SLOW")))  RS_PauseActiveScan(void);


void  __attribute__((section("CODE_SLOW")))  RS_DiagGetRsStatistics(uint32_t *pBufferOut, uint32_t bufferBytes);


void  __attribute__((section("CODE_SLOW")))  RS_DiagSetRsDurationTimeFG(uint32_t *pBufferOut, uint32_t bufferBytes, uint32_t newTime);


void  __attribute__((section("CODE_SLOW")))  RS_DiagSetRsDurationTimeBG(uint32_t *pBufferOut, uint32_t bufferBytes, uint32_t newTime);


uint32_t Rs_IsRsInBgNeeded(void);


BOOL RS_IsRsInBgMode(void);

uint32_t RS_SetFirstJB(void);



Status_t RS_BKOPSProcessActiveScan(void);

#line 30 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"

#line 190 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef struct PSMetaDieInfo
{
   uint8_t           numMetadies;
   uint8_t           rfu0;
   uint16_t          maxBlocksPerPlane;
   uint16_t          numMetablocksPerMetaDie [ ( ( ( ( ( (4) / (1) )  << (0) )  << (2) )  >> (1) )  * ( 2 ) ) ];
   uint32_t          rfu1;

#line 202 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
}   PSMetaDieInfo_t;

#line 214 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef struct BadBlockEntry_Bits_s
{
   uint32_t block          : 13;

   uint32_t phyPl          : 2;

#line 222 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   uint32_t chip           : 1;
   uint32_t die            : 3;
   uint32_t channel        : 3;
   uint32_t badBlockType   : 4;

   uint32_t pad            : 6;

#line 231 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   }   BadBlockEntry_Bits_t;

typedef union BadBlockEntry_u
   {
      uint32_t all32;
      BadBlockEntry_Bits_t bits;
   }   BadBlockEntry_t;

   typedef struct MBBT_s
   {
      uint32_t entryCount;
      uint16_t planeCount;
      uint16_t badBlockCounter[ ( ( 8 ) / ( 2 ) )  *  ( 2 ) ][ (1) ][ (4) ][ (4) ];
      BadBlockEntry_t badBlockEntry[1];
   }   MBBT_t;


   typedef struct Max_MBBT_s
   {
      uint16_t entryCount;
      uint16_t planeCount;
      uint16_t badBlockCounter[ ( ( 8 ) / ( 2 ) )  *  ( 2 ) ][ (1) ][ (4) ][ (4) ];
      BadBlockEntry_t badBlockEntry[ ( ( ( ( 8 ) / ( 2 ) )  * ( 2 )  * (1)  * (4)  * (4) )  * (128) ) ];
   }   Max_MBBT_t;

   enum BadBlockType_e
   {
      FACTORY_BAD_BLOCK   = 0,
      FACTORY_DUMMY_BLOCK = 1,
      REPLACEMENT_BLOCK   = 2,
      IFS_BOOT_BLOCK      = 3,
      IFS_PARTITION_BLOCK = 4,
      IFS_BAD_BOOT_BLOCK  = 5,
      IFS_BAD_PTN_BLOCK   = 6,
      FA_BLOCK            = 7,
      FA_BAD_BLOCK        = 8,
      MST_BAD_BLOCK       = 9,
      IFS_BAD_BLOCK       = 10,
   BTGS_BLOCK          = 11,
   BTGS_TLC            = 12,
   SLC_RELINK_TO_BTGS  = 13,
}  ;
   typedef uint8_t BadBlockType_t;




typedef struct PS_BBM_Decomm_Sync_Entry_s
{
   uint32_t LogTS;
   uint16_t metaDie;
   uint16_t metaBlock;
}   PS_BBM_Decomm_Sync_Entry_t;

typedef struct PS_BBM_Decomm_Sync_List_s
{
   uint32_t                      numEntries;
   PS_BBM_Decomm_Sync_Entry_t    decommSyncData [ (10) ];
}   PS_BBM_Decomm_Sync_List_t;


typedef enum PS_BBM_Status_Error_Description_e
{
   STATUS_BBM_BAD_BLOCK_LIMIT_REACHED           = STATUS_BBM_ERROR_BASE,
   STATUS_BBM_BLOCK_ALLOCATION_ERROR            = STATUS_BBM_ERROR_BASE + 0x1,
   STATUS_BBM_BLOCK_WASNT_FOUND                 = STATUS_BBM_ERROR_BASE + 0x2,
   STATUS_BBM_MBBT_EMPTY                        = STATUS_BBM_ERROR_BASE + 0x3,
   STATUS_BBM_INIT_FAILED                       = STATUS_BBM_ERROR_BASE + 0x4,
   STATUS_BBM_INCORRECT_PARAMETER               = STATUS_BBM_ERROR_BASE + 0x5,
   STATUS_BBM_IFS_FLUSH_FAILED                  = STATUS_BBM_ERROR_BASE + 0x6,
   STATUS_BBM_IFS_READ_FAILED                   = STATUS_BBM_ERROR_BASE + 0x7,
   STATUS_BBM_DATA_VERIFY_FAILED                = STATUS_BBM_ERROR_BASE + 0x8,
   STATUS_BBM_EXCEEDS_MAX_BAD_BLK_PER_PLANE     = STATUS_BBM_ERROR_BASE + 0x9,
   STATUS_BBM_DECOMMISSION_FAIL                 = STATUS_BBM_ERROR_BASE + 0xA,
   STATUS_BBM_MISMATCH_RELINK_BLKS              = STATUS_BBM_ERROR_BASE + 0xB,
   STATUS_BBM_MBBT_VERIFY_FAILED                = STATUS_BBM_ERROR_BASE + 0xC,
   STATUS_BBM_NO_SPARED_BLOCK                   = STATUS_BBM_ERROR_BASE + 0xD,
   STATUS_BBM_RELINK_FAIL_UNKNOWN_ERROR         = STATUS_BBM_ERROR_BASE + 0xE,
   STATUS_BBM_INCONSISTENT_MBBT                 = STATUS_BBM_ERROR_BASE + 0xF,
   STATUS_BBM_DECOMMISSION_START                = STATUS_BBM_ERROR_BASE + 0x10,
   STATUS_BBM_FTL_BLK_BUDGET_NOT_MET            = STATUS_BBM_ERROR_BASE + 0x11,
   STATUS_BBM_CONFIG_ERROR                      = STATUS_BBM_ERROR_BASE + 0x12,
   STATUS_BBM_ITR_BLOCK_SEARCH_DONE             = STATUS_BBM_ERROR_BASE + 0x13,
   STATUS_BBM_BAD_BLOCK_LIMIT_PER_PLANE_REACHED = STATUS_BBM_ERROR_BASE + 0x14,
   STATUS_BBM_INCONSISTENT_PARAMETER            = STATUS_BBM_ERROR_BASE + 0x15,
   STATUS_BBM_NO_BLOCKS_FOR_ALLOCATION          = STATUS_BBM_ERROR_BASE + 0x16,
   STATUS_BBM_TOO_MANY_BAD_BLOCKS               = STATUS_BBM_ERROR_BASE + 0x17,
   STATUS_BBM_CONFIG_FILE_3_ERROR               = STATUS_BBM_ERROR_BASE + 0x18,
   STATUS_BBM_GUARANTEED_GOODBLOCKS_UNAVAILABLE = STATUS_BBM_ERROR_BASE + 0x19,
   STATUS_BBM_GUARANTEED_GOODBLOCKS_UNAVAILABLE_2 = STATUS_BBM_ERROR_BASE + 0x1A,
}   PS_BBM_Status_Error_Description_t;

typedef enum
{
   SMART_PS_CALC_COUNT_BASE = 0,
   SMART_TOTAL_PF_COUNT = SMART_PS_CALC_COUNT_BASE,
   SMART_TOTAL_EF_COUNT,
   SMART_TOTAL_GROWN_DEFECTS,
   SMART_TOTAL_RESERVED_BLK_COUNT,
   SMART_WORST_PLANE_PF_COUNT,
   SMART_WORST_PLANE_EF_COUNT,
   SMART_AVAILABLE_SPARES,
   SMART_TOTAL_GROWN_DEFECTS_COUNT,
   SMART_PS_CALC_COUNT_END
} PSCalculated_SmartCounters_e;





typedef enum
{
   PS_BBM_SPARE_BLOCK_STATUS_SPARE                 = 0,
   PS_BBM_SPARE_BLOCK_STATUS_RELINKED_NOT_UPDATED  = 1,
   PS_BBM_SPARE_BLOCK_STATUS_SPARE_BAD             = 2,
   PS_BBM_SPARE_BLOCK_STATUS_RELINKED              = 3,

#line 350 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
} PS_BBM_SpareBlkStatus_e;


typedef enum PS_BBM_BadBlkErrType_TAG
{
   PS_BBM_BAD_BLOCK_ERROR_TYPE_REAL       = 0,
   PS_BBM_BAD_BLOCK_ERROR_TYPE_FAKE       = 1,
   PS_BBM_PROD_BAD_BLOCK_ERROR_TYPE_NAND  = 0,
   PS_BBM_PROD_BAD_BLOCK_ERROR_TYPE_MST   = 1,

#line 362 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
}   PS_BBM_BadBlkErrType_e;


typedef enum PS_BBM_BadBlkErrCause_TAG
{
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_PROG    = 0,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_ERASE   = 1,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_READ    = 2,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_MBBT    = 3,

#line 374 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
}   PS_BBM_BadBlkErrCause_e;


typedef enum
{
   PS_BBM_INIT_PRODUCTION  = 0,
   PS_BBM_INIT_FLASHWARE   = 1,
} PS_BBM_INIT_Type_e;


typedef enum
{
   PS_BBM_DATA_CONFIG               = 0,
   PS_BBM_DATA_RELINK_TABLE         = 1,
   PS_BBM_DATA_BBM_COUNTERS         = 2,
   PS_BBM_DATA_LAST_MB_IN_MD        = 3,
   PS_BBM_DATA_BLOCK_STATUS_BITMAP  = 4,

   PS_BBM_DATA_SEGMENTS_IN_FILE,
} PS_BBM_DataSegmentsInIFS_e;


typedef enum
{
   PS_BBM_FLUSH_BBM_FILE_BLOCKING      = 0x0A,
   PS_BBM_FLUSH_BBM_FILE_NONBLOCKING   = 0x0C,
} PS_BBM_File_Flush_Type_e;


typedef enum
{
   PS_BBM_DECOMM_STATE_IDLE            = 0,
   PS_BBM_DECOMM_STATE_DONE            = 0,
   PS_BBM_DECOMM_STATE_FTL_REQ_SENT    = 1,
   PS_BBM_DECOMM_STATE_FTL_RESP_HANDLE = 2,
   PS_BBM_DECOMM_STATE_SEC_ERASE       = 3,
} PS_BBM_Decomm_State_e;


typedef enum
{
   PS_BBM_EH_STATE_IDLE                   = 0,
   PS_BBM_EH_STATE_FILE_WRITE_COMPLETE    = 0,
   PS_BBM_EH_STATE_RELINK_REQ             = 1,
   PS_BBM_EH_STATE_DECOMM_REQ             = 2,
   PS_BBM_EH_STATE_DECOMM_RESP            = 3,
   PS_BBM_EH_STATE_RELINK_RESP            = 4,
   PS_BBM_EH_STATE_RELINK_UPDATE          = 5,
   PS_BBM_EH_STATE_FILE_WRITE_REQ         = 6,
   PS_BBM_EH_STATE_SEC_ERASE              = 7,
} PS_BBM_EH_State_e;


typedef enum
{
   PSUT_BBM_TRANSLATE_VBA_2_DEVBA   = 0,
   PSUT_BBM_DECOMM_START            = 1,
   PSUT_BBM_DECOMM_RESP             = 2,
   PSUT_BBM_IFS_SYNC                = 3,
} PS_BBM_UT_TestType_e;


typedef enum
{
   PS_BBM_REVIVE_DISABLED_TYPE      = 0,
   PS_BBM_REVIVE_EI_TYPE            = 1,
   PS_BBM_REVIVE_RECYCLE_TYPE       = 2,
} PS_BBM_REVIVE_Type_e;


typedef struct PS_BBM_Runtime_Device_Config_t
{
   uint8_t  diesPerCe;
   uint8_t  numPS;

   uint8_t  cePerFim;
   uint8_t  planesPerDie;

   uint16_t blocksPerPlane;

   uint16_t relinksPerPlane;

   uint8_t  diesPerFim;
   uint8_t  diesPerCe_Log2;

   uint8_t  numPS_Log2;
   uint8_t  cePerFim_Log2;

   uint8_t  planesPerDie_Log2;
   uint8_t  relinksPerPlane_Log2;

   uint8_t  activeFimPerPs;
   uint8_t  activeFimPerPs_Log2;
}   PS_BBM_DevieConfig_t;




typedef struct PS_BBM_Runtime_Data_Header_t
{
   PS_BBM_DevieConfig_t bbmDevConfig;
   PS_BBM_Decomm_Sync_List_t decomSyncList;

   uint32_t fakeDecommProbability_InPS;

#line 481 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   uint16_t bbmFileID;
   uint16_t bbmFileRev;
   uint16_t bbmProdVer;
   uint16_t bbmDevCfgVer;
   uint8_t  padding1[16];
}   PS_BBM_Data_Hdr_t;

#line 506 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef union PS_BBM_relinkTableRelinkBlk
{
   uint16_t all16;
   struct PS_BBM_relinkTableRelinkBlk_s
   {

      uint16_t blk           :10;
      uint16_t blkType       :2;
      uint16_t blockStatus   :2;
      uint16_t reserved      :2;

#line 521 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   } bits;
}   PS_BBM_relinkTableRelinkBlk_t;

typedef union PS_BBM_RelinkTableBadBlk
{
   uint16_t all16;
   struct PS_BBM_RelinkTableBadBlk_s
   {

      uint16_t  blk           :10;
      uint16_t  blkType       :1;
      uint16_t  errorType     :1;
      uint16_t  errorCause    :3;
      uint16_t  reserved      :1;

#line 541 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   } bits;
}   PS_BBM_relinkTableBadBlk_t;

typedef struct PS_BBM_relinkTableEntry
{
   PS_BBM_relinkTableRelinkBlk_t relinkBlk;
   PS_BBM_relinkTableBadBlk_t    badBlk;
}   PS_BBM_relinkTableEntry_t;



   typedef struct PS_BBM_SpareBlkCntEntry
   {
      uint16_t  gen;
      uint16_t  slc;
      uint16_t  tlc;
   }   PS_BBM_SpareBlkCntEntry_t;

   typedef struct PS_BBM_BadBlockTypeCountEntry
   {
      uint16_t  UECCCnt;
      uint16_t  PFCnt;
      uint16_t  EFCnt;
   }   PS_BBM_BadBlkTypeCntEntry_t;


      typedef struct PS_BBM_EIBlockTypeCountEntry
      {
         uint16_t  UECCCnt;
         uint16_t  PFCnt;
         uint16_t  EFCnt;
      }   PS_BBM_EIBlkTypeCntEntry_t;


   typedef struct PS_BBM_BlkCntArray
   {
      uint16_t                      relinked;
      PS_BBM_SpareBlkCntEntry_t     spare;
      uint16_t                      good;
      uint16_t                      mbbtTblBad;
      PS_BBM_BadBlkTypeCntEntry_t   errTypeCnt;
      uint16_t                      mstBadBlkCntr;
      uint16_t                      lastRTBadBlkIndex;
      uint16_t                      decommSpares;

      PS_BBM_EIBlkTypeCntEntry_t    EIerrTypeCnt;




      uint8_t                       reserved[2];

#line 602 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
   }   PS_BBM_BlkCntArray_t;

#line 631 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef uint8_t   PS_BBM_BitMap_MetaBlock_Info_t;


typedef union PS_BBM_psCeDie
{
   uint8_t  all8;
   struct
   {
      uint8_t ps    :3;
      uint8_t ce    :2;
      uint8_t die   :3;
   } bits;
} PS_BBM_PsCeDie_t;


typedef union PS_BBM_md_mdInPs
{
   uint16_t  all16;
   struct
   {
      uint16_t md       :8;
      uint16_t mdInPs   :8;
   } bits;
} PS_BBM_MD_mdInPs_t;


typedef enum PS_BBM_FakeDecomType_e
{
   PS_BBM_FAKE_DECOM_TYPE_NONE = 0,
   PS_BBM_FAKE_DECOM_TYPE_EI,
   PS_BBM_FAKE_DECOM_TYPE_ERASE_NO_DECOM,
} PS_BBM_FakeDecomType_t;


typedef struct PS_BBM_Decommission_Control_Block
{
   uint8_t  state;
   uint8_t  blkType;
   uint8_t  metaDie;
   uint8_t  fakeDecomm;
   DeVBA_t  deVBA;

   uint32_t bbmFileWritePending;

} PS_BBM_Decomm_CB_t;


typedef struct PS_BBM_Weakest_Plane_Of_Metadie_s
{
   uint8_t  metaDie;
   uint8_t  phyPlOffset;
   uint16_t badBlkCount;
} PS_BBM_WeakestPlaneInfo_t;






extern PS_BBM_Data_Hdr_t         BBM_DataHdr;


extern uint32_t                  PS_BBM_EH_State;

#line 718 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef struct PS_BBM_FS_FID_BBM_PS_512GB_512Gb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (2) ][ (2) ][ ( (4) ) ][ (1024) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (2) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (2)  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t   BBM_Bitmap[ (2) ][ ( (467) ) ];
}   PS_BBM_FS_FID_BBM_PS_512GB_512Gb_t;

typedef struct PS_BBM_FS_FID_BBM_PS_1TB_512Gb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (4) ][ (2) ][ ( (4) ) ][ (1024) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (4) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (4)  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t   BBM_Bitmap[ (4) ][ ( (467) ) ];
}   PS_BBM_FS_FID_BBM_PS_1TB_512Gb_t;

typedef struct PS_BBM_FS_FID_BBM_PS_2TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (4) ][ (2) ][ ( (4) ) ][ ( (1024) ) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (4) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (4)  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t   BBM_Bitmap[ (4) ][ ( (915) ) ];
}   PS_BBM_FS_FID_BBM_PS_2TB_1Tb_t;

typedef struct PS_BBM_FS_FID_BBM_PS_4TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (8) ][ (2) ][ ( (4) ) ][ ( (1024) ) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (8) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (8)  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t   BBM_Bitmap[ (8) ][ ( (915) ) ];
}   PS_BBM_FS_FID_BBM_PS_4TB_1Tb_t;


typedef union Max_PS_BBM_File_u
{
   PS_BBM_FS_FID_BBM_PS_512GB_512Gb_t bbmFile512GB_512Gb;
   PS_BBM_FS_FID_BBM_PS_1TB_512Gb_t   bbmFile1TB_512Gb;
   PS_BBM_FS_FID_BBM_PS_2TB_1Tb_t     bbmFile2TB_1Tb;
   PS_BBM_FS_FID_BBM_PS_4TB_1Tb_t     bbmFile4TB_1Tb;
}   Max_PS_BBM_File_t;

#line 989 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
typedef struct PS_BBM_ARAM_Data_512GB_512Gb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (2) ][ (2) ][ ( (4) ) ][ (1024) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (2) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (2)  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_512GB_512Gb_t;

typedef struct PS_BBM_ARAM_Data_1TB_512Gb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (4) ][ (2) ][ ( (4) ) ][ (1024) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (4) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (4)  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_1TB_512Gb_t;

typedef struct PS_BBM_ARAM_Data_2TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (4) ][ (2) ][ ( (4) ) ][ ( (1024) ) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (4) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (4)  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_2TB_1Tb_t;

typedef struct PS_BBM_ARAM_Data_4TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                BBM_DataHdr;
   PS_BBM_relinkTableEntry_t        BBM_RelinkTble[ (8) ][ (2) ][ ( (4) ) ][ ( (1024) ) ];
   PS_BBM_BlkCntArray_t             BBM_Counters[ (8) ][ (2) ][ ( (4) ) ];
   uint16_t                         BBM_LastGoodMB[ ( (8)  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_4TB_1Tb_t;


typedef union PS_BBM_ARAM_Data_u
{
   PS_BBM_ARAM_Data_512GB_512Gb_t bbmData_512GB_512Gb;
   PS_BBM_ARAM_Data_1TB_512Gb_t   bbmData_1TB_512Gb;
   PS_BBM_ARAM_Data_2TB_1Tb_t     bbmData_2TB_1Tb;
   PS_BBM_ARAM_Data_4TB_1Tb_t     bbmData_4TB_1Tb;
} PS_BBM_ARAM_Data_t;

#line 1142 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
void PS_SmartGetPSCounters(uint32_t *ftlSparesArray, uint16_t* pfsPerPlane, uint16_t* efsPerPlane, uint16_t* sparesPerPlane);
void PS_SetFakeDecommissionPeriod (uint32_t decommProbability);

#line 1156 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_Prod(MBBT_t *pMBBT);

#line 1169 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_Prod_Init(void);

#line 1185 "d:/gitrepo/atlas3_release/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_FormatWithExternalFiles(uint8_t* pBuffer, uint32_t mbbtSize, uint32_t bbmFileSize);








Status_t PS_BBM_Prod_Get_MetaDieInfo (PSMetaDieInfo_t *pMetaDieInfo);







Status_t PS_BBM_Startup_Get_DecommSyncInfo (PS_BBM_Decomm_Sync_List_t *pDecommSyncList, uint32_t LogTS, uint32_t psNum);







Status_t PS_BBM_FlushBbmDataToFile(void);







Status_t  PS_BBM_VerifyDeviceConfig (uint8_t *pCfgDataBuff);

void PS_BBM_Diag_GetDefectCounts (PS_BBM_BadBlkTypeCntEntry_t* pDefectCounters);
void PS_BBM_Diag_GetDefectCount_Info (uint32_t ps);

#line 31 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"

#line 81 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"
typedef enum FTL_EVENTS_COUNTER__e
{
   FTL_EVENTS_COUNTER_START_CANARIAN=0x0,
   FTL_EVENTS_COUNTER_FLUSH=0x1,
   FTL_EVENTS_COUNTER_DEALLOCATE=0x2,
   FTL_EVENTS_COUNTER_CHANGE_TO_IDLE=0x3,
   FTL_EVENTS_COUNTER_WRITE_UNCORRECTABLE=0x4,
   FTL_EVENTS_COUNTER_WRITE_ZEROES=0x5,
   FTL_EVENTS_COUNTER_IDENTIFY_CONTROLLER=0x6,
   FTL_EVENTS_COUNTER_FORMAT_NVM=0x7,
   FTL_EVENTS_COUNTER_GET_LOG=0x8,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_3=0x9,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_4=0xA,
   FTL_EVENTS_COUNTER_GSD=0xB,
   FTL_EVENTS_COUNTER_UGSD=0xC,
   FTL_EVENTS_COUNTER_END_CANARIAN=0xD,
   FTL_EVENTS_COUNTER_TOTAL = 0xE
} FTL_EVENTS_COUNTER_t;






typedef struct WearLevelConfig_s
{
   uint8_t  WearLevelTlcPercentageThr;
   uint8_t  WearLevelTlcPercentageThrBkops;
   uint8_t  WearLevelSlcPercentageThr;
   uint8_t  WearLevelTlcJBAllocDiffFactor;
   uint8_t  WearLevelSlcJBAllocDiffFactor;
   uint8_t  rfu1;
   uint16_t WearLevelSlcEnduranceBudget;
}   WearLevelConfig_t;





typedef struct FTLFormatConfig_s
{

   uint32_t                         exportedCapacityInFMUs;


   uint16_t                         ftlBudget[NUM_BLOCK_TYPES];




    uint16_t                         minSparesRequiredPerMetadie;



   uint8_t                          numXorZones;

   uint8_t                          numMetadiesPerJumboblock;

   uint32_t                         numUlayerItems;
   uint16_t                         shortStroke_capacityId;
   uint16_t                         shortStroke_setNumber;
   uint32_t                         rfu;



   uint16_t                         numLwlPerZone[ (16) ];


   JBM_PartitionConfig_t            jbmPartitionConfig[ (2) ];
   MBM_PartitionConfig_t            mbmPartitionConfig[ (2) ];
}   FTLFormatConfig_t;




typedef struct FTLParametersConfig_s
{

   JBM_PartitionParametersConfig_t  jbmPartitionParamConfig[ (2) ];
   MBM_PartitionParametersConfig_t  mbmPartitionParamConfig[ (2) ];


   RS_ConfigCB_s                    rsConfig;


   WearLevelConfig_t                wlConfig;

}   FTLParametersConfig_t;





typedef struct FTLExtConfig_s
{
   BML_Config_t            bmlConfig;
   uint32_t                numFMUsPerJumboWl[NUM_BLOCK_TYPES];
   uint32_t                numFMUsPerJumboblock[NUM_BLOCK_TYPES];
   uint16_t                numFMUsPerWriteUnit[NUM_BLOCK_TYPES];
   uint16_t                rfu0;
   uint16_t                numSLCMetablocks;
   uint16_t                numTLCMetablocks[ (16) ];
   uint32_t                shadowSpaceCapacityInFMUs;
   uint32_t                totalCapacityInFMUs;
   uint32_t                rpmbCapacityInFMUs;
   uint32_t                bootPartitionsCapacityInFMUs;

}   FTLExtConfig_t;



typedef struct FTLRamConfig_s
{
   RS_MorpheusParamsCB_t   rsMrphParams;
   uint16_t                wearLevelTlcPecThr;
   uint16_t                wearLevelTlcPecThrBkops;
   uint16_t                wearLevelSlcPecThr;
   uint16_t                rfu1;
}   FTLRamConfig_t;




typedef PSMetaDieInfo_t   FTLPhysicalConfig_t;





typedef struct FTL_MRPH_Config_s
{
   uint32_t    pecWearLevelingGuardBand[NUM_BLOCK_TYPES];
   uint32_t    pecMaxValue[NUM_BLOCK_TYPES];
   uint32_t    pecSampleFrequency[NUM_BLOCK_TYPES];
   uint32_t    maxNumNandPors;
   uint32_t    rlcReadThreshold;
   uint32_t    ftlSpare2;
   uint32_t    ftlSpare3;
   uint32_t    ftlSpare4;
   uint32_t    secTerm;
}   FTL_MRPH_Config_t;




typedef struct FTLHybridSlcConfig_s
{
   uint32_t maxHybridBlksInPct;
   uint32_t logicalTaperStartInPct;
   uint32_t maxHybridBlksAtLogicalFullInPct;
   uint32_t afterBkopsScaleFactorInPct;

   uint32_t bkopsDSlcPrioritizationFactor;
   uint32_t bkopsTlcSelOverHslcMaxAge;
   uint32_t bkopsTlcSelOverHslcMaxVcInPct;
   uint32_t bkopsMaxAllowedTlcVcInPct;
   uint32_t bkopsSlcMinAmountInMB;

   uint32_t contHSlcRndBurstLimitInPct;
   uint32_t rfu0;
   uint32_t maxTlcSrcVcForHSlcAllocInPct;

   uint32_t rfu1;
   uint32_t rfu2;
   uint32_t rfu3;

   uint32_t enduranceMonitorOffsetInPct;
   uint32_t enduranceMonitorWidthInPct;
   uint32_t enduranceMonitorSkewInPct;
   uint32_t enduranceMonitorDiminishInPct;

   uint32_t rfu4;
}   FTLHybridSlcConfig_t;


typedef struct FWConfig_s
{
   FTLFormatConfig_t ftlConfig;
   FTLParametersConfig_t ftlParametersConfig;
   FTLExtConfig_t ftlExtConfig;
   FTLRamConfig_t ftlRamConfig;
   FTLPhysicalConfig_t ftlPhysicalConfig;
   FTL_MRPH_Config_t ftlMrphConfig;
   FTLHybridSlcConfig_t ftlHybridSlcConfig;
}   FTL_FWConfig_t;


typedef struct FTLFormatCfgOptions_s
{
   CFG_SetHdr_t            setHdr;
   FTLFormatConfig_t       ftlFormatConfigSet[ (10) ];
}   FTLFormatCfgOptions_t;


typedef struct FTLParametersCfgOptions_s
{
   CFG_SetHdr_t            setHdr;
   FTLParametersConfig_t   ftlParametersConfigSet[ (10) ];
}   FTLParametersCfgOptions_t;


typedef struct FTLPhysicalCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLPhysicalConfig_t  ftlPhysicalConfigSet;
}   FTLPhysicalCfgOptions_t;


typedef struct FTLExtCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLExtConfig_t    ftlExtConfigSet;
}   FTLExtCfgOptions_t;


typedef struct FTLMrphCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTL_MRPH_Config_t ftlMrphConfigSet;
}   FTLMrphCfgOptions_t;


typedef struct FTLHybridSlcCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLHybridSlcConfig_t   ftlHybridSlcConfigSet[ (10) ];
}   FTLHybridSlcCfgOptions_t;



typedef struct FTLDefinesCfg_s
{
   uint8_t  numChannelGroups;
   uint8_t  numDiesPerMetadie;
   uint8_t  numPlanesPerDie;
   uint8_t  numSectorsPerFMU;
   uint8_t  numFMUsPerDiePage[NUM_BLOCK_TYPES];
   uint8_t  numFMUsPerMetaWL[NUM_BLOCK_TYPES];
   uint16_t numBlocksPerPlane;
   uint8_t  numStringsPerWL;
   uint8_t  numPhysWLsPerBlock;

   uint16_t numLogicalWLsPerBlock;
   uint16_t numJumboBlocksMax;

   uint8_t  numPartitionsMax;
   uint8_t  numMetadiesMax;
   uint8_t  padding[2];

   uint16_t numFMUsPerJumboWLMax[NUM_BLOCK_TYPES];
   uint32_t numFMUsPerJumboBlock[NUM_BLOCK_TYPES];

}  FTLDefinesCfg_t;

#line 356 "d:/gitrepo/atlas3_release/source/ftl/inc_private/ftl_config.h"
extern FTL_FWConfig_t fwCfg;


extern FTLFormatConfig_t *pFTLFormatConfig;
extern FTLParametersConfig_t *pFTLParametersConfig;
extern FTLPhysicalConfig_t *pFTLPhysicalConfig;
extern FTLExtConfig_t *pFTLExtConfig;
extern FTL_MRPH_Config_t *pFTLMrphConfig;
extern FTLRamConfig_t *pFTLRamConfig;
extern FTLHybridSlcConfig_t *pFTLHybridSlcConfig;


extern const FTLFormatCfgOptions_t FTLFormatCfgData;


extern const FTLParametersCfgOptions_t FTLParametersCfgData;


extern const FTLPhysicalCfgOptions_t FTLPhysicalCfgData;


extern const FTLExtCfgOptions_t FTLExtCfgData;


extern const FTLMrphCfgOptions_t FTLMrphCfgData;


extern const FTLHybridSlcCfgOptions_t FTLHybridSlcCfgData;





Status_t  __attribute__((section("TRW")))  FTL_Config_Init(void);

Status_t  __attribute__((section("TRW")))  FTL_Config_InitAfterLOGinFS(BOOL isNormalMount);

void   __attribute__((section("CODE_SLOW")))  FTL_Config_CopyRuntimeConfig(uint8_t *pBuffer, uint32_t *numBytes);

void  __attribute__((section("CODE_SLOW")))  FTL_Config_CopyDefinesConfig(uint8_t *pBuffer, uint32_t *numBytes);

uint32_t FTL_Config_GetTotalBudget(void);

uint32_t FTL_Config_GetMinSparesBudget(void);

uint32_t FTL_GetNumWlPerJb(OBM_BlockType_t blockType);

uint32_t FTL_Config_GetDHMPecThreshold(BML_Partition_ID_t partitionID);

uint32_t FTL_Config_GetMaxPecAllowed(BML_Partition_ID_t partitionID);

uint32_t FTL_Config_GetWLGuardBand(BML_Partition_ID_t partitionID);


uint16_t FTL_Config_GetHSLCPecRatio();



uint32_t FTL_Config_GetMaxNANDPors(void);

uint32_t FTL_Config_GetRLCReadThreshold(void);

void   __attribute__((section("CODE_SLOW")))  FTL_Config_SetEventCounter(FTL_EVENTS_COUNTER_t counterType, uint32_t Value);

void FTL_Config_IncreaseEventCounter(FTL_EVENTS_COUNTER_t counterType);

uint8_t FTL_Config_GetWearLevelTlcPercentageThr(void);

uint8_t FTL_Config_GetWearLevelSlcPercentageThr(void);

uint8_t FTL_Config_GetWearLevelTlcPercentageThrBkops(void);

uint8_t FTL_Config_GetWearLevelTlcJBAllocDiffFactor(void);

uint8_t FTL_Config_GetWearLevelSlcJBAllocDiffFactor(void);

uint16_t FTL_Config_GetWearLevelSlcEnduranceBudget(void);

uint16_t FTL_Config_GetWearLevelTlcPecThr(void);

uint16_t FTL_Config_GetWearLevelTlcPecThrBkops(void);

uint16_t FTL_Config_GetWearLevelSlcPecThr(void);

void RegisterAsicInterrupts(void);


uint32_t  FTL_Config_GetNumFMUsPerZone(uint32_t partitionType, uint32_t zoneNum);









__inline static  uint8_t FTL_Config_GetMetadiesPerJumboblock(void)
{
   return pFTLFormatConfig->numMetadiesPerJumboblock;
}

__inline static  uint32_t FTL_Config_GetNumXorZones(void)
{
    return pFTLFormatConfig->numXorZones;
}

#line 33 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"

#line 42 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"
Status_t BML_FirstMount(void);

void BML_NormalMount(uint16_t ctxtId);

#line 56 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"
void BML_UngracefulMount(uint32_t ctxtId, uint8_t *allHeaders, uint8_t **headersPointers, uint32_t sizeInBytes, BML_JumboBlock_ID_t *jbId, uint8_t **headers);

uint32_t BML_UngracefulMount_MemoryRequired(void);

BML_JumboBlock_ID_t BML_AllocateJumboBlock(BML_Partition_ID_t ptnId, uint32_t openBlockType, BML_PecStrategy_t pecStrategy, uint32_t priorityLevel, uint32_t isEraseRequested, uint32_t isHSLC, uint32_t waitForEraseOfOpbId);

void BML_ReleaseJumboBlock(BML_JumboBlock_ID_t jumboblockId, MBM_FlashFillReq_t flashFillRequested, uint32_t priorityLevel, uint32_t doRetireJumboBlockId);

void BML_ReuseJumboBlock(BML_JumboBlock_ID_t jumboblockId, uint32_t priorityQueue);

void BML_CloseJumboBlock(BML_JumboBlock_ID_t jumboblockId, BOOL32 isHostRandom, BML_FifoId_t fifoId);

int32_t BML_Translate(JBA_t jumboblockAddress, uint32_t isXorProtected, uint32_t* psId_p, BML_Partition_ID_t partId, VBA_t* vba_p);

int32_t BML_Translate_i(JBA_t jumboblockAddress, uint32_t isXorProtected, uint32_t* psId_p, BML_BlockType_t blockType, VBA_t* vba_p);

int32_t BML_TranslateOpt(JBA_t jumboblockAddress, BOOL32 skipXor, uint32_t *pChGroup, BML_BlockType_t blockType, VBA_t* vba_p);

int32_t BML_TranslateRunLength(JBA_t jumboblockAddress, uint32_t lengthFmus, BOOL32 isXorProtected, VBA_t vbaArray[],
    uint32_t *pFMUsTillEndOfFirstMB, BML_Partition_ID_t partId, uint32_t *pOffsetInComp);

int32_t BML_TranslateRunLength_i(JBA_t jumboblockAddress, uint32_t lengthFmus, BOOL32 isXorProtected, VBA_t vbaArray[],
   uint32_t *pFMUsTillEndOfFirstMB, BML_BlockType_t blockType, uint32_t *pOffsetInComp);

int32_t BML_ReverseTranslate(VBA_t inputVBA, BML_JumboBlock_ID_t jbId, BOOL isXorProtected, JBA_t *pJba, BML_RevrsTransInParityLocation_t* inParityLocation, uint32_t canFail);

uint32_t BML_LogVbaToFmuOffset(VBA_t composition[], VBA_t vbaToTranslate);
void BML_LogFmuOffsetToVba(uint32_t fmuToTranslate, VBA_t outputVba[]);

void BML_Init(void);



uint32_t BML_GetNumFreeJumboBlocks(BML_Partition_ID_t partition, uint32_t includeReleased);








uint32_t BML_GetNumJumboBlocksInFmbls(BML_Partition_ID_t ptnId, BML_PecStrategy_t pecStrategy);

BML_BlockType_t BML_GetBlockType(BML_JumboBlock_ID_t jbId);
BML_BlockType_t BML_GetBlockTypeForPSR(BML_JumboBlock_ID_t jbId, BOOL32* pIsHSLC);

uint32_t BML_GetJumboBlockPec(BML_JumboBlock_ID_t jbId);
uint32_t BML_GetJumboBlockFlatPec(BML_JumboBlock_ID_t jbId);

BML_FifoId_t BML_GetJumboBlockFifo(BML_JumboBlock_ID_t jbId);


uint32_t BML_GetJumboBlockPecAllocatedNext(BML_Partition_ID_t ptnId, BML_PecStrategy_t pecStrategy);


uint32_t BML_GetMaxMetaBlockPec(BML_Partition_ID_t ptnId);

uint32_t BML_GetMinMetaBlockPec(BML_Partition_ID_t ptnId);


uint32_t BML_GetAverageMetaBlockPec(BML_Partition_ID_t ptnId);

uint32_t BML_JBsAllocations(BML_Partition_ID_t ptnId);

uint32_t BML_GetNumberOfMetaBlockErases(BML_Partition_ID_t ptnId);

uint32_t BML_GetNumberOfMetaBlockPreErased(BML_Partition_ID_t ptnId);

uint32_t BML_GetInUseBlocksInPartition(BML_Partition_ID_t ptnId);

void BML_GetSparesPerMetaDie(uint32_t mdSpares[]);

uint32_t BML_GetSparesForSpecificDie(uint32_t metadie);

uint32_t BML_GetNumDecommissionedMBsInMD(uint8_t metadie);

uint32_t BML_GetNumberOfDecommissionedMetaBlocksInMetaDieGroup(BML_Partition_ID_t ptnId, uint32_t cgId, uint32_t mdgId);

uint32_t BML_GetNumberOfRemainingMetaBlockGroupsToSecureErase(BML_Partition_ID_t ptnId);

void BML_SecureEraseRemainingMetaBlockGroup(BML_Partition_ID_t ptnId);

uint32_t BML_GetTotalJumboBlocks(BML_Partition_ID_t ptnId);

Status_t BML_DeleteMBSTFile(void);

uint32_t BML_Fifo_GetSize(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId);
BML_Iterator_ID_t BML_Iterator_Allocate(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId);
void BML_Iterator_Release(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
BML_JumboBlock_ID_t BML_Iterator_Next(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
BML_JumboBlock_ID_t BML_Iterator_Next_WithPayload(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, uint32_t* pPayload);
BML_JumboBlock_ID_t BML_Iterator_Next_WithTimeStamp(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, uint32_t* pTimeStamp);
uint32_t BML_Iterator_HasNext(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
uint32_t BML_Iterator_HasNextWithJumboBlockId(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, BML_JumboBlock_ID_t *pJumboBlockId);


BML_JumboBlock_ID_t BML_SecureEraseJumboBlock(BML_Partition_ID_t ptnId, BOOL32 isLogSyncAllowed);
uint32_t BML_GetNumberOfJBlocksToSecureErase(BML_Partition_ID_t ptnId);
uint32_t BML_GetNumberOfReleasedJBlocksToSecureErase(void);
BOOL32 BML_SecureEraseRsrvBlk(BML_Partition_ID_t ptnId);
void BML_FnvmSecureEraseListClear(BML_Partition_ID_t ptnId);
void BML_SecureEraseReleaseRsrvBlk(BML_Partition_ID_t ptnId, uint16_t rsrvBlkList[]);



void BML_ControlSyncPrepare(void);
void BML_ControlSyncComplete(void);

void BML_GetJumboBlockComposition(BML_JumboBlock_ID_t jumboBlockId, VBA_t compsitionArray[]);
void BML_GetJumboBlockCompositionSortedByPS(BML_JumboBlock_ID_t jumboBlockId, VBA_t compsitionArray[]);
void BML_SwapJumboBlockCompositions(BML_JumboBlock_ID_t jumboBlockA, BML_JumboBlock_ID_t jumboBlockB);


BOOL32 BML_IsJumboBlockAllocated(BML_JumboBlock_ID_t jumboBlockId);
BOOL32 BML_IsJumboBlockClosed(BML_JumboBlock_ID_t jumboBlockId);
BOOL32 BML_IsJumboBlockHybrid(BML_JumboBlock_ID_t jumboBlockId);
BOOL32 BML_IsJumboBlockRandom(BML_JumboBlock_ID_t jumboBlockId);

void BML_GetNextAllocatableJbComposition(BML_Partition_ID_t partition, BML_PecStrategy_t pecStrategy, VBA_t compsitionArray[], uint32_t *jbPec);
BOOL32 BML_IsUngracefulMountInProgress(void);
uint32_t BML_UngracefulMount_GetReallocatedJBCount(void);
BOOL32 BML_IsJbInUeccList(BML_JumboBlock_ID_t jbId);
BOOL32 BML_IsNbcsQempty(void);

void BML_SetJumboBlockHSLCMode(BML_JumboBlock_ID_t jbId, BOOL32 isHSLC);
void BML_SetJumboBlockHSLCModeHistory(BML_JumboBlock_ID_t jbId, BOOL32 wasHSLC);
BOOL32 BML_IsJbInHSLCMode(BML_JumboBlock_ID_t jbId);

#line 198 "d:/gitrepo/atlas3_release/source/ftl/bml/inc/bml_api.h"
   uint32_t BML_GetRTFADIStat(BML_RTFADI_Data_t* pBMLRTFADI);


void BML_RoFormatEraseAllMB(FNVM_CLBK_FUNC callBack, uint16_t ctxtId);

#line 49 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/mount/inc/ftl_mount_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 28 "d:/gitrepo/atlas3_release/source/ftl/mount/inc/ftl_mount_api.h"






typedef enum MNT_State_s
{


   MNT_STATE_START = 0,
   MNT_STATE_REQ_FLGP_LOG,
   MNT_STATE_HANDLE_LOG,
   MNT_STATE_HANDLE_LOG_END,
   MNT_STATE_CHECK_READONLY,
   MNT_STATE_NOTIFY_PS,
   MNT_STATE_MOUNT_BML,
   MNT_STATE_SEND_DEVICE_HEALTH,
   MNT_STATE_MOUNT_XORM,
   MNT_STATE_MOUNT_RLC,
   MNT_STATE_MOUNT_SMART,
   MNT_STATE_MOUNT_FNVM,
   MNT_STATE_MOUNT_EI,
   MNT_STATE_MOUNT_BKOPS,
   MNT_STATE_MOUNT_RPMB,
   MNT_STATE_CHECK_GSD_FLAG,



   MNT_STATE_DR_CHECK_REQ = 50,
   MNT_STATE_OPBS_REBUILD_XOR_PAR,
   MNT_STATE_LOAD_ON_BEGINNING_OF_ZONE,
   MNT_STATE_ENABLE_READ,
   MNT_STATE_OPBS_BRLC,
   MNT_STATE_GSD_LOAD_XOR,
   MNT_STATE_MOUNT_HWD,
   MNT_STATE_CONTROL_SYNC,
   MNT_STATE_MOUNT_SYNC_ALL_VC,
   MNT_STATE_MOUNT_FINISH,


   MNT_STATE_GSD_MOUNT_OBM = 100,
   MNT_STATE_GSD_MOUNT_RSQ,
   MNT_STATE_GSD_MOUNT_MTM,
   MNT_STATE_GSD_MOUNT_SAT,
   MNT_STATE_GSD_MOUNT_MVP,
   MNT_STATE_GSD_MOUNT_RS,


   MNT_STATE_GSD_MOUNT_PEM,


   MNT_STATE_UGSD_MOD_MOUNT_READ_LOG = 200,
   MNT_STATE_UGSD_BML_RECOVERY,
   MNT_STATE_UGSD_EXTRACT_METADATA,
   MNT_STATE_UGSD_OBM_RECOVERY,
   MNT_STATE_UGSD_CHECK_CS_NEEDED,
   MNT_STATE_UGSD_SAT_MOUNT_UGSD,
   MNT_STATE_UGSD_MOUNT_RSQ,
   MNT_STATE_UGSD_XOR_BLOCK_FLGP,
   MNT_STATE_UGSD_XOR_BLOCK_RECOVERY,
   MNT_STATE_UGSD_MTM_BLOCK_FLGP,
   MNT_STATE_UGSD_MTM_BLOCK_RECOVERY,
   MNT_STATE_UGSD_HOST_BLOCK_FLGP,
   MNT_STATE_UGSD_HOST_BLOCK_RECOVERY,
   MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP,
   MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY,
   MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP,
   MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY,
   MNT_STATE_UGSD_MOUNT_MVP,
   MNT_STATE_UGSD_MOUNT_RS,



   MNT_STATE_MOUNT_COMPLETE,


   MNT_STATE_MOUNT_FIRST_MOUNT,



   MNT_STATE_LAST = (uint16_t)0x3FFF
}MNT_State_t;




typedef struct MNT_GSD_Statistics_s
{
   uint32_t MntGSD_Amount;
   uint32_t MntDps2_Amount;
   uint32_t MntDps3_Amount;
   uint32_t MntDps3_2_Amount;
   uint32_t rfu[4];
}  MNT_GSD_Statistics_t;





void MNT_Init(void);










void MNT_FirstMount(void);










MNT_State_t MNT_getMountState(void);










BOOL32 MNT_isHostReadEnabled(void);

#line 173 "d:/gitrepo/atlas3_release/source/ftl/mount/inc/ftl_mount_api.h"
__inline static  BOOL32 MNT_IsMountOngoing(void)
{
   MNT_State_t mntState = MNT_getMountState();
   return (mntState < MNT_STATE_MOUNT_COMPLETE);
}










void FTL_Mount(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);










Status_t FTL_PrepareMountInFML(void);










void MNT_RequestDataRetentionCheck(uint16_t retCtxtId, BOOL32 isUgsd);










void MNT_HandleDataRetentionIndication_stub(uint16_t retCtxtId);

#line 233 "d:/gitrepo/atlas3_release/source/ftl/mount/inc/ftl_mount_api.h"
void MNT_NotifyPsLogReady(uint16_t retCtxtId, BOOL32 isGsd);










void MNT_NotifyPsSetHealth(uint16_t retCtxtId);

#line 256 "d:/gitrepo/atlas3_release/source/ftl/mount/inc/ftl_mount_api.h"
void MNT_HandleFlgpResponse(PS_FLGPResp_t *pMsg);

void MNT_HandleFlgpResponseViaMemory(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);










void MNT_HandleDRDResponse(PS_CVD_DRD_Resp_t *pMsg);

void MNT_HandleDrdResponseViaMemory(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);










void MNT_OnPMMPowerOnActivate(void);








void MNT_GetUgsdCounterVal(uint128_t* resultCounter);









void MNT_BRLCInvalidateUGSDBtBData(OBM_BlockType_t opbId);

void  __attribute__((section("CODE_SLOW")))  MNT_GetUgsdStatisctics(uint16_t* ugsdStatisctics);
void  __attribute__((section("CODE_SLOW")))  MNT_GetGsdStatisctics(MNT_GSD_Statistics_t* gsdStatisctics);
void* FTL_MemSet32(void* pDest, uint32_t value, uint32_t length);
void* FTL_MemSet64(void* pDest, uint64_t value, uint32_t length);

#line 51 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"

#line 79 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
   typedef enum RLC_Type_e
   {
      RLC_TYPE_SLC_DYNAMIC       = 0,
      RLC_TYPE_TLC_DYNAMIC       = 1,
      RLC_TYPE_SLC_FORMAT        = 2,
      RLC_TYPE_TLC_FORMAT        = 3,
      RLC_TYPE_SLC_FLUSHNV       = 4,
      RLC_TYPE_TLC_FLUSHNV       = 5,
      RLC_TYPE_TLC_HYBRID        = 6,
      RLC_TYPE_LAST_TARGET_ORIENTED = RLC_TYPE_TLC_HYBRID,
      RLC_TYPE_TLC_STATIC        = 7,
      RLC_TYPE_RS                = 8,
      RLC_TYPE_SLC_STATIC        = 9,
      RLC_TYPE_MAX               = 10,
      RLC_TYPE_TERMINATE = RLC_TYPE_MAX,
      RLC_TYPE_TERMINATE_NO_COPY = 11,
      RLC_TYPE_NONE              = 12,
      RLC_TYPE_NUM               = 13
   }   RLC_Type_t;


typedef enum RLC_Step_Status_e
{
   RLC_STEP_STATUS_WAIT,

   RLC_STEP_STATUS_SCAN_FWD_SENT,
   RLC_STEP_STATUS_COPY_STEP_DONE,
   RLC_STEP_STATUS_SCAN_BUF_RELEASED,

#line 110 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
   RLC_STEP_STATUS_SRC_RELEASED,
   RLC_STEP_STATUS_AUTO_FREE,
   RLC_STEP_STATUS_RLC_REQ_COMPLETION,
   RLC_STEP_STATUS_NUM
} RLC_Step_Status_t;

typedef enum RLC_Read_Type_e
{
   RLC_READ_TYPE_REGULAR,
   RLC_READ_TYPE_PADDING,
   RLC_READ_TYPE_NUM
} RLC_Read_Type_t;

typedef enum BRLC_Cause_e
{
   BRLC_CAUSE_RS,
   BRLC_CAUSE_WL,
   BRLC_CAUSE_MOUNT,
   BRLC_CAUSE_NUM
} BRLC_Cause_t;

typedef enum
{
   RLC_SLECT_STATIC_DONT_IGNORE_JB_ALLOC_DIFF,
   RLC_SLECT_STATIC_IGNORE_JB_ALLOC_DIFF,
} RLC_IgnoreJbAllocStaticSelection_t;



void RLC_Init(void);

void RLC_FirstMount(uint32_t ctxtId);

void RLC_NormalMount(uint16_t ctxtId);

void RLC_StartBrlcInMount(uint16_t jbid, OBM_BlockType_t opbid, JBA_t jbaLgw, JBA_t jbaFer, uint32_t* pBitmap, uint32_t fmuBaseOfBitMap, uint16_t callerCtxtId);

void RLC_StartBrlc(uint16_t jbid, uint16_t callerCtxtId, BRLC_Cause_t brlcCause);

BOOL32 RLC_IsBrlcActive();

BOOL32 RLC_IsStaticRelocationNeeded(BML_Partition_ID_t ptnId, BOOL32 isBkopsQuery, RLC_IgnoreJbAllocStaticSelection_t ignoreJbAlloc);


RLC_Step_Status_t RLC_RunScanStep(RLC_Type_t rlcType);
RLC_Step_Status_t RLC_RunCopyStep(BOOL performCopyValid);

#line 160 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
BOOL32 RLC_AutoFree();

void RLC_RecoverStaticSourceBlock(uint16_t jbid);

void RLC_ControlSyncPrepare(void);

void RLC_ControlSyncDone(void);

void RLC_PrepareDPS2(uint16_t ctxtId);

BOOL32 RLC_IsRelocationActive(void);

void  __attribute__((section("CODE_SLOW")))  RLC_GetWearLevelingThresholds(uint32_t* retCont);

uint32_t* RLC_GetCycleParamsAddr();

uint32_t RLC_GetCycleParamsSize();

uint32_t* RLC_GetBufferManagerAddr();

uint32_t RLC_GetBufferManagerSize();

uint32_t* RLC_GetStatisticsAddr();

uint32_t RLC_GetStatisticsSize();

void RLC_UpdateBmlOnStatisticsCounters();

void RLC_StartFnvmRlc(void);

uint32_t RLC_FnvmGetSlcBlocksNum();

uint32_t RLC_FnvmGetTlcBlocksNum();


BOOL32 RLC_IsBlockCold(BML_JumboBlock_ID_t jbId, BML_Partition_ID_t ptnId, BOOL32 isHSLC);

#line 200 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
BOOL32 RLC_Has_NextBlock(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);

void RLC_ReportWaStatistics(void);

BOOL32 RLC_IsActiveSourceBlock(uint16_t jbid);


BOOL32 RLC_IsTlcSrcSelectionNeededInBKOPS();

BOOL32 RLC_GetMinVcBlkFromTlcPtnExceptLastSrc(uint16_t lastSrcJbID, uint16_t *pJbID, uint16_t *pBlkType, uint32_t *pVC);

uint32_t RLC_GetActiveSourceBlocksNum(void);

void RLC_NotifyConsolidationComplete();



uint32_t RLC_FlushNvGetNumBlocksLeftInPtn(BML_Partition_ID_t ptnId);
uint32_t RLC_GetClosedBlkCntInPtnAndFifo(BML_Partition_ID_t ptnId, BML_FifoId_t closedfifoType);

#line 225 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
   uint32_t RLC_GetRTFADIStatistics(RLC_RTFADI_Data_t* pRLCRTFADI);

#line 233 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"
BOOL32 RLC_IsRlcIdle();



void RLC_IRLC_InitializePerSessionData(RLC_Type_t nextRlcType);
void RLC_IRLC_TerminatePerSessionData(RLC_Type_t rlcTypeToContinue);
void RLC_IRLC_SwapPerSessionData();
void RLC_IRLC_RemoveSourceListForRLCType(RLC_Type_t rlcType);
void RLC_RemoveJbidFromCpyBuffer(uint16_t jbid);
void RLC_MarkRangesStale(uint16_t jbid);

#line 52 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 145 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_IsZoneEnded(uint32_t fumuInBlock, OBM_BlockType_t opbid);
uint32_t OBM_GetZoneStartFMU(uint32_t fumuInBlock, OBM_BlockType_t opbid);

#line 164 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
typedef enum OBM_LRM_CHECK_STATE_e
{
   OBM_LRM_CHECK_STATE_INC_NEXT_TO_WRITE,
   OBM_LRM_CHECK_STATE_BLOCK_ALLOC,
   OBM_LRM_CHECK_STATE_NUM,
   OBM_LRM_CHECK_STATE_FORCE_TLC_CHECK_NOT_EMPTY,
} OBM_LRM_CHECK_STATE_t;










typedef enum OBM_BlockCapacityState_e
{
   OBM_BLOCK_CAPACITY_FREE = 0,
   OBM_BLOCK_CAPACITY_FULL,
   OBM_BLOCK_CAPACITY_OVERFLOW,
} OBM_BlockCapacityState_t;




enum OBM_BlockXorId_e
{
   XOR_FIRST_XORID = 0,
   XOR_BIN_D_TLC = XOR_FIRST_XORID,
   XOR_BIN_A_TLC,




   XOR_BIN_E_TLC = XOR_BIN_A_TLC,
   XOR_BIN_F_TLC = XOR_BIN_A_TLC,

   XOR_LAST_VALID_TLC_XORID = XOR_BIN_F_TLC,
   XOR_BIN_B_SLC,
   XOR_BIN_C_SLC,
   XOR_LAST_VALID_XORID = XOR_BIN_C_SLC,
   XOR_NUM_XORIDS,
   XOR_INACTIVE =  (0xF) ,
};

typedef uint8_t OBM_BlockXorId_t;




typedef enum OBM_JbObMapEntryType_e
{
   OBM_JB_OB_MAP_ENTRY_TYPE_OBID = 0,
   OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR,
   OBM_JB_OB_MAP_ENTRY_TYPE_TOTAL,
} OBM_JbObMapEntryType_t;








typedef struct OBM_OpenBlockPolicy_s
{
   uint8_t blockType;
   uint8_t mbAllocPolicy;

   uint8_t psQType;
   uint8_t XOR;
   uint32_t validFMUsSize;
}   OBM_OpenBlockPolicy_t;







typedef struct OBM_OpenBlock_s
{
   JBA_t jba;
   OBM_OpenBlockPolicy_t policy;
   uint32_t    prtnJbsAllocations;
}   OBM_OpenBlock_t;







typedef struct OBM_Cb_s
{
   uint32_t* logObm_p;
   OBM_OpenBlock_t openBlocks[OBM_BLOCK_TYPE_MAX];
   uint32_t  OBMinitialized;
   uint32_t  lastAllocatedHostOpbid;

   uint32_t IsUnevenZone;

} OBM_Cb_t;




typedef struct OBM_JumboBlockAllocTS_s
{
   uint8_t  allocationTS :  (5) ;
   uint8_t  rfu :  (8 - (5) ) ;
   uint8_t  rfu1[3];
} OBM_JumboBlockAllocTS_t;




extern uint8_t OBM_JbObMap[ ( ( ((( (467) ) > ( (915) )) ? ( (467) ) : ( (915) ))  + (20)  + (140) )  + 1) ][OBM_JB_OB_MAP_ENTRY_TYPE_TOTAL];
extern OBM_BlockXorId_t openBlocksXorId[OBM_BLOCK_TYPE_MAX];
extern OBM_Cb_t OBM_Cb;
extern uint32_t OBM_HostBlocksBitmap;
extern OBM_JumboBlockAllocTS_t OBM_JumboBlockAllocationTS;

#line 301 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_Init (void);










Status_t OBM_FirstTimeMount (uint32_t ctxtId);










void OBM_MountSetLogInfo(void);

#line 335 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_NormalMount(uint16_t mntCtxtId, BOOL32 setOpbPS);

void OBM_MountSetLogInfo(void);
uint32_t OBM_MountAll(uint16_t mntCtxtId, BOOL32 setOpbPS);










BML_JumboBlock_ID_t OBM_AllocBlock(OBM_BlockType_t openBlock);










BML_JumboBlock_ID_t OBM_AllocJB(OBM_BlockType_t openBlockType, BOOL32 isEraseRequired, BOOL32 isHSLC);

#line 376 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_ReuseBlock(OBM_BlockType_t openBlockType, JBA_t jba);

#line 389 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_CsPrepRLCHost(void);

#line 402 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_CsPrepCTL(void);

#line 415 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_GetBlockNextToWrite(OBM_BlockType_t openBlockType, JBA_t* jbaOutput_p);

#line 428 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_GetAndAllocBlockNextToWrite(OBM_BlockType_t openBlockType, JBA_t* jbaOutput_p);

#line 442 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_UgsdSetOpenBlock(JBA_t jbaNer, OBM_BlockType_t opbType, JBA_t lastXorProtectedJba, BML_RevrsTransInParityLocation_t lgwInParityLocation, JBA_t jbaFlgpFer);









__inline static  BOOL32 OBM_ShouldPreventBMLRecovery(OBM_BlockType_t openBlockType)
{
    return ((openBlockType == OBM_BLOCK_TYPE_BRLC) || (openBlockType == OBM_BLOCK_TYPE_LOG));
}








__inline static  BML_PecStrategy_t OBM_GetPolicyByBlockType(OBM_BlockType_t openBlockType)
{
    return (BML_PecStrategy_t)OBM_Cb.openBlocks[openBlockType].policy.mbAllocPolicy;
}

#line 479 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_UgsdForceSetNextToWrite(JBA_t jba, OBM_BlockType_t openBlockType);

#line 491 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_MNTForceMarkingLogicallyClose(OBM_BlockType_t openBlockType);

#line 503 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_CloseBlock(OBM_BlockType_t openBlockType, BML_JumboBlock_ID_t jumboBlockId, BOOL32 forceClose);

#line 516 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_FNVMCloseBlocks(void);

#line 528 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
BOOL32 OBM_PadOpenBlock(OBM_BlockType_t obid, uint32_t numFMUsToPad, uint16_t fnvmCtxtID);

#line 543 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
BML_JumboBlock_ID_t OBM_BRLCAllocBlock(OBM_BlockType_t srcObid, BML_JumboBlock_ID_t srcJumboBlockId, uint32_t rlcEndFmus, BRLC_Cause_t brlcCause);

#line 558 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_BRLCSwapTargetBlk(OBM_BlockType_t srcObid, BML_JumboBlock_ID_t srcJumboBlockId, BML_JumboBlock_ID_t trgtJumboBlockId, BOOL32 isMountBrlc);

#line 571 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
BOOL32 OBM_CanBlockBeBRLC(BML_JumboBlock_ID_t jumboBlockId);










uint32_t OBM_GetBlockRemainingFMUs(OBM_BlockType_t openBlockType);

#line 594 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_GetOpenBlockMountFields(OBM_BlockType_t openBlockType, uint32_t mdIdx);

#line 608 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_ResetOpenBlock(OBM_BlockType_t openBlockType, JBA_t jba, BOOL32 isWABlock, BOOL32 isUpdatefmuoffset, BOOL32 updateJbsAllocations);

#line 622 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
OBM_BlockCapacityState_t OBM_IncBlockNextToWrite(OBM_BlockType_t openBlockType, uint32_t length);

#line 636 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_EndXORZoneReqPSCallBack(uint16_t ctxtId, uint16_t dummy, FMG_ExecStatus_t execStatus);










uint32_t OBM_GetHostBlocksFreeFMUsByPartition(uint32_t partitionType);

#line 659 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_GetBlocksFreeFMUsByPartition(uint32_t partitionType);

#line 671 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_GetBlocksFreeFMUsByBlock(OBM_BlockType_t blockType);

#line 686 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_TestAndSetBlocksAllocLRM(OBM_BlockType_t openBlockType, BOOL32 isHSLC);

#line 698 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_TestAndClearBlocksAllocLRM(void);










void OBM_ControlSyncComplete(void);

#line 722 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
void OBM_GetBlockLogicallyClosedObid(BML_JumboBlock_ID_t srcJumboBlockId, OBM_BlockType_t* openBlockIdOut, BOOL32* isLogicallyClosedOut);

#line 736 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
BOOL32 OBM_IsOpenBlockOld (BML_Partition_ID_t partition,uint32_t JbAllocations,uint32_t *pJbAllocationsDiff);










void OBM_HandleSingleBlockWearLevel(JBA_t jba, uint32_t JbAllocations, OBM_BlockType_t blockType);

#line 759 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_GetFMUsInZone(OBM_BlockType_t blockType, uint32_t xorZoneIndex);










uint32_t OBM_CheckCanAllocateBlock(OBM_BlockType_t opbBlockType, OBM_LRM_CHECK_STATE_t state);

#line 785 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
__inline static  OBM_BlockType_t OBM_GetOBIDByJBID (uint32_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 787 , "jbid < (((uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   return ((OBM_BlockType_t)(OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_OBID]));
}









__inline static  uint32_t OBM_GetJbidByBlockType (OBM_BlockType_t blockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(blockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 801 , "blockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   return ((uint32_t)(OBM_Cb.openBlocks[blockType].jba.jumboBlockId));
}









__inline static  uint32_t OBM_GetFmuInBlockType (OBM_BlockType_t blockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(blockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 815 , "blockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   return ((uint32_t)(OBM_Cb.openBlocks[blockType].jba.fmuInBlock));
}

#line 829 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
__inline static  OBM_BlockType_t OBM_GetObidRlcRead(BML_JumboBlock_ID_t jblId)
{
   OBM_BlockType_t opbId;

   if (MNT_IsMountOngoing())
   {
      BOOL32 isLogicallyClosed =  (0) ;

      OBM_GetBlockLogicallyClosedObid(jblId, &opbId, &isLogicallyClosed);
   }
   else
   {
      opbId = OBM_GetOBIDByJBID(jblId);
   }

   return opbId;
}









__inline static  OBM_BlockType_t OBM_GetBlockTypeByJBA(JBA_t jba)
{
   return (OBM_GetOBIDByJBID(jba.jumboBlockId));
}

#line 870 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_SetOBIDByJBID(BML_JumboBlock_ID_t jbid, OBM_BlockType_t obid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)((obid < OBM_BLOCK_TYPE_MAX) || (obid == OBM_BLOCK_TYPE_ILLEGAL) || ( (((obid) < (OBM_BLOCK_TYPE_ILLEGAL & (0xFF) )) && (((obid) & (0xF) ) == (0xF) )) )), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 872 , "(obid < OBM_BLOCK_TYPE_MAX) || (obid == OBM_BLOCK_TYPE_ILLEGAL) || ((((obid) < (OBM_BLOCK_TYPE_ILLEGAL & (0xFF))) && (((obid) & (0xF)) == (0xF))))");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 873 , "jbid < (((uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_OBID] = (uint8_t)obid;
}

#line 888 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_SetEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid, uint8_t ctxtRefCtr)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 890 , "jbid < (((uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtRefCtr <= ( ( 2 ) )), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 891 , "ctxtRefCtr <= ((2))");                         "BullseyeCoverage restore"; } ;
   OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] = ctxtRefCtr;
}

#line 905 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_DecEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 907 , "jbid < (((uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] > 0) && (OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] != (0xFF) )), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 908 , "(OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] > 0) && (OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] != (0xFF))");                         "BullseyeCoverage restore"; } ;
   OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR]-- ;
}










__inline static  uint8_t OBM_GetEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 923 , "jbid < (((uint32_t)(fwCfg.ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   return (OBM_JbObMap[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR]);
}









__inline static  BOOL32 OBM_IsOBOpened(OBM_BlockType_t openBlockType)
{
   return (((uint8_t)openBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX) &&  ( (! ( (*((uint32_t*)(void*)(&((OBM_Cb.openBlocks[openBlockType]).jba))))  == (0xFFFFFFFF) ) )  && !( ( ((OBM_Cb.openBlocks[openBlockType]).jba.fmuInBlock) == ((OBM_Cb.openBlocks[openBlockType]).policy.validFMUsSize) )  ) ) );
}









__inline static  void OBM_GetOpenBlockJba(OBM_BlockType_t opbBlockType, JBA_t* opbJba)
{
   OBM_GetBlockNextToWrite(opbBlockType, opbJba);
}









__inline static  uint32_t OBM_GetOpenBlockNumValidFMUs(OBM_BlockType_t opbBlockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)), "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h" , 963 , "((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)");                         "BullseyeCoverage restore"; } ;
   return OBM_Cb.openBlocks[opbBlockType].policy.validFMUsSize;
}










__inline static  void OBM_PrepareDPS2(void)
{
   OBM_CsPrepCTL();
   OBM_CsPrepRLCHost();
}










__inline static  uint8_t OBM_GetAllocationTS(void)
{
   return (OBM_JumboBlockAllocationTS.allocationTS);
}


__inline static  uint32_t OBM_IsUnevenZone(void)
{
    return OBM_Cb.IsUnevenZone;
}

#line 31 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 33 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 30 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 33 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_api.h"

#line 30 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"

#line 61 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
enum OVP_SynchOriginator_e
{
   OVP_ORIGINATOR_OVP_HW_QUEUE   = 0,
   OVP_ORIGINATOR_FE_ADMIN_QUEUE = 1,
   OVP_ORIGINATOR_HWD_GRP_ID     = 2,
   OVP_ORIGINATOR_FML_IDLEIZE    = 3,
   OVP_ORIGINATOR_READ_OVP       = 4,
   OVP_ORIGINATOR_NO_ORIGINATOR  = 0xFF,
};
typedef uint32_t OVP_SynchOriginator;


enum OVP_StreamSynchState_e
{
   OVP_STATE_IDLE                = 0,
   OVP_STATE_WAIT_ON_WRITE       = 1,
   OVP_STATE_WAIT_ON_RMW         = 2,
   OVP_STATE_WAIT_ON_TLC_BUFFER  = 3,
   OVP_STATE_PAUSE               = 4,
   OVP_STATE_PAUSE_EMPTY         = 5,
};
typedef uint32_t OVP_StreamSynchState;

enum OVP_OReadState_e
{
   OVP_OREAD_STATE_IDLE,
   OVP_OREAD_STATE_SHORT_SYNCH,
   OVP_OREAD_STATE_SHORT_SYNCH_FAILED,
   OVP_OREAD_STATE_FULL_SYNCH,
};
typedef uint32_t OVP_OReadState;




typedef void (OVP_CallbackNoArg_t)(void);
void OVP_OverlapQDispatcher(OVP_SynchOriginator originator, OVP_CallbackNoArg_t* callbackFun);

typedef struct OVP_StreamStatus_s
{
   OVP_StreamSynchState streamSynchState;
   uint32_t lastProcessedHWDId;
   uint32_t lastAllocatedHWDId;
   uint16_t RMWGeneralToken;
   uint16_t RMWGeneralInFlightCounter;
   uint16_t RMWPhaseInFlightCounter;
   uint16_t resv;
} OVP_StreamStatus_t;
typedef struct OVP_CallbackEntry_s
{
   OVP_CallbackNoArg_t* callback;
   OVP_SynchOriginator  originator;
} OVP_CallbackEntry_t;






typedef struct OVP_HWQHandler_s
{
   BOOL32               isCallbackNeeded;
   BOOL32               ovpHWQCounter;
   OVP_StreamStatus_t   streamsStatus[HAWA_NUM_WRITE_TYPES];
   OVP_CallbackEntry_t  callbackList[ 4 ];
   BOOL32               needHawaFlush;
} OVP_HWStreamsHandler_t;

typedef struct quickSyncStat_s
{
   uint32_t sendToPS;
   uint32_t abort;
   uint32_t sendToHost;
} quickSyncStat_t;

typedef struct OVP_FWReadCB_s
{
   uint32_t*       readContainer[2];
   uint32_t        savedHIMCmdIdx;
   uint32_t        queueCounter;
   OVP_OReadState  QReadState;
   uint32_t        forceFlushInProgress;

   uint8_t*        headersPointers[ 8 ];
   uint8_t*        dataPointers[ 8 ];
   uint32_t        indexTable[ 8 ];
   quickSyncStat_t quickSyncSendStat;


}OVP_FWReadCB_t;





extern OVP_HWStreamsHandler_t OVP_CB;
extern OVP_FWReadCB_t OVP_READ_CB;
extern uint32_t gFEAdminQCounter;




__inline static  uint16_t OVP_HWDRmwStartHook(HAWA_WriteTypes_t streamType)
{

   OVP_CB.streamsStatus[streamType].RMWGeneralInFlightCounter++;


   return OVP_CB.streamsStatus[streamType].RMWGeneralToken;
}

void OVP_CalledFromFMLGoIdle(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

#line 187 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_FEAdminQDispatcher(void);

void OVP_FEAdminQProcessEntry(void);


void OVP_READ_QuickSyncMount(void);

#line 205 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_FEAdminQSynch_Callback(void);

#line 220 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_OverlapQDispatcher(OVP_SynchOriginator originator ,OVP_CallbackNoArg_t* callbackFun);

#line 234 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_HWDRmwEndHook(HAWA_WriteTypes_t streamType, uint16_t rmwToken, uint32_t hwdCtxtID);

#line 246 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_HWDWriteHook(HAWA_WriteTypes_t streamType, uint32_t lastProcessedHWDId);










void OVP_HWDTLCWriteHook(HAWA_WriteTypes_t streamType);

#line 269 "d:/gitrepo/atlas3_release/source/ftl/ovp/inc/ftl_ovp_api.h"
void OVP_FEAdminQRmwDone_Callback(void);










void OVP_READ_ReadHandler(void);
void OVP_READ_QuickSync_Callback(void);
void OVP_READ_FullOvpSync_Callback(void);
void OVP_CallbacksAfterHawaFlush(void);

#line 32 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 34 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"

#line 35 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_compaction.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 27 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_compaction.h"

#line 38 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_compaction.h"
Status_t FTL_XORM_Compaction_Process(void);

Status_t FTL_XORM_Compaction_Finilize(void);

#line 26 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/obm/inc/obm_api.h"

#line 28 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 95 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"
enum FTL_XorSwapMode_e
{
   XORM_SWAP_MODE_FULL_SWAP,
   XORM_SWAP_MODE_STORE_ONLY,

   XORM_SWAP_MODE_STORE_SHUTDOWN,

   XORM_SWAP_MODE_LOAD_ONLY,
   XORM_SWAP_MODE_NOP_SWAP,

   XORM_SWAP_MODE_COMPACTION_FNVM,

   XORM_SWAP_NUM_MODES
};

typedef uint8_t FTL_XorSwapMode_t;


enum FTL_XORM_XorLocType_e
{
   FTL_XORM_XOR_LOC_TYPE_XRAM,
   FTL_XORM_XOR_LOC_TYPE_FLASH,

   FTL_XORM_XOR_LOC_TYPE_DRAM,

};

typedef uint8_t FTL_XORM_XorLocType_t;


enum FTL_XORM_Descriptors_e
{
   XORM_DESC_IDX_CURRENT,
   XORM_DESC_IDX_PENDING
};

typedef uint8_t FTL_XORM_DescriptorIdx_t;


enum FTL_XORM_States_e
{
   XORM_STATE_IDLE = 0,
   XORM_STATE_START,
   XORM_STATE_BARRIER_SEND,
   XORM_STATE_BARRIER_WAIT,
   XORM_STATE_STORE_COMPACTION_CHECK,
   XORM_STATE_STORE_COMPACTION_WAIT,
   XORM_STATE_STORE_REQUEST_SEND,
   XORM_STATE_STORE_REQUEST_WAIT,
   XORM_STATE_LOAD_REQUEST_SEND,
   XORM_STATE_LOAD_REQUEST_WAIT,
   XORM_STATE_REBUILD_WAIT,
   XORM_STATE_FINISH
};

typedef uint8_t FTL_XORM_States_t;


enum FTL_XORM_Compaction_States_e
{
   XORM_COMPACTION_STATE_START,
   XORM_COMPACTION_STATE_FINISH,
};

typedef uint8_t FTL_XORM_Compaction_States_t;


enum FTL_XORM_RSQ_States_e
{
   XORM_RSQ_IDLE,
   XORM_RSQ_NOPSWAP,
   XORM_RSQ_BRLC_SEND,
   XORM_RSQ_BRLC_WAIT
};

typedef uint8_t FTL_XORM_RSQ_States_t;


enum FTL_XORM_ParityActions_e
{
   XORM_PARITY_ACTION_INVALID,
   XORM_PARITY_ACTION_VALIDATE,
   XORM_PARITY_ACTION_INVALIDATE,
   XORM_PARITY_ACTION_STORE_REQUESTED,
   XORM_PARITY_ACTION_STORE_COMPLETED,
   XORM_PARITY_ACTION_LOAD_REQUESTED,
   XORM_PARITY_ACTION_LOAD_COMPLETED,
   XORM_PARITY_ACTION_LOAD_FAILED,
   XORM_PARITY_ACTION_LOAD_REBUILD_COMPLETED,
};

typedef uint8_t FTL_XORM_ParityActions_t;









   typedef uint32_t binFailureBitmap_t;



typedef struct Dbg_Xorm_SwapCounter_s
{
   uint32_t totalNumSwap;
   uint32_t numLoadFromDram;
   uint32_t numStoreToDram;
   uint32_t numLoadFromNAND;
   uint32_t numStoreToNAND;
   uint32_t numStoreOnly;
   uint32_t numSkipStore;
   uint32_t numNOPSwap;
   uint32_t numClearBuf;
   uint32_t numSkippedSwap;
} Dbg_Xorm_SwapCounter_t;



typedef struct FTL_XORM_XorLoc_s
{
   JBA_t             jba;
   OBM_BlockXorId_t  xbid;
} FTL_XORM_XorLoc_t;


typedef struct XORM_SwapDescriptor_s
{
   OBM_BlockType_t         opbID;
   OBM_BlockXorId_t        xbID;
   FTL_XORM_States_t       state;
   FTL_XorSwapMode_t       swapMode;
   uint8_t                 rfu0;
   uint16_t                callerCtxtId;
   uint16_t                rfu1;
   uint64_t                binFailureBitmap;
} XORM_SwapDescriptor_t;



typedef struct XORM_XorOpbInfoInLog_s
{
   JBA_t                   jbaInXORB;
   JBA_t                   lastProtectedJBA;
}   XORM_XorOpbInfoInLog_t;






typedef struct XORM_LogInfo_s
{
   JBA_t                   sourceBlockJBA;
   uint32_t                compactionThresholdInFMUs;
   uint8_t                 dbgLastOPBParityOperation[ (OBM_BLOCK_TYPE_BRLC + 1) ];
   uint16_t                rfu0;
   uint32_t                rfu1;
   XORM_XorOpbInfoInLog_t  xorOpbInfo[ (OBM_BLOCK_TYPE_BRLC + 1) ];
}   XORM_LogInfo_t;



typedef struct XORM_Compaction_Descriptor_s
{
   BOOL                          inProgress;
   uint8_t                       paritiesToCopy;
   uint16_t                      rfu0;
   JBA_t                         jbaInOldBlock[ (OBM_BLOCK_TYPE_BRLC + 1) ];
} XORM_CompactionDescriptor_t;






typedef struct XORM_Cb_s
{
   XORM_LogInfo_t                *pXorLogInfo;
   XORM_LogInfo_t                *pXORActiveLOGPointer;
   XORM_LogInfo_t                nbcsXorLogInfo;
   OBM_BlockType_t               *pXbidToActiveOPBIdMap;

   uint16_t                      loadContexts[ ( (6U) ) ];
   uint16_t                      storeContext;
   uint16_t                      rsqContext;
   uint8_t                       numPendingCompletions;
   BOOL                          exitToFML;
   BOOL                          controlSyncActive;
   FTL_XORM_RSQ_States_t         rsqHandlingState;
   XORM_SwapDescriptor_t         swapDescriptors[ (2) ];
   XORM_CompactionDescriptor_t   compactionDescriptor;


   uint8_t                       *pIsXORinDRAM;
   JBA_t                         *pLastProtectedJBAinDRAM;



   Dbg_Xorm_SwapCounter_t           swapCounters;

} XORM_CB_t;

typedef struct XORM_DiagStoreUserArea_s
{
   uint16_t        origCtxtId;
   OBM_BlockType_t curParityOpbId;
   uint8_t         res0;
   uint32_t        activeOpbIDBitmap;
}XORM_DiagStoreUserArea_t;

typedef struct XORM_RSQ_UserArea_s
{
   BML_JumboBlock_ID_t  rsqJBID;
   uint8_t              reqType;
   uint8_t              rfu;
}XORM_RSQ_UserArea_t;





extern XORM_CB_t XORM_Cb;
extern OBM_BlockType_t xbidToActiveOPBIdMap[XOR_NUM_XORIDS];





void FTL_XORM_Init(void);

Status_t FTL_XORM_FirstMount(void);

uint32_t FTL_XORM_Mount(uint16_t mntCtxtId);

void FTL_XORM_CheckLogPtr(void);

void FTL_XORM_CheckAndReleaseCompactionSource(void);

void FTL_XORM_StoreCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

void FTL_XORM_LoadCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

FTL_XORM_DescriptorIdx_t FTL_XORM_NopSwap(uint16_t callerCtxtId);

FTL_XORM_DescriptorIdx_t FTL_XORM_XorSwap(uint16_t callerCtxtId, BOOL skipLoad, OBM_BlockType_t opbID);

OBM_BlockType_t FTL_XORM_GetActiveOPBID(OBM_BlockXorId_t xbid);


FTL_XORM_DescriptorIdx_t FTL_XORM_XorSwap_Shutdown(uint16_t callerCtxtId, OBM_BlockType_t opbID);


FTL_XORM_XorLocType_t FTL_XORM_GetOpenBlockParityLoc(BML_JumboBlock_ID_t jbID, OBM_BlockType_t opbID, uint32_t groupID, FTL_XORM_XorLoc_t* pLocation);

JBA_t FTL_XORM_GetLastParityProtectedFmu(OBM_BlockType_t opbID);

OBM_BlockType_t FTL_XORM_GetCurrOpbid(OBM_BlockXorId_t XBID);

void FTL_XORM_NotifyXRAMParityValid(OBM_BlockType_t opbID);

void FTL_XORM_InvalidateStoredParity(OBM_BlockType_t opbID, BOOL invalidateActiveOPBId);

void FTL_XORM_ControlSyncPrepare(void);

void FTL_XORM_ControlSyncComplete(void);

void  __attribute__((section("CODE_SLOW")))  FTL_XORM_SetCompactionThreshold(uint32_t newValue);

uint32_t FTL_XORM_GetCompactionThreshold(void);

BOOL FTL_XORM_IsXORMBlock(BML_JumboBlock_ID_t JBID);

void FTL_XORM_ScheduleRSQRequest();

void FTL_XORM_RSQRequestCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

void FTL_XORM_ResetActiveOPBID(OBM_BlockXorId_t XBID);

uint32_t FTL_XORM_GetFMUsToWriteForSwapOut(void);

#line 395 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  uint32_t FTL_XORM_GetXorZoneConfig(void)
{
   return pFTLFormatConfig->numXorZones;
}

#line 413 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  void FTL_XORM_SetParityPtrXORB(OBM_BlockType_t obid, JBA_t jba)
{
   XORM_Cb.pXORActiveLOGPointer->xorOpbInfo[obid].jbaInXORB = jba;
}

#line 434 "d:/gitrepo/atlas3_release/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  void FTL_XORM_NotifyXRAMParityInvalid(OBM_BlockType_t opbID)
{
   FTL_XORM_InvalidateStoredParity(opbID,  (1) );
}

#line 36 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_scancpy.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"

#line 37 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_scancpy.h"

#line 61 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_scancpy.h"
typedef enum RLC_svBuffer_Range_State_e
{
   RLC_SV_BUFFER_RANGE_STATE_EMPTY,
   RLC_SV_BUFFER_RANGE_STATE_WAIT_FOR_SCAN,
   RLC_SV_BUFFER_RANGE_STATE_TRANSLATE,
   RLC_SV_BUFFER_RANGE_STATE_TRANSLATE_COMPLETE
}RLC_svBuffer_Range_State_t;

typedef enum RLC_svBuffer_Translate_Status_e
{
   RLC_SV_BUFFER_TRANS_STATUS_VALID,
   RLC_SV_BUFFER_TRANS_STATUS_INVALID,
   RLC_SV_BUFFER_TRANS_STATUS_MISS,
   RLC_SV_BUFFER_TRANS_STATUS_GAP
}RLC_svBuffer_Translate_Status_t;





typedef union RLC_svBufferEntry_u
{
   struct
   {
      uint32_t nameSpace;
      uint32_t flba;
   } scan;

   struct
   {
      int translateStatus;
      uint32_t fflba;
   } translate;

} RLC_svBufferEntry_t;

typedef struct RLC_cpyBufferEntry_s
{
   uint32_t fflba;
   JBA_t srcJba;

} RLC_cpyBufferEntry_t;


typedef struct RLC_svBufferRange_s
{
   JBA_t JbaBaseAddr;

   RLC_svBufferEntry_t* pHead;
   RLC_svBufferEntry_t* pLastTransEntry;

   uint8_t rlcType;
   uint8_t isStale;
   uint8_t rfu[2];

   uint32_t numScannedFmus;
   uint32_t numTranslateHit;
   uint32_t numTransReq;

   RLC_svBufferEntry_t* pLastSeqEntry;

   RLC_svBuffer_Range_State_t svState;
}RLC_svBufferRange_t;


typedef struct RLC_satTransInfo_s
{
   uint8_t svRangeIndex;
   uint8_t ctxIndex;
   uint16_t entryOffsetInRange;
   uint32_t sequentialFmus;
}RLC_satTransInfo_t;


typedef struct RLC_scanUA_s
{
   uint32_t rangeIndex;
   uint32_t fmuCount;
   uint8_t* pSvBufferEntry;
}RLC_scanUA_t;

typedef struct RLC_svTransCtx_s
{
   uint16_t ctxId;
   uint16_t ctxState;
}RLC_svTransCtx_t;

typedef struct RLC_buffersManager_s
{

   RLC_svBufferEntry_t* pSvBuffer;
   RLC_svBufferEntry_t* pCurrEntry;
   RLC_svBufferRange_t svBufferRanges[ 6 ];
   uint8_t activeRange;
   uint8_t nextRangeToScan;


   uint16_t copiedCurrJbid;
   RLC_cpyBufferEntry_t* pCpyBuffer;
   RLC_cpyBufferEntry_t* pCpyBufferNextToCpy;


   uint16_t scanFmgCtxIds[ 6 ];
   RLC_svTransCtx_t transFmgCtxs[ 32 ];

   uint8_t transCurrCtxIndex;
   uint8_t pendingContexts;

   uint16_t stepCtxId;
   uint16_t scanCtxId;
   uint16_t rlcReadQueueExitLRMCtxId;

   BOOL32 scanIsComplete;


   uint8_t stepScheduled;

   uint8_t pendingContextsPerIRLCType[2];
   uint8_t rfu1[1];

#line 184 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_scancpy.h"
}RLC_buffersManager_t;







void RLC_ScanComplete(uint16_t FMGCId, uint16_t payload, FMG_ExecStatus_t execStatus);
void RLC_TranslateComplete(uint16_t FMGCId, uint16_t payload, FMG_ExecStatus_t execStatus);
void RLC_FmgDoStep(uint16_t FMGCId, uint16_t payload, FMG_ExecStatus_t execStatus);
void RLC_FmgDoScan(uint16_t FMGCId, uint16_t payload, FMG_ExecStatus_t execStatus);
void RLC_FmgBrlcComplete(uint16_t FMGCId, uint16_t payload, FMG_ExecStatus_t execStatus);

void RLC_AllocateCtxs(void);

BOOL32 RLC_ExistInCpyBuffer(uint16_t jbid);
RLC_Step_Status_t RLC_CpyStep(RLC_Step_Status_t stepStatus);
RLC_Step_Status_t RLC_PerformRlcReadWrite(uint32_t fmusToWrite, BOOL32* bReleaseBlocks);
RLC_Step_Status_t RLC_CopyValidFmusToCpyBuffer(BOOL32 performCopy, BOOL32* bForceCpy);

RLC_Step_Status_t RLC_SendScanReq(void);

#line 209 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_scancpy.h"
uint16_t RLC_GetNextTransCtx(uint8_t* pCtxIndex);
void RLC_IncrementBlock(JBA_t* pJba, uint32_t length);
RLC_Step_Status_t RLC_CheckForInvalidBlock(uint16_t currSrcJbId);

BOOL32 RLC_TranslateReq(RLC_svBufferEntry_t** pSvCurrEntry, uint8_t rangeIndex, uint32_t* fmuCount, BOOL bFirstTranslate, uint16_t ctxId, uint8_t ctxIndex);
void RLC_RangeTranslate(uint32_t rangeIndex, RLC_svBufferEntry_t* pRangeHeadEntry);
void RLC_handleTranslateHit(RLC_svBufferEntry_t** pSvCurrEntry, JBA_t transJba, uint32_t fmuCount, uint32_t rangeIndex, uint16_t entryOffsetInRange, BOOL bFirstTranslate);
BOOL32 RLC_IsSourceBlockRelocated(uint16_t jbid);
BOOL32 RLC_GetNextRangeToTranslate(uint8_t* pRangeToTrans);
void RLC_ConvertToFFLBA(uint32_t rangeIndex);

#line 37 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"

#line 182 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
typedef enum
{
   MVP_RELOCATION_CALLER_NONE = 0,
   MVP_RELOCATION_CALLER_MVP,
   MVP_RELOCATION_CALLER_BKOPS,

   MVP_RELOCATION_CALLER_RS_FNVM_FLUSHNV,

#line 193 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
   MVP_RELOCATION_CALLER_RS_READ_HANDLER,

   MVP_RELOCATION_CALLER_DIAGNOSTICS,
   MVP_RELOCATION_CALLER_INTERNAL_WRITE,
   MVP_RELOCATION_CALLER_BMG_PROFILE_SWITCH,
} MVP_RelocationCaller_t;

typedef enum
{
   MVP_RESTRICTION_NONE,
   MVP_RESTRICTION_REASON_SWAP = (1 << 0),
   MVP_RESTRICTION_REASON_RLC_WAITING = (1 << 1),
   MVP_RESTRICTION_REASON_WAITING_BARRIER = (1 << 2),
} MVP_RestrictionReason_t;

typedef enum
{
   MVP_GC_CYCLE_CALLER_CYCLESTART = 0,
   MVP_GC_CYCLE_CALLER_CYCLEEND,
} MVP_GcCycleCaller_t;

typedef enum
{
   MVP_ACTIVE_PROFILE_HOST = 0,
   MVP_ACTIVE_PROFILE_RELOCATION,
} MVP_AcitveProfile;

typedef enum
{
   MVP_SET_RATIO_CALC_GC,
   MVP_SET_RATIO_SOURCE_BLOCK_VC,
   MVP_SET_RATIO_JB_ALLOC,
} MVP_SetRatioReason_t;

typedef struct MVP_LogInfo_s
{
   uint32_t rfu;
   OBM_BlockType_t lastSwappedBlock;
   uint32_t numHSLCBlksInDev;
   uint32_t numHSLCBlksAllocated;
   uint32_t currentDevVC;
   uint32_t currentMaxPEC;
   uint32_t bcTimestamp;


   uint32_t hSlcBrlcBlks[ ((( ( ((( (467) ) > ( (915) )) ? ( (467) ) : ( (915) ))  + (20)  + (140) ) ) + ( (32) ) - 1) / ( (32) )) ];



   uint32_t blkTypeInfo[ ((( ( ((( (467) ) > ( (915) )) ? ( (467) ) : ( (915) ))  + (20)  + (140) ) ) + ( (32) ) - 1) / ( (32) ))  *  (2) ];

}   MVP_LogInfo_t;

#line 265 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
typedef struct HSLC_LogicalTaper_s
{
   uint32_t totalTlcBlks;
   uint32_t currentDevVC;
   uint32_t devCapacity;
   uint8_t  hybridHysteresis;


   uint8_t  reserved[3];
} HSLC_LogicalTaper_t;




typedef struct HSLC_EM_HarPlan_s
{
   uint16_t allocSeqIdx;
   uint16_t currentStep;
} HSLC_EM_HarPlan_t;


typedef struct HSLC_EnduranceMonitor_s
{
   uint16_t targetTBWInTB;
   uint16_t currentMaxPEC;
   uint16_t allowedMaxPEC;
   uint16_t lastHAR;

   HSLC_EM_HarPlan_t plan;

} HSLC_EnduranceMonitor_t;

typedef struct HSLC_LastSelectedSrcInfo_s
{
   uint16_t blockType;
   uint16_t jbID;
   uint32_t sourceVC;
} HSLC_LastSelectedSrcInfo_t;

typedef struct HSLC_CB_s
{

   uint8_t isHSLCAllowedSeq;
   uint8_t isHSLCAllowedRnd;
   uint8_t hslcBlkAllocOngoing;
   uint8_t isHybridReductionActive;

   uint8_t isIgnoreRndResetTimer;
   uint8_t adjustTlcBlkCntToMinBudget;
   uint8_t isHSLCAllowedSeqPrevState;
   uint8_t isHSLCAllowedRndPrevState;


   uint32_t numHSLCBlksInDev;


   uint32_t numHSLCBlksAllocated;


   uint32_t maxPec;
   uint32_t avgPec;
   uint32_t numBlocksErasedSinceLastAvgUpdate;


   uint32_t bcTimestamp;


   uint32_t nHwdBufsReceived[2];

   uint32_t reductionScalePercent;


   HSLC_LastSelectedSrcInfo_t lastSelSrcInfo;

   HSLC_LogicalTaper_t     logicalTaper;
   HSLC_EnduranceMonitor_t enduranceMonitor;



   uint32_t hSlcBrlcBlks[ ((( ( ((( (467) ) > ( (915) )) ? ( (467) ) : ( (915) ))  + (20)  + (140) ) ) + ( (32) ) - 1) / ( (32) )) ];

} HSLC_CB_t;





typedef struct
{

   uint8_t partition;
   uint8_t isFnvm;

   uint8_t isFlushNV;

   uint8_t isStatic;
   uint8_t isReadScrub;

   uint8_t padding2[3];

   uint32_t fmusPerJumboBlock;


   uint32_t maxInFmusInCycle;
   uint32_t freeFmusToStartGC;
   uint32_t freeBlocksToStartGc;
   uint32_t freeFmusToBalanceGC;
   uint32_t freeBlocksToBalanceGc;


   uint32_t lastFreeFmuSpace;
   uint16_t freeBlocks;
   uint16_t padding0;


   uint32_t totalGc;
   uint32_t totalHost;
   uint32_t scalePercent;

   uint8_t isGcRequired;
   uint8_t doesNeedFreeSpace;
   uint8_t prevRelocationType;
   uint8_t padding1;

   uint8_t scaleRatios[ ((( (2 + 1 ) ) + 3) - ((( (2 + 1 ) ) + 3) & 3)) ];


   uint32_t lastPec;

} MVP_Partition_t;



typedef union
{
   struct {
      uint32_t isTerminating:1;
      uint32_t rfu:31;
   } bits;
   uint32_t all;
} IRLC_Flag_t;
typedef struct
{
   BOOL32 isActivate;
   uint32_t currentRlcType;
   IRLC_Flag_t sessionFlags[ (2) ];
   int32_t hostQuota[ (2) ];
   int32_t gcQuota[ (2) ];

   uint32_t ratioHost[ (2) ];
   uint32_t ratioGc[ (2) ];

   int32_t hostDrift;

   struct IRLC_PerSessionData_s
   {

      uint32_t progressGc;
      uint32_t progressHost;
      uint16_t numSourcesReleased;


      uint32_t progressGcSource;
      uint32_t progressHostSource;

   } perSessionData[ (2) ];
} IRLC_Cb_t;






typedef struct
{
   MVP_Partition_t* gcPartition_p;


   uint32_t freeSpaceToNotifyModules;
   uint32_t freeSpaceAboveThresholdToStartGC;


   uint8_t isTerminating;
   uint8_t isWaiting;
   uint8_t rfu3;
   uint8_t previousRlcStatus;

   uint8_t forceTermination;
   uint8_t didSendFirstStep;


   uint16_t barrierCompleteContext;


   uint32_t ratioHost;
   uint32_t ratioGc;


   int32_t hostQuota;
   int32_t gcQuota;


   uint32_t progressGc;
   uint32_t progressHost;
   uint16_t numSourcesReleased;


   uint16_t isNeededInBkops;


   uint32_t progressGcSource;
   uint32_t progressHostSource;


   uint32_t isPendingRlcCompletion;


   uint16_t independentContext;
   uint8_t isIndependentScheduled;

   uint8_t isBarrierInProgress;


   uint8_t needCalculateCycle;
   uint8_t rfu1[3];

   MVP_LogInfo_t* logInfo_p;


   uint8_t restrictionsReason;
   uint8_t relocationType;
   uint8_t prevRelocationType;
   uint8_t activeProfile;
   uint8_t lastGcPartition;




   uint8_t rfu2[2];

   uint8_t restriction[ (2) ];
   uint8_t padding1[3];


   uint16_t fnvmCtxId;


   uint16_t swapContextId;

   int32_t fbccRelocationType;


   IRLC_Cb_t IRLC_Cb;


   uint32_t fbccForceStatic[PARTITIONS_COUNT];

#line 527 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
   HSLC_CB_t HSLC_CB;
}MVP_Plan_t;

extern MVP_Partition_t MVP_Partitions[PARTITIONS_COUNT];
extern MVP_Plan_t MVP_Plan;
extern RLC_buffersManager_t gBuffersManager;

void MVP_Init(void);
void MVP_FirstMount(void);
void MVP_NormalMount(uint16_t mountContextId);
void MVP_MountSetLogInfo(void);
void MVP_MountCommon(uint16_t mountContextId);
uint32_t MVP_CheckNeedGC(uint32_t* minFreeSpaceAboveThreshold_p, BOOL isBKOPQuery);
uint32_t MVP_HSLC_CalculateScalePercentForHRDC(void);
BOOL32 MVP_HSLC_IsHSLCAllowed(BOOL32 sequential);
BOOL32 MVP_HSLC_IsHSLCAllowedInternal(BOOL32 sequential, BOOL32 isDiag);
BOOL32 MVP_HSLC_IsHSLCAllowedDiag();
BOOL32 MVP_HSLC_GetHSLCMode(BOOL32 sequential);
BOOL32 MVP_HSLC_GetHSLCModeForErase(void);
OBM_BlockType_t MVP_HSLC_GetBlkTypeAllocOngoing(void);
uint32_t MVP_HSLC_GetBlkCloseTimestamp(void);
void MVP_HSLC_NotifyVCReset(void);
void MVP_HSLC_NotifyVCUpdate(BML_JumboBlock_ID_t jbID, int32_t length);
void MVP_HSLC_NotifyPECIncrease(BML_Partition_ID_t partition, uint32_t PEC);
uint16_t MVP_HSLC_GetCurrentMaxPEC(void);
void MVP_HSLC_NotifyHwdBufsReceived(uint8_t stream);
void MVP_HSLC_NotifyFlush(void);
void MVP_HSLC_UpdateLastSelectedSrcInfo(uint16_t jbID, uint16_t blkType, uint32_t VC);
void MVP_HSLC_SetBlkTypeAllocOngoing(OBM_BlockType_t opbid);
void MVP_HSLC_SetHSLCMode(BOOL32 allowed);
void MVP_HSLC_NotifyHSLCBlksAlloc(void);

void MVP_HSLC_NotifyUserDataBlksAlloc(OBM_BlockType_t obType, BOOL32 isHSLC);


void MVP_HSLC_NotifyBrlcSwapBlocks(OBM_BlockType_t obID, BML_JumboBlock_ID_t srcJBID, BML_JumboBlock_ID_t dstJBID);
BOOL32 MVP_IsJbBrlcSwapBlock(BML_JumboBlock_ID_t jbId);


BML_Partition_ID_t MVP_GetBlkTypeInfo(BML_JumboBlock_ID_t jbId, BOOL32 *pIsHSLC);

void MVP_HSLC_NotifyHSLCBlksRelease(BML_JumboBlock_ID_t jbID);
void MVP_HSLC_NotifyHostBlksClose(void);

void MVP_HSLC_UpdatePecStatistics(uint32_t mbPec, uint32_t pecDiff);

uint32_t MVP_CheckNeedGCInSLC(uint32_t* minFreeSpaceAboveThreshold_p, BOOL isBKOPQuery);
uint32_t MVP_CheckNeedGCInTLC(uint32_t* minFreeSpaceAboveThreshold_p, BOOL isBKOPQuery);

void MVP_SetJumboBlockHSLCMode(BML_JumboBlock_ID_t jbId, BOOL32 isHSLC);
BOOL32 MVP_IsJbInHSLCMode(BML_JumboBlock_ID_t jbId);

void MVP_HSLC_NormalMount(void);
uint32_t MVP_CalculatePartitionRatio(MVP_Partition_t* partition_p);
void MVP_CalcPartitionsFreeSpace(MVP_Partition_t* partition_p);
void MVP_MainLoopHandler(uint8_t queueNum);
void MVP_IndependentHandler(uint16_t contextId, uint16_t payload, FMG_ExecStatus_t execStatus);
uint32_t MVP_CanExecuteInternalWrite(uint32_t* doSetRestriction_p);
void MVP_HostQuotaConsumed(void);

void MVP_GcQuotaConsumed(void);

void MVP_SourceBlockVC(uint32_t VC, uint16_t jbid);

#line 593 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
void MVP_NotifyJbAllocated(uint32_t partitionIndex);
void MVP_StartFnvmRlc(uint16_t ctxId);
void MVP_EndFnvmRlc(void);

void MVP_StartFlushNvRlc(void);

void MVP_ResumeMVP();
void MVP_RlcCopyDone(RLC_Step_Status_t status);
void MVP_NotifyRSBlock(void);
uint32_t MVP_StartAndAdvanceRelocation(MVP_RelocationCaller_t caller);
void MVP_RlcComplete(void);
__inline static  uint32_t MVP_GetMinDataInSLCForBKOPs(void);
__inline static  uint32_t MVP_IsWaitingForSwap(void);
void MVP_IncreaseHostQuota();
uint32_t MVP_DoNeedFreeSpaceInBKOPs();








__inline static  BOOL32 MVP_IsWaitingForSwap()
{

   return (MVP_Plan.restriction[XORM_DESC_IDX_CURRENT] != FML_RESTRICT_NUM);
}


void MVP_UpdateLastSwappedIfNeeded(OBM_BlockType_t opbId);



void MVP_CheckRelocationAfterBkops(void);

void MVP_NotifyException(uint32_t partition);

void MVP_NotifyFinishedSwitchToRlcProfile(void);
void MVP_RequestTermination(void);

void MVP_PrepareStartRelocation(FML_ResRestrictions restriction);

void MVP_PrepareStopRelocation(void);

uint32_t MVP_IsSLCFreeSpaceLessThanBKOPSThreshold();

void MVP_ControlSyncPrepare(void);


BOOL32 MVP_IRLC_IsRequired();
void MVP_IRLC_SetQuotas(MVP_Partition_t* pPartition);
void MVP_IRLC_HostQuotaConsumed(BML_Partition_ID_t partition, int32_t amount);
void MVP_IRLC_GcQuotaConsumed(void);
void MVP_IRLC_ClearPerSessionData(RLC_Type_t rlcType);
void MVP_IRLC_StorePerSessionData(RLC_Type_t rlcType);
void MVP_IRLC_LoadPerSessionData(RLC_Type_t rlcType);
void MVP_IRLC_TriggerIRLC();
void MVP_IRLC_TerminateOneSession(RLC_Type_t rlcType);
BOOL32 MVP_IRLC_MarkTerminating(RLC_Type_t rlcType);
void MVP_IRLC_SwitchRLCSession();
void MVP_IRLC_Schedule();
void MVP_IRLC_RlcComplete();
BOOL32 MVP_UpdateScaleRatio(BOOL32 forceUpdate);
BOOL32 MVP_IRLC_UpdateScaleRatio(MVP_Partition_t* pPartition);


__inline static  uint32_t MVP_IsWaiting()
{
   return (MVP_Plan.isWaiting == MVP_RELOCATION_CALLER_NONE || MVP_Plan.isWaiting == MVP_RELOCATION_CALLER_BMG_PROFILE_SWITCH) ?  (0)  :  (1) ;
}

__inline static  BOOL32 MVP_IsRelocation(void)
{
   return (MVP_Plan.gcPartition_p !=  ((void *)0) );
}

__inline static  uint32_t MVP_CheckHostUrgentState(void)
{
   uint32_t scalePercent;


   MVP_CalcPartitionsFreeSpace(&MVP_Partitions[PARTITION_TYPE_SLC]);
   MVP_CalcPartitionsFreeSpace(&MVP_Partitions[PARTITION_TYPE_TLC]);


   scalePercent =  (((MVP_CalculatePartitionRatio(&MVP_Partitions[PARTITION_TYPE_SLC]) )< (MVP_CalculatePartitionRatio(&MVP_Partitions[PARTITION_TYPE_TLC]))) ? (MVP_CalculatePartitionRatio(&MVP_Partitions[PARTITION_TYPE_SLC]))  : ( MVP_CalculatePartitionRatio(&MVP_Partitions[PARTITION_TYPE_TLC]))) ;
   return (scalePercent == 0);
}

__inline static  uint32_t MVP_GetMinDataInSLCForBKOPs(void)
{



    return (pFTLHybridSlcConfig->bkopsSlcMinAmountInMB)*(1024*1024/4096);

#line 703 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
}


   __inline static  void MVP_AddHostWriteQuotaMisc()
   {

      MVP_HostQuotaConsumed();


      MVP_IRLC_HostQuotaConsumed(BML_PARTITION_SLC, 1);

   }

   __inline static  void MVP_MainLoopHandlerRW(void)
   {
      MVP_MainLoopHandler(HAWA_RANDOM_WRITE);
   }
   __inline static  void MVP_MainLoopHandlerSW(void)
   {
      MVP_MainLoopHandler(HAWA_SEQUENTIAL_WRITE);
   }
   __inline static  void MVP_MainLoopHandlerOveralp(void)
   {
      MVP_MainLoopHandler(HAWA_OVERLAP_WRITE);
   }

   __inline static  uint32_t MVP_GetFreeSpace(uint32_t partition)
   {
      MVP_Partition_t* partition_p = &MVP_Partitions[partition];
      MVP_CalcPartitionsFreeSpace(partition_p);
      return  ((((int32_t)(partition_p->freeBlocks)) > ((int32_t)(partition_p->freeBlocksToStartGc))) ? ((partition_p->freeBlocks) - (partition_p->freeBlocksToStartGc)) : (0))  * partition_p->fmusPerJumboBlock;
   }

   __inline static  uint32_t MVP_GetFreeBlocksToStartGc(uint32_t partition)
   {
      return MVP_Partitions[partition].freeBlocksToStartGc;
   }

   __inline static  uint32_t MVP_GetFreeBlocksToBalanceGc(uint32_t partition)
   {
       return MVP_Partitions[partition].freeBlocksToBalanceGc;
   }

   __inline static  uint32_t MVP_GetFreeFmusToBalanceGc(uint32_t partition)
   {
       return MVP_Partitions[partition].freeFmusToBalanceGC;
   }

   __inline static  void MVP_SetThresholds(uint32_t partition, uint32_t newValue)
   {
      int signedValue = (int)newValue;
      MVP_Partition_t* partition_p = &MVP_Partitions[partition];
      uint32_t gcdiff = partition_p->freeFmusToStartGC - partition_p->freeFmusToBalanceGC;
      uint32_t blocksdiff = partition_p->freeBlocksToStartGc - partition_p->freeBlocksToBalanceGc;

      { "BullseyeCoverage save off";                          _AssertImpl((int)(partition < PARTITIONS_COUNT), "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h" , 758 , "partition < PARTITIONS_COUNT");                         "BullseyeCoverage restore"; } ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)(partition_p->freeFmusToStartGC >= partition_p->freeFmusToBalanceGC), "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h" , 759 , "partition_p->freeFmusToStartGC >= partition_p->freeFmusToBalanceGC");                         "BullseyeCoverage restore"; } ;

      MVP_CalcPartitionsFreeSpace(partition_p);


      if (signedValue < 0)
      {

         partition_p->freeFmusToStartGC = (uint32_t) ((((int32_t)gcdiff )> ((int32_t)(partition_p->lastFreeFmuSpace + newValue*partition_p->fmusPerJumboBlock))) ? ((int32_t)gcdiff)  : ( (int32_t)(partition_p->lastFreeFmuSpace + newValue*partition_p->fmusPerJumboBlock))) ;
         partition_p->freeBlocksToStartGc = (uint32_t) ((((int32_t)blocksdiff )> ((int32_t)(partition_p->freeBlocks + newValue))) ? ((int32_t)blocksdiff)  : ( (int32_t)(partition_p->freeBlocks + newValue))) ;
      }
      else if (signedValue > 0)
      {
         partition_p->freeFmusToStartGC = newValue*partition_p->fmusPerJumboBlock;
         partition_p->freeBlocksToStartGc = newValue;
         { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h" , 774 , "(0)");                         "BullseyeCoverage restore"; } ;
      }
      if (signedValue != 0)
      {
         { "BullseyeCoverage save off";                          _AssertImpl((int)(partition_p->freeFmusToStartGC >= gcdiff), "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h" , 778 , "partition_p->freeFmusToStartGC >= gcdiff");                         "BullseyeCoverage restore"; } ;
         partition_p->freeFmusToBalanceGC = partition_p->freeFmusToStartGC - gcdiff;
         partition_p->freeBlocksToBalanceGc = partition_p->freeBlocksToStartGc - blocksdiff;
      }
      else
      {

         if (partition == PARTITION_TYPE_SLC)
         {
            partition_p->freeFmusToBalanceGC = ( ( 4 )  * partition_p->fmusPerJumboBlock);
            partition_p->freeFmusToStartGC = partition_p->freeFmusToBalanceGC + ( (2 + 1 )  * partition_p->fmusPerJumboBlock);
            partition_p->freeBlocksToBalanceGc =  ( 4 ) ;
            partition_p->freeBlocksToStartGc = partition_p->freeBlocksToBalanceGc +  (2 + 1 ) ;
         }
         else
         {
            partition_p->freeFmusToBalanceGC = ( ( 3 )  * partition_p->fmusPerJumboBlock);
            partition_p->freeFmusToStartGC = partition_p->freeFmusToBalanceGC + ( (2 + 1 )  * partition_p->fmusPerJumboBlock);
            partition_p->freeBlocksToBalanceGc =  ( 3 ) ;
            partition_p->freeBlocksToStartGc = partition_p->freeBlocksToBalanceGc +  (2 + 1 ) ;
         }
      }
   }

   __inline static  void MVP_SetMvpRestriction(MVP_RestrictionReason_t reason)
   {
      ;
      FML_SetResRestriction(FML_RESTRICT_WRITE_QUOTA);
      MVP_Plan.restrictionsReason |= (uint8_t)reason;
   }

   __inline static  void MVP_ClearMvpRestriction(MVP_RestrictionReason_t reason)
   {

      if (MVP_Plan.restrictionsReason == 0)
      {
         return;
      }


      ;
      MVP_Plan.restrictionsReason &= (uint8_t)(~(reason));
      if (MVP_Plan.restrictionsReason == 0)
      {
         FML_ClearResRestriction(FML_RESTRICT_WRITE_QUOTA);
      }
   }

   __inline static  OBM_BlockType_t MVP_GetActiveSwappedBlockType(void)
   {

      return MVP_Plan.logInfo_p->lastSwappedBlock;
   }

   __inline static  void MVP_SyncActiveSwappedBlockType(OBM_BlockType_t lastSwappedBlock)
   {
      MVP_Plan.logInfo_p->lastSwappedBlock = (lastSwappedBlock != OBM_BLOCK_TYPE_ILLEGAL) ? lastSwappedBlock : OBM_BLOCK_TYPE_DYN_RLC;
   }

   __inline static  uint32_t MVP_GetFreeFmusToStartGc(PartitionType_t partition)
   {
      uint32_t freeFmusToStartGc;

      MVP_Partition_t* partition_p = &MVP_Partitions[partition];



      freeFmusToStartGc = partition_p->freeFmusToStartGC;

      return freeFmusToStartGc;
   }

   __inline static  uint32_t MVP_DoNeedFreeSpace(PartitionType_t partition)
   {
      MVP_Partition_t* partition_p = &MVP_Partitions[partition];
      return (partition_p->lastFreeFmuSpace <= MVP_GetFreeFmusToStartGc(partition) + MVP_Plan.freeSpaceAboveThresholdToStartGC);
   }


   __inline static  void MVP_PrepareDPS2(uint16_t ctxtId)
   {
      MVP_ControlSyncPrepare();

      FMG_CtxtFlowScheduleForLater(ctxtId);

   }

#line 876 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
      __inline static  uint32_t MVP_GetRTFADIStatistics(MVP_RTFADI_Data_t* pMVPRTFADI)
      {
         pMVPRTFADI->freeBlocksSLC = MVP_Partitions[PARTITION_TYPE_SLC].freeBlocks;
         pMVPRTFADI->freeBlocksTLC = MVP_Partitions[PARTITION_TYPE_TLC].freeBlocks;
         pMVPRTFADI->ratioHost = MVP_Plan.ratioHost;
         pMVPRTFADI->ratioGc = MVP_Plan.ratioGc;
         pMVPRTFADI->relocationType = MVP_Plan.relocationType;
         pMVPRTFADI->prevRelocationType = MVP_Plan.prevRelocationType;
         pMVPRTFADI->numSourcesReleased = MVP_Plan.numSourcesReleased;
         return sizeof(MVP_RTFADI_Data_t);
      }


   __inline static  uint32_t MVP_GetLogicalFullness()
   {
      return MVP_Plan.HSLC_CB.logicalTaper.currentDevVC/(MVP_Plan.HSLC_CB.logicalTaper.devCapacity/100);
   }

#line 1013 "d:/gitrepo/atlas3_release/source/ftl/mvp/inc/mvp_api.h"
__inline static  BOOL32 MVP_IRLC_IsOngoing()
{
   return MVP_Plan.IRLC_Cb.isActivate;
}

__inline static  void MVP_IRLC_ExitIRLC()
{
   if ( (MVP_IRLC_IsOngoing()))
   {

      MVP_IRLC_MarkTerminating(RLC_TYPE_SLC_DYNAMIC);
   }
}

__inline static  void MVP_IRLC_ResetHostQuota()
{
   uint32_t i;
   for (i=0; i <  (2) ; i++)
   {
      MVP_Plan.IRLC_Cb.hostQuota[i] =  (((MVP_Plan.IRLC_Cb.hostQuota[i]) > (0)) ? (MVP_Plan.IRLC_Cb.hostQuota[i]) : (0)) ;
   }
}



__inline static  void MVP_ResetHostQuota()
{

   if ( (MVP_IRLC_IsOngoing()))
   {
      MVP_IRLC_ResetHostQuota();
      return;
   }

   MVP_Plan.hostQuota =  (((MVP_Plan.hostQuota) > (0)) ? (MVP_Plan.hostQuota) : (0)) ;
}

#line 35 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"

#line 36 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 107 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
typedef enum HWD_HostlessWriteType_e
{
   HWD_WRITE_BUFFER_UPADTE_SAT      = 0,
   HWD_WRITE_BUFFER_NO_UPADTE_SAT   = 1,

} HWD_HostlessWriteType_t;

typedef enum HWD_TLCAccum_e
{
    HWD_ACCUM_SLC = 0,
    HWD_ACCUM_TLC_SHARED = 1,
    HWD_ACCUM_MAX = 2,
} HWD_Accum_t;


typedef enum HWD_TLCFlushCause_e
{
   HWD_FLUSH_CAUSE_ROUTING = 0,
   HWD_FLUSH_CAUSE_OVP     = 1,
   HWD_FLUSH_CAUSE_OVP_RMW = 2,
   HWD_FLUSH_CAUSE_RMW     = 3,
   HWD_FLUSH_CAUSE_RMW_DON = 4,
   HWD_FLUSH_CAUSE_TRM     = 5,
   HWD_FLUSH_CAUSE_RPMB    = 6,
   HWD_FLUSH_CAUSE_MAX     = 7,
} HWD_TLCFlushCause_t;

#line 147 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
typedef enum HWD_ForceFlushState_e
{
   HWD_FORCE_FLUSH_IDLE,
   HWD_FORCE_FLUSH_START,
   HWD_FORCE_FLUSH_WAIT,
} HWD_ForceFlushState_t;

#line 166 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
typedef struct HWD_DataAccumulator_s
{
   uint8_t    contextCounter;

   uint8_t    oldOpbid;

#line 174 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
   uint16_t   reserved1;
   uint32_t   contexIdtList[ (12) ];
} HWD_DataAccumulator_t;





typedef struct HWD_WriteFlowManager_s
{
   JBA_t           jba;
   OBM_BlockType_t opbId;
   HWD_Accum_t     accumType;
} HWD_WriteFlowManager_t;





typedef struct HWD_Routing_s
{
   OBM_BlockType_t fbccRouting;
   OBM_BlockType_t rndRouting;
   OBM_BlockType_t seqRouting;
   BOOL32          bFlushSharedTLC;
   BOOL32          bFlushSLC;

#line 204 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
}HWD_Routing_t;

typedef struct HWD_GenOpUA_s
{
  FTL_AsynchClBkFunc callBkFun;
  uint32_t callerToken;
}HWD_GenOpUA_t;

typedef struct HWD_GrpId_s
{
   uint32_t grpIdCounter;
   uint32_t haltCounter;
   BOOL32   ongingFlush;
   BOOL32   haltingHAWA;
   BOOL32   HAWAHalted;
   BOOL32   Resv;
} HWD_GrpId_t;

void HWD_ResetHeader(FMU_Metadata_t* pFmuMetadata);

#line 240 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
   __inline static  BOOL32 HWD_ChangeRoutingOnRelocation(void)
   {




      return  (0) ;

   }

#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 30 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"

#line 52 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
extern uint32_t gSequNumber;

#line 71 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
BOOL32 HWD_WriteFlow(uint32_t hwdCtxtID);

#line 90 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_FlushSLCBuffer(HWD_Accum_t slcAccumListID, HWD_TLCFlushCause_t flushCause);

#line 110 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_FlushTLCBuffer(HWD_Accum_t tlcAccumListID, HWD_TLCFlushCause_t flushCause);

#line 126 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_Flush(FTL_AsynchClBkFunc callBkFun, uint32_t token);

#line 142 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_ResumeWriteAfterRMW(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void HWD_ResumeWriteBufferAfterRMW(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void HWD_SetDallocState(uint8_t state);

void HWD_printCtxtID(uint32_t hwdCtxtID);

#line 160 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_NormalMount(uint16_t retCtxtId);

#line 176 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_RoutingUpdateState(void);

BOOL32 HWD_WriteBuffer(FML_FEAdminQEntry_t  *pAdminQEntry);

void HWD_WriteDeallocatePayload(uint16_t fmgCtxtID,uint32_t *pPayload,uint32_t *pHeader,uint8_t fmuCount, FTL_AsynchClBkFunc callBkFun, uint32_t token);

void HWD_WriteRpmbPayload(uint16_t fmgCtxtID, uint32_t *pPayload, uint32_t *pHeader, uint8_t fmuCount, FTL_FMU_INFO_t* pWriteInfoFmus, FTL_AsynchClBkFunc callBkFun, uint32_t token);

void HWD_RequestLogCSbyFE(FML_FEAdminQEntry_t* pAdminQEntry);










void HWD_Init(void);

#line 211 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_GrpIdResHandler(uint16_t contextId, uint16_t payload, FMG_ExecStatus_t execStatus);










void HWD_GrpId_Done(void);

#line 248 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_api.h"
void HWD_rmwMode_Callback(void);

BOOL32 HWD_AreAllWriteQueuesEmpty(void);

#line 251 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/him_structs.h"

#line 30 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/fmg/inc/fmg_userarea.h"

#line 32 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 52 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"
typedef enum
{
   HWD_DEALLOCATE_RMW_STATE_NONE,
   HWD_DEALLOCATE_RMW_STATE_RMW_NEEDS_WRITE,
   HWD_DEALLOCATE_RMW_STATE_RMW_SKIP_WRITE,
} HWD_DeallocateRmwState_t;




typedef struct HWD_RMW_UserArea_s
{
   HIM_HWD_Context_t*      hwdCtxt_p;
   uint32_t                hwdCtxtId;
   FML_FEAdminQEntry_t     feCtxt;

   FMU_Metadata_t          metadata;
   uint16_t                rmwToken;
   uint8_t                 isDeallocateRmw;
   uint8_t                 res;
   uint8_t                 rmwBitmap[ (8) ];
   uint8_t                 fmuIndex;
   uint8_t                 isSimpleHostWrite;
   uint8_t                 isInOvlRunningTable;
   uint8_t                 wasKeptForOverlap;

}HWD_RMW_UserArea_t;

typedef struct HWD_RMW_FflbasTable_s
{
   uint8_t  fmusCount;
   uint8_t  res;
   uint16_t ctxtId;
   uint32_t fflbas[ (8) ];
}HWD_RMW_FflbasTable_t;

typedef struct HWD_RMW_Overlap_s
{
   uint8_t keptRMWCounter;
   uint8_t firstValidKeptEntry;
   uint8_t runningRMWCounter;
   uint8_t isDallocActive;
   uint16_t keptCtxts[ FMG_UA_POOL_SIZE_T4 ];
   HWD_RMW_FflbasTable_t fflbasTable[ 12 ];
}HWD_RMW_Overlap_s;

#line 120 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void HWD_RMW_StartHandleRMW(uint32_t hwdCtxtID,FML_FEAdminQEntry_t  *pAdminQEntry);

#line 136 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void HWD_RMW_HandleResume(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

#line 150 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void HWD_RMW_InitOverlapInfo(void);

#line 166 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void HWD_RMW_RemoveRunningRMW(uint16_t FMGCtxtID);

BOOL32 HWD_RMW_IsWriteOverlappedWithRMW(uint32_t hwdCtxtID, FML_FEAdminQEntry_t* pAdminQEntry);

void HWD_RMW_HandleKeptRMWs();


BOOL32 HWD_RMW_IsRMWOverlapped(uint32_t* pFflbasToCheck, uint32_t fmusCount);

#line 253 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_fua.h"

#line 58 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_fua.h"
extern uint16_t gHwdFuaCmdList[ (256) ];
extern uint32_t gHwdFuaErrBits[ (256)  / (1 <<  (5) )];

#line 83 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_fua.h"
void HWD_HandleFUA(uint32_t hwdCtxtID);

#line 99 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_fua.h"
void HWD_HandleResumeFUA(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

#line 254 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd.h"








   typedef struct HWD_DebugInfo_s
   {
      uint32_t lastIds[3][4];
   } HWD_DebugInfo_t;

   typedef struct HWD_Cb_s
   {
      HWD_RMW_Overlap_s HwdRmwOverlapInfo;

      HWD_DataAccumulator_t HwdAccumulator[HWD_ACCUM_MAX];
      HWD_WriteFlowManager_t HhwWfm;
      HWD_Routing_t HwdRouting;
      HWD_DebugInfo_t Dbg;
      HWD_GrpId_t GrpId_CB;
      uint16_t GrpIdResCtxt;

      uint32_t ovpRmwCounter;
      uint32_t streamMode;
      uint32_t forceFlushState;

      uint16_t HwdFuaCmdList[ (256) ] ;
      uint32_t HwdFuaErrBits[ (256)  / (1 <<  (5) )];
      uint16_t fuaFmgCtxtID;
   } HWD_Cb_t;




   extern HWD_Cb_t HWD_CB;





   __inline static  BOOL32 HWD_RMW_IsActive()
   {
      return HWD_CB.HwdRmwOverlapInfo.runningRMWCounter>0;
   }

   __inline static  uint32_t HWD_GetTLCBufferSize(HWD_Accum_t accumType)
   {
      return HWD_CB.HwdAccumulator[accumType].contextCounter;
   }

   __inline static  uint32_t HWD_GetTLCBufferList(HWD_Accum_t accumType, uint32_t* list)
   {
      uint32_t i;
      uint32_t contextCounter = 0;

      if (accumType != HWD_ACCUM_SLC)
      {
         contextCounter = HWD_CB.HwdAccumulator[accumType].contextCounter;

         WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(contextCounter) ) ;
         WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_OVP_FE_OREAD_HAWA_COUNT_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;

         if (contextCounter > 0)
         {
            for (i = 0; i < contextCounter; i++)
            {
               list[i] = HWD_CB.HwdAccumulator[accumType].contexIdtList[i];
               WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 2     << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(list[i]) ) ;
               WriteRegister( (unsigned long)(( ( ( ( 0xf1040000 )   | (1 << 17 ))  | ( 0  << 10 ))  | ((uint32_t)SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID << 3 ))), (unsigned long)(( ((1 << (24) ) | (1 << (14) )) | ((SET_EVENT_OVP_FE_OREAD_HAWA_ENTRY_CHECKPOINT_EVENT) & ((1 << ( (14) ) ) - 1) ))) ) ;
            }
         }
      }

      return contextCounter;
   }

#line 35 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
#line 1 "d:/gitrepo/atlas3_release/source/ftl/hwd/inc/ftl_hwd_fua.h"

#line 36 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/rlc/inc/rlc_api.h"

#line 39 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"

#line 115 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
typedef enum
{
   COMPLETION_MSG_ON_ENCODE_AND_TRANSFER = 0,
   COMPLETION_MSG_ON_PROGRAM = 1,
   NO_COMPLETION_MSG_NEEDED
} PSR_CompletionType_t;

typedef enum
{
   PSR_BARRIER_CONTROL_SYNCH,
   PSR_BARRIER_DPS_2,
   PSR_BARRIER_REGULAR
} PSR_BarrierAllType_t;


typedef enum
{
   PSR_BARRIER_ID_BKOPS    = 0,
   PSR_BARRIER_ID_BMG      = 1,
   PSR_BARRIER_ID_HWD      = 2,
   PSR_BARRIER_ID_LOG      = 3,
   PSR_BARRIER_ID_PWS      = 4,
   PSR_BARRIER_ID_XOR      = 5,
   PSR_BARRIER_ID_IDL      = 6,
   PSR_BARRIER_ID_BRLC     = 7,
   PSR_BARRIER_ID_FNVM     = 8,
   PSR_BARRIER_ID_BML_REC  = 9,
   PSR_BARRIER_ID_MTM_RLC  = 10,
   PSR_BARRIER_ID_PEM      = 11,
} PSR_BarrierUidType_t;



typedef enum
{
   PSR_TLC_LOWER  = 0,
   PSR_TLC_MIDDLE = 1,
   PSR_TLC_UPPER  = 2
} PSR_TlcWlPart_t;





typedef struct PSR_Cb_s
{
   uint8_t  rlcNumFmusInPs[ ( 2 ) ][ 256 ];
   uint8_t  fmuOffsetInSession;
   uint8_t  rlcReadIdx;
   uint8_t  rlcWriteIdx;
   uint8_t  rlcHighQueueIndex;
   uint32_t highQueueToggleBit[ ( 2 ) ];
   uint32_t rlcReadQueueToggleBit[ ( 2 ) ];
} PSR_Cb_t;









void PSR_Init(void);

void PSR_SendPsHostWriteReq(JBA_t jba, uint32_t* hwdCtxtList, uint32_t* cookies, OBM_BlockType_t opbId);


void PSR_SendPsHostReadReq(JBA_t jba, uint8_t sectorOffset, uint32_t sectorLength, uint8_t streamStatus, uint32_t cmdIdx, uint32_t cmdOffset, uint32_t fflba);

#line 188 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
void PSR_SendPsRMWReq (JBA_t jba, uint8_t sectorOffset, uint32_t sectorLength, uint32_t cookie, uint32_t dataAddr, uint32_t headerAddr);

void PSR_SendLogReadyMsg(uint32_t* cvdRegionOriginArr, uint32_t* cvdRegionLengthArr, BOOL32 ugsdFlag, uint32_t cookie);

void PSR_SendBkopsMode(uint32_t bkopsMode);




void PSR_SendPsCtrlReadVBAReqLog(VBA_t vba[], uint32_t vbaIdx, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);


void PSR_SendPsCatCtrlReadReq(JBA_t jba, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie, BOOL isDRAM);

void PSR_SendPsHostMetaDataReq(JBA_t jba, uint32_t fmuCount, uint8_t** headerAddr, uint32_t cookie, uint32_t isXorProtected);

uint16_t PSR_SendPsRlaReadReq(JBA_t jba, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);


uint16_t PSR_SendPsFetch4KRC(JBA_t jba, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);


void PSR_SendPsCtrlWriteReq(JBA_t jba, MP_PQD_QueueType_t qType, uint8_t sectrCnt, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

void PSR_SendPsMtmCtrlWriteReq(JBA_t jba, MP_PQD_QueueType_t qType, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

void PSR_SendPaddingReq(JBA_t jba, OBM_BlockType_t opbId, uint32_t numFmusToPad, OBM_OpenBlock_t* openBlock);




void PSR_SendPsLogCtrlWriteReq(JBA_t jba, MP_PQD_QueueType_t qType, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);


void PSR_ReadPage0MetaData(uint32_t metaDie, uint32_t metaBlock, uint32_t diePageInMB, uint8_t blockType, uint8_t isHSLC, MP_PQD_QueueType_t qType, uint8_t** headerAddr, uint32_t cookie);

void PSR_FlashFillMetaBlock(uint8_t psType, uint32_t metadieId, uint32_t metablockId, MP_PQD_QueueType_t queueType, uint8_t blockType, uint8_t forceFlashWr);

void PSR_FlashFillPhysicalBlock(uint8_t psType, uint32_t metadieId, uint32_t metablockId, uint32_t blockInMb, MP_PQD_QueueType_t qType, uint8_t blkType, uint8_t forceFlashWr);

void PSR_EraseDieBlock(uint32_t metadieId, uint32_t metablockId, uint8_t blockInMb, MP_PQD_QueueType_t qType, uint8_t blkType, uint32_t pec, uint32_t cookie, uint32_t waitForEraseOfOpbId, uint32_t flags, uint32_t isPecIncByTwo);

void PSR_EraseMetaBlock(uint32_t metadieId, uint32_t metablockId, MP_PQD_QueueType_t queueType, uint8_t blockType, uint32_t pecBeforeErase, uint32_t cookie, uint32_t waitForEraseOfOpbId, uint32_t flags);

void PSR_EndEraseMarkerToOnePs(MP_MQD_PSType_t psType, BML_JumboBlock_ID_t jbId, MP_PQD_QueueType_t qType);

void PSR_EndEraseMarker(BML_JumboBlock_ID_t jbId, MP_PQD_QueueType_t qType);

void PSR_SecureEraseReq(MP_PQD_QueueType_t qType, uint32_t cookie);

void PSR_SecureEraseReq(MP_PQD_QueueType_t qType, uint32_t cookie);

void PSR_SendBarrierSingleQAllPsReq(MP_PQD_QueueType_t qType, uint32_t cookie, PSR_BarrierUidType_t uid);

void PSR_SendBarrierBothQAllPsReq(uint32_t cookie, PSR_BarrierAllType_t barrierType, PSR_BarrierUidType_t uid);

void PSR_SplitCompositionService(VBA_t* jbComposition, VBA_t* perPsComposition);
void PSR_SendFLGPbyVbaReq(VBA_t* vbaList, BML_JumboBlock_ID_t jblId, uint8_t opbId, BML_BlockType_t blkType, uint32_t pec, uint32_t* bmAdd, uint32_t* respAddr, uint32_t cookie, uint32_t reqIdx, BOOL32 isHSLC);
void PSR_SendFLGPReq(JBA_t jba, uint8_t opbId, uint32_t pec, uint32_t* bmAdd, uint32_t* respAddr, uint32_t psRespOffset, uint32_t cookie);

void PSR_SendHlthStateChangeReq (uint32_t cookie, uint32_t src, uint32_t oldThrIdx, uint32_t newThrIdx);

void PSR_XorParityRes(JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void PSR_storeXorReq (JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void PSR_loadXorReq (JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void PSR_JBReleaseReq(uint32_t jbid, MP_PQD_QueueType_t qType);

void PSR_JBXorZoneReleaseReq(uint32_t jbid, uint32_t validXorZoneBmp, MP_PQD_QueueType_t qType);

void PSR_AdmSwapOBIDReq(uint8_t srcOpid, uint8_t trgOpid);

uint32_t PSR_RSScanReq(uint32_t jbId, uint8_t isCtrlBlock, uint32_t jwl, uint32_t jwlIdx, BML_BlockType_t blkType, PSR_TlcWlPart_t uml, uint32_t nextToWriteFmu, BOOL isOpenBlk, MP_PQD_QueueType_t qType);

void PSR_JBInfoRes(JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void PSR_SetOpenBlockReq(JBA_t jba, OBM_BlockType_t opbId, MP_PQD_QueueType_t qType, PS_SkipLoad_t skipLoad, BOOL32 isWABlock);

void PSR_CVDRestoreJBReq(JBA_t jba, OBM_BlockType_t opbId, uint32_t cookie);

void PSR_ScanFwdReq(JBA_t jba, uint32_t fmuCount, uint8_t* pFFLBA, uint32_t cookie);


   void PSR_RlcReadWriteReq(JBA_t* jbaList, uint8_t* fmuCount, RLC_Read_Type_t* rlcReadTypeList, uint16_t reqCnt, JBA_t dstJBA, BOOL32 isXorProtected, OBM_BlockType_t opbId, BOOL32 isPaddingReq, BOOL32 isHostSrc);

#line 278 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
void PSR_RlcReadReq(BOOL32 try64K, JBA_t* jbaList, uint8_t* fmuCount, RLC_Read_Type_t* rlcReadTypeList, uint16_t reqCnt, JBA_t dstJBA, BOOL32 isXorProtected, BOOL32 skipXor);


void PSR_RlcWriteReq(BOOL32 try64K, JBA_t dstJba, OBM_BlockType_t opbId, BOOL32 isXorProtected, BOOL32 isPaddingReq, BOOL32 isHostSrc);

#line 287 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
void PSR_RelocateMTM(JBA_t srcJBA, JBA_t dstJBA, OBM_BlockType_t dstOpbId, uint32_t cookie);

#line 296 "d:/gitrepo/atlas3_release/source/ftl/psr/inc/ftl_psr_api.h"
void PSR_SetDeviceStateHealthChangeRed(uint32_t src, uint32_t oldThsldIdx, uint32_t newThsldIdx, uint32_t cookie);

void PSR_CtrlSyncDoneIdication(void);

void PSR_XorZoneEndReq(MP_PQD_QueueType_t qType, OBM_BlockType_t opbId, JBA_t jba, uint32_t cookie);

void PSR_SendDRDReq(uint16_t drdCheckBitmap, uint32_t cookie, PS_CVD_DRD_Resp_t* pDrdResp);

BML_BlockType_t PSR_GetVbaList(JBA_t jba, VBA_t* vbaList, uint32_t reqSizeInFmus, uint32_t xorProtected);




void PSR_XorRecPauseForRecoveryReq(MP_MQD_PSType_t destPs, VBA_t failedVba, uint8_t blkType, uint8_t opbId, uint8_t XORZone, uint8_t isOpenZone, PS_XOR_ParityBinComposite_t parBinComposite, uint32_t jbid);
void PSR_XorRecCompletionReq       (MP_MQD_PSType_t destPs, uint8_t fmusToRecoverBitmap, uint8_t parityFailedBitmap, uint8_t failedFmusBitmapPs0, uint8_t failedFmusBitmapPs1, uint8_t failedPs);
void PSR_XorRecLoadParityPage      (MP_MQD_PSType_t destPs, BOOL isOpenZone, uint8_t failPsId, PS_XOR_ParityBinComposite_t parBinComposite, uint8_t xorZone, uint8_t blkType, uint8_t xbid, VBA_t xorVba, BOOL isDRAM, uint8_t opbID);
void PSR_XorRecStartRecoveryReq    (MP_MQD_PSType_t destPs, BOOL isOpenZone, uint8_t failPsId, PS_XOR_ParityBinComposite_t parBinComposite, uint8_t xorZone, uint8_t blkType, uint8_t opid, VBA_t failureVba, BML_JumboBlock_ID_t failedJbid, uint8_t fmusToRecover, uint8_t parityFailedBitmap, uint8_t bypassUnroll);
void PSR_FailureReportAck          (MP_MQD_PSType_t destPs, uint32_t cookie, uint32_t psCookie, uint64_t lba, uint32_t mbPec);
void PSR_NotifyDecommissionComplete(MP_MQD_PSType_t destPs, uint32_t metadieId, uint32_t metablockId, uint32_t logTimeStamp, uint32_t psCookie);


void PSR_SendUpdatePecReq(BML_BlockType_t blockType, uint32_t pec, uint32_t cookie);

void PSR_XorDummyJwl0WriteReq(JBA_t jba);
void PSR_XorRlcReadWriteReq(JBA_t srcJBA, JBA_t dstJBA, OBM_BlockType_t dstOpbId, uint32_t cookie);
void PSR_XorStoreParityReq(OBM_BlockXorId_t XBID, OBM_BlockType_t xorOpbID, OBM_BlockType_t protectedOpbID, uint32_t jbid, JBA_t jba, uint32_t groupId, BOOL isSLC, uint8_t mode, uint32_t cookie);
void PSR_XorLoadParityReq(OBM_BlockXorId_t XBID, OBM_BlockType_t xorOpbID, OBM_BlockType_t protectedOpbID, uint32_t protectedJBID, JBA_t xorJBA, uint32_t groupId, BOOL isSLC, uint8_t mode, uint32_t cookie);
void PSR_XorRebuildReqSinglePs(MP_MQD_PSType_t destPs, uint32_t jbid, OBM_BlockXorId_t xbid, OBM_BlockType_t opbid, VBA_t ugsdFerVba, uint64_t binFailureBitmap, uint8_t rebuildMode, uint32_t cookie);
void PSR_XorRebuildReqBothPs(void* flgpResult, OBM_BlockType_t opbid, uint64_t binFailureBitmap, uint8_t rebuildMode, uint32_t cookie);
void PSR_SendCvdRefreshReq(CvdRefreshSrc_e reqSource);

void PSR_SendDstReq(uint32_t cookie);

void PSR_SendPsHostReadReq4KB(JBA_t jba, uint32_t fflba, uint32_t cmdIdx, uint32_t steamSt);
void PSR_SendPsHostReadReq4KB_SRARW(JBA_t jba, uint32_t fflba, uint32_t cmdIdx, uint32_t cmdOffset,uint32_t steamSt);
void PSR_SendPsSingleFmuCtrlReadReq(JBA_t jba, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);
void PSR_SendPsSingleFmuRlaReadReq(JBA_t jba, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

#line 28 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"

#line 43 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
uint32_t EI_DISABLE_INT();
void     EI_RESTORE_INT(uint32_t intPosture);




enum EI_ListenerId_e
{
   EI_LISTENER_ID_MP_PQD,
   EI_LISTENER_ID_NONE
};









void EI_Init(void);
void EI_Init_PecGuardThresholds(void);
void EI_Ram_Init(void);
void EI_RlcAllocateCtxs(void);
Status_t EI_FirstMount(void);
void EI_Mount(uint16_t mntCtxtId);

Status_t EI_UserApiConfigure(uint32_t* pRawBuff);
Status_t EI_UserApiDoMetaBlockRevive(void);
void     EI_UserApiGetExtendedStatistics(uint32_t* pBuff, uint32_t buffSize, uint32_t* pTransferedDataSize);
void     EI_UserApiGetBasicStatistics(uint32_t* pBuff, uint32_t buffSize);
void     EI_UserApiGetBacklogStatistics(uint32_t* pBuff, uint32_t buffSize, uint32_t* pTransferedDataSize);
Status_t EI_UserApiDisable(void);
void     EI_UserApiConfigureDirectInjections(void);
void     EI_UserApiDisableDirectInjecions(void);
Status_t EI_UserApiGenericDispatch(uint32_t *pBuff, uint32_t buffSize);


void EI_NotifyMbEraseStart();
void EI_NotifyMbEraseEnd();
void EI_NotifyDecommission(uint32_t psId, FTL_Req_t* pMsg, uint32_t isFake);
void EI_NotifyCsStart(void);
void EI_NotifyCsEnd(void);
void EI_NotifyXorRecStart(PS_XOR_RequestRecoveryReq_t* pRecReq);
void EI_NotifyXorPauseResp(PS_XOR_PauseForXORRecoveryResp_t* pPauseResp);
void EI_NotifyFailureReport(PS_GenericExceptionReq_t* pReport, uint32_t psid);
void EI_NotifyHostUecc(const PS_HostReadExceptionReq_t* pReport, uint32_t psid, uint64_t lba);
void EI_NotifyInfraMailboxIsr(Mail_t cookie);
void EI_NotifyInfraSendWithComp(PS_genericMsg_t *pMsg, uint32_t psId);
void EI_ListenerSetSubCaller(uint32_t caller);
void EI_ListenerSetFFLBAForHostlessRead(uint32_t fflba, uint8_t cmdType);
void EI_ListenerMpPqd(MP_MQD_PSType_t psId, MP_PQD_QueueType_t QType, uint8_t* start, uint8_t* end, uint8_t* current, uint32_t length, uint32_t cnt);
void EI_ListenerDirectInjectInfra(MP_MQD_PSType_t psid, MP_PQD_QueueType_t queueType, PS_ReqGeneric_t* psReqCommon, uint8_t failureType);
void EI_ListenerHostTlcProgDetect(BML_BlockType_t blockTyp, uint32_t* hwdCtxtList, uint32_t lstLen);
void EI_MpPqdListenerForPS_UT(MP_MQD_PSType_t psId, MP_PQD_QueueType_t QType, uint8_t* start, uint8_t* end, uint8_t* current, uint32_t length, uint32_t cnt);
BOOL32 EI_CheckInfraFADIEIInjection(uint8_t opToInject);

#line 109 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_JbRevStart(uint32_t rangeIndex, uint32_t *pHead, uint32_t jumboBlockId, uint16_t FMGCId, uint16_t payload, uint32_t execStatus);


void EI_MbRevUpdateMetaDieDecommissionTable(uint32_t metadie, uint32_t metablock);
BOOL32 EI_UtilCheckDecommission(uint32_t mdId);

#line 125 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_UtilCheckAvoidRoOnMtmUecc();

#line 137 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_UtilCheckEiActive(void);
BOOL32 EI_CheckJbReviveActive(void);

#line 166 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
EI_OpId_t EI_UtilGetOpidForObidForPadding(OBM_BlockType_t obid);
EI_OpId_t EI_UtilGetOpidForObidForBrlc(OBM_BlockType_t obid);

uint32_t EI_bssGetMemorySize();
uint32_t* EI_bssAddressValidationGlobals();
uint32_t* EI_bssAddressValidationControlsPtr();
uint32_t* EI_bssAddressValidationStatisticsPtr();
void EI_PrepareDPS2();

#line 247 "d:/gitrepo/atlas3_release/source/ftl/inc_public/ei_mp_api.h"
extern void EI_PSR_ReEraseDieBlock(uint8_t psType, uint32_t metadieId, uint32_t metablockId, MP_PQD_QueueType_t qType, uint8_t ignoreFailure, uint32_t cookie, uint8_t blockInMb, uint32_t pec, BOOL32 waitForEraseMarker);

#line 30 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_statistics.h"

#line 59 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_statistics.h"
enum EI_StatInternalOperation_e
{
   EI_STAT_INTERNAL_OP_ERASE                 = 0,
   EI_STAT_INTERNAL_OP_XOR_LOAD              = 1,
   EI_STAT_INTERNAL_OP_XOR_REC_UNROLL        = 2,

   EI_STAT_NUM_OF_INTERNAL_OP_TYPES          = 3,
};
typedef uint8_t EI_StatInternalOperation_t;

enum EI_StatPlanesInjected_e
{
   EI_STAT_PLANE0                            = 0,
   EI_STAT_PLANE1                            = 1,
   EI_STAT_PLANE2                            = 2,
   EI_STAT_PLANE3                            = 3,
   EI_STAT_PLANES_INJECTED_TOTAL             = 4,
};

enum EI_StatPfEfSecInj_e
{
   EI_STAT_ZERO_PF_EF_SEC_INJ = 0,
   EI_STAT_ONE_PF_EF_SEC_INJ = 1,
   EI_STAT_NUMBER_PF_EF_SEC_INJ = 2
};





typedef struct EI_StatExtendedDispatcherLevelEntry_s
{
   uint64_t                               rejectTerminatingStates;
   uint64_t                               rejectRestrictions;
   uint64_t                               rejectChances;
   uint64_t                               rejectImpossibleToInject;
   uint64_t                               rejectNotInTable;
   uint64_t                               noInjectionsLackOfIvEntries;
   uint64_t                               injecting;
   uint64_t                               verificationFailed;
}EI_StatExtendedDispatcherLevelEntry_t;


typedef struct EI_StatExtendedListenerEntry_s
{
   uint64_t                               mqdOperations;
   uint64_t                               rejectedOperations;
   uint64_t                               acceptedOperations;
   uint64_t                               totalInfraInjections;
   uint64_t                               rfu[4];
}EI_StatExtendedListenerEntry_t;


typedef struct EI_StatExtendedMbReviveEntry_s
{
   uint64_t                               mbReviveCounter;
   uint64_t                               mdReviveCounter;
}EI_StatExtendedMbReviveEntry_t;


typedef struct EI_StatExtendedJbidRevive_s
{
   uint64_t                               jbidReviveCounter;
   uint64_t                               jbReviveCounter;
}EI_StatExtendedJbidRevive_t;


typedef struct EI_StatExtendedStatistics_s
{
   uint32_t                              canaryValStart;
   uint32_t                              rfu0;
   EI_StatExtendedDispatcherLevelEntry_t dispatcherLevel[ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ (2) ];
   EI_StatExtendedListenerEntry_t        listenerLevel[ (2) ];
   uint64_t                              amountOfVectorInjections[ (16) ][ (2) ][ (16) ];
   uint64_t                              decommissionsCount[ (16) ][ (2) ];
   EI_StatExtendedMbReviveEntry_t        mbRevives[ (16) ];
   EI_StatExtendedJbidRevive_t           jbidRevives;
   uint64_t                              totalDecommissionsCount;
   uint64_t                              totalMbRevives;
   uint32_t                              rfu1[853];
   uint32_t                              canaryValEnd;
}EI_StatExtendedStatistics_t;






typedef struct EI_StatBasicStatus_s
{
   uint32_t                               eiState;
   uint32_t                               canaryValStart;
   uint64_t                               singleInjectionValidityBitmap;
   uint8_t                                pecGuardCounter[2];
   uint8_t                                rfu0[6];
   uint64_t                               rfu1[5];
}   EI_StatBasicStatus_t;


typedef struct EI_StatBasicIvEntryStatus_s
{
   uint8_t ivState;
   uint8_t rfu[7];
}   EI_StatBasicIvEntryStatus_t;

typedef struct EI_PFBasicStatistics_s
{
   uint32_t                               PFEFSecInjCounter[EI_STAT_NUMBER_PF_EF_SEC_INJ];
   uint32_t                               numberOfSkippedPfInjections;
   uint32_t                               numOfDecommissionHookSkip;
   uint32_t                               numberOfSkippedPfInjectionsGuard;
}   EI_PFBasicStatistics_t;

typedef struct EI_PatternBasicStatistics_s
{
   uint32_t                               readPatterns  [ (10) ];
   uint32_t                               progPatterns  [ (10)  * 2];
   uint32_t                               erasePatterns [ (10)  - EI_NUM_OF_BLOCK_TYPES - EI_STAT_PLANES_INJECTED_TOTAL];
   uint32_t                               slcTlcInjected[EI_NUM_OF_BLOCK_TYPES];
   uint32_t                               planesInjected[EI_STAT_PLANES_INJECTED_TOTAL];
}   EI_PatternBasicStatistics_t;



typedef struct EI_StatBasicStatistics_s
{
   EI_StatBasicStatus_t                   basicStatus;
   uint64_t                               injectionsCounter               [ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ (2) ];
   uint16_t                               verificationFailuresCounter     [ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ (2) ];
   uint64_t                               totalInjectionsPerFlashAcessType[EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS];
   uint64_t                               internalOpInjectionsCounter     [EI_STAT_NUM_OF_INTERNAL_OP_TYPES][ (2) ];
   EI_StatBasicIvEntryStatus_t            ivStatus                        [ (2) ][ (16) ];
   EI_PFBasicStatistics_t                 PFBasicStatistics;

   EI_PatternBasicStatistics_t            patternBasicStatistics;
   uint32_t                               eraseStatisticsPerEraseType[EI_ERASE_TYPE_COUNT];
   uint32_t                               eraseStatisticsPerEraseTypeRfu[4];
   uint32_t                               rfu[70];
   uint32_t                               canaryValEnd;
}   EI_StatBasicStatistics_t;






typedef struct EI_StatBacklogHeader_s
{
   uint32_t                               canaryValStart;
   uint32_t                               rfu;
   uint64_t                               firstEntrySerialNumber;
   uint64_t                               entriesAmountInLog;
}   EI_StatBacklogHeader_t;


typedef struct EI_StatBacklogEntry_s
{

   VBA_t                                  vba;
   uint8_t                                accessType;
   uint8_t                                opid;
   uint8_t                                failureCode;
   uint8_t                                injId8Lsb;
}   EI_StatBacklogEntry_t;


typedef struct EI_StatBacklogStatistics_s
{
   EI_StatBacklogHeader_t                backlogHeader;
   EI_StatBacklogEntry_t                 entries[ (2045) ];
}   EI_StatBacklogStatistics_t;





typedef struct EI_StatStatistics_s
{
   EI_StatExtendedStatistics_t           extendedStatistics;
   EI_StatBacklogStatistics_t            backlogStatistics;
   EI_StatBasicStatistics_t*             pBasicStatistics;
}EI_StatStatistics_t;








void EI_StatIncreaseInjection(uint32_t opid, uint8_t accessType, uint32_t psid);
Status_t EI_StatValidateCanaries(void);
void EI_StatValidateStructureOffsets(void);
EI_StatBacklogEntry_t* EI_StatBacklogGetNextEntry(void);
void EI_StatBacklogPushEntry(void);
uint32_t EI_StatBacklogFillBuff(void* pBuff, uint32_t buffSize, uint32_t transferedDataSize);

#line 33 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"

#line 181 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"
typedef enum EI_IvResPool_e
{
   EI_IV_RES_POOL_XOR_REC = 0,
   EI_IV_RES_POOL_INFRA,
   EI_IV_RES_POOL_PAR_PAGE,

   EI_IV_RES_POOL_DEFAULT,
   EI_IV_NUM_OF_RES_POOLS
}EI_IvResPool_t;

typedef struct EI_IvResPoolData_s
{
   uint8_t startIdx;
   uint8_t size;
}EI_IvResPoolData_t;





enum EI_XorRecInjMapMask_e
{
   EI_XOR_REC_INJ_MAP_MASK_NONE       = 0x00,
   EI_XOR_REC_INJ_MAP_MASK_LOAD       = 0x01,
   EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS0 = 0x02,

   EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS1 = 0x04,

#line 212 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"
   EI_XOR_REC_INJ_MAP_MASK_MAY_FAIL   = 0x80,

   EI_XOR_REC_INJ_MAP_MASK_NO_LOAD    = (EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS0 | EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS1),
   EI_XOR_REC_INJ_MAP_MASK_FULL       = (EI_XOR_REC_INJ_MAP_MASK_NO_LOAD    | EI_XOR_REC_INJ_MAP_MASK_LOAD),
};
typedef uint8_t EI_XorRecInjMapMask_t;



enum EI_ExecState_e
{
   EI_EXEC_STATE_DISABLED,
   EI_EXEC_STATE_ENABLED,
   EI_EXEC_STATE_TERMINATING,

   EI_EXEC_STATE_TOTAL,
};
typedef uint32_t EI_ExecState_t;

enum EI_JbReviveState_e
{
   EI_JB_REVIVE_STATE_IDLE,
   EI_JB_REVIVE_STATE_MOVING,
   EI_JB_REVIVE_STATE_MOVE_DONE,
   EI_JB_REVIVE_STATE_TOTAL,
};
typedef uint32_t EI_JbReviveState_t;


enum EI_revive_waypoint_e
{
   EI_ADD_MB_TO_REVIVE_LIST,
   EI_MB_LIST_REVIVED,
   EI_ADD_JB_TO_REVIVE_LIST,
   EI_JB_LIST_REVIVED,
};

enum EI_PF_INJECTION_TYPE
{
   EI_PF_INJECTION_TYPE_REGULAR = 0,
   EI_PF_INJECTION_TYPE_ALTERNATE,
   EI_PF_INJECTION_TYPE_NESTED,
   EI_PF_INJECTION_TYPE_TOTAL
};
typedef uint8_t EI_PFInjectionType_t;

enum EI_SgdRelinkCause_e
{
   EI_SGD_RELINK_CAUSE_BIT_ERASE = (1 << 0),
   EI_SGD_RELINK_CAUSE_BIT_PL0_SOFT_PROG_FAILURE = (1 << 1),
   EI_SGD_RELINK_CAUSE_BIT_PL0_OP_DOWNSHIFT = (1 << 2),
   EI_SGD_RELINK_CAUSE_BIT_PL0_EF_AFTER_SOFT_PROG = (1 << 3),
   EI_SGD_RELINK_CAUSE_BIT_PL0_EF_AFTER_OP = (1 << 4),
   EI_SGD_RELINK_CAUSE_BIT_PL1_SOFT_PROG_FAILURE = (1 << 5),
   EI_SGD_RELINK_CAUSE_BIT_PL1_OP_DOWNSHIFT = (1 << 6),
   EI_SGD_RELINK_CAUSE_BIT_PL1_EF_AFTER_SOFT_PROG = (1 << 7),
   EI_SGD_RELINK_CAUSE_BIT_PL1_EF_AFTER_OP = (1 << 8),
};
typedef uint8_t EI_eraseSgdRelinkCause_e;






typedef struct EI_IvEntryIdx_s
{
   uint8_t idx;
   uint8_t psId;
} EI_IvEntryIdx_t;

typedef struct EI_Arg_s
{
   PS_ReqGeneric_t *psReqCommon;
   uint32_t opID;
   uint8_t flashAccessType;
   uint8_t psId;
   uint16_t listenerId;
} EI_Arg_t;

typedef struct EI_OpData_s
{
   uint32_t             opFmuSize;
   uint32_t             opFmuOffset;
   uint32_t             opDiesSize;
   uint32_t             opDiesOffset;
   uint32_t             opPlanesSize;
   uint32_t             opPlanesOffset;
   VBA_t                opVba;
   EI_OpId_t            opid;
   EI_FlashAccessType_t opFlashAccessType;
   uint8_t              opBlkType;
   uint8_t rfu [2];
} EI_OpData_t;

typedef struct EI_reqData_s
{
   PS_Common_D0_t  dw0;
} EI_reqData_t;

typedef struct EI_VER_pageVBAMap_s
{
   VBA_t    pageFirstVBA;
   uint8_t  pageFMUMap;
} EI_VER_pageVBAMap_t;

typedef struct EI_IvEngInt_s
{
   EI_OpData_t  opData;
   EI_reqData_t reqData;
   uint32_t     unrecoverableReadBitmap;
   uint32_t     injId;
   EI_VER_pageVBAMap_t PFUnrecoverableMap[ ( ( (3) ) )  +  ( ( ( (5) * ( (3) ) )  * 2)  * (4) )  +  ( ( (4) )  * (4)  * (3) ) * 2 ];
   uint8_t numOfPFUnrecoverableMaps;

   uint8_t numOfExpectedXorRequests;

   EI_InjectionDescriptor_t origIvEntry;

   uint8_t ivEntryCrc;
}EI_IvMetadata_t;

typedef struct EI_XorRecCtrl_s
{
   PS_XOR_RequestRecoveryReq_t recReq;
   PS_XOR_PauseForXORRecoveryResp_t pauseResp;
   EI_XorRecInjMapMask_t injMap[ ( (4) ) ];
   BOOL32 hasInjection [ ( ( 2 ) ) ][EI_INT_OP_ID_XOR_REC_TOTAL];
} EI_XorRecCtrl_t;


typedef struct EI_JbRevRlcVcRangeControl_s
{
   uint32_t             *pRlcScanHeaderPointer;
   uint16_t             jumboBlockId;
   uint32_t             currOffset;
   uint16_t             FMGCId;
   uint32_t             execStatus;
   uint16_t             payload;
   EI_JbReviveState_t   rangeState;
}EI_JbRevRlcVcRangeControl_t;

typedef struct EI_GlobalsSavedToFlash_s
{
   uint8_t              injectionsLeftInBurst;
   BOOL8                pecGuardIsOn;
   uint8_t              rfu[2];
}   EI_GlobalsSavedToFlash_t;

#line 375 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"
typedef struct EI_LogResident_s
{
   EI_MetaDieDecommissionTable_t   metaDieDecommissionTable[ (16) ];
   EI_StatBasicStatistics_t        basicStatistics;
   struct EI_LogResidentConfig_s
   {
      BOOL32   badBinRFU: 1;
      uint32_t rfu : 31;
   } configBits;

   uint32_t lastUsedSeed;

   uint32_t rfu[6];

}   EI_LogResident_t;

typedef struct EI_TlcProgInjTableEntry_s
{
   BOOL32                isValid;
   uint32_t              lmuPageVba[ (3) ];
   EI_InjDescProgErase_t progSpecific;
   EI_IvMetadata_t       metadata;
   uint64_t              timeStamp;
   uint8_t               rfu[3];
}EI_TlcProgInjTableEntry_t;

typedef struct EI_FlowParam_s
{
   PS_ReqGeneric_t      *psReqCommon;
   EI_FlashAccessType_t flashAccessType;
   MP_MQD_PSType_t      psid;
   EI_OpId_t            opid;
   uint16_t             listenerId;
   EI_InjDescSpecific_t injSpecific;
   EI_InjEntryType_t    injEntryType;
   EI_IvMetadata_t      metadata;
   uint32_t             JBLIdx;
   EI_VER_pageVBAMap_t PFPagesVBAMap[EI_PF_INJECTION_TYPE_TOTAL][ ( ( ( (3) ) ) > ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ? ( ( (3) ) ) : ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) )> ( ( (4) )  * (4)  * (3) ) * 2 ?   ( ( ( (3) ) ) > ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ?   ( ( (3) ) ) : ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ): ( ( (4) )  * (4)  * (3) ) * 2 ];
   uint8_t PFNumOfPagesVBAMap[EI_PF_INJECTION_TYPE_TOTAL];
   BOOL32 isHSLC;
} EI_FlowParam_t;
typedef EI_VER_pageVBAMap_t array_of_VBA_map_for_1Type[ ( ( ( (3) ) ) > ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ? ( ( (3) ) ) : ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) )> ( ( (4) )  * (4)  * (3) ) * 2 ?   ( ( ( (3) ) ) > ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ?   ( ( (3) ) ) : ( ( ( (5) * ( (3) ) )  * 2)  * (4) ) ): ( ( (4) )  * (4)  * (3) ) * 2 ];

struct EI_EngGlobals_s
{

   uint32_t canaryValStart;


   EI_ExecState_t execState;
   BOOL32         execInternalEnabled;

   EI_IvMetadata_t injMetaData[ ( ( 2 ) ) ][ (16) ];
   EI_State_t      shadowState[ ( ( 2 ) ) ][ (16) ];

   uint64_t maxIvTimeout;
   uint32_t maxb2bDecomAllowed;

   struct
   {

      uint8_t mailboxPsOrig[ (16) ];
   } infra;

   struct
   {
      uint32_t* hwdCtxtList;
      uint32_t  hwdCtxtListLen;

      EI_TlcProgInjTableEntry_t tlcProgTable[ ( (12)  / (3) ) ];
   } tlcProg;

   struct
   {
      uint32_t doInjectSgdDownShift:1;
      uint32_t doInjectSgdUpShift:1;
      uint32_t eiNum:6;
      uint32_t sgdRelocationFimMap:8;
      uint32_t rfu:16;
   } sgd;

   struct
   {
      EI_JbRevRlcVcRangeControl_t    jbRevRlcVcRangeControl[ 6 ];
      uint32_t                       jbRevRlcVcRangeOrder[ 6 ];
      uint32_t                       jbRevRlcVcRangeOrderSize;
      BOOL32                         jbRevMoveContextIsScheduled;
      BOOL32                         jbRevMoveDoneContextIsScheduled;
      uint16_t                       jbRevMoveContext;
      uint16_t                       jbRevMoveDoneContext;
   } jbRev;

   uint32_t       randomSeed;
   EI_GlobalsSavedToFlash_t globalsSavedToFlash;




   BOOL32         mbReviveEnableFtl;

   BOOL32         blocksDecommissionSyncPsFlag;


   EI_OpId_t SubCaller[ (THREAD_ISR + 1) ];
   uint32_t hostlessReadFFLBA;

#line 492 "d:/gitrepo/atlas3_release/source/ftl/ei/inc/ei_engine.h"
   uint32_t CsStartCount;
   uint32_t CsEndCount;
   uint32_t decommissionCount[ (16) ];
   uint32_t injCouner;

   EI_LogResident_t              logResidentDataCopy;
   uint32_t                      isCurrentDecommissionMsgFake;

   EI_IvResPoolData_t ivResPoolData[EI_IV_NUM_OF_RES_POOLS];


   uint8_t wasSolePfDuringBurstInjected;


   struct
   {
      uint64_t cooldownTimestamp;
      uint32_t consecutiveCounter;
      uint32_t lastCsCount;

      uint32_t PecGuardThreshold[BML_NUM_PARTITIONS];
      uint32_t PecGuardExitThreshold[BML_NUM_PARTITIONS];
   } restrictions;


   EI_XorRecCtrl_t xorRec;


   EI_FlowParam_t flowParams;
   EI_FlowParam_t flowParamsInfra;


   uint32_t canaryValEnd;
};

struct EI_MP_structures_s
{
   uint32_t                canaryValStart;
   EI_Config_t             config;
   struct EI_EngGlobals_s  engGlobals;
   EI_StatStatistics_t     statistics;
   uint32_t                canaryValEnd;
};

struct EI_GlobalStructs_s
{
   uint32_t                        canaryValStart;
   EI_InjectionVector_t*           injectionVector;
   struct EI_SharedGlobalParams_s* globalSharedParams;
   struct EI_MP_structures_s*      mp;
   uint32_t                        canaryValEnd;
};




extern struct EI_GlobalStructs_s EI_GlobalStructs;

#line 37 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"

#line 81 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ValidatePercentSum(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize, uint32_t* retSum)
{
   uint32_t sum = 0;
   uint32_t i;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(lst), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 86 , "lst");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(retSum), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 87 , "retSum");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(maxLstSize >= listSize), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 88 , "maxLstSize >= listSize");                         "BullseyeCoverage restore"; } ;

   for(i=0; i < listSize; i++)
   {
      if(!(((lst[i])) <= (( (100) )))) {return STATUS_ERROR;} ;
      sum += lst[i];
   }

   *retSum = sum;

   for(; i < maxLstSize; i++)
   {
      if(!(lst[i] == 0)) {return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ValidatePercentSumIsMax(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 110 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   if(!(sum == (100) )) {return STATUS_ERROR;} ;

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ValidatePercentSumIsNotZero(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 121 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   if(!(sum > 0)) {return STATUS_ERROR;} ;

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ValidatePercentNoSum(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 132 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   return STATUS_OK;
}

void  __attribute__((section("CODE_SLOW")))  EI_i_ConfFillChancesArrayWithMaxChance(EI_Percent_t* array, uint32_t arraySize)
{
   uint32_t i;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(array), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 140 , "array");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(arraySize > 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 141 , "arraySize > 0");                         "BullseyeCoverage restore"; } ;
   for (i = 0; i < arraySize; i++)
   {
      array[i] =  (100) ;
   }
}

void  __attribute__((section("CODE_SLOW")))  EI_i_ConfFixLogBackwardCompatibility(EI_Config_t* config)
{
   Status_t st;
   uint32_t psIdx, dieIdx;
   uint32_t sum = 0;
   EI_OpidSpecificChancesTable_t* pLogChances = &config->operations[EI_OP_ID_LOG].opidSpecificChances;
   EI_OpidSpecificChancesTable_t* pRlcChances = &config->operations[EI_OP_ID_RLC_HOST].opidSpecificChances;
   EI_OpidSpecificChancesTable_t* pHostlessChances = &config->operations[EI_OP_ID_HOSTLESS].opidSpecificChances;

   st = EI_i_ValidatePercentSum(pLogChances->logChances.locations, EI_LOG_COPY_LOCATION_TOTAL, EI_LOG_COPY_LOCATION_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pLogChances->logChances.locations, EI_LOG_COPY_LOCATION_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pLogChances->logChances.reasons, EI_LOG_WRITE_REASON_TOTAL, EI_LOG_WRITE_REASON_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pLogChances->logChances.reasons, EI_LOG_WRITE_REASON_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pRlcChances->rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL, EI_RLC_TYPE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pRlcChances->rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pHostlessChances->hostlessChances.hostlessTypes, EI_HOSTLESS_TYPE_TOTAL, EI_HOSTLESS_TYPE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pHostlessChances->hostlessChances.hostlessTypes, EI_HOSTLESS_TYPE_TOTAL);
   }


   sum = 0;
   for(psIdx = 0; psIdx <  (2) ; psIdx++)
   {
      for(dieIdx = 0; dieIdx <  (4) ; dieIdx++)
      {
         sum +=  (dieIdx < (4) ) ? config->generalConfig.planeAffinityMask_part1[psIdx][dieIdx] : config->configArraysExtenstion.planeAffinityMask_part2[psIdx][dieIdx- (4) ] ;
      }
   }

   if (sum == 0)
   {
      for(psIdx = 0; psIdx <  (2) ; psIdx++)
      {
         for(dieIdx = 0; dieIdx <  (4) ; dieIdx++)
         {
            if(dieIdx < (4) ) { config->generalConfig.planeAffinityMask_part1[psIdx][dieIdx] = (0xFF) ; } else { config->configArraysExtenstion.planeAffinityMask_part2[psIdx][dieIdx- (4) ] = (0xFF) ; } ;
         }
      }
   }
}

void  __attribute__((section("CODE_SLOW")))  EI_i_ConfFixOpstBackwardCompatibility(EI_Config_t* config, uint8_t opid)
{
   Status_t st;
   uint32_t sum = 0;

   st = EI_i_ValidatePercentSum(config->operations[opid].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(config->operations[opid].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL);
   }
}

#line 227 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
void EI_i_ConfFixEraseChancesBackwardCompatibility(EI_Config_t* config)
{
   EI_Percent_t chanceEraseFailure = config->allOpsChance.chanceEraseFailure;
   EI_Percent_t chanceEraseFailureDuringFnvm = config->allOpsChance.chanceEraseFailureDuringFnvm;
   EI_Percent_t chanceEraseFailureDuringBurst = config->burstMode.chanceEraseFailureDuringBurst;

   EI_Percent_t blockTypeFailureChances;
   EI_Percent_t blockTypeFailureChancesDuringBurst;

   EI_EraseChances_t* eraseChances = &config->configArraysExtenstion.eraseChances;
   EI_BlockType_t blockType;

   if (chanceEraseFailure > 0 || chanceEraseFailureDuringFnvm > 0)
   {

      eraseChances->eraseFailureChances[EI_ERASE_TYPE_FNVM] = chanceEraseFailureDuringFnvm;
      eraseChances->eraseFailureChances[EI_ERASE_TYPE_NORMAL] =  (((chanceEraseFailure )> (chanceEraseFailureDuringBurst)) ? (chanceEraseFailure)  : ( chanceEraseFailureDuringBurst)) ;

      if (chanceEraseFailureDuringBurst > chanceEraseFailure)
      {
         blockTypeFailureChances =  chanceEraseFailure != 0 ? (EI_Percent_t)( (100)  / (chanceEraseFailureDuringBurst * 1.0 / chanceEraseFailure)) : 0 ;
         blockTypeFailureChancesDuringBurst =  (100) ;
      }
      else
      {
         if (chanceEraseFailure == 0 && chanceEraseFailure == chanceEraseFailureDuringBurst)
         {
            blockTypeFailureChances = 0;
         }
         else
         {
            blockTypeFailureChances =  (100) ;
         }
         blockTypeFailureChancesDuringBurst =  chanceEraseFailureDuringBurst != 0 ? (EI_Percent_t)( (100)  / (chanceEraseFailure * 1.0 / chanceEraseFailureDuringBurst)) : 0 ;
      }

      for (blockType = EI_BLOCK_TYPE_SLC; blockType < EI_NUM_OF_BLOCK_TYPES; blockType++)
      {
         eraseChances->blockTypeFailureChances[blockType] = blockTypeFailureChances;
         eraseChances->blockTypeFailureChances[ (8)  / 2 + blockType] = blockTypeFailureChancesDuringBurst;
      }
      config->allOpsChance.chanceEraseFailure = 0;
      config->allOpsChance.chanceEraseFailureDuringFnvm = 0;
      config->burstMode.chanceEraseFailureDuringBurst = 0;
   }
   else
   {

      uint32_t sumEraseFailure = 0;
      uint32_t sumBlockTypeFailure = 0;
      EI_i_ValidatePercentSum(eraseChances->eraseFailureChances, EI_ERASE_TYPE_COUNT, EI_ERASE_TYPE_COUNT, &sumEraseFailure);
      EI_i_ValidatePercentSum(eraseChances->blockTypeFailureChances,  (8) ,  (8) , &sumBlockTypeFailure);

      if (sumEraseFailure > 0 && sumBlockTypeFailure == 0)
      {
         for (blockType = EI_BLOCK_TYPE_SLC; blockType < EI_NUM_OF_BLOCK_TYPES; blockType++)
         {
            eraseChances->blockTypeFailureChances[blockType] =  (100) ;
            eraseChances->blockTypeFailureChances[ (8)  / 2 + blockType] =  (100) ;
         }
      }
   }
}

void  __attribute__((section("CODE_SLOW")))  EI_ConfFixBackwardCompatibility(EI_Config_t* config)
{
   uint8_t opid;
   EI_i_ConfFixLogBackwardCompatibility(config);
   EI_i_ConfFixEraseChancesBackwardCompatibility(config);
   config->generalConfig.specialOpstBitmap = (config->generalConfig.specialOpstBitmap != 0)
      ? config->generalConfig.specialOpstBitmap
      : EI_SPECIAL_OPST_ALL;

   for(opid = 0; opid <  (40) ; opid++)
   {
      if (config->operations[opid].valid ==  (1)  || config->operations[opid].isParticipantInBurst ==  (1) )
      {
         EI_i_ConfFixOpstBackwardCompatibility(config, opid);
      }
   }
}

Status_t  __attribute__((section("CODE_SLOW")))  EI_GetOpSpecRestrictions(const uint32_t opId, BOOL32 *slcOnly, BOOL32 *readOnly, BOOL32 *progOnly, BOOL32 *openZoneOnly)
{
   BOOL32 tmpSlcOnly =  (0) , tmpReadOnly =  (0) , tmpProgOnly =  (0) , tmpOpenZoneOnly =  (0) ;

switch(opId)
   {

      case EI_OP_ID_HOST:
         break;
      case EI_OP_ID_HOSTLESS:
         break;
      case EI_OP_ID_RMW:
         break;
      case EI_OP_ID_FUA:
         tmpProgOnly =  (1) ;
         tmpOpenZoneOnly =  (1) ;
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_DEALLOC:
         break;


      case EI_OP_ID_LOG:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_RLA:
         tmpReadOnly =  (1) ;
         break;
      case EI_OP_ID_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_XOR:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_XOR_ZONE_REBUILD:
         tmpReadOnly =  (1) ;
         tmpOpenZoneOnly =  (1) ;
         break;
      case EI_OP_ID_ACTIVE_RS:
         tmpReadOnly =  (1) ;
         break;


      case EI_OP_ID_FLGP:
         break;
      case EI_OP_ID_SCAN_FWD:
         break;
      case EI_OP_ID_READ_HEADERS:
         tmpReadOnly =  (1) ;
         break;


      case EI_OP_ID_RLC_HOST_VC:
         tmpReadOnly =  (1) ;
         break;
      case EI_OP_ID_RLC_HOST:
         break;
      case EI_OP_ID_RLC_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_RLC_XOR:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_BRLC_HOST:
         break;
      case EI_OP_ID_BRLC_RLC:
         break;
      case EI_OP_ID_BRLC_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_BRLC_XOR:
         tmpSlcOnly =  (1) ;
         break;


      case EI_OP_ID_INFRA_IFS:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_FADI:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_BOOT:
         tmpSlcOnly =  (1) ;
         tmpProgOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_DIR:
         tmpSlcOnly =  (1) ;
         tmpProgOnly =  (1) ;
         break;


      default:
         { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 401 , "(0)");                         "BullseyeCoverage restore"; } ;
         return STATUS_ERROR;
   }

   { "BullseyeCoverage save off";                          _AssertImpl((int)((tmpReadOnly && tmpProgOnly) == (0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 405 , "(tmpReadOnly && tmpProgOnly) == (0)");                         "BullseyeCoverage restore"; } ;

   if(slcOnly)
   {
      *slcOnly = tmpSlcOnly;
   }
   if(readOnly)
   {
      *readOnly = tmpReadOnly;
   }
   if(progOnly)
   {
      *progOnly = tmpProgOnly;
   }
   if(openZoneOnly)
   {
      *openZoneOnly = tmpOpenZoneOnly;
   }

   return STATUS_OK;
}


Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidOpSpecParams(const EI_Config_t *pConfig, uint32_t opId)
{
   Status_t st;
   BOOL32 slcOnly, readOnly, progOnly, openZoneOnly;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(pConfig), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 433 , "pConfig");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(opId < EI_NUM_OF_OP_IDS), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 434 , "opId < EI_NUM_OF_OP_IDS");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pConfig->operations[opId].valid == (1) || pConfig->operations[opId].isParticipantInBurst == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 435 , "pConfig->operations[opId].valid == (1) || pConfig->operations[opId].isParticipantInBurst == (1)");                         "BullseyeCoverage restore"; } ;

   st = EI_GetOpSpecRestrictions(opId, &slcOnly, &readOnly, &progOnly, &openZoneOnly);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 438 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   if(slcOnly ==  (1) )
   {
      if(!(0 < (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_SLC])) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_MLC])) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_MLC + ( (8)  / 2)])) {return STATUS_ERROR;} ;
   }
   if(readOnly ==  (1) )
   {
      if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG])) {return STATUS_ERROR;} ;           if(!(0 < (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ])) {return STATUS_ERROR;} ;           if(!(0 == (pConfig)->operations[opId].chanceToInitiateBurstOnProg)) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG + ( (8)  / 2)])) {return STATUS_ERROR;} ;
   }
   if(progOnly ==  (1) )
   {
      if(!(0 < (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG])) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ])) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].chanceToInitiateBurstOnRead)) {return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ + ( (8)  / 2)])) {return STATUS_ERROR;} ;
   }
   if(openZoneOnly ==  (1) )
   {
      if(!(0 == (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK])) {return STATUS_ERROR;} ;           if(!(0 == (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK])) {return STATUS_ERROR;} ;             if(!(0 < (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK])) {return STATUS_ERROR;} ;
   }


   switch(opId)
   {
      case EI_OP_ID_LOG:
         if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.logChances.locations, EI_LOG_COPY_LOCATION_TOTAL, EI_LOG_COPY_LOCATION_TOTAL))) {return STATUS_ERROR;} ;
         if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.logChances.reasons, EI_LOG_WRITE_REASON_TOTAL, EI_LOG_WRITE_REASON_TOTAL))) {return STATUS_ERROR;} ;
         break;
     case EI_OP_ID_RLC_HOST:
        if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL, EI_RLC_TYPE_TOTAL))) {return STATUS_ERROR;} ;
        break;
      case EI_OP_ID_FLGP:
      case EI_OP_ID_SCAN_FWD:
         { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 469 , "(0)");                         "BullseyeCoverage restore"; } ;
         return STATUS_ERROR;
         break;
   }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidAllOpsChancesTable(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 486 , "config");                         "BullseyeCoverage restore"; } ;


   if(!(((config->allOpsChance.chanceEraseFailure)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceXorRecDuringPfRecFailure)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedEraseFailureDuringEraseFailure)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chancePsDecommissionRequests)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceDstFailure)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceUnrecXorRecRead)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceToTriggerRlcAfterReadInj)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedWriteAbort)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedEraseAbort)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceEraseFailureDuringFnvm)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceDrd)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceSgdDownShift)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceSgdUpShift)) <= (( (100) )))) {return STATUS_ERROR;} ;

   if (config->allOpsChance.chanceDrd)
   {
      if(!(config->generalConfig.drdOpbBitmap)) {return STATUS_ERROR;} ;
   }

   if(!((config->allOpsChance.chanceSgdDownShift == 0) && (config->allOpsChance.chanceSgdUpShift == 0))) {return STATUS_ERROR;} ;

   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidOperationsTableInput(const EI_Config_t *config)
{
   uint32_t opId;
   BOOL32 haveValidOps =  (0) ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 518 , "config");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(2 * EI_NUM_OF_OP_TBL_ACCESS_TYPES <= (8)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 519 , "2 * EI_NUM_OF_OP_TBL_ACCESS_TYPES <= (8)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(2 * EI_NUM_OF_BLOCK_TYPES <= (8)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 520 , "2 * EI_NUM_OF_BLOCK_TYPES <= (8)");                         "BullseyeCoverage restore"; } ;

   for(opId=0; opId < EI_NUM_OF_OP_IDS; opId++)
   {
      if(!(((config->operations[opId].valid) == (1) ) || ((config->operations[opId].valid) == (0) ))) {return STATUS_ERROR;} ;
      if(!(((config->operations[opId].isParticipantInBurst) == (1) ) || ((config->operations[opId].isParticipantInBurst) == (0) ))) {return STATUS_ERROR;} ;

      if(config->operations[opId].valid ==  (1)  || config->operations[opId].isParticipantInBurst ==  (1) )
      {
         if((EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 529 , EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 530 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL));} ;
         if((EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 531 , EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) ));} ;
         if((EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 532 , EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) ));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 533 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) ));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 534 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) ));} ;
         if((EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 535 , EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) ));} ;


         if(!(STATUS_OK == EI_i_ConfValidOpSpecParams(config, opId))) {return STATUS_ERROR;} ;
      }

      if (config->operations[opId].valid ==  (1) )
      {
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 543 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 544 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES));} ;
         haveValidOps =  (1) ;
      }

      if (config->operations[opId].isParticipantInBurst ==  (1) )
      {
         if((EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8)  / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 550 , EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8) / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8)  / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8)  / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 551 , EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8) / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8)  / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES));} ;
         if(!(0 < config->burstMode.minInjectionsPerBurst)) {return STATUS_ERROR;} ;
      }
   }

  if ((haveValidOps ==  (0) )
     && (config->allOpsChance.chanceDstFailure == 0)
     && (config->allOpsChance.chancePsDecommissionRequests == 0)
     && (STATUS_OK != EI_i_ValidatePercentSumIsNotZero(config->configArraysExtenstion.eraseChances.eraseFailureChances, EI_ERASE_TYPE_COUNT, EI_ERASE_TYPE_COUNT)))
  {

     return STATUS_ERROR;
  }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidChancesTable(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 577 , "config");                         "BullseyeCoverage restore"; } ;

   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 579 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 580 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 581 , EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 582 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 583 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 584 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 585 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 586 , EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) ));} ;


   if(config->allOpsChance.chanceDstFailure > 0)
   {
      if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 591 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) )); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) ));} ;
   }





   if(!(config->chances.failChanceOriginalRead[EI_READ_SW_TH] == 0)) {return STATUS_ERROR;} ;
   if(!(config->chances.failChancePfRecRead[EI_READ_SW_TH] == 0)) {return STATUS_ERROR;} ;
   if(!(config->chances.failChanceXorRecRead[EI_READ_SW_TH] == 0)) {return STATUS_ERROR;} ;


   if(!(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_SKIP_PAR_PAGES] == 0)) {return STATUS_ERROR;} ;


   if(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WRITE_ABORT] != 0)
   {
      if(!(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WRITE_ABORT] == (100) )) {return STATUS_ERROR;} ;
   }

   if(config->chances.failChanceOriginalErase[EI_ERASE_WRITE_ABORT] != 0)
   {
      if(!(config->chances.failChanceOriginalErase[EI_ERASE_WRITE_ABORT] == (100) )) {return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidateSingleEntryAddr(const EI_SingleInjTableEntry_t *singleEntry)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(singleEntry), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 621 , "singleEntry");                         "BullseyeCoverage restore"; } ;


   if(!(singleEntry->addrType < EI_NUM_OF_ADDR_TYPES)) {return STATUS_ERROR;} ;


   if(singleEntry->addr !=  (0xfffffffffffffffeULL) )
   {
      switch (singleEntry->addrType)
      {
         case EI_ADDR_TYPE_VBA:
         case EI_ADDR_TYPE_DEVBA:
            break;
         case EI_ADDR_TYPE_LBA:

            if(!(FE_API_IsLBAValid(singleEntry->nsId, singleEntry->addr) == (1) )) {return STATUS_ERROR;} ;

            if(!(singleEntry->opToInject != EI_INJ_OP_ERASE)) {return STATUS_ERROR;} ;
            break;
         case EI_ADDR_TYPE_OPID:
            if(!(singleEntry->addr < EI_NUM_OF_OP_IDS)) {return STATUS_ERROR;} ;
            break;

         default:
            { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 645 , "(0)");                         "BullseyeCoverage restore"; } ;
            return STATUS_ERROR;
      }
   }


   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidSingleTableEntry(const EI_SingleInjTableEntry_t *singleEntry)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(singleEntry), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 663 , "singleEntry");                         "BullseyeCoverage restore"; } ;

   if(!(((singleEntry->isValid) == (1) ) || ((singleEntry->isValid) == (0) ))) {return STATUS_ERROR;} ;


   if (singleEntry->isValid ==  (1) )
   {
      uint32_t i, j;
      BOOL32 isReadErrorPerFmuConfigured =  (1) ;
      BOOL32 bytemapHasInjection =  (0) ;


      if((EI_i_ConfValidateSingleEntryAddr(singleEntry)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 675 , EI_i_ConfValidateSingleEntryAddr(singleEntry)); printf("\n");fflush( (&__iob_func()[1]) ); ; return (EI_i_ConfValidateSingleEntryAddr(singleEntry));} ;


      if(!(singleEntry->opToInject < EI_NUM_OF_INJ_OP_TYPES)) {return STATUS_ERROR;} ;

      switch (singleEntry->opToInject)
      {
         case EI_INJ_OP_READ:

            if(!(((singleEntry->injParams.read.triggerRlc) == (1) ) || ((singleEntry->injParams.read.triggerRlc) == (0) ))) {return STATUS_ERROR;} ;


            isReadErrorPerFmuConfigured = EI_Config_IsReadfailurePerFmuMapConfigure(singleEntry->injParams.read.failurePerFmuMap);


            if (!isReadErrorPerFmuConfigured)
            {
               if(!(singleEntry->injParams.read.failureType < EI_READ_FAILURE_LEVEL_TOTAL)) {return STATUS_ERROR;} ;
               if(!(singleEntry->injParams.read.failureType != EI_READ_FAILURE_LEVEL_NONE)) {return STATUS_ERROR;} ;

               if(!(singleEntry->injParams.read.failureType != EI_READ_FAILURE_LEVEL_SW_TH)) {return STATUS_ERROR;} ;

            }
            break;
         case EI_INJ_OP_PROG:
         case EI_INJ_OP_XOR_STORE:
            {
               const EI_SingleProgConfigParams_t* progEntry = &singleEntry->injParams.prog;

               if(!(progEntry->failureType < EI_PROG_FAILURE_PATTERN_TOTAL)) {return STATUS_ERROR;} ;
               if(!(progEntry->nestedListProgEraseSize <= (4) )) {return STATUS_ERROR;} ;
               if(!(progEntry->nestedListReadSize <= (8) )) {return STATUS_ERROR;} ;
               if(!(progEntry->XORStoreMetaPgOffs < (( ( (8)  * (2U) )  - (6) ) * (3) ) )) {return STATUS_ERROR;} ;



               if(!(((progEntry->isParityPage) == (1) ) || ((progEntry->isParityPage) == (0) ))) {return STATUS_ERROR;} ;

#line 738 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
               for(i=0; i < progEntry->nestedListReadSize; i++)
               {
                  for(j=0; j< (4) ; j++)
                  {
                     if(!(progEntry->nestedInjReadByteMapsList[i][j] < EI_READ_FAILURE_LEVEL_TOTAL)) {return STATUS_ERROR;} ;
                  }
               }
            }
            break;
         case EI_INJ_OP_ERASE:
            if(!(singleEntry->injParams.erase.failureType < EI_ERASE_FAILURE_PATTERN_TOTAL)) {return STATUS_ERROR;} ;
            if(!(singleEntry->injParams.erase.numNestedEraseInjections <= (4) )) {return STATUS_ERROR;} ;


            if(!(((singleEntry->injParams.erase.doPowerAbortOnLastNestedInjection) == (1) ) || ((singleEntry->injParams.erase.doPowerAbortOnLastNestedInjection) == (0) ))) {return STATUS_ERROR;} ;
            break;

         case EI_INJ_OP_XOR_LOAD:
         case EI_INJ_OP_XOR_REBUILD:
            if(!(singleEntry->injParams.xor_rec.size <= (8) )) {return STATUS_ERROR;} ;

            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {
               if(!(singleEntry->injParams.xor_rec.ei[i].binNumber < ( (8)  * ( (6U) ) ) )) {return STATUS_ERROR;} ;
               if(!(singleEntry->injParams.xor_rec.ei[i].offsetInBin < (( ( ( ( ( 8 ) / ( 2 ) )  * (1)  * (4) ) )  * (4)  * ( (162) )  * ( (5) ) ) / ( (8)  * (10) )) )) {return STATUS_ERROR;} ;

               for(j=0; j< ( (4) ) ; j++)
               {
                  if(!(singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] < EI_READ_FAILURE_LEVEL_TOTAL)) {return STATUS_ERROR;} ;

                  if (singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] != EI_READ_FAILURE_LEVEL_NONE)
                  {
                     bytemapHasInjection =  (1) ;
                  }
               }
               if(!(bytemapHasInjection == (1) )) {return STATUS_ERROR;} ;
            }
            break;

         case EI_INJ_OP_XOR_REC_LOAD:
         case EI_INJ_OP_XOR_REC_UNROLL_PS0:
         case EI_INJ_OP_XOR_REC_UNROLL_PS1:
            if(!(singleEntry->injParams.xor_rec.size <= (8) )) {return STATUS_ERROR;} ;

            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {

               if(!(singleEntry->injParams.xor_rec.ei[i].binNumber == 0)) {return STATUS_ERROR;} ;

               for(j=0; j< ( (4) ) ; j++)
               {
                  if(!(singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] < EI_READ_FAILURE_LEVEL_TOTAL)) {return STATUS_ERROR;} ;

                  if (singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] != EI_READ_FAILURE_LEVEL_NONE)
                  {
                     bytemapHasInjection =  (1) ;
                  }
               }
               if(!(bytemapHasInjection == (1) )) {return STATUS_ERROR;} ;
            }
            break;
         case EI_INJ_OP_DST:
            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {
               if(!(singleEntry->injParams.dst.failureType[i] < EI_DST_FAILURE_TYPE_TOTAL)) {return STATUS_ERROR;} ;
            }
            break;
         case EI_INJ_OP_DRD:
            if(!(((singleEntry->injParams.drd.opbBitmap) == (1) ) || ((singleEntry->injParams.drd.opbBitmap) == (0) ))) {return STATUS_ERROR;} ;
            break;
         default:
            { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 809 , "(0)");                         "BullseyeCoverage restore"; } ;
            return STATUS_ERROR;
      }
   }
   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidBurstModeConfig(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 818 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->burstMode.isBackToBack) == (1) ) || ((config->burstMode.isBackToBack) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->burstMode.isSolePfDuringBurst) == (1) ) || ((config->burstMode.isSolePfDuringBurst) == (0) ))) {return STATUS_ERROR;} ;
   if(!(config->burstMode.minInjectionsPerBurst <= config->burstMode.maxInjectionsPerBurst)) {return STATUS_ERROR;} ;
   if(!(((config->burstMode.chanceToInitiateBurstOnErase)) <= (( (100) )))) {return STATUS_ERROR;} ;
   if(!(((config->burstMode.chanceEraseFailureDuringBurst)) <= (( (100) )))) {return STATUS_ERROR;} ;


   if(config->burstMode.isSolePfDuringBurst)
   {
      uint32_t opId;
      BOOL32   haveProgsOnly =  (1) ;


      if (config->burstMode.chanceEraseFailureDuringBurst)
      {
         haveProgsOnly =  (0) ;
      }

      for (opId = 0; opId <  (40) ; ++opId)
      {

         if (config->operations[opId].isParticipantInBurst &&
             config->operations[opId].opTypeFailureChances[ (8)  / 2])
         {
            haveProgsOnly =  (0) ;
         }
      }

      if(!(haveProgsOnly == (0) )) {return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}
__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidRestrictions(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 855 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->restrictions.fullCS) == (1) ) || ((config->restrictions.fullCS) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->restrictions.multyDiesPfEnable) == (1) ) || ((config->restrictions.multyDiesPfEnable) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->restrictions.avoidRoOnMtmUecc) == (1) ) || ((config->restrictions.avoidRoOnMtmUecc) == (0) ))) {return STATUS_ERROR;} ;

   return STATUS_OK;
}








__inline static  Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidGeneralConfig(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 873 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->generalConfig.errLogEnable) == (1) ) || ((config->generalConfig.errLogEnable) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->generalConfig.mbReviveEnableFull) == (1) ) || ((config->generalConfig.mbReviveEnableFull) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->generalConfig.jbReviveEnable) == (1) ) || ((config->generalConfig.jbReviveEnable) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->generalConfig.doSurvivePowerCycles) == (1) ) || ((config->generalConfig.doSurvivePowerCycles) == (0) ))) {return STATUS_ERROR;} ;
   if(!(((config->generalConfig.mbReviveDisableFtl) == (1) ) || ((config->generalConfig.mbReviveDisableFtl) == (0) ))) {return STATUS_ERROR;} ;

   if(!(config->generalConfig.confType < EI_CONF_TYPE_TOTAL)) {return STATUS_ERROR;} ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->generalConfig.mbReviveEnableFull ? (config->allOpsChance.chancePsDecommissionRequests ? (0) : (1) ) : (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 882 , "!config->generalConfig.mbReviveEnableFull ? (config->allOpsChance.chancePsDecommissionRequests ? (0):(1)) : (1)");                         "BullseyeCoverage restore"; } ;

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidSingleInjectionTable(const EI_Config_t *config)
{
   uint32_t entry;
   Status_t status;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 899 , "config");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleReadConfigParams_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 900 , "sizeof(EI_SingleReadConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleProgConfigParams_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 901 , "sizeof(EI_SingleProgConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleEraseConfigParams_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 902 , "sizeof(EI_SingleEraseConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescXor_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 903 , "sizeof(EI_InjDescXor_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescDst_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 904 , "sizeof(EI_InjDescDst_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescDrd_t) <= (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 905 , "sizeof(EI_InjDescDrd_t) <= (80)");                         "BullseyeCoverage restore"; } ;

   for(entry = 0; entry <  (6) ; entry++)
   {
      status = EI_i_ConfValidSingleTableEntry(&(config->singleInjections[entry]));
      if((status) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 910 , status); printf("\n");fflush( (&__iob_func()[1]) ); ; return (status);} ;
   }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidRandInjection(const EI_Config_t *config)
{
   Status_t st;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 927 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidGeneralConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 930 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidRestrictions(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 933 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidAllOpsChancesTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 936 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidChancesTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 939 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidOperationsTableInput(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 942 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidBurstModeConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 945 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidSingleInjection(const EI_Config_t *config)
{
   Status_t st;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 962 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidGeneralConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 965 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   st = EI_i_ConfValidSingleInjectionTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 968 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_SLOW")))  EI_i_ConfValidHeader(const EI_Config_t *config)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 976 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(( (2)  <= config->version) && (config->version <= (17) ))) {return STATUS_ERROR;} ;

   return STATUS_OK;
}







void  __attribute__((section("CODE_SLOW")))  EI_ValidateConfigStructureOffsets(void)
{
   const EI_Config_t *pConfig = &EI_GlobalStructs.mp->config;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_READ_FAILURE_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 994 , "(16) >= EI_NUM_OF_READ_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_PROG_FAILURE_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 995 , "(16) >= EI_NUM_OF_PROG_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_NESTED_PROG_FAILURE_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 996 , "(16) >= EI_NUM_OF_NESTED_PROG_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_ERASE_FAILURE_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 997 , "(16) >= EI_NUM_OF_ERASE_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 998 , "(16) >= EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NUM_OF_FLASH_ACCESS_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1001 , "(8) >= EI_NUM_OF_FLASH_ACCESS_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NUM_OF_BLOCK_TYPES), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1002 , "(8) >= EI_NUM_OF_BLOCK_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_PLACEMENT_PAGE_TOTAL), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1003 , "(8) >= EI_PLACEMENT_PAGE_TOTAL");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_ZONE_STATE_TOTAL), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1004 , "(8) >= EI_ZONE_STATE_TOTAL");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NESTED_TOTAL), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1005 , "(8) >= EI_NESTED_TOTAL");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((40) >= EI_NUM_OF_OP_IDS), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1008 , "(40) >= EI_NUM_OF_OP_IDS");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_Percent_t) == 1), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1011 , "sizeof(EI_Percent_t) == 1");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ConfType_t) == 4), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1012 , "sizeof(EI_ConfType_t) == 4");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(BOOL32) == 4), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1013 , "sizeof(BOOL32) == 4");                         "BullseyeCoverage restore"; } ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_GeneralConfig_t) == (32)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1015 , "sizeof(EI_GeneralConfig_t) == (32)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_GeneralConfig_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1015 , "(sizeof(EI_GeneralConfig_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_RestrictionsConfig_t) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1016 , "sizeof(EI_RestrictionsConfig_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_RestrictionsConfig_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1016 , "(sizeof(EI_RestrictionsConfig_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_AllOpsFailureChances_t) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1017 , "sizeof(EI_AllOpsFailureChances_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_AllOpsFailureChances_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1017 , "(sizeof(EI_AllOpsFailureChances_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ChancesTable_t) == (256)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1018 , "sizeof(EI_ChancesTable_t) == (256)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_ChancesTable_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1018 , "(sizeof(EI_ChancesTable_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_OpTableEntry_t) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1019 , "sizeof(EI_OpTableEntry_t) == (72)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_OpTableEntry_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1019 , "(sizeof(EI_OpTableEntry_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_BurstModeParameters_t) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1020 , "sizeof(EI_BurstModeParameters_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_BurstModeParameters_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1020 , "(sizeof(EI_BurstModeParameters_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_OpidSpecificChancesTable_t) == (24)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1021 , "sizeof(EI_OpidSpecificChancesTable_t) == (24)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_OpidSpecificChancesTable_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1021 , "(sizeof(EI_OpidSpecificChancesTable_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleInjTableEntry_t) == (96)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1022 , "sizeof(EI_SingleInjTableEntry_t) == (96)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleInjTableEntry_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1022 , "(sizeof(EI_SingleInjTableEntry_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleReadConfigParams_t) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1023 , "sizeof(EI_SingleReadConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleReadConfigParams_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1023 , "(sizeof(EI_SingleReadConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleProgConfigParams_t) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1024 , "sizeof(EI_SingleProgConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleProgConfigParams_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1024 , "(sizeof(EI_SingleProgConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleEraseConfigParams_t) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1025 , "sizeof(EI_SingleEraseConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleEraseConfigParams_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1025 , "(sizeof(EI_SingleEraseConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleConfigParams_t) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1026 , "sizeof(EI_SingleConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleConfigParams_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1026 , "(sizeof(EI_SingleConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ConfigArraysExtenstion_t) == (280)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1027 , "sizeof(EI_ConfigArraysExtenstion_t) == (280)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_ConfigArraysExtenstion_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1027 , "(sizeof(EI_ConfigArraysExtenstion_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_Config_t) == (4096)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1028 , "sizeof(EI_Config_t) == (4096)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_Config_t) & 7) == 0), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1028 , "(sizeof(EI_Config_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1031 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValStart) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1031 , "sizeof(pConfig->canaryValStart) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1032 , "(uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->version) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1032 , "sizeof(pConfig->version) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((16))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1033 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig) == (32)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1033 , "sizeof(pConfig->generalConfig) == (32)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((48))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1034 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((48))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1034 , "sizeof(pConfig->restrictions) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((64))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1035 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1035 , "sizeof(pConfig->allOpsChance) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((80))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1036 , "(uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((80))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->chances) == (256)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1036 , "sizeof(pConfig->chances) == (256)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((4091))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1037 , "(uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((4091))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->isConfigValid) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1037 , "sizeof(pConfig->isConfigValid) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((4092))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1038 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((4092))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValEnd) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1038 , "sizeof(pConfig->canaryValEnd) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((336))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1039 , "(uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((336))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations) == (2880)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1039 , "sizeof(pConfig->operations) == (2880)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((3216))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1040 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((3216))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections) == (576)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1040 , "sizeof(pConfig->singleInjections) == (576)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((3792))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1041 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((3792))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1041 , "sizeof(pConfig->burstMode) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((3808))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1042 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((3808))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion) == (280)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1042 , "sizeof(pConfig->configArraysExtenstion) == (280)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.confType))) - (uint8_t*)(&((*pConfig)))) == ((16))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1045 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.confType))) - (uint8_t*)(&((*pConfig)))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.confType) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1045 , "sizeof(pConfig->generalConfig.confType) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.randomSeed))) - (uint8_t*)(&((*pConfig)))) == ((20))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1046 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.randomSeed))) - (uint8_t*)(&((*pConfig)))) == ((20))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.randomSeed) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1046 , "sizeof(pConfig->generalConfig.randomSeed) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.errLogEnable))) - (uint8_t*)(&((*pConfig)))) == ((24))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1047 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.errLogEnable))) - (uint8_t*)(&((*pConfig)))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.errLogEnable) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1047 , "sizeof(pConfig->generalConfig.errLogEnable) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveEnableFull))) - (uint8_t*)(&((*pConfig)))) == ((25))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1048 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveEnableFull))) - (uint8_t*)(&((*pConfig)))) == ((25))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.mbReviveEnableFull) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1048 , "sizeof(pConfig->generalConfig.mbReviveEnableFull) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.jbReviveEnable))) - (uint8_t*)(&((*pConfig)))) == ((26))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1049 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.jbReviveEnable))) - (uint8_t*)(&((*pConfig)))) == ((26))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.jbReviveEnable) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1049 , "sizeof(pConfig->generalConfig.jbReviveEnable) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.doSurvivePowerCycles))) - (uint8_t*)(&((*pConfig)))) == ((27))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1050 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.doSurvivePowerCycles))) - (uint8_t*)(&((*pConfig)))) == ((27))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.doSurvivePowerCycles) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1050 , "sizeof(pConfig->generalConfig.doSurvivePowerCycles) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveDisableFtl))) - (uint8_t*)(&((*pConfig)))) == ((28))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1051 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveDisableFtl))) - (uint8_t*)(&((*pConfig)))) == ((28))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.mbReviveDisableFtl) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1051 , "sizeof(pConfig->generalConfig.mbReviveDisableFtl) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.drdOpbBitmap))) - (uint8_t*)(&((*pConfig)))) == ((30))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1052 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.drdOpbBitmap))) - (uint8_t*)(&((*pConfig)))) == ((30))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.drdOpbBitmap) == (2)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1052 , "sizeof(pConfig->generalConfig.drdOpbBitmap) == (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask_part1[0]))) - (uint8_t*)(&((*pConfig)))) == ((32))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1053 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask_part1[0]))) - (uint8_t*)(&((*pConfig)))) == ((32))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.planeAffinityMask_part1[0]) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1053 , "sizeof(pConfig->generalConfig.planeAffinityMask_part1[0]) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask_part1[1]))) - (uint8_t*)(&((*pConfig)))) == ((36))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1054 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask_part1[1]))) - (uint8_t*)(&((*pConfig)))) == ((36))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.planeAffinityMask_part1[1]) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1054 , "sizeof(pConfig->generalConfig.planeAffinityMask_part1[1]) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.specialOpstBitmap))) - (uint8_t*)(&((*pConfig)))) == ((40))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1055 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.specialOpstBitmap))) - (uint8_t*)(&((*pConfig)))) == ((40))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.specialOpstBitmap) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1055 , "sizeof(pConfig->generalConfig.specialOpstBitmap) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addr))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1058 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addr))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].addr) == (8)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1058 , "sizeof(pConfig->singleInjections[0].addr) == (8)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addrType))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1059 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addrType))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].addrType) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1059 , "sizeof(pConfig->singleInjections[0].addrType) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].nsId))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1060 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].nsId))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].nsId) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1060 , "sizeof(pConfig->singleInjections[0].nsId) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].opToInject))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((10))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1061 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].opToInject))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].opToInject) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1061 , "sizeof(pConfig->singleInjections[0].opToInject) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].isValid))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((11))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1062 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].isValid))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].isValid) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1062 , "sizeof(pConfig->singleInjections[0].isValid) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((16))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1063 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1063 , "sizeof(pConfig->singleInjections[0].injParams) == (80)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.cooldownTime))) - (uint8_t*)(&((*pConfig)))) == ((48))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1066 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.cooldownTime))) - (uint8_t*)(&((*pConfig)))) == ((48))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.cooldownTime) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1066 , "sizeof(pConfig->restrictions.cooldownTime) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.consecutiveGap))) - (uint8_t*)(&((*pConfig)))) == ((52))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1067 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.consecutiveGap))) - (uint8_t*)(&((*pConfig)))) == ((52))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.consecutiveGap) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1067 , "sizeof(pConfig->restrictions.consecutiveGap) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.fullCS))) - (uint8_t*)(&((*pConfig)))) == ((56))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1068 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.fullCS))) - (uint8_t*)(&((*pConfig)))) == ((56))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.fullCS) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1068 , "sizeof(pConfig->restrictions.fullCS) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.multyDiesPfEnable))) - (uint8_t*)(&((*pConfig)))) == ((57))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1069 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.multyDiesPfEnable))) - (uint8_t*)(&((*pConfig)))) == ((57))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.multyDiesPfEnable) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1069 , "sizeof(pConfig->restrictions.multyDiesPfEnable) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.avoidRoOnMtmUecc))) - (uint8_t*)(&((*pConfig)))) == ((58))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1070 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.avoidRoOnMtmUecc))) - (uint8_t*)(&((*pConfig)))) == ((58))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.avoidRoOnMtmUecc) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1070 , "sizeof(pConfig->restrictions.avoidRoOnMtmUecc) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1073 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceEraseFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1073 , "sizeof(pConfig->allOpsChance.chanceEraseFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceXorRecDuringPfRecFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1074 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceXorRecDuringPfRecFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceXorRecDuringPfRecFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1074 , "sizeof(pConfig->allOpsChance.chanceXorRecDuringPfRecFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((2))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1075 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1075 , "sizeof(pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chancePsDecommissionRequests))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((3))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1076 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chancePsDecommissionRequests))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chancePsDecommissionRequests) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1076 , "sizeof(pConfig->allOpsChance.chancePsDecommissionRequests) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceProgParityPage))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1077 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceProgParityPage))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceProgParityPage) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1077 , "sizeof(pConfig->allOpsChance.chanceProgParityPage) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDstFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((5))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1078 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDstFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceDstFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1078 , "sizeof(pConfig->allOpsChance.chanceDstFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceUnrecXorRecRead))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1079 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceUnrecXorRecRead))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceUnrecXorRecRead) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1079 , "sizeof(pConfig->allOpsChance.chanceUnrecXorRecRead) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((7))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1080 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1080 , "sizeof(pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedWriteAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1081 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedWriteAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedWriteAbort) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1081 , "sizeof(pConfig->allOpsChance.chanceNestedWriteAbort) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1082 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedEraseAbort) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1082 , "sizeof(pConfig->allOpsChance.chanceNestedEraseAbort) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureDuringFnvm))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((10))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1083 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureDuringFnvm))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceEraseFailureDuringFnvm) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1083 , "sizeof(pConfig->allOpsChance.chanceEraseFailureDuringFnvm) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDrd))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((11))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1084 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDrd))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceDrd) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1084 , "sizeof(pConfig->allOpsChance.chanceDrd) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdDownShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((12))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1085 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdDownShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceSgdDownShift) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1085 , "sizeof(pConfig->allOpsChance.chanceSgdDownShift) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdUpShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((13))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1086 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdUpShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceSgdUpShift) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1086 , "sizeof(pConfig->allOpsChance.chanceSgdUpShift) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((336))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1089 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((336))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOST]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1089 , "sizeof(pConfig->operations[EI_OP_ID_HOST]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RMW]))) - (uint8_t*)(&((*pConfig)))) == ((408))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1090 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RMW]))) - (uint8_t*)(&((*pConfig)))) == ((408))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RMW]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1090 , "sizeof(pConfig->operations[EI_OP_ID_RMW]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FUA]))) - (uint8_t*)(&((*pConfig)))) == ((480))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1091 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FUA]))) - (uint8_t*)(&((*pConfig)))) == ((480))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_FUA]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1091 , "sizeof(pConfig->operations[EI_OP_ID_FUA]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_DEALLOC]))) - (uint8_t*)(&((*pConfig)))) == ((552))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1092 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_DEALLOC]))) - (uint8_t*)(&((*pConfig)))) == ((552))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_DEALLOC]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1092 , "sizeof(pConfig->operations[EI_OP_ID_DEALLOC]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG]))) - (uint8_t*)(&((*pConfig)))) == ((624))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1093 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG]))) - (uint8_t*)(&((*pConfig)))) == ((624))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1093 , "sizeof(pConfig->operations[EI_OP_ID_LOG]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLA]))) - (uint8_t*)(&((*pConfig)))) == ((696))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1094 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLA]))) - (uint8_t*)(&((*pConfig)))) == ((696))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLA]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1094 , "sizeof(pConfig->operations[EI_OP_ID_RLA]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((768))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1095 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((768))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_MTM]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1095 , "sizeof(pConfig->operations[EI_OP_ID_MTM]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((840))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1096 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((840))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1096 , "sizeof(pConfig->operations[EI_OP_ID_XOR]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]))) - (uint8_t*)(&((*pConfig)))) == ((912))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1097 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]))) - (uint8_t*)(&((*pConfig)))) == ((912))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1097 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_ACTIVE_RS]))) - (uint8_t*)(&((*pConfig)))) == ((984))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1098 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_ACTIVE_RS]))) - (uint8_t*)(&((*pConfig)))) == ((984))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_ACTIVE_RS]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1098 , "sizeof(pConfig->operations[EI_OP_ID_ACTIVE_RS]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FLGP]))) - (uint8_t*)(&((*pConfig)))) == ((1056))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1099 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FLGP]))) - (uint8_t*)(&((*pConfig)))) == ((1056))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_FLGP]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1099 , "sizeof(pConfig->operations[EI_OP_ID_FLGP]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_SCAN_FWD]))) - (uint8_t*)(&((*pConfig)))) == ((1128))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1100 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_SCAN_FWD]))) - (uint8_t*)(&((*pConfig)))) == ((1128))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_SCAN_FWD]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1100 , "sizeof(pConfig->operations[EI_OP_ID_SCAN_FWD]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_READ_HEADERS]))) - (uint8_t*)(&((*pConfig)))) == ((1200))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1101 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_READ_HEADERS]))) - (uint8_t*)(&((*pConfig)))) == ((1200))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_READ_HEADERS]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1101 , "sizeof(pConfig->operations[EI_OP_ID_READ_HEADERS]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST_VC]))) - (uint8_t*)(&((*pConfig)))) == ((1272))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1102 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST_VC]))) - (uint8_t*)(&((*pConfig)))) == ((1272))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST_VC]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1102 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST_VC]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1344))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1103 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1344))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1103 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1416))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1104 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1416))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_MTM]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1104 , "sizeof(pConfig->operations[EI_OP_ID_RLC_MTM]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1488))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1105 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1488))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_XOR]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1105 , "sizeof(pConfig->operations[EI_OP_ID_RLC_XOR]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1560))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1106 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1560))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_HOST]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1106 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_HOST]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_RLC]))) - (uint8_t*)(&((*pConfig)))) == ((1632))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1107 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_RLC]))) - (uint8_t*)(&((*pConfig)))) == ((1632))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_RLC]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1107 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_RLC]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1704))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1108 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1704))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_MTM]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1108 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_MTM]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1776))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1109 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1776))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_XOR]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1109 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_XOR]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_IFS]))) - (uint8_t*)(&((*pConfig)))) == ((1848))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1110 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_IFS]))) - (uint8_t*)(&((*pConfig)))) == ((1848))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_IFS]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1110 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_IFS]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI]))) - (uint8_t*)(&((*pConfig)))) == ((1920))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1111 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI]))) - (uint8_t*)(&((*pConfig)))) == ((1920))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1111 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_BOOT]))) - (uint8_t*)(&((*pConfig)))) == ((1992))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1112 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_BOOT]))) - (uint8_t*)(&((*pConfig)))) == ((1992))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_BOOT]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1112 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_BOOT]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_DIR]))) - (uint8_t*)(&((*pConfig)))) == ((2064))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1113 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_DIR]))) - (uint8_t*)(&((*pConfig)))) == ((2064))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_DIR]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1113 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_DIR]) == (72)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS]))) - (uint8_t*)(&((*pConfig)))) == ((2136))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1114 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS]))) - (uint8_t*)(&((*pConfig)))) == ((2136))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS]) == (72)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1114 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS]) == (72)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].valid))) - (uint8_t*)(&((pConfig->operations[0])))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1117 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].valid))) - (uint8_t*)(&((pConfig->operations[0])))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].valid) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1117 , "sizeof(pConfig->operations[0].valid) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].isParticipantInBurst))) - (uint8_t*)(&((pConfig->operations[0])))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1118 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].isParticipantInBurst))) - (uint8_t*)(&((pConfig->operations[0])))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].isParticipantInBurst) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1118 , "sizeof(pConfig->operations[0].isParticipantInBurst) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnRead))) - (uint8_t*)(&((pConfig->operations[0])))) == ((2))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1119 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnRead))) - (uint8_t*)(&((pConfig->operations[0])))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].chanceToInitiateBurstOnRead) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1119 , "sizeof(pConfig->operations[0].chanceToInitiateBurstOnRead) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnProg))) - (uint8_t*)(&((pConfig->operations[0])))) == ((3))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1120 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnProg))) - (uint8_t*)(&((pConfig->operations[0])))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].chanceToInitiateBurstOnProg) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1120 , "sizeof(pConfig->operations[0].chanceToInitiateBurstOnProg) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1121 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1121 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((5))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1122 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1122 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1123 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1123 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((7))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1124 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1124 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1125 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1125 , "sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1126 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1126 , "sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((16))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1127 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1127 , "sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((17))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1128 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((17))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1128 , "sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((24))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1129 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1129 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((25))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1130 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((25))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1130 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((26))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1131 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((26))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1131 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((27))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1132 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((27))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1132 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((28))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1133 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((28))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1133 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((32))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1134 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((32))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1134 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((33))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1135 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((33))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1135 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((34))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1136 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((34))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1136 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opidSpecificChances))) - (uint8_t*)(&((pConfig->operations[0])))) == ((40))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1137 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opidSpecificChances))) - (uint8_t*)(&((pConfig->operations[0])))) == ((40))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opidSpecificChances) == (24)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1137 , "sizeof(pConfig->operations[0].opidSpecificChances) == (24)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((64))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1138 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1138 , "sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((65))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1139 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((65))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1139 , "sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations) == 6), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1142 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations) == 6");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons) == 16), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1143 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons) == 16");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1144 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1144 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1145 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1145 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((2))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1146 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1146 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((3))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1147 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1147 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1148 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1148 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((5))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1149 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1149 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1150 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1150 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((7))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1151 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1151 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1152 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1152 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1153 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1153 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((10))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1154 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1154 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((11))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1155 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1155 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((12))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1156 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1156 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((13))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1157 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1157 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((14))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1158 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((14))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1158 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((15))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1159 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((15))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1159 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((16))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1160 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1160 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((17))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1161 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((17))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1161 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((18))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1162 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((18))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1162 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((19))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1163 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((19))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1163 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((20))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1164 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((20))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1164 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((21))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1165 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((21))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1165 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes) == 2), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1168 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1169 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1169 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1170 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1170 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets) == 2), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1173 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons) == 2), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1174 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1175 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1175 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1176 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1176 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1177 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1177 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1178 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1178 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes) == 2), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1181 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1182 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1182 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1183 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1183 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes) == 2), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1186 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1187 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1187 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1188 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1188 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes) == 3), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1191 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes) == 3");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1192 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1192 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1193 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1193 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((2))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1194 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1194 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalRead)) - (uint8_t*)(&(pConfig->chances))) == (0)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1197 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalRead)) - (uint8_t*)(&(pConfig->chances))) == (0)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceXorRecRead)) - (uint8_t*)(&(pConfig->chances))) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1198 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceXorRecRead)) - (uint8_t*)(&(pConfig->chances))) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChancePfRecRead)) - (uint8_t*)(&(pConfig->chances))) == (32)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1199 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChancePfRecRead)) - (uint8_t*)(&(pConfig->chances))) == (32)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalProg)) - (uint8_t*)(&(pConfig->chances))) == (48)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1200 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalProg)) - (uint8_t*)(&(pConfig->chances))) == (48)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedProg)) - (uint8_t*)(&(pConfig->chances))) == (64)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1201 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedProg)) - (uint8_t*)(&(pConfig->chances))) == (64)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalErase)) - (uint8_t*)(&(pConfig->chances))) == (80)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1202 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalErase)) - (uint8_t*)(&(pConfig->chances))) == (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedErase)) - (uint8_t*)(&(pConfig->chances))) == (96)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1203 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedErase)) - (uint8_t*)(&(pConfig->chances))) == (96)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.cooldownTimeBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1206 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.cooldownTimeBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.cooldownTimeBurst) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1206 , "sizeof(pConfig->burstMode.cooldownTimeBurst) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.consecutiveGapBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1207 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.consecutiveGapBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.consecutiveGapBurst) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1207 , "sizeof(pConfig->burstMode.consecutiveGapBurst) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.maxInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1208 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.maxInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.maxInjectionsPerBurst) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1208 , "sizeof(pConfig->burstMode.maxInjectionsPerBurst) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.minInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((9))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1209 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.minInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.minInjectionsPerBurst) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1209 , "sizeof(pConfig->burstMode.minInjectionsPerBurst) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.isBackToBack))) - (uint8_t*)(&((pConfig->burstMode)))) == ((10))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1210 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.isBackToBack))) - (uint8_t*)(&((pConfig->burstMode)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.isBackToBack) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1210 , "sizeof(pConfig->burstMode.isBackToBack) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceToInitiateBurstOnErase))) - (uint8_t*)(&((pConfig->burstMode)))) == ((11))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1211 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceToInitiateBurstOnErase))) - (uint8_t*)(&((pConfig->burstMode)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.chanceToInitiateBurstOnErase) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1211 , "sizeof(pConfig->burstMode.chanceToInitiateBurstOnErase) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceEraseFailureDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((12))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1212 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceEraseFailureDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.chanceEraseFailureDuringBurst) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1212 , "sizeof(pConfig->burstMode.chanceEraseFailureDuringBurst) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.isSolePfDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((13))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1213 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.isSolePfDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.isSolePfDuringBurst) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1213 , "sizeof(pConfig->burstMode.isSolePfDuringBurst) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1216 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0]) == (12)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1216 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0]) == (12)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0][0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1217 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0][0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0][0]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1217 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0][0]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0][1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((1))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1218 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[0][1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0][1]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1218 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[0][1]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((12))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1219 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1]) == (12)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1219 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1]) == (12)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1][0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((12))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1220 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1][0]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1][0]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1220 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1][0]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1][1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((13))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1221 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2[1][1]))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1][1]) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1221 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2[1][1]) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1222 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1222 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chanceCapTestFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((36))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1223 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chanceCapTestFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((36))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.chanceCapTestFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1223 , "sizeof(pConfig->configArraysExtenstion.chanceCapTestFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chancePlpProcessFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((37))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1224 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chancePlpProcessFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((37))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.chancePlpProcessFailure) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1224 , "sizeof(pConfig->configArraysExtenstion.chancePlpProcessFailure) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1225 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eraseChances) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1225 , "sizeof(pConfig->configArraysExtenstion.eraseChances) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.eraseFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1226 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.eraseFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eraseChances.eraseFailureChances) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1226 , "sizeof(pConfig->configArraysExtenstion.eraseChances.eraseFailureChances) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.blockTypeFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((46))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1227 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.blockTypeFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((46))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eraseChances.blockTypeFailureChances) == (8)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1227 , "sizeof(pConfig->configArraysExtenstion.eraseChances.blockTypeFailureChances) == (8)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1230 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId) == (2)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1230 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId) == (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((2))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1231 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId) == (2)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1231 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId) == (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpChance))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1232 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpChance))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpChance) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1232 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpChance) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((5))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1233 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1233 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1234 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1234 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((7))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1235 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1235 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1236 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds) == (2)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1236 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds) == (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((10))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1237 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1237 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1240 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.failureType) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1240 , "sizeof(pConfig->singleInjections[0].injParams.read.failureType) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.triggerRlc))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1241 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.triggerRlc))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.triggerRlc) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1241 , "sizeof(pConfig->singleInjections[0].injParams.read.triggerRlc) == (1)");                         "BullseyeCoverage restore"; } ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failurePerFmuMap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((8))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1243 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failurePerFmuMap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.failurePerFmuMap) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1243 , "sizeof(pConfig->singleInjections[0].injParams.read.failurePerFmuMap) == (16)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1246 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.failureType) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1246 , "sizeof(pConfig->singleInjections[0].injParams.prog.failureType) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1247 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1247 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((20))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1248 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((20))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList) == (32)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1248 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList) == (32)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((52))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1249 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((52))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList) == (16)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1249 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((68))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1250 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((68))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1250 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListReadSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((69))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1251 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListReadSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((69))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedListReadSize) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1251 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedListReadSize) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((70))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1252 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((70))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.doInjectMultiplane) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1252 , "sizeof(pConfig->singleInjections[0].injParams.prog.doInjectMultiplane) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.isParityPage))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((71))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1253 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.isParityPage))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((71))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.isParityPage) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1253 , "sizeof(pConfig->singleInjections[0].injParams.prog.isParityPage) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.EPWRbitmap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((72))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1254 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.EPWRbitmap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((72))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.EPWRbitmap) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1254 , "sizeof(pConfig->singleInjections[0].injParams.prog.EPWRbitmap) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((76))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1255 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((76))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1255 , "sizeof(pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs) == (1)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1258 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.failureType) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1258 , "sizeof(pConfig->singleInjections[0].injParams.erase.failureType) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1259 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1259 , "sizeof(pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((5))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1260 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.doInjectMultiplane) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1260 , "sizeof(pConfig->singleInjections[0].injParams.erase.doInjectMultiplane) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1261 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1261 , "sizeof(pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.sgdHeaderErase))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((7))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1262 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.sgdHeaderErase))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.sgdHeaderErase) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1262 , "sizeof(pConfig->singleInjections[0].injParams.erase.sgdHeaderErase) == (4)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1265 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1265 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap) == (4)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1266 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin) == (2)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1266 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin) == (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1267 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber) == (1)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1267 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber) == (1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.size))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((64))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1268 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.size))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.size) == (4)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1268 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.size) == (4)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1271 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.planeAffinityMask_part2))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2) == (24)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1271 , "sizeof(pConfig->configArraysExtenstion.planeAffinityMask_part2) == (24)");                         "BullseyeCoverage restore"; } ;
}

Status_t  __attribute__((section("CODE_SLOW")))  EI_ConfigInputValidation(const EI_Config_t *config)
{
   Status_t st;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1279 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidHeader(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1282 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;


   switch (config->generalConfig.confType)
   {
      case EI_CONF_TYPE_RANDOM:
         st = EI_i_ConfValidRandInjection(config);
         break;
      case EI_CONF_TYPE_SINGLE:
         st = EI_i_ConfValidSingleInjection(config);
         break;
      default:
         st = STATUS_ERROR;
         break;
   }

   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1298 , st); printf("\n");fflush( (&__iob_func()[1]) ); ; return (st);} ;

   return STATUS_OK;
}









BOOL32  __attribute__((section("CODE_SLOW")))  EI_Config_IsReadfailurePerFmuMapConfigure(const uint8_t* pFReadFailurePerFmuMap)
{
   uint8_t i;
   BOOL32 errorConfigured =  (0) ;

   for (i = 0; i <  ( (4)  * (4) ) ; i++)
   {
      if(!(pFReadFailurePerFmuMap[i] < EI_READ_FAILURE_LEVEL_TOTAL)) {return STATUS_ERROR;} ;

      if(!(pFReadFailurePerFmuMap[i] != EI_READ_FAILURE_LEVEL_SW_TH)) {return STATUS_ERROR;} ;


      if (pFReadFailurePerFmuMap[i] > EI_READ_FAILURE_LEVEL_NONE)
      {
         errorConfigured =  (1) ;
      }

   }

   return errorConfigured;
}

#line 1425 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
BOOL32 isFailureTypeInP2PPattern(EI_ProgFailureType_t failureType)
{
   return failureType == EI_PROG_FAILURE_TYPE_1WL_2PLANES ||
      failureType == EI_PROG_FAILURE_TYPE_2PLANES_WL2WL ||
      failureType == EI_PROG_FAILURE_TYPE_WL2WL_P2P;
}








void  __attribute__((section("CODE_SLOW")))  EI_ConfDisableP2PPatternInjections(EI_Config_t* config)
{

#line 1466 "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c"
   if (config->generalConfig.confType == EI_CONF_TYPE_RANDOM)
   {
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES]), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1468 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES]");                         "BullseyeCoverage restore"; } ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL]), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1469 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL]");                         "BullseyeCoverage restore"; } ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P]), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1470 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P]");                         "BullseyeCoverage restore"; } ;
   }
   else
   {
      { "BullseyeCoverage save off";                          _AssertImpl((int)(config->generalConfig.confType == EI_CONF_TYPE_SINGLE), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1474 , "config->generalConfig.confType == EI_CONF_TYPE_SINGLE");                         "BullseyeCoverage restore"; } ;
      for (int i = 0; i <  (6) ; i++)
      {
         if (config->singleInjections[i].isValid &&
            config->singleInjections[i].opToInject == EI_INJ_OP_PROG)
         {
            { "BullseyeCoverage save off";                          _AssertImpl((int)(!isFailureTypeInP2PPattern(config->singleInjections[i].injParams.prog.failureType)), "d:/gitrepo/atlas3_release/source/ftl/ei/src/ei_config.c" , 1480 , "!isFailureTypeInP2PPattern(config->singleInjections[i].injParams.prog.failureType)");                         "BullseyeCoverage restore"; } ;
         }
      }
   }
}
