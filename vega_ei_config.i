#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"

#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"

#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"

#line 708 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"
#pragma region Input Buffer SAL 1 compatibility macros

#line 1472 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"
#pragma endregion Input Buffer SAL 1 compatibility macros

#line 2880 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"


#line 2923 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"


#line 2953 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"



#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/concurrencysal.h"

#line 2971 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/sal.h"

#line 58 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#line 15 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#pragma pack(push,  8 )

#line 47 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#pragma warning(push)
#line 48 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#pragma warning(disable:    4514 4820 )

#line 63 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
        typedef unsigned int uintptr_t;








        typedef char* va_list;

#line 197 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#pragma warning(pop)
#line 198 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vadefs.h"
#pragma pack(pop)

#line 59 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"

#line 60 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
#pragma warning(push)
#line 61 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
#pragma warning(disable:    4514 4820 )

#line 96 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
__pragma(pack(push, 8 ))

#line 197 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
    typedef unsigned int     size_t;
    typedef int              ptrdiff_t;
    typedef int              intptr_t;









    typedef _Bool __vcrt_bool;

#line 228 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
    typedef unsigned short wchar_t;

#line 338 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
    void __cdecl __security_init_cookie(void);


        void __fastcall __security_check_cookie(   uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(void);

#line 349 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
extern uintptr_t __security_cookie;







__pragma(pack(pop))

#line 359 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime.h"
#pragma warning(pop)

#line 11 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"

__pragma(pack(push, 8 ))

#line 156 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
    typedef _Bool __crt_bool;

#line 269 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
    __declspec(dllimport)  void __cdecl _invalid_parameter(
         wchar_t const*,
         wchar_t const*,
         wchar_t const*,
               unsigned int,
               uintptr_t
        );


__declspec(dllimport)  void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport)  __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport)  void __cdecl _invoke_watson(
     wchar_t const* _Expression,
     wchar_t const* _FunctionName,
     wchar_t const* _FileName,
           unsigned int _LineNo,
           uintptr_t _Reserved);

#line 511 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
     int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t;

typedef struct _Mbstatet
{
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;

#line 552 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
        typedef __time64_t time_t;









    typedef size_t rsize_t;

#line 2011 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt.h"
__pragma(pack(pop))

#line 13 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h"

#line 12 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h"
__pragma(pack(push, 8 ))

#line 83 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h"


    __declspec(noinline) __inline unsigned __int64*  __cdecl  __local_stdio_printf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }





    __declspec(noinline) __inline unsigned __int64*  __cdecl  __local_stdio_scanf_options(void)
    {
        static unsigned __int64 _OptionsStorage;
        return &_OptionsStorage;
    }

#line 124 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_stdio_config.h"
__pragma(pack(pop))

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

__pragma(pack(push, 8 ))









    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;


__declspec(dllimport)  FILE* __cdecl __acrt_iob_func(unsigned _Ix);

#line 47 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __declspec(dllimport)  wint_t __cdecl fgetwc(
         FILE* _Stream
        );


    __declspec(dllimport)  wint_t __cdecl _fgetwchar(void);


    __declspec(dllimport)  wint_t __cdecl fputwc(
            wchar_t _Character,
         FILE*   _Stream);


    __declspec(dllimport)  wint_t __cdecl _fputwchar(
         wchar_t _Character
        );


    __declspec(dllimport)  wint_t __cdecl getwc(
         FILE* _Stream
        );


    __declspec(dllimport)  wint_t __cdecl getwchar(void);




    __declspec(dllimport)  wchar_t* __cdecl fgetws(
         wchar_t* _Buffer,
                                 int      _BufferCount,
                              FILE*    _Stream
        );


    __declspec(dllimport)  int __cdecl fputws(
          wchar_t const* _Buffer,
         FILE*          _Stream
        );



    __declspec(dllimport)  wchar_t* __cdecl _getws_s(
         wchar_t* _Buffer,
                                 size_t   _BufferCount
        );



#line 101 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __declspec(dllimport)  wint_t __cdecl putwc(
            wchar_t _Character,
         FILE*   _Stream
        );


    __declspec(dllimport)  wint_t __cdecl putwchar(
         wchar_t _Character
        );


    __declspec(dllimport)  int __cdecl _putws(
         wchar_t const* _Buffer
        );


    __declspec(dllimport)  wint_t __cdecl ungetwc(
            wint_t _Character,
         FILE*  _Stream
        );


    __declspec(dllimport)  FILE * __cdecl _wfdopen(
           int            _FileHandle,
         wchar_t const* _Mode
        );


    __declspec(dllimport)  FILE* __cdecl _wfopen(
         wchar_t const* _FileName,
         wchar_t const* _Mode
        );


    __declspec(dllimport)  errno_t __cdecl _wfopen_s(
         FILE**         _Stream,
                            wchar_t const* _FileName,
                            wchar_t const* _Mode
        );



    __declspec(dllimport)  FILE* __cdecl _wfreopen(
          wchar_t const* _FileName,
          wchar_t const* _Mode,
         FILE*          _OldStream
        );


    __declspec(dllimport)  errno_t __cdecl _wfreopen_s(
         FILE**         _Stream,
                            wchar_t const* _FileName,
                            wchar_t const* _Mode,
                           FILE*          _OldStream
        );


    __declspec(dllimport)  FILE* __cdecl _wfsopen(
         wchar_t const* _FileName,
         wchar_t const* _Mode,
           int            _ShFlag
        );

    __declspec(dllimport)  void __cdecl _wperror(
         wchar_t const* _ErrorMessage
        );




        __declspec(dllimport)  FILE* __cdecl _wpopen(
             wchar_t const* _Command,
             wchar_t const* _Mode
            );



    __declspec(dllimport)  int __cdecl _wremove(
         wchar_t const* _FileName
        );

#line 183 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma push_macro("_wtempnam")



    __declspec(dllimport)   __declspec(allocator)  wchar_t* __cdecl _wtempnam(
         wchar_t const* _Directory,
         wchar_t const* _FilePrefix
        );

#line 192 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma pop_macro("_wtempnam")



    __declspec(dllimport)  errno_t __cdecl _wtmpnam_s(
         wchar_t* _Buffer,
                                 size_t   _BufferCount
        );



#line 207 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
    __declspec(dllimport) wchar_t* __cdecl _wtmpnam( wchar_t *_Buffer);

#line 220 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __declspec(dllimport)  wint_t __cdecl _fgetwc_nolock(
         FILE* _Stream
        );


    __declspec(dllimport)  wint_t __cdecl _fputwc_nolock(
            wchar_t _Character,
         FILE*   _Stream
        );


    __declspec(dllimport)  wint_t __cdecl _getwc_nolock(
         FILE* _Stream
        );


    __declspec(dllimport)  wint_t __cdecl _putwc_nolock(
            wchar_t _Character,
         FILE*   _Stream
        );


    __declspec(dllimport)  wint_t __cdecl _ungetwc_nolock(
            wint_t _Character,
         FILE*  _Stream
        );

#line 268 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __declspec(dllimport)  int __cdecl __stdio_common_vfwprintf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vfwprintf_s(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vfwprintf_p(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __inline  int  __cdecl  _vfwprintf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __stdio_common_vfwprintf( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vfwprintf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vfwprintf_s_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __stdio_common_vfwprintf_s( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vfwprintf_s(
                                   FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )



        {
            return _vfwprintf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _vfwprintf_p_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return __stdio_common_vfwprintf_p( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  _vfwprintf_p(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_p_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vwprintf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return _vfwprintf_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vwprintf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return _vfwprintf_s_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vwprintf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )



        {
            return _vfwprintf_s_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _vwprintf_p_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return _vfwprintf_p_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  _vwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwprintf_p_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _fwprintf_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  fwprintf(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _fwprintf_s_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  fwprintf_s(
                                   FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfwprintf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _fwprintf_p_l(
                                         FILE*          const _Stream,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _fwprintf_p(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_p_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _wprintf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  wprintf(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _wprintf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_s_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  wprintf_s(
                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfwprintf_s_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _wprintf_p_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_p_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _wprintf_p(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwprintf_p_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }









    __declspec(dllimport)  int __cdecl __stdio_common_vfwscanf(
                                           unsigned __int64 _Options,
                                        FILE*            _Stream,
            wchar_t const*   _Format,
                                       _locale_t        _Locale,
                                               va_list          _ArgList
        );


    __inline  int  __cdecl  _vfwscanf_l(
         FILE*                                const _Stream,
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ()) ,
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vfwscanf(
         FILE*                                const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vfwscanf_s_l(
                               FILE*          const _Stream,
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return __stdio_common_vfwscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Stream, _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vfwscanf_s(
                                   FILE*          const _Stream,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )



        {
            return _vfwscanf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
        }




    __inline  int  __cdecl  _vwscanf_l(
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vwscanf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vwscanf_s_l(
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return _vfwscanf_s_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vwscanf_s(
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )



        {
            return _vfwscanf_s_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _fwscanf_l(
                                        FILE*          const _Stream,
            wchar_t const* const _Format,
                                       _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  fwscanf(
                              FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _fwscanf_s_l(
                                          FILE*          const _Stream,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  fwscanf_s(
                                    FILE*          const _Stream,
                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfwscanf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _wscanf_l(
            wchar_t const* const _Format,
                                       _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  wscanf(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _wscanf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfwscanf_s_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  wscanf_s(
                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfwscanf_s_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }

#line 1001 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"


    __declspec(dllimport)  int __cdecl __stdio_common_vswprintf(
                                            unsigned __int64 _Options,
                wchar_t*         _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );



    __declspec(dllimport)  int __cdecl __stdio_common_vswprintf_s(
                                            unsigned __int64 _Options,
                    wchar_t*         _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );



    __declspec(dllimport)  int __cdecl __stdio_common_vsnwprintf_s(
                                            unsigned __int64 _Options,
                wchar_t*         _Buffer,
                                            size_t           _BufferCount,
                                            size_t           _MaxCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );



    __declspec(dllimport)  int __cdecl __stdio_common_vswprintf_p(
                                            unsigned __int64 _Options,
                    wchar_t*         _Buffer,
                                            size_t           _BufferCount,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );



    __inline  int  __cdecl  _vsnwprintf_l(
            wchar_t*       const _Buffer,
                                                 size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                     va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options())  |  (1ULL << 0) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }

#line 1067 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1068 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4793)



    __inline  int  __cdecl  _vsnwprintf_s_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                                      size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
                                                          va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vsnwprintf_s(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsnwprintf_s(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                                      size_t         const _MaxCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )



    {
        return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format,  ((void *)0) , _ArgList);
    }


    __inline    int __cdecl  _snwprintf(     wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...);                  __inline    int __cdecl  _vsnwprintf(     wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);

#line 1118 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)



    __inline  int  __cdecl  _vsnwprintf(
            wchar_t*       _Buffer,
                                                 size_t         _BufferCount,
                           wchar_t const* _Format,
                                                     va_list        _ArgList
        )



    {
#line 1132 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1133 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        return _vsnwprintf_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
#line 1135 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)
    }




#line 1148 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"


    __inline  int  __cdecl  _vswprintf_c_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
                                                          va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vswprintf_c(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vswprintf_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
                                                          va_list              _ArgList
        )



    {
#line 1198 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1199 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#line 1201 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)
    }




    __inline  int  __cdecl  __vswprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline  int  __cdecl  _vswprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
                                         va_list              _ArgList
        )



    {
        return _vswprintf_l(_Buffer, (size_t)-1, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  vswprintf(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                          va_list              _ArgList
        )



    {
        return _vswprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vswprintf_s_l(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                      va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_s(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }





        __inline  int  __cdecl  vswprintf_s(
               wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                wchar_t const* const _Format,
                                                          va_list              _ArgList
            )



        {
            return _vswprintf_s_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        }






#line 1300 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"


    __inline  int  __cdecl  _vswprintf_p_l(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                              _locale_t      const _Locale,
                                                      va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vswprintf_p(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                            wchar_t const* const _Format,
                                                      va_list              _ArgList
        )



    {
        return _vswprintf_p_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vscwprintf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf(
            (*__local_stdio_printf_options())  |  (1ULL << 1) ,
            ((void *)0) , 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vscwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vscwprintf_l(_Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vscwprintf_p_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                                va_list              _ArgList
        )



    {
        int const _Result = __stdio_common_vswprintf_p(
            (*__local_stdio_printf_options())  |  (1ULL << 1) ,
            ((void *)0) , 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vscwprintf_p(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )



    {
        return _vscwprintf_p_l(_Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  __swprintf_l(
                  wchar_t*       const _Buffer,
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swprintf_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swprintf(
           wchar_t*       const _Buffer,
               wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = __vswprintf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  swprintf(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 1483 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)

#line 1486 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable:4793 4996)

    __inline    int __cdecl  __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...);                  __inline    int __cdecl  __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);

#line 1497 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
    __inline    int __cdecl  _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...);                  __inline    int __cdecl  _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);

#line 1504 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)



    __inline  int  __cdecl  _swprintf_s_l(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  swprintf_s(
               wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }






#line 1557 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"


    __inline  int  __cdecl  _swprintf_p_l(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                  wchar_t const* const _Format,
                                              _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swprintf_p(
           wchar_t*       const _Buffer,
                                                  size_t         const _BufferCount,
                            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swprintf_c_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swprintf_c(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwprintf_l(
            wchar_t*       const _Buffer,
                                                 size_t         const _BufferCount,
                 wchar_t const* const _Format,
                                             _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 1655 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1656 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#line 1658 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwprintf(
            wchar_t*       _Buffer,
                                                 size_t         _BufferCount,
                           wchar_t const* _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 1680 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1681 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
#line 1683 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwprintf_s_l(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                                      size_t         const _MaxCount,
                      wchar_t const* const _Format,
                                                  _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwprintf_s(
           wchar_t*       const _Buffer,
                                                      size_t         const _BufferCount,
                                                      size_t         const _MaxCount,
                                wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




#line 1741 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __inline  int  __cdecl  _scwprintf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _scwprintf(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscwprintf_l(_Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _scwprintf_p_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _scwprintf_p(
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscwprintf_p_l(_Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 1816 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 1817 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4141 4412 4793 4996 6054)

#line 1875 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)

#line 1891 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"

    __declspec(dllimport)  int __cdecl __stdio_common_vswscanf(
                                           unsigned __int64 _Options,
                  wchar_t const*   _Buffer,
                                           size_t           _BufferCount,
            wchar_t const*   _Format,
                                       _locale_t        _Locale,
                                               va_list          _ArgList
        );



    __inline  int  __cdecl  _vswscanf_l(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) ,
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }




    __inline  int  __cdecl  vswscanf(
                                wchar_t const* _Buffer,
            wchar_t const* _Format,
                                      va_list        _ArgList
        )



    {
        return _vswscanf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vswscanf_s_l(
                                wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                              _locale_t      const _Locale,
                                      va_list              _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }






        __inline  int  __cdecl  vswscanf_s(
                                    wchar_t const* const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            )



        {
            return _vswscanf_s_l(_Buffer, _Format,  ((void *)0) , _ArgList);
        }






#line 1979 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"


    __inline  int  __cdecl  _vsnwscanf_l(
                  wchar_t const* const _Buffer,
                                           size_t         const _BufferCount,
            wchar_t const* const _Format,
                                       _locale_t      const _Locale,
                                               va_list              _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }




    __inline  int  __cdecl  _vsnwscanf_s_l(
                    wchar_t const* const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                 va_list              _ArgList
        )



    {
        return __stdio_common_vswscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);
    }




    __inline  int  __cdecl  _swscanf_l(
                                         wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                       _locale_t            _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  swscanf(
                               wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswscanf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _swscanf_s_l(
                                           wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }






        __inline  int  __cdecl  swscanf_s(
                                     wchar_t const* const _Buffer,
                wchar_t const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vswscanf_s_l(_Buffer, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }






    __inline  int  __cdecl  _snwscanf_l(
                  wchar_t const* const _Buffer,
                                           size_t         const _BufferCount,
            wchar_t const* const _Format,
                                       _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 2115 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 2116 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#line 2118 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwscanf(
            wchar_t const* const _Buffer,
                                     size_t         const _BufferCount,
                wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 2140 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(push)
#line 2141 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(disable: 4996)
        _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
#line 2143 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwscanf_s_l(
                    wchar_t const* const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snwscanf_s(
             wchar_t const* const _Buffer,
                                      size_t         const _BufferCount,
               wchar_t const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 2198 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdio.h"
__pragma(pack(pop))

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

__pragma(pack(push, 8 ))

#line 69 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
typedef __int64 fpos_t;






    __declspec(dllimport)  errno_t __cdecl _get_stream_buffer_pointers(
              FILE*   _Stream,
         char*** _Base,
         char*** _Pointer,
         int**   _Count
        );










        __declspec(dllimport)  errno_t __cdecl clearerr_s(
             FILE* _Stream
            );


        __declspec(dllimport)  errno_t __cdecl fopen_s(
             FILE**      _Stream,
                                char const* _FileName,
                                char const* _Mode
            );



        __declspec(dllimport)  size_t __cdecl fread_s(
               void*  _Buffer,
                                   size_t _BufferSize,
                                                                           size_t _ElementSize,
                                                                           size_t _ElementCount,
                                                                        FILE*  _Stream
            );


        __declspec(dllimport)  errno_t __cdecl freopen_s(
             FILE**      _Stream,
                                char const* _FileName,
                                char const* _Mode,
                               FILE*       _OldStream
            );


        __declspec(dllimport)  char* __cdecl gets_s(
             char*   _Buffer,
                              rsize_t _Size
            );


        __declspec(dllimport)  errno_t __cdecl tmpfile_s(
                FILE** _Stream
            );



        __declspec(dllimport)  errno_t __cdecl tmpnam_s(
             char*   _Buffer,
                              rsize_t _Size
            );



    __declspec(dllimport)  void __cdecl clearerr(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl fclose(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _fcloseall(void);


    __declspec(dllimport)  FILE* __cdecl _fdopen(
           int         _FileHandle,
         char const* _Mode
        );


    __declspec(dllimport)  int __cdecl feof(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl ferror(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl fflush(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl fgetc(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _fgetchar(void);



    __declspec(dllimport)  int __cdecl fgetpos(
         FILE*   _Stream,
           fpos_t* _Position
        );



    __declspec(dllimport)  char* __cdecl fgets(
         char* _Buffer,
                              int   _MaxCount,
                           FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _fileno(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _flushall(void);


    __declspec(dllimport)  FILE* __cdecl fopen(
         char const* _FileName,
         char const* _Mode
        );




    __declspec(dllimport)  int __cdecl fputc(
            int   _Character,
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _fputchar(
         int _Character
        );



    __declspec(dllimport)  int __cdecl fputs(
          char const* _Buffer,
         FILE*       _Stream
        );


    __declspec(dllimport)  size_t __cdecl fread(
         void*  _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                  FILE*  _Stream
        );



    __declspec(dllimport)  FILE* __cdecl freopen(
          char const* _FileName,
          char const* _Mode,
         FILE*       _Stream
        );


    __declspec(dllimport)  FILE* __cdecl _fsopen(
         char const* _FileName,
         char const* _Mode,
           int         _ShFlag
        );



    __declspec(dllimport)  int __cdecl fsetpos(
         FILE*         _Stream,
            fpos_t const* _Position
        );



    __declspec(dllimport)  int __cdecl fseek(
         FILE* _Stream,
            long  _Offset,
            int   _Origin
        );



    __declspec(dllimport)  int __cdecl _fseeki64(
         FILE*   _Stream,
            __int64 _Offset,
            int     _Origin
        );



    __declspec(dllimport)  long __cdecl ftell(
         FILE* _Stream
        );



    __declspec(dllimport)  __int64 __cdecl _ftelli64(
         FILE* _Stream
        );


    __declspec(dllimport)  size_t __cdecl fwrite(
         void const* _Buffer,
                                                   size_t      _ElementSize,
                                                   size_t      _ElementCount,
                                                FILE*       _Stream
        );



    __declspec(dllimport)  int __cdecl getc(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl getchar(void);


    __declspec(dllimport)  int __cdecl _getmaxstdio(void);



#line 315 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __declspec(dllimport)  int __cdecl _getw(
         FILE* _Stream
        );

    __declspec(dllimport)  void __cdecl perror(
         char const* _ErrorMessage
        );





        __declspec(dllimport)  int __cdecl _pclose(
             FILE* _Stream
            );


        __declspec(dllimport)  FILE* __cdecl _popen(
             char const* _Command,
             char const* _Mode
            );





    __declspec(dllimport)  int __cdecl putc(
            int   _Character,
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl putchar(
         int _Character
        );


    __declspec(dllimport)  int __cdecl puts(
         char const* _Buffer
        );



    __declspec(dllimport)  int __cdecl _putw(
            int   _Word,
         FILE* _Stream
        );

    __declspec(dllimport)  int __cdecl remove(
         char const* _FileName
        );


    __declspec(dllimport)  int __cdecl rename(
         char const* _OldFileName,
         char const* _NewFileName
        );

    __declspec(dllimport)  int __cdecl _unlink(
         char const* _FileName
        );

#line 387 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
    __declspec(dllimport)  void __cdecl rewind(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _rmtmp(void);


    __declspec(dllimport)  void __cdecl setbuf(
                                                     FILE* _Stream,
            char* _Buffer
        );


    __declspec(dllimport)  int __cdecl _setmaxstdio(
         int _Maximum
        );



    __declspec(dllimport)  int __cdecl setvbuf(
                              FILE*  _Stream,
           char*  _Buffer,
                                 int    _Mode,
                                 size_t _Size
        );

#line 419 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __declspec(dllimport)   __declspec(allocator)  char* __cdecl _tempnam(
         char const* _DirectoryName,
         char const* _FilePrefix
        );

#line 429 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __declspec(dllimport)  FILE* __cdecl tmpfile(void);



#line 438 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 439 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 28726)
__declspec(dllimport) char* __cdecl tmpnam( char *_Buffer);
#line 445 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)



    __declspec(dllimport)  int __cdecl ungetc(
            int   _Character,
         FILE* _Stream
        );








    __declspec(dllimport)  void __cdecl _lock_file(
         FILE* _Stream
        );

    __declspec(dllimport)  void __cdecl _unlock_file(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl _fclose_nolock(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl _fflush_nolock(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl _fgetc_nolock(
         FILE* _Stream
        );



    __declspec(dllimport)  int __cdecl _fputc_nolock(
            int   _Character,
         FILE* _Stream
        );


    __declspec(dllimport)  size_t __cdecl _fread_nolock(
         void*  _Buffer,
                                                     size_t _ElementSize,
                                                     size_t _ElementCount,
                                                  FILE*  _Stream
        );



    __declspec(dllimport)  size_t __cdecl _fread_nolock_s(
         void*  _Buffer,
                             size_t _BufferSize,
                                                                     size_t _ElementSize,
                                                                     size_t _ElementCount,
                                                                  FILE*  _Stream
        );


    __declspec(dllimport)  int __cdecl _fseek_nolock(
         FILE* _Stream,
            long  _Offset,
            int   _Origin
        );


    __declspec(dllimport)  int __cdecl _fseeki64_nolock(
         FILE*   _Stream,
            __int64 _Offset,
            int     _Origin
        );


    __declspec(dllimport)  long __cdecl _ftell_nolock(
         FILE* _Stream
        );


    __declspec(dllimport)  __int64 __cdecl _ftelli64_nolock(
         FILE* _Stream
        );


    __declspec(dllimport)  size_t __cdecl _fwrite_nolock(
         void const* _Buffer,
                                                   size_t      _ElementSize,
                                                   size_t      _ElementCount,
                                                FILE*       _Stream
        );


    __declspec(dllimport)  int __cdecl _getc_nolock(
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _putc_nolock(
            int   _Character,
         FILE* _Stream
        );


    __declspec(dllimport)  int __cdecl _ungetc_nolock(
            int   _Character,
         FILE* _Stream
        );

#line 587 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
    __declspec(dllimport)  int* __cdecl __p__commode(void);

#line 607 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
    __declspec(dllimport)  int __cdecl __stdio_common_vfprintf(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );

    __declspec(dllimport)  int __cdecl __stdio_common_vfprintf_s(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vfprintf_p(
                                            unsigned __int64 _Options,
                                         FILE*            _Stream,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __inline  int  __cdecl  _vfprintf_l(
          FILE*       const _Stream,
           char const* const _Format,
         _locale_t   const _Locale,
                 va_list           _ArgList
        )



    {
        return __stdio_common_vfprintf( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vfprintf(
                               FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vfprintf_s_l(
          FILE*       const _Stream,
           char const* const _Format,
         _locale_t   const _Locale,
                 va_list           _ArgList
        )



    {
        return __stdio_common_vfprintf_s( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vfprintf_s(
                                   FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )



        {
            return _vfprintf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _vfprintf_p_l(
          FILE*       const _Stream,
           char const* const _Format,
         _locale_t   const _Locale,
                 va_list           _ArgList
        )



    {
        return __stdio_common_vfprintf_p( (*__local_stdio_printf_options()) , _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  _vfprintf_p(
                               FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_p_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vprintf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        return _vfprintf_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vprintf_s_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        return _vfprintf_s_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vprintf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )



        {
            return _vfprintf_s_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _vprintf_p_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        return _vfprintf_p_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  _vprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfprintf_p_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _fprintf_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  fprintf(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }


    __declspec(dllimport)  int __cdecl _set_printf_count_output(
         int _Value
        );

    __declspec(dllimport)  int __cdecl _get_printf_count_output(void);


    __inline  int  __cdecl  _fprintf_s_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  fprintf_s(
                                   FILE*       const _Stream,
                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfprintf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _fprintf_p_l(
                                         FILE*       const _Stream,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _fprintf_p(
                               FILE*       const _Stream,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_p_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _printf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  printf(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _printf_s_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_s_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  printf_s(
                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfprintf_s_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _printf_p_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_p_l( (__acrt_iob_func(1)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _printf_p(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfprintf_p_l( (__acrt_iob_func(1)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }








    __declspec(dllimport)  int __cdecl __stdio_common_vfscanf(
                                           unsigned __int64 _Options,
                                        FILE*            _Stream,
            char const*      _Format,
                                       _locale_t        _Locale,
                                               va_list          _Arglist
        );


    __inline  int  __cdecl  _vfscanf_l(
                               FILE*       const _Stream,
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ()) ,
            _Stream, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vfscanf(
                               FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_l(_Stream, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vfscanf_s_l(
                               FILE*       const _Stream,
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return __stdio_common_vfscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Stream, _Format, _Locale, _ArgList);
    }






        __inline  int  __cdecl  vfscanf_s(
                                   FILE*       const _Stream,
                char const* const _Format,
                                          va_list           _ArgList
            )



        {
            return _vfscanf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _vscanf_l(
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vscanf(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vscanf_s_l(
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return _vfscanf_s_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
    }





        __inline  int  __cdecl  vscanf_s(
                char const* const _Format,
                                          va_list           _ArgList
            )



        {
            return _vfscanf_s_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
        }





    __inline  int  __cdecl  _fscanf_l(
                                        FILE*       const _Stream,
            char const* const _Format,
                                       _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  fscanf(
                              FILE*       const _Stream,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_l(_Stream, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _fscanf_s_l(
                                          FILE*       const _Stream,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  fscanf_s(
                                    FILE*       const _Stream,
                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfscanf_s_l(_Stream, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }





    __inline  int  __cdecl  _scanf_l(
            char const* const _Format,
                                       _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  scanf(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _scanf_s_l(
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vfscanf_s_l( (__acrt_iob_func(0)) , _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  scanf_s(
                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vfscanf_s_l( (__acrt_iob_func(0)) , _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }

#line 1336 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __declspec(dllimport)  int __cdecl __stdio_common_vsprintf(
                                            unsigned __int64 _Options,
                char*            _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vsprintf_s(
                                            unsigned __int64 _Options,
                    char*            _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vsnprintf_s(
                                            unsigned __int64 _Options,
                char*            _Buffer,
                                            size_t           _BufferCount,
                                            size_t           _MaxCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );


    __declspec(dllimport)  int __cdecl __stdio_common_vsprintf_p(
                                            unsigned __int64 _Options,
                    char*            _Buffer,
                                            size_t           _BufferCount,
            char const*      _Format,
                                        _locale_t        _Locale,
                                                va_list          _ArgList
        );



    __inline  int  __cdecl  _vsnprintf_l(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                 char const* const _Format,
                                             _locale_t   const _Locale,
                                                     va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options())  |  (1ULL << 0) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsnprintf(
            char*       const _Buffer,
                                                size_t      const _BufferCount,
                          char const* const _Format,
                                                    va_list           _ArgList
        )



    {
#line 1410 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1411 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        return _vsnprintf_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
#line 1413 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)
    }

#line 1428 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


    __inline  int  __cdecl  vsnprintf(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options())  |  (1ULL << 1) ,
            _Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsprintf_l(
           char*       const _Buffer,
                                   char const* const _Format,
                                 _locale_t   const _Locale,
                                         va_list           _ArgList
        )



    {
#line 1460 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1461 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
#line 1463 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)
    }




    __inline  int  __cdecl  vsprintf(
           char*       const _Buffer,
               char const* const _Format,
                                         va_list           _ArgList
        )



    {
#line 1478 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1479 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        return _vsnprintf_l(_Buffer, (size_t)-1, _Format,  ((void *)0) , _ArgList);
#line 1481 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)
    }




    __inline  int  __cdecl  _vsprintf_s_l(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                  char const* const _Format,
                                              _locale_t   const _Locale,
                                                      va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_s(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }






        __inline  int  __cdecl  vsprintf_s(
               char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                char const* const _Format,
                                                          va_list           _ArgList
            )



        {
            return _vsprintf_s_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        }




#line 1534 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


    __inline  int  __cdecl  _vsprintf_p_l(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                  char const* const _Format,
                                              _locale_t   const _Locale,
                                                      va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsprintf_p(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                            char const* const _Format,
                                                      va_list           _ArgList
        )



    {
        return _vsprintf_p_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _vsnprintf_s_l(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                                      size_t      const _MaxCount,
                      char const* const _Format,
                                                  _locale_t   const _Locale,
                                                          va_list          _ArgList
        )



    {
        int const _Result = __stdio_common_vsnprintf_s(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsnprintf_s(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                                      size_t      const _MaxCount,
                                char const* const _Format,
                                                          va_list           _ArgList
        )



    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format,  ((void *)0) , _ArgList);
    }




#line 1621 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


        __inline  int  __cdecl  vsnprintf_s(
               char*       const _Buffer,
                                                          size_t      const _BufferCount,
                                                          size_t      const _MaxCount,
                                    char const* const _Format,
                                                              va_list           _ArgList
            )



        {
            return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format,  ((void *)0) , _ArgList);
        }




#line 1649 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __inline  int  __cdecl  _vscprintf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options())  |  (1ULL << 1) ,
            ((void *)0) , 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline  int  __cdecl  _vscprintf(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vscprintf_l(_Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vscprintf_p_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf_p(
            (*__local_stdio_printf_options())  |  (1ULL << 1) ,
            ((void *)0) , 0, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }



    __inline  int  __cdecl  _vscprintf_p(
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vscprintf_p_l(_Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vsnprintf_c_l(
                  char*       const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
                                                va_list           _ArgList
        )



    {
        int const _Result = __stdio_common_vsprintf(
            (*__local_stdio_printf_options()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        return _Result < 0 ? -1 : _Result;
    }




    __inline  int  __cdecl  _vsnprintf_c(
         char*       const _Buffer,
                                   size_t      const _BufferCount,
             char const* const _Format,
                                       va_list           _ArgList
        )



    {
        return _vsnprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
    }




    __inline  int  __cdecl  _sprintf_l(
                  char*       const _Buffer,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 1762 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1763 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
#line 1765 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  sprintf(
           char*       const _Buffer,
               char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 1786 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1787 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        _Result = _vsprintf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
#line 1789 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 1796 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1797 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
#line 1798 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 28719)
#line 1799 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 28726)
    int __cdecl sprintf( char *_Buffer, char const* _Format, ...);                   int __cdecl vsprintf( char *_Buffer, char const* _Format, va_list _Args);
#line 1806 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)



    __inline  int  __cdecl  _sprintf_s_l(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                  char const* const _Format,
                                              _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }






        __inline  int  __cdecl  sprintf_s(
               char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
            _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }






#line 1860 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


    __inline  int  __cdecl  _sprintf_p_l(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                  char const* const _Format,
                                              _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _sprintf_p(
           char*       const _Buffer,
                                                  size_t      const _BufferCount,
                            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snprintf_l(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                 char const* const _Format,
                                             _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 1917 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 1918 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
        _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
#line 1920 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 1938 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


    __inline  int  __cdecl  snprintf(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
#line 1952 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(suppress:28719)   
        _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snprintf(
            char*       const _Buffer,
                                                 size_t      const _BufferCount,
                           char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
#line 1973 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(suppress:28719)   
        _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }


    int __cdecl  _snprintf(     char *_Buffer,   size_t _BufferCount,     char const* _Format, ...);                     int __cdecl  _vsnprintf(     char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);

#line 1989 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"


    __inline  int  __cdecl  _snprintf_c_l(
                  char*       const _Buffer,
                                            size_t      const _BufferCount,
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snprintf_c(
         char*       const _Buffer,
                                   size_t      const _BufferCount,
             char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snprintf_s_l(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                                      size_t      const _MaxCount,
                      char const* const _Format,
                                                  _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snprintf_s(
           char*       const _Buffer,
                                                      size_t      const _BufferCount,
                                                      size_t      const _MaxCount,
                                char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




#line 2081 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"

    __inline  int  __cdecl  _scprintf_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _scprintf(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscprintf_l(_Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _scprintf_p_l(
            char const* const _Format,
                                        _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _scprintf_p(
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vscprintf_p(_Format, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }







    __declspec(dllimport)  int __cdecl __stdio_common_vsscanf(
                                           unsigned __int64 _Options,
                  char const*      _Buffer,
                                           size_t           _BufferCount,
            char const*      _Format,
                                       _locale_t        _Locale,
                                               va_list          _ArgList
        );


    __inline  int  __cdecl  _vsscanf_l(
                                char const* const _Buffer,
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) ,
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }



    __inline  int  __cdecl  vsscanf(
                                char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )



    {
        return _vsscanf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
    }



    __inline  int  __cdecl  _vsscanf_s_l(
                                char const* const _Buffer,
            char const* const _Format,
                              _locale_t   const _Locale,
                                      va_list           _ArgList
        )



    {
        return __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    }

#line 2215 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 2216 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable:6530)


        __inline  int  __cdecl  vsscanf_s(
                                    char const* const _Buffer,
                char const* const _Format,
                                          va_list           _ArgList
            )



        {
            return _vsscanf_s_l(_Buffer, _Format,  ((void *)0) , _ArgList);
        }




#line 2239 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)




    __inline  int  __cdecl  _sscanf_l(
                                         char const* const _Buffer,
            char const* const _Format,
                                       _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  sscanf(
                               char const* const _Buffer,
            char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsscanf_l(_Buffer, _Format,  ((void *)0) , _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _sscanf_s_l(
                                           char const* const _Buffer,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;
        _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }





        __inline  int  __cdecl  sscanf_s(
                                     char const* const _Buffer,
                char const* const _Format,
            ...)



        {
            int _Result;
            va_list _ArgList;
            ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

#line 2314 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 2315 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable: 4996)
            _Result = vsscanf_s(_Buffer, _Format, _ArgList);
#line 2317 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)

            ((void)(_ArgList = (va_list)0)) ;
            return _Result;
        }

#line 2326 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(push)
#line 2327 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(disable:6530)


    __inline  int  __cdecl  _snscanf_l(
            char const* const _Buffer,
                                           size_t      const _BufferCount,
            char const* const _Format,
                                       _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _snscanf(
            char const* const _Buffer,
                                           size_t      const _BufferCount,
                      char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ()) ,
            _Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }




    __inline  int  __cdecl  _snscanf_s_l(
              char const* const _Buffer,
                                             size_t      const _BufferCount,
            char const* const _Format,
                                         _locale_t   const _Locale,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Locale))  + ((sizeof(_Locale) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Buffer, _BufferCount, _Format, _Locale, _ArgList);

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }



    __inline  int  __cdecl  _snscanf_s(
            char const* const _Buffer,
                                           size_t      const _BufferCount,
                    char const* const _Format,
        ...)



    {
        int _Result;
        va_list _ArgList;
        ((void)(_ArgList = (va_list) (&(_Format))  + ((sizeof(_Format) + sizeof(int) - 1) & ~(sizeof(int) - 1)) )) ;

        _Result = __stdio_common_vsscanf(
            (*__local_stdio_scanf_options ())  |  (1ULL << 0) ,
            _Buffer, _BufferCount, _Format,  ((void *)0) , _ArgList);

        ((void)(_ArgList = (va_list)0)) ;
        return _Result;
    }

#line 2424 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
#pragma warning(pop)

#line 2471 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdio.h"
__pragma(pack(pop))

#line 57 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h"

#line 13 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h"
__pragma(pack(push, 8 ))

#line 53 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h"

__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _calloc_base(
     size_t _Count,
     size_t _Size
    );


__declspec(dllimport)     __declspec(allocator)   __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );


__declspec(dllimport)  int __cdecl _callnewh(
     size_t _Size
    );


__declspec(dllimport)   __declspec(allocator)
void* __cdecl _expand(
               void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport)
void __cdecl free(
        void* _Block
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _malloc_base(
     size_t _Size
    );


__declspec(dllimport)   __declspec(allocator)     __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );


__declspec(dllimport)
size_t __cdecl _msize_base(
     void* _Block
    );


__declspec(dllimport)
size_t __cdecl _msize(
     void* _Block
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                size_t _Size
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _recalloc_base(
        void*  _Block,
                               size_t _Count,
                               size_t _Size
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                        size_t _Alignment
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                        size_t _Alignment,
                        size_t _Offset
    );


__declspec(dllimport)
size_t __cdecl _aligned_msize(
     void*  _Block,
              size_t _Alignment,
              size_t _Offset
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                               size_t _Alignment,
                               size_t _Offset
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                               size_t _Alignment,
                               size_t _Offset
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                               size_t _Alignment
    );


__declspec(dllimport)   __declspec(allocator)   __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                               size_t _Alignment
    );

#line 228 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_malloc.h"
__pragma(pack(pop))

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_search.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h"

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h"
__pragma(pack(push, 8 ))

#line 31 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h"
    __declspec(dllimport)  int* __cdecl _errno(void);


    __declspec(dllimport)  errno_t __cdecl _set_errno(   int _Value);
    __declspec(dllimport)  errno_t __cdecl _get_errno(   int* _Value);

#line 51 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stddef.h"
__declspec(dllimport)  extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport)  extern uintptr_t __cdecl __threadhandle(void);



__pragma(pack(pop))

#line 15 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_search.h"

__pragma(pack(push, 8 ))


    typedef int (__cdecl* _CoreCrtSecureSearchSortCompareFunction)(void*, void const*, void const*);
    typedef int (__cdecl* _CoreCrtNonSecureSearchSortCompareFunction)(void const*, void const*);





    __declspec(dllimport)  void* __cdecl bsearch_s(
                                                       void const* _Key,
         void const* _Base,
                                                       rsize_t     _NumOfElements,
                                                       rsize_t     _SizeOfElements,
                           _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                   void*       _Context
        );

    __declspec(dllimport)  void __cdecl qsort_s(
         void*   _Base,
                                                            rsize_t _NumOfElements,
                                                            rsize_t _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                        void*   _Context
        );






__declspec(dllimport)  void* __cdecl bsearch(
                                                   void const* _Key,
     void const* _Base,
                                                   size_t      _NumOfElements,
                                                   size_t      _SizeOfElements,
                    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

__declspec(dllimport)  void __cdecl qsort(
     void*  _Base,
                                                        size_t _NumOfElements,
                                                        size_t _SizeOfElements,
                    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport)  void* __cdecl _lfind_s(
                                                      void const*   _Key,
     void const*   _Base,
                                                   unsigned int* _NumOfElements,
                                                      size_t        _SizeOfElements,
                            _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                      void*         _Context
    );


__declspec(dllimport)  void* __cdecl _lfind(
                                                      void const*   _Key,
     void const*   _Base,
                                                   unsigned int* _NumOfElements,
                                                      unsigned int  _SizeOfElements,
                         _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );


__declspec(dllimport)  void* __cdecl _lsearch_s(
                                                            void const*   _Key,
     void*         _Base,
                                                         unsigned int* _NumOfElements,
                                                            size_t        _SizeOfElements,
                                  _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
                                                            void*         _Context
    );


__declspec(dllimport)  void* __cdecl _lsearch(
                                                            void const*   _Key,
     void*         _Base,
                                                         unsigned int* _NumOfElements,
                                                            unsigned int  _SizeOfElements,
                               _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction
    );

#line 212 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_search.h"
__pragma(pack(pop))

#line 15 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"

#line 13 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
__pragma(pack(push, 8 ))

#line 48 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"


    __declspec(dllimport)  errno_t __cdecl _itow_s(
                                 int      _Value,
         wchar_t* _Buffer,
                                 size_t   _BufferCount,
                                 int      _Radix
        );



#line 64 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
    __declspec(dllimport) wchar_t* __cdecl _itow(int _Value,  wchar_t *_Buffer, int _Radix);

#line 71 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"


    __declspec(dllimport)  errno_t __cdecl _ltow_s(
                                 long     _Value,
         wchar_t* _Buffer,
                                 size_t   _BufferCount,
                                 int      _Radix
        );



#line 87 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
    __declspec(dllimport) wchar_t* __cdecl _ltow(long _Value,  wchar_t *_Buffer, int _Radix);

#line 94 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"

    __declspec(dllimport)  errno_t __cdecl _ultow_s(
                                 unsigned long _Value,
         wchar_t*      _Buffer,
                                 size_t        _BufferCount,
                                 int           _Radix
        );



#line 109 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
    __declspec(dllimport) wchar_t* __cdecl _ultow(unsigned long _Value,  wchar_t *_Buffer, int _Radix);

#line 116 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"

    __declspec(dllimport)  double __cdecl wcstod(
                           wchar_t const* _String,
            wchar_t**      _EndPtr
        );


    __declspec(dllimport)  double __cdecl _wcstod_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  long __cdecl wcstol(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  long __cdecl _wcstol_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  long long __cdecl wcstoll(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  long long __cdecl _wcstoll_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  unsigned long __cdecl wcstoul(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  unsigned long __cdecl _wcstoul_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  unsigned long long __cdecl wcstoull(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  unsigned long long __cdecl _wcstoull_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  long double __cdecl wcstold(
                           wchar_t const* _String,
            wchar_t**      _EndPtr
        );


    __declspec(dllimport)  long double __cdecl _wcstold_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  float __cdecl wcstof(
                           wchar_t const* _String,
            wchar_t**      _EndPtr
        );


    __declspec(dllimport)  float __cdecl _wcstof_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  double __cdecl _wtof(
         wchar_t const* _String
        );


    __declspec(dllimport)  double __cdecl _wtof_l(
           wchar_t const* _String,
         _locale_t      _Locale
        );


    __declspec(dllimport)  int __cdecl _wtoi(
         wchar_t const* _String
        );


    __declspec(dllimport)  int __cdecl _wtoi_l(
           wchar_t const* _String,
         _locale_t      _Locale
        );


    __declspec(dllimport)  long __cdecl _wtol(
         wchar_t const* _String
        );


    __declspec(dllimport)  long __cdecl _wtol_l(
           wchar_t const* _String,
         _locale_t      _Locale
        );


    __declspec(dllimport)  long long __cdecl _wtoll(
         wchar_t const* _String
        );


    __declspec(dllimport)  long long __cdecl _wtoll_l(
           wchar_t const* _String,
         _locale_t      _Locale
        );


    __declspec(dllimport)  errno_t __cdecl _i64tow_s(
                                 __int64  _Value,
         wchar_t* _Buffer,
                                 size_t   _BufferCount,
                                 int      _Radix
        );


    __declspec(dllimport)  wchar_t* __cdecl _i64tow(
                           __int64  _Value,
            wchar_t* _Buffer,
                           int      _Radix
        );


    __declspec(dllimport)  errno_t __cdecl _ui64tow_s(
                                 unsigned __int64 _Value,
         wchar_t*         _Buffer,
                                 size_t           _BufferCount,
                                 int              _Radix
        );


    __declspec(dllimport)  wchar_t* __cdecl _ui64tow(
                           unsigned __int64 _Value,
            wchar_t*         _Buffer,
                           int              _Radix
        );


    __declspec(dllimport)  __int64 __cdecl _wtoi64(
         wchar_t const* _String
        );


    __declspec(dllimport)  __int64 __cdecl _wtoi64_l(
           wchar_t const* _String,
         _locale_t      _Locale
        );


    __declspec(dllimport)  __int64 __cdecl _wcstoi64(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  __int64 __cdecl _wcstoi64_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );


    __declspec(dllimport)  unsigned __int64 __cdecl _wcstoui64(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix
        );


    __declspec(dllimport)  unsigned __int64 __cdecl _wcstoui64_l(
                           wchar_t const* _String,
            wchar_t**      _EndPtr,
                             int            _Radix,
                         _locale_t      _Locale
        );

#line 330 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma push_macro("_wfullpath")




    __declspec(dllimport)   __declspec(allocator)  wchar_t* __cdecl _wfullpath(
         wchar_t*       _Buffer,
                                   wchar_t const* _Path,
                                     size_t         _BufferCount
        );

#line 341 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma pop_macro("_wfullpath")


    __declspec(dllimport)  errno_t __cdecl _wmakepath_s(
         wchar_t*       _Buffer,
                                 size_t         _BufferCount,
                           wchar_t const* _Drive,
                           wchar_t const* _Dir,
                           wchar_t const* _Filename,
                           wchar_t const* _Ext
        );



#line 362 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma warning(push)
#line 363 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma warning(disable: 28719)
#line 364 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma warning(disable: 28726)
__declspec(dllimport) void __cdecl _wmakepath( wchar_t *_Buffer, wchar_t const* _Drive, wchar_t const* _Dir, wchar_t const* _Filename, wchar_t const* _Ext);
#line 373 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma warning(pop)

    __declspec(dllimport)  void __cdecl _wperror(
         wchar_t const* _ErrorMessage
        );


    __declspec(dllimport)  void __cdecl _wsplitpath(
                           wchar_t const* _FullPath,
            wchar_t*       _Drive,
            wchar_t*       _Dir,
            wchar_t*       _Filename,
            wchar_t*       _Ext
        );

    __declspec(dllimport)  errno_t __cdecl _wsplitpath_s(
                                     wchar_t const* _FullPath,
            wchar_t*       _Drive,
                                       size_t         _DriveCount,
              wchar_t*       _Dir,
                                       size_t         _DirCount,
         wchar_t*       _Filename,
                                       size_t         _FilenameCount,
              wchar_t*       _Ext,
                                       size_t         _ExtCount
        );



#line 405 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma push_macro("_wdupenv_s")



        __declspec(dllimport)  errno_t __cdecl _wdupenv_s(
                wchar_t**      _Buffer,
                                                                               size_t*        _BufferCount,
                                                                                  wchar_t const* _VarName
            );

#line 415 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
#pragma pop_macro("_wdupenv_s")


        __declspec(dllimport)  wchar_t* __cdecl _wgetenv(
             wchar_t const* _VarName
            );



        __declspec(dllimport)  errno_t __cdecl _wgetenv_s(
                                        size_t*        _RequiredCount,
             wchar_t*       _Buffer,
                                         size_t         _BufferCount,
                                       wchar_t const* _VarName
            );



#line 439 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"

        __declspec(dllimport)  int __cdecl _wputenv(
             wchar_t const* _EnvString
            );


        __declspec(dllimport)  errno_t __cdecl _wputenv_s(
             wchar_t const* _Name,
             wchar_t const* _Value
            );

        __declspec(dllimport)  errno_t __cdecl _wsearchenv_s(
                                   wchar_t const* _Filename,
                                   wchar_t const* _VarName,
             wchar_t*       _Buffer,
                                     size_t         _BufferCount
            );



#line 464 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
        __declspec(dllimport) void __cdecl _wsearchenv(wchar_t const* _Filename, wchar_t const* _VarName,  wchar_t *_ResultPath);

#line 471 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstdlib.h"
        __declspec(dllimport)  int __cdecl _wsystem(
             wchar_t const* _Command
            );





__pragma(pack(pop))

#line 16 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/limits.h"

#line 13 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/limits.h"
#pragma warning(push)
#line 14 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/limits.h"
#pragma warning(disable:    4514 4820 )

__pragma(pack(push, 8 ))

#line 75 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/limits.h"
__pragma(pack(pop))

#line 77 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/limits.h"
#pragma warning(pop)

#line 17 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__pragma(pack(push, 8 ))

#line 34 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport)  void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                 int   _SizeInBytes
    );

#line 52 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
    __declspec(dllimport)  __declspec(noreturn) void __cdecl exit(   int _Code);
    __declspec(dllimport)  __declspec(noreturn) void __cdecl _exit(   int _Code);
    __declspec(dllimport)  __declspec(noreturn) void __cdecl _Exit(   int _Code);
    __declspec(dllimport)  __declspec(noreturn) void __cdecl quick_exit(   int _Code);
    __declspec(dllimport)  __declspec(noreturn) void __cdecl abort(void);






__declspec(dllimport)  unsigned int __cdecl _set_abort_behavior(
     unsigned int _Flags,
     unsigned int _Mask
    );






    typedef int ( __cdecl * _onexit_t)(void);

#line 140 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(   _onexit_t _Func);


int __cdecl at_quick_exit(void (__cdecl*)(void));










    typedef void (__cdecl* _purecall_handler)(void);


    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*,
        unsigned int,
        uintptr_t
        );


     _purecall_handler __cdecl _set_purecall_handler(
         _purecall_handler _Handler
        );

     _purecall_handler __cdecl _get_purecall_handler(void);


    __declspec(dllimport)  _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
         _invalid_parameter_handler _Handler
        );

    __declspec(dllimport)  _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport)  _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
         _invalid_parameter_handler _Handler
        );

    __declspec(dllimport)  _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);

#line 208 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
  __declspec(dllimport)  int __cdecl _set_error_mode(   int _Mode);




    __declspec(dllimport)  int* __cdecl _errno(void);


    __declspec(dllimport)  errno_t __cdecl _set_errno(   int _Value);
    __declspec(dllimport)  errno_t __cdecl _get_errno(   int* _Value);

    __declspec(dllimport)  unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport)  errno_t __cdecl _set_doserrno(   unsigned long _Value);
    __declspec(dllimport)  errno_t __cdecl _get_doserrno(   unsigned long * _Value);


    __declspec(dllimport)    char** __cdecl __sys_errlist(void);


    __declspec(dllimport)    int * __cdecl __sys_nerr(void);


    __declspec(dllimport)  void __cdecl perror(   char const* _ErrMsg);





  __declspec(dllimport)  char**    __cdecl __p__pgmptr (void);
  __declspec(dllimport)  wchar_t** __cdecl __p__wpgmptr(void);
  __declspec(dllimport)  int*      __cdecl __p__fmode  (void);

#line 254 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  errno_t __cdecl _get_pgmptr (   char**    _Value);


__declspec(dllimport)  errno_t __cdecl _get_wpgmptr(   wchar_t** _Value);

__declspec(dllimport)  errno_t __cdecl _set_fmode  (                int       _Mode );

__declspec(dllimport)  errno_t __cdecl _get_fmode  (               int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

 int       __cdecl abs   (   int       _Number);
 long      __cdecl labs  (   long      _Number);
 long long __cdecl llabs (   long long _Number);
 __int64   __cdecl _abs64(   __int64   _Number);

 unsigned short   __cdecl _byteswap_ushort(   unsigned short   _Number);
 unsigned long    __cdecl _byteswap_ulong (   unsigned long    _Number);
 unsigned __int64 __cdecl _byteswap_uint64(   unsigned __int64 _Number);

  __declspec(dllimport)  div_t   __cdecl div  (   int       _Numerator,    int       _Denominator);
  __declspec(dllimport)  ldiv_t  __cdecl ldiv (   long      _Numerator,    long      _Denominator);
  __declspec(dllimport)  lldiv_t __cdecl lldiv(   long long _Numerator,    long long _Denominator);

#line 304 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (push)
#line 305 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (disable:6540)

unsigned int __cdecl _rotl(
     unsigned int _Value,
     int          _Shift
    );


unsigned long __cdecl _lrotl(
     unsigned long _Value,
     int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
     unsigned __int64 _Value,
     int              _Shift
    );

unsigned int __cdecl _rotr(
     unsigned int _Value,
     int          _Shift
    );


unsigned long __cdecl _lrotr(
     unsigned long _Value,
     int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
     unsigned __int64 _Value,
     int              _Shift
    );

#line 339 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (pop)






__declspec(dllimport)  void __cdecl srand(   unsigned int _Seed);

  __declspec(dllimport)  int __cdecl rand(void);

#line 390 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
#line 395 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pack(pop)

#line 411 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;

#line 422 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma push_macro("long")


typedef struct
{
    long double x;
} _LONGDOUBLE;

#line 430 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pop_macro("long")

#line 432 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#line 437 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pack(pop)








                     __declspec(dllimport)  double    __cdecl atof   (   char const* _String);
    __declspec(dllimport)  int       __cdecl atoi   (   char const* _String);
                     __declspec(dllimport)  long      __cdecl atol   (   char const* _String);
                     __declspec(dllimport)  long long __cdecl atoll  (   char const* _String);
                     __declspec(dllimport)  __int64   __cdecl _atoi64(   char const* _String);

  __declspec(dllimport)  double    __cdecl _atof_l  (   char const* _String,    _locale_t _Locale);
  __declspec(dllimport)  int       __cdecl _atoi_l  (   char const* _String,    _locale_t _Locale);
  __declspec(dllimport)  long      __cdecl _atol_l  (   char const* _String,    _locale_t _Locale);
  __declspec(dllimport)  long long __cdecl _atoll_l (   char const* _String,    _locale_t _Locale);
  __declspec(dllimport)  __int64   __cdecl _atoi64_l(   char const* _String,    _locale_t _Locale);

  __declspec(dllimport)  int __cdecl _atoflt (   _CRT_FLOAT*  _Result,    char const* _String);
  __declspec(dllimport)  int __cdecl _atodbl (   _CRT_DOUBLE* _Result,    char*       _String);
  __declspec(dllimport)  int __cdecl _atoldbl(   _LDOUBLE*    _Result,    char*       _String);


__declspec(dllimport)  int __cdecl _atoflt_l(
        _CRT_FLOAT* _Result,
       char const* _String,
     _locale_t   _Locale
    );


__declspec(dllimport)  int __cdecl _atodbl_l(
        _CRT_DOUBLE* _Result,
       char*        _String,
     _locale_t    _Locale
    );



__declspec(dllimport)  int __cdecl _atoldbl_l(
        _LDOUBLE* _Result,
       char*     _String,
     _locale_t _Locale
    );


__declspec(dllimport)  float __cdecl strtof(
                       char const* _String,
        char**      _EndPtr
    );


__declspec(dllimport)  float __cdecl _strtof_l(
                       char const* _String,
        char**      _EndPtr,
                     _locale_t   _Locale
    );


__declspec(dllimport)  double __cdecl strtod(
                       char const* _String,
        char**      _EndPtr
    );


__declspec(dllimport)  double __cdecl _strtod_l(
                       char const* _String,
        char**      _EndPtr,
                     _locale_t   _Locale
    );


__declspec(dllimport)  long double __cdecl strtold(
                       char const* _String,
        char**      _EndPtr
    );


__declspec(dllimport)  long double __cdecl _strtold_l(
                       char const* _String,
        char**      _EndPtr,
                     _locale_t   _Locale
    );


__declspec(dllimport)  long __cdecl strtol(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  long __cdecl _strtol_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );


__declspec(dllimport)  long long __cdecl strtoll(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  long long __cdecl _strtoll_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );


__declspec(dllimport)  unsigned long __cdecl strtoul(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  unsigned long __cdecl _strtoul_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );


__declspec(dllimport)  unsigned long long __cdecl strtoull(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  unsigned long long __cdecl _strtoull_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );


__declspec(dllimport)  __int64 __cdecl _strtoi64(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  __int64 __cdecl _strtoi64_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );


__declspec(dllimport)  unsigned __int64 __cdecl _strtoui64(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix
    );


__declspec(dllimport)  unsigned __int64 __cdecl _strtoui64_l(
                       char const* _String,
        char**      _EndPtr,
                         int         _Radix,
                     _locale_t   _Locale
    );










__declspec(dllimport)  errno_t __cdecl _itoa_s(
                             int    _Value,
     char*  _Buffer,
                             size_t _BufferCount,
                             int    _Radix
    );



#line 637 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(push)
#line 638 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(disable: 28719)
#line 639 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(disable: 28726)
__declspec(dllimport) char* __cdecl _itoa(int _Value,  char *_Buffer, int _Radix);
#line 646 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(pop)



__declspec(dllimport)  errno_t __cdecl _ltoa_s(
                             long   _Value,
     char*  _Buffer,
                             size_t _BufferCount,
                             int    _Radix
    );



#line 664 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport) char* __cdecl _ltoa(long _Value,  char *_Buffer, int _Radix);

#line 671 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"


__declspec(dllimport)  errno_t __cdecl _ultoa_s(
                             unsigned long _Value,
     char*         _Buffer,
                             size_t        _BufferCount,
                             int           _Radix
    );



#line 687 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(push)
#line 688 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(disable: 28726)
__declspec(dllimport) char* __cdecl _ultoa(unsigned long _Value,  char *_Buffer, int _Radix);
#line 695 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(pop)



__declspec(dllimport)  errno_t __cdecl _i64toa_s(
                             __int64 _Value,
     char*   _Buffer,
                             size_t  _BufferCount,
                             int     _Radix
    );



__declspec(dllimport)  char* __cdecl _i64toa(
                       __int64 _Value,
        char*   _Buffer,
                       int     _Radix
    );



__declspec(dllimport)  errno_t __cdecl _ui64toa_s(
                             unsigned __int64 _Value,
     char*            _Buffer,
                             size_t           _BufferCount,
                             int              _Radix
    );


__declspec(dllimport)  char* __cdecl _ui64toa(
                       unsigned __int64 _Value,
        char*            _Buffer,
                       int              _Radix
    );

#line 742 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"


__declspec(dllimport)  errno_t __cdecl _ecvt_s(
     char* _Buffer,
      size_t                       _BufferCount,
      double                       _Value,
      int                          _DigitCount,
     int*                         _PtDec,
     int*                         _PtSign
    );



#line 762 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  char* __cdecl _ecvt(
      double _Value,
      int    _DigitCount,
     int*   _PtDec,
     int*   _PtSign
    );



__declspec(dllimport)  errno_t __cdecl _fcvt_s(
     char*  _Buffer,
                             size_t _BufferCount,
                             double _Value,
                             int    _FractionalDigitCount,
                            int*   _PtDec,
                            int*   _PtSign
    );



#line 791 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"


__declspec(dllimport)  char* __cdecl _fcvt(
      double _Value,
      int    _FractionalDigitCount,
     int*   _PtDec,
     int*   _PtSign
    );


__declspec(dllimport)  errno_t __cdecl _gcvt_s(
     char*  _Buffer,
                             size_t _BufferCount,
                             double _Value,
                             int    _DigitCount
    );



#line 816 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  char* __cdecl _gcvt(
                       double _Value,
                       int    _DigitCount,
        char*  _Buffer
    );

#line 845 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

    __declspec(dllimport)  int __cdecl ___mb_cur_max_func(void);


    __declspec(dllimport)  int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);





__declspec(dllimport)  int __cdecl mblen(
        char const* _Ch,
                                            size_t      _MaxCount
    );


__declspec(dllimport)  int __cdecl _mblen_l(
        char const* _Ch,
                                            size_t      _MaxCount,
                                        _locale_t   _Locale
    );



__declspec(dllimport)  size_t __cdecl _mbstrlen(
     char const* _String
    );



__declspec(dllimport)  size_t __cdecl _mbstrlen_l(
       char const* _String,
     _locale_t   _Locale
    );



__declspec(dllimport)  size_t __cdecl _mbstrnlen(
     char const* _String,
       size_t      _MaxCount
    );



__declspec(dllimport)  size_t __cdecl _mbstrnlen_l(
       char const* _String,
         size_t      _MaxCount,
     _locale_t   _Locale
    );


__declspec(dllimport)  int __cdecl mbtowc(
                      wchar_t*    _DstCh,
     char const* _SrcCh,
                                     size_t      _SrcSizeInBytes
    );


__declspec(dllimport)  int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
     char const* _SrcCh,
                                     size_t      _SrcSizeInBytes,
                                 _locale_t   _Locale
    );


__declspec(dllimport)  errno_t __cdecl mbstowcs_s(
                                                     size_t*     _PtNumOfCharConverted,
     wchar_t*    _DstBuf,
                                                          size_t      _SizeInWords,
                                    char const* _SrcBuf,
                                                          size_t      _MaxCount
    );



#line 927 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest, char const* _Source, size_t _MaxCount);

#line 934 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  errno_t __cdecl _mbstowcs_s_l(
                                                     size_t*     _PtNumOfCharConverted,
     wchar_t*    _DstBuf,
                                                          size_t      _SizeInWords,
                                    char const* _SrcBuf,
                                                          size_t      _MaxCount,
                                                      _locale_t   _Locale
    );



#line 953 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport)  size_t __cdecl _mbstowcs_l(   wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);

#line 965 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  int __cdecl wctomb(
     char*   _MbCh,
                               wchar_t _WCh
    );


__declspec(dllimport)  int __cdecl _wctomb_l(
        char*     _MbCh,
                         wchar_t   _WCh,
                     _locale_t _Locale
    );




    __declspec(dllimport)  errno_t __cdecl wctomb_s(
                                                        int*    _SizeConverted,
         char*   _MbCh,
                                                             rsize_t _SizeInBytes,
                                                             wchar_t _WCh
        );




__declspec(dllimport)  errno_t __cdecl _wctomb_s_l(
                            int*     _SizeConverted,
     char*     _MbCh,
                                 size_t    _SizeInBytes,
                                 wchar_t   _WCh,
                             _locale_t _Locale);


__declspec(dllimport)  errno_t __cdecl wcstombs_s(
                                                              size_t*        _PtNumOfCharConverted,
     char*          _Dst,
                                                                   size_t         _DstSizeInBytes,
                                                                 wchar_t const* _Src,
                                                                   size_t         _MaxCountInBytes
    );



#line 1015 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs( char *_Dest, wchar_t const* _Source, size_t _MaxCount);

#line 1022 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

__declspec(dllimport)  errno_t __cdecl _wcstombs_s_l(
                                                              size_t*        _PtNumOfCharConverted,
     char*          _Dst,
                                                                   size_t         _DstSizeInBytes,
                                                                 wchar_t const* _Src,
                                                                   size_t         _MaxCountInBytes,
                                                               _locale_t      _Locale
    );



#line 1041 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport)  size_t __cdecl _wcstombs_l(   char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);

#line 1066 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma push_macro("_fullpath")




__declspec(dllimport)   __declspec(allocator)  char* __cdecl _fullpath(
     char*       _Buffer,
                               char const* _Path,
                                 size_t      _BufferCount
    );

#line 1077 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma pop_macro("_fullpath")


__declspec(dllimport)  errno_t __cdecl _makepath_s(
     char*       _Buffer,
                             size_t      _BufferCount,
                       char const* _Drive,
                       char const* _Dir,
                       char const* _Filename,
                       char const* _Ext
    );



#line 1098 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(push)
#line 1099 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(disable: 28719)
#line 1100 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(disable: 28726)
__declspec(dllimport) void __cdecl _makepath( char *_Buffer, char const* _Drive, char const* _Dir, char const* _Filename, char const* _Ext);
#line 1109 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning(pop)


__declspec(dllimport)  void __cdecl _splitpath(
                       char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport)  errno_t __cdecl _splitpath_s(
                                 char const* _FullPath,
        char*       _Drive,
                                   size_t      _DriveCount,
          char*       _Dir,
                                   size_t      _DirCount,
     char*       _Filename,
                                   size_t      _FilenameCount,
          char*       _Ext,
                                   size_t      _ExtCount
    );







__declspec(dllimport)  errno_t __cdecl getenv_s(
                                size_t*     _RequiredCount,
     char*       _Buffer,
                                 rsize_t     _BufferCount,
                               char const* _VarName
    );






__declspec(dllimport)  int*       __cdecl __p___argc (void);
__declspec(dllimport)  char***    __cdecl __p___argv (void);
__declspec(dllimport)  wchar_t*** __cdecl __p___wargv(void);

#line 1165 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__declspec(dllimport)  char***    __cdecl __p__environ (void);
__declspec(dllimport)  wchar_t*** __cdecl __p__wenviron(void);

#line 1190 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

    __declspec(dllimport)  char* __cdecl getenv(
         char const* _VarName
        );



#line 1207 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"

    __declspec(dllimport)  errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                           size_t*     _BufferCount,
                                                                              char const* _VarName
        );

#line 1218 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
    __declspec(dllimport)  int __cdecl system(
         char const* _Command
        );

#line 1224 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (push)
#line 1225 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (disable:6540)


    __declspec(dllimport)  int __cdecl _putenv(
         char const* _EnvString
        );


    __declspec(dllimport)  errno_t __cdecl _putenv_s(
         char const* _Name,
         char const* _Value
        );

#line 1238 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
#pragma warning (pop)

    __declspec(dllimport)  errno_t __cdecl _searchenv_s(
                               char const* _Filename,
                               char const* _VarName,
         char*       _Buffer,
                                 size_t      _BufferCount
        );



#line 1254 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
    __declspec(dllimport) void __cdecl _searchenv(char const* _Filename, char const* _VarName,  char *_Buffer);

#line 1262 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport)  void __cdecl _seterrormode(
         int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport)  void __cdecl _beep(
         unsigned _Frequency,
         unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport)  void __cdecl _sleep(
         unsigned long _Duration
        );

#line 1366 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/stdlib.h"
__pragma(pack(pop))

#line 58 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memory.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/errno.h"

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/errno.h"
__pragma(pack(push, 8 ))




    __declspec(dllimport)  int* __cdecl _errno(void);


    __declspec(dllimport)  errno_t __cdecl _set_errno(   int _Value);
    __declspec(dllimport)  errno_t __cdecl _get_errno(   int* _Value);

    __declspec(dllimport)  unsigned long* __cdecl __doserrno(void);


    __declspec(dllimport)  errno_t __cdecl _set_doserrno(   unsigned long _Value);
    __declspec(dllimport)  errno_t __cdecl _get_doserrno(   unsigned long * _Value);

#line 130 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/errno.h"
__pragma(pack(pop))

#line 12 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"
#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"

#line 12 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"
#pragma warning(push)
#line 13 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"
#pragma warning(disable:    4514 4820 )



__pragma(pack(push, 8 ))




 void  * __cdecl memchr(
     void const* _Buf,
                                int         _Val,
                                size_t      _MaxCount
    );


int __cdecl memcmp(
     void const* _Buf1,
     void const* _Buf2,
                        size_t      _Size
    );




#line 43 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"
void* __cdecl memcpy(
     void* _Dst,
           void const* _Src,
                              size_t      _Size
    );


 void* __cdecl memmove(
     void*       _Dst,
           void const* _Src,
                                  size_t      _Size
    );



#line 63 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"
void* __cdecl memset(
     void*  _Dst,
                              int    _Val,
                              size_t _Size
    );


 char  * __cdecl strchr(
     char const* _Str,
       int         _Val
    );


 char  * __cdecl strrchr(
     char const* _Str,
       int         _Ch
    );


 char  * __cdecl strstr(
     char const* _Str,
     char const* _SubStr
    );



 wchar_t  * __cdecl wcschr(
     wchar_t const* _Str,
       wchar_t        _Ch
    );


 wchar_t  * __cdecl wcsrchr(
     wchar_t const* _Str,
       wchar_t        _Ch
    );



 wchar_t  * __cdecl wcsstr(
     wchar_t const* _Str,
     wchar_t const* _SubStr
    );



__pragma(pack(pop))

#line 113 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/vcruntime_string.h"
#pragma warning(pop)

#line 13 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"

__pragma(pack(push, 8 ))

#line 33 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"


    static __inline  errno_t  __cdecl  memcpy_s(
         void*       const _Destination,
                                                             rsize_t     const _DestinationSize,
                                void const* const _Source,
                                                             rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        {                                                                                  int _Expr_val=!!(_Destination != ((void *)0) );                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 22 ;                                                             _invalid_parameter_noinfo();                                                   return 22 ;                                                          }                                                                          } ;
        if (_Source ==  ((void *)0)  || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            {                                                                                  int _Expr_val=!!(_Source != ((void *)0) );                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 22 ;                                                             _invalid_parameter_noinfo();                                                   return 22 ;                                                          }                                                                          } ;
            {                                                                                  int _Expr_val=!!(_DestinationSize >= _SourceSize);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 34 ;                                                             _invalid_parameter_noinfo();                                                   return 34 ;                                                          }                                                                          } ;


            return  22 ;
        }
#line 58 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"
#pragma warning(suppress:4996)
        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }


    static __inline  errno_t  __cdecl  memmove_s(
         void*       const _Destination,
                                                             rsize_t     const _DestinationSize,
                                void const* const _Source,
                                                             rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        {                                                                                  int _Expr_val=!!(_Destination != ((void *)0) );                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 22 ;                                                             _invalid_parameter_noinfo();                                                   return 22 ;                                                          }                                                                          } ;
        {                                                                                  int _Expr_val=!!(_Source != ((void *)0) );                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 22 ;                                                             _invalid_parameter_noinfo();                                                   return 22 ;                                                          }                                                                          } ;
        {                                                                                  int _Expr_val=!!(_DestinationSize >= _SourceSize);                                                        if (!(_Expr_val))                                                              {                                                                                  (*_errno())  = 34 ;                                                             _invalid_parameter_noinfo();                                                   return 34 ;                                                          }                                                                          } ;

#line 80 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memcpy_s.h"
#pragma warning(suppress:4996)
        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }





__pragma(pack(pop))

#line 15 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memory.h"




__pragma(pack(push, 8 ))




__declspec(dllimport)  int __cdecl _memicmp(
     void const* _Buf1,
     void const* _Buf2,
                            size_t      _Size
    );


__declspec(dllimport)  int __cdecl _memicmp_l(
     void const* _Buf1,
     void const* _Buf2,
                            size_t      _Size,
                        _locale_t   _Locale
    );

#line 114 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_memory.h"
__pragma(pack(pop))

#line 14 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#line 1 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

#line 16 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__pragma(pack(push, 8 ))











    __declspec(dllimport)  errno_t __cdecl wcscat_s(
         wchar_t* _Destination,
         rsize_t _SizeInWords,
         wchar_t const* _Source
        );


    __declspec(dllimport)  errno_t __cdecl wcscpy_s(
         wchar_t* _Destination,
         rsize_t _SizeInWords,
         wchar_t const* _Source
        );


    __declspec(dllimport)  errno_t __cdecl wcsncat_s(
         wchar_t*       _Destination,
                                    rsize_t        _SizeInWords,
              wchar_t const* _Source,
                                    rsize_t        _MaxCount
        );


    __declspec(dllimport)  errno_t __cdecl wcsncpy_s(
         wchar_t*       _Destination,
                                 rsize_t        _SizeInWords,
           wchar_t const* _Source,
                                 rsize_t        _MaxCount
        );


    __declspec(dllimport)  wchar_t* __cdecl wcstok_s(
                         wchar_t*       _String,
                                wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 78 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)   __declspec(allocator)  wchar_t* __cdecl _wcsdup(
     wchar_t const* _String
    );

#line 89 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"


#line 97 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(push)
#line 98 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 28719)
#line 99 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 28726)
    __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination, wchar_t const* _Source);
#line 105 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(pop)



__declspec(dllimport)  int __cdecl wcscmp(
     wchar_t const* _String1,
     wchar_t const* _String2
    );



#line 120 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(push)
#line 121 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 28719)
#line 122 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 28726)
__declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination, wchar_t const* _Source);
#line 128 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(pop)


__declspec(dllimport)  size_t __cdecl wcscspn(
     wchar_t const* _String,
     wchar_t const* _Control
    );


__declspec(dllimport)  size_t __cdecl wcslen(
     wchar_t const* _String
    );



#line 146 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

#line 150 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  size_t __cdecl wcsnlen(
     wchar_t const* _Source,
                           size_t         _MaxCount
    );





#line 162 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

#line 166 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
    static __inline size_t  __cdecl  wcsnlen_s(
         wchar_t const* _Source,
                               size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }





#line 183 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl wcsncat(   wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);

#line 191 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)  int __cdecl wcsncmp(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount
    );



#line 205 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl wcsncpy(     wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);

#line 213 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)  wchar_t  * __cdecl wcspbrk(
     wchar_t const* _String,
     wchar_t const* _Control
    );


__declspec(dllimport)  size_t __cdecl wcsspn(
     wchar_t const* _String,
     wchar_t const* _Control
    );


__declspec(dllimport)  wchar_t* __cdecl wcstok(
                         wchar_t*       _String,
                                wchar_t const* _Delimiter,
        wchar_t**      _Context
    );

#line 243 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(push)
#line 244 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 4141 4996)
#line 245 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(disable: 28719 28726 28727)

    static __inline wchar_t*  __cdecl  _wcstok(
         wchar_t*       const _String,
                wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

#line 270 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
#pragma warning(pop)







__declspec(dllimport)  wchar_t* __cdecl _wcserror(
     int _ErrorNumber
    );


__declspec(dllimport)  errno_t __cdecl _wcserror_s(
     wchar_t* _Buffer,
                                 size_t   _SizeInWords,
                                 int      _ErrorNumber
    );



#line 295 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"



__declspec(dllimport)  wchar_t* __cdecl __wcserror(
     wchar_t const* _String
    );

  __declspec(dllimport)  errno_t __cdecl __wcserror_s(
     wchar_t*       _Buffer,
                                 size_t         _SizeInWords,
                               wchar_t const* _ErrorMessage
    );



#line 314 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
  __declspec(dllimport)  int __cdecl _wcsicmp(
     wchar_t const* _String1,
     wchar_t const* _String2
    );

  __declspec(dllimport)  int __cdecl _wcsicmp_l(
       wchar_t const* _String1,
       wchar_t const* _String2,
     _locale_t      _Locale
    );

  __declspec(dllimport)  int __cdecl _wcsnicmp(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount
    );

  __declspec(dllimport)  int __cdecl _wcsnicmp_l(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount,
                       _locale_t      _Locale
    );

  __declspec(dllimport)  errno_t __cdecl _wcsnset_s(
     wchar_t* _Destination,
                                size_t   _SizeInWords,
                                wchar_t  _Value,
                                size_t   _MaxCount
    );



#line 352 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl _wcsnset(   wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);

#line 360 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl _wcsrev(
     wchar_t* _String
    );

  __declspec(dllimport)  errno_t __cdecl _wcsset_s(
     wchar_t* _Destination,
                                size_t   _SizeInWords,
                                wchar_t  _Value
    );



#line 376 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl _wcsset(   wchar_t *_String,   wchar_t _Value);

#line 383 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
  __declspec(dllimport)  errno_t __cdecl _wcslwr_s(
     wchar_t* _String,
                                size_t   _SizeInWords
    );



#line 393 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);

#line 398 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)  errno_t __cdecl _wcslwr_s_l(
     wchar_t*  _String,
                                size_t    _SizeInWords,
                            _locale_t _Locale
    );



#line 411 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl _wcslwr_l(   wchar_t *_String,   _locale_t _Locale);

#line 418 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)  errno_t __cdecl _wcsupr_s(
     wchar_t* _String,
                         size_t   _Size
    );



#line 429 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);

#line 434 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"

__declspec(dllimport)  errno_t __cdecl _wcsupr_s_l(
     wchar_t*  _String,
                         size_t    _Size,
                     _locale_t _Locale
    );



#line 447 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__declspec(dllimport)  wchar_t* __cdecl _wcsupr_l(   wchar_t *_String,   _locale_t _Locale);

#line 454 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"


__declspec(dllimport)  size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                        wchar_t const* _Source,
                size_t         _MaxCount
    );



__declspec(dllimport)  size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                        wchar_t const* _Source,
                size_t         _MaxCount,
                                      _locale_t      _Locale
    );


__declspec(dllimport)  int __cdecl wcscoll(
     wchar_t const* _String1,
     wchar_t const* _String2
    );


__declspec(dllimport)  int __cdecl _wcscoll_l(
       wchar_t const* _String1,
       wchar_t const* _String2,
     _locale_t      _Locale
    );


__declspec(dllimport)  int __cdecl _wcsicoll(
     wchar_t const* _String1,
     wchar_t const* _String2
    );


__declspec(dllimport)  int __cdecl _wcsicoll_l(
       wchar_t const* _String1,
       wchar_t const* _String2,
     _locale_t      _Locale
    );


__declspec(dllimport)  int __cdecl _wcsncoll(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount
    );


__declspec(dllimport)  int __cdecl _wcsncoll_l(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount,
                       _locale_t      _Locale
    );


__declspec(dllimport)  int __cdecl _wcsnicoll(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount
    );


__declspec(dllimport)  int __cdecl _wcsnicoll_l(
     wchar_t const* _String1,
     wchar_t const* _String2,
                           size_t         _MaxCount,
                       _locale_t      _Locale
    );

#line 647 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/corecrt_wstring.h"
__pragma(pack(pop))

#line 15 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"




__pragma(pack(push, 8 ))








    __declspec(dllimport)  errno_t __cdecl strcpy_s(
         char*       _Destination,
                                 rsize_t     _SizeInBytes,
                               char const* _Source
        );


    __declspec(dllimport)  errno_t __cdecl strcat_s(
         char*       _Destination,
                                    rsize_t     _SizeInBytes,
                                  char const* _Source
        );


    __declspec(dllimport)  errno_t __cdecl strerror_s(
         char*  _Buffer,
                                 size_t _SizeInBytes,
                                 int    _ErrorNumber);


    __declspec(dllimport)  errno_t __cdecl strncat_s(
         char*       _Destination,
                                    rsize_t     _SizeInBytes,
              char const* _Source,
                                    rsize_t     _MaxCount
        );


    __declspec(dllimport)  errno_t __cdecl strncpy_s(
         char*       _Destination,
                                 rsize_t     _SizeInBytes,
           char const* _Source,
                                 rsize_t     _MaxCount
        );


    __declspec(dllimport)  char*  __cdecl strtok_s(
                         char*       _String,
                                char const* _Delimiter,
            char**      _Context
        );



__declspec(dllimport)  void* __cdecl _memccpy(
     void*       _Dst,
                                  void const* _Src,
                                  int         _Val,
                                  size_t      _MaxCount
    );



#line 87 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(push)
#line 88 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(disable: 28719)
#line 89 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(disable: 28726)
    char* __cdecl strcat( char *_Destination, char const* _Source);
#line 95 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(pop)




int __cdecl strcmp(
     char const* _Str1,
     char const* _Str2
    );


__declspec(dllimport)  int __cdecl _strcmpi(
     char const* _String1,
     char const* _String2
    );


__declspec(dllimport)  int __cdecl strcoll(
     char const* _String1,
     char const* _String2
    );


__declspec(dllimport)  int __cdecl _strcoll_l(
       char const* _String1,
       char const* _String2,
     _locale_t   _Locale
    );



#line 130 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(push)
#line 131 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(disable: 28719)
#line 132 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(disable: 28726)
char* __cdecl strcpy( char *_Destination, char const* _Source);
#line 138 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
#pragma warning(pop)


__declspec(dllimport)  size_t __cdecl strcspn(
     char const* _Str,
     char const* _Control
    );

#line 151 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)   __declspec(allocator)  char* __cdecl _strdup(
     char const* _Source
    );

#line 160 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"



__declspec(dllimport)  char*  __cdecl _strerror(
     char const* _ErrorMessage
    );


__declspec(dllimport)  errno_t __cdecl _strerror_s(
     char*       _Buffer,
                             size_t      _SizeInBytes,
                       char const* _ErrorMessage
    );



#line 180 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"


__declspec(dllimport)  char* __cdecl strerror(
     int _ErrorMessage
    );



#line 192 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  int __cdecl _stricmp(
     char const* _String1,
     char const* _String2
    );


__declspec(dllimport)  int __cdecl _stricoll(
     char const* _String1,
     char const* _String2
    );


__declspec(dllimport)  int __cdecl _stricoll_l(
       char const* _String1,
       char const* _String2,
     _locale_t   _Locale
    );


__declspec(dllimport)  int __cdecl _stricmp_l(
       char const* _String1,
       char const* _String2,
     _locale_t   _Locale
    );


size_t __cdecl strlen(
     char const* _Str
    );


__declspec(dllimport)  errno_t __cdecl _strlwr_s(
     char*  _String,
                         size_t _Size
    );



#line 234 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport) char* __cdecl _strlwr( char *_String);

#line 239 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  errno_t __cdecl _strlwr_s_l(
     char*     _String,
                         size_t    _Size,
                     _locale_t _Locale
    );



#line 252 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  char* __cdecl _strlwr_l(   char *_String,   _locale_t _Locale);

#line 259 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"


#line 266 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  char* __cdecl strncat(   char *_Destination,   char const* _Source,   size_t _Count);

#line 274 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  int __cdecl strncmp(
     char const* _Str1,
     char const* _Str2,
                           size_t      _MaxCount
    );


__declspec(dllimport)  int __cdecl _strnicmp(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount
    );


__declspec(dllimport)  int __cdecl _strnicmp_l(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount,
                       _locale_t   _Locale
    );


__declspec(dllimport)  int __cdecl _strnicoll(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount
    );


__declspec(dllimport)  int __cdecl _strnicoll_l(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount,
                       _locale_t   _Locale
    );


__declspec(dllimport)  int __cdecl _strncoll(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount
    );


__declspec(dllimport)  int __cdecl _strncoll_l(
     char const* _String1,
     char const* _String2,
                           size_t      _MaxCount,
                       _locale_t   _Locale
    );

__declspec(dllimport)  size_t __cdecl __strncnt(
     char const* _String,
                        size_t      _Count
    );



#line 338 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  char* __cdecl strncpy(     char *_Destination,   char const* _Source,   size_t _Count);

#line 346 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"


#line 351 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

#line 355 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  size_t __cdecl strnlen(
     char const* _String,
                           size_t      _MaxCount
    );





#line 367 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

#line 371 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
    static __inline size_t  __cdecl  strnlen_s(
         char const* _String,
                               size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }




__declspec(dllimport)  errno_t __cdecl _strnset_s(
     char*  _String,
                                size_t _SizeInBytes,
                                int    _Value,
                                size_t _MaxCount
    );



#line 396 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  char* __cdecl _strnset(   char *_Destination,   int _Value,   size_t _Count);

#line 404 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  char  * __cdecl strpbrk(
     char const* _Str,
     char const* _Control
    );

__declspec(dllimport)  char* __cdecl _strrev(
     char* _Str
    );


__declspec(dllimport)  errno_t __cdecl _strset_s(
     char*  _Destination,
                                    size_t _DestinationSize,
                                    int    _Value
    );



#line 427 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
char* __cdecl _strset( char *_Destination, int _Value);

#line 433 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  size_t __cdecl strspn(
     char const* _Str,
     char const* _Control
    );


__declspec(dllimport)  char* __cdecl strtok(
     char*       _String,
            char const* _Delimiter
    );


__declspec(dllimport)  errno_t __cdecl _strupr_s(
     char*  _String,
                         size_t _Size
    );



#line 456 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport) char* __cdecl _strupr( char *_String);

#line 461 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"

__declspec(dllimport)  errno_t __cdecl _strupr_s_l(
     char*     _String,
                         size_t    _Size,
                     _locale_t _Locale
    );



#line 474 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__declspec(dllimport)  char* __cdecl _strupr_l(   char *_String,   _locale_t _Locale);

#line 481 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"


__declspec(dllimport)  size_t __cdecl strxfrm(
        char*       _Destination,
                                        char const* _Source,
                 size_t      _MaxCount
    );



__declspec(dllimport)  size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                        char const* _Source,
                 size_t      _MaxCount,
                                      _locale_t   _Locale
    );

#line 592 "c:/program files (x86)/windows kits/10/include/10.0.18362.0/ucrt/string.h"
__pragma(pack(pop))

#line 59 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdarg.h"

#line 13 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdarg.h"
#pragma warning(push)
#line 14 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdarg.h"
#pragma warning(disable:    4514 4820 )

__pragma(pack(push, 8 ))










__pragma(pack(pop))

#line 29 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdarg.h"
#pragma warning(pop)

#line 60 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globaltypes.h"

#line 44 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globaltypes.h"
typedef signed char int8_t;
typedef signed short int int16_t;
typedef signed int int32_t;
typedef signed long long int int64_t;

typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long int uint64_t;


typedef struct uint128_s
{
   uint64_t  uint64[2];
} uint128_t;

#line 76 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globaltypes.h"
typedef uint8_t   BOOL;




typedef uint32_t  BOOL32;
typedef uint8_t   BOOL8;

#line 99 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globaltypes.h"
typedef void (*PVFV_t)(void);
typedef void (*PVFUI_t)(uint32_t);

#line 64 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_platformmacros.h"

#line 38 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_platformmacros.h"
typedef volatile uint32_t HW_REG;
typedef volatile uint64_t HW_REG64;
typedef uint32_t HwRegField32_t;

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/commondefs.h"

#line 14 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelintrinsics.h"

#line 21 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelintrinsics.h"
typedef unsigned char uint8;
typedef unsigned short uint16;
typedef unsigned long uint32;
typedef unsigned long long uint64;
typedef signed char int8;
typedef signed short int16;
typedef signed long int32;
typedef signed long long int64;



extern void _ASM(char*);


void JumpNextLink(const char *);






extern unsigned long   _core_read(unsigned long regNum);
extern void     _core_write(unsigned long value, unsigned long regNum);
extern void     _disable( void );
extern void     _disable1( void );
extern void     _disable2( void );
extern void     _enable( void );
extern void     _enable1( void );
extern void     _enable2( void );
extern unsigned long*  _interrupt_ext_addr( void );
extern void     _nop( void );
extern void     __svc( unsigned long SVC_ID );
extern signed short    _swap16(signed short);
extern signed long    _swap32(signed long);
extern void     _sr(unsigned long value, unsigned long regNum);
extern unsigned long   _lr(unsigned long regNum);
extern void     _flag(unsigned long arcFlag);
extern void     _kflag(unsigned long value);
extern void     _wevt(unsigned long value);
extern void     _seti(unsigned long value);
extern unsigned long   _clri(void);
extern unsigned long   _sync(void);


extern void     _csrr_w(unsigned long InternalOffset, unsigned long value);
extern unsigned long     _csrr_r(unsigned long InternalOffset);
extern void     _csrr_s(unsigned long InternalOffset, unsigned long value);
extern void     _csrr_c(unsigned long InternalOffset, unsigned long value);


extern unsigned long   _csrr(unsigned long Offset);
extern void            _csrw(unsigned long Offset, unsigned long val);
extern void            _csrs(unsigned long Offset, unsigned long val);
extern void            _csrc(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrw(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrs(unsigned long Offset, unsigned long val);
extern unsigned long   _csrrc(unsigned long Offset, unsigned long val);
extern void            _ecall();

#line 50 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelassertimpl.h"

#line 32 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelassertimpl.h"
static __inline _LivetIntrinsic void _AssertImpl(int c, const char *f, int l, const char *msg);

#line 53 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"



typedef unsigned char *LINKER_SYM;

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/autogensource/fwprobes/supportedfwprobesdecl.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/fwprobestypes.h"

#line 1 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdint.h"

#line 15 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdint.h"
#pragma warning(push)
#line 16 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdint.h"
#pragma warning(disable:    4514 4820 )

typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;

#line 131 "c:/program files (x86)/microsoft visual studio/2019/professional/vc/tools/msvc/14.25.28610/include/stdint.h"
#pragma warning(pop)

#line 17 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/fwprobestypes.h"




typedef uint64_t  LBA_t;
typedef int64_t   signed_LBA_t;

#line 6 "d:/gitrepo/fpgcss-vega/_out/model/autogensource/fwprobes/supportedfwprobesdecl.h"
void _fwProbe_accepthostsectors_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_accepthostsectors_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_acceptsectorsifmstwritten_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_acceptsectorsifmstwritten_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t Sectors);

void _fwProbe_addtracerange_with_3_params(const char* flag, uint32_t min, uint32_t max);

void _fwProbe_addxorprotecteddata_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_addxorprotecteddata_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);


uint32_t _fwProbe_apply_weakwl_block_with_5_params(uint32_t designator, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

void _fwProbe_applyreadthresholds_with_13_params(uint32_t Package, uint32_t bcType, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column, int32_t* fwDeltaValues, int32_t* fwProfile, int32_t fwProfileSize, uint32_t RevertOnErase);

void _fwProbe_applyreadthresholds_with_12_params(uint32_t Package, uint32_t bcType, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column, int32_t* fwDeltaValues, int32_t* fwProfile, int32_t fwProfileSize, uint32_t RevertOnErase);

void _fwProbe_bootcomplete_with_1_params(uint32_t pass);

void _fwProbe_canceldieunresponsive_with_2_params(uint32_t Package, uint32_t die);


uint32_t _fwProbe_check_with_2_params(const char* flag, uint32_t enable);
uint32_t _fwProbe_rulecheck_with_2_params(const char* flag, uint32_t enable);
uint32_t _fwProbe_checkflag_with_2_params(const char* flag, uint32_t enable);

uint32_t _fwProbe_checkiserrorinjected_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column);


uint32_t _fwProbe_checkiserrorinjected_with_6_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column);


uint32_t _fwProbe_checkoff_with_1_params(const char* flag);
uint32_t _fwProbe_rulecheckoff_with_1_params(const char* flag);
uint32_t _fwProbe_checkflagoff_with_1_params(const char* flag);

uint32_t _fwProbe_checkon_with_1_params(const char* flag);
uint32_t _fwProbe_rulecheckon_with_1_params(const char* flag);
uint32_t _fwProbe_checkflagon_with_1_params(const char* flag);

void _fwProbe_checkxorparitymatch_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_checkxorparitymatch_with_7_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);


void _fwProbe_clearerrors_with_1_params(uint32_t RemoveIllegalBlocks);


void _fwProbe_clearlbatables_with_0_params(void);

void _fwProbe_clearwrittenqueues_with_0_params(void);

void _fwProbe_closefwlog_with_0_params(void);

uint32_t _fwProbe_cputimingsuspended_with_0_params(void);


void _fwProbe_datatrackingrestore_with_2_params(void* buffer, uint32_t bufferLen);


void _fwProbe_datatrackingsave_with_2_params(void* buffer, uint32_t bufferLen);


void _fwProbe_discardhostsectors_with_2_params(uint8_t* buff, uint32_t length);

void _fwProbe_discardlbarange_with_2_params(LBA_t StartLBA, LBA_t Length);

void _fwProbe_discardmetablock_with_2_params(uint32_t MetablockNumber, uint32_t BankNumber);

void _fwProbe_discardphysicallbas_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_bics_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_bics_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_discardphysicallbas_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_enter_read_only_mode_with_0_params(void);

void _fwProbe_fim2timeouterrorinjectremove_with_2_params(const char* command, uint32_t val);


void _fwProbe_forcedlenextlink_with_0_params(void);


void _fwProbe_forcedownload_with_0_params(void);


void _fwProbe_forceminidump_with_0_params(void);

const char * _fwProbe_fwstorage_getstring_with_1_params(const char * name);


uint64_t _fwProbe_fwstorage_getuint_with_1_params(const char * name);


void _fwProbe_fwstorage_setuint_with_2_params(const char * name, uint64_t value);


uint32_t _fwProbe_get_weakwl_block_with_4_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

uint32_t _fwProbe_getboolvar_with_1_params(const char* varName);

const char * _fwProbe_getcontrollerhwconfparam_with_1_params(const char* key);


LBA_t _fwProbe_getfirstcontrolsector_with_0_params(void);

LBA_t _fwProbe_getfirstcontrolsector_with_2_params(uint32_t dummy1, const char* dummy2);

void _fwProbe_getfwvcd_with_2_params(uint32_t index, uint32_t* value);


int32_t _fwProbe_getintvar_with_1_params(const char* varName);

LBA_t _fwProbe_getlogicalcapacity_with_0_params(void);

const char * _fwProbe_getpackagename_with_1_params(uint32_t pkg);


uint32_t _fwProbe_getramstate_with_1_params(const char* ram_name);


uint32_t _fwProbe_getramstatusmap_with_2_params(char* buffer, uint32_t length);


uint32_t _fwProbe_getsectionstart_with_2_params(uint32_t sliceNo, const char* section);

const char* _fwProbe_getstringvar_with_1_params(const char* varName);

uint32_t _fwProbe_getuintvar_with_1_params(const char* varName);

void _fwProbe_getwordlinelbas_with_9_params(LBA_t* WlLBAs_, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column, uint32_t siz);


void _fwProbe_getwordlinelbas_with_8_params(LBA_t* WlLBAs_, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column, uint32_t siz);


uint32_t _fwProbe_getwordlinestm_with_5_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Wordline);


uint32_t _fwProbe_him_probe_with_1_params_plus_varargs(uint32_t InterfaceNum, ...);

void _fwProbe_initialisexorchecks_with_2_params(uint32_t Length, uint32_t FullData);


void _fwProbe_injectdieunresponsive_with_5_params(uint32_t Package, uint32_t die, uint32_t when, uint32_t severity, uint32_t flags);


void _fwProbe_injecterror_with_14_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterror_with_13_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterrorwlbit_with_15_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_injecterrorwlbit_with_14_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column, int32_t Type, uint32_t Persistence, uint16_t DelayToOccurrence, uint16_t DelayToRecovery, uint32_t BitErrorColumn, uint32_t BitErrorMask, uint32_t LongParam);

void _fwProbe_inspect_buffer_with_4_params(const char* bufName, const unsigned char* startAddr, uint32_t len, uint32_t InterfaceNum);

void _fwProbe_invalidateblock_with_5_params(uint32_t FIM, uint32_t CE, uint32_t Die, uint32_t Plane, uint32_t Block);

void _fwProbe_invalidatemetablock_with_2_params(uint32_t MetablockNumber, uint16_t BankNumber);

uint32_t _fwProbe_ipc_overflow_check_with_4_params(const char* IpcName, const char* OverflowMode, uint32_t Index, uint32_t DoEnable);

uint32_t _fwProbe_isforcedle_with_0_params(void);


void _fwProbe_jumpnextlink_with_1_params(const char* link);


void _fwProbe_jumpnextlinkwithargs_with_1_params_plus_varargs(const char* link, ...);


void _fwProbe_jumptodle_with_0_params(void);


void _fwProbe_kernelobjectleaktest_with_0_params(void);


void _fwProbe_lbaversioninvalid_with_3_params(LBA_t lba, uint32_t partition, uint32_t length);


uint32_t _fwProbe_loadstm_with_1_params(const char* path);


void _fwProbe_modeldump_with_2_params(uint8_t* addr, uint32_t size);

void _fwProbe_modellog_with_1_params_plus_varargs(const char* format, ...);


void _fwProbe_multicheck_with_3_params(const char* type, const char* flag, uint32_t enable);

void _fwProbe_multicheckoff_with_2_params(const char* type, const char* flag);

void _fwProbe_multicheckon_with_2_params(const char* type, const char* flag);

void _fwProbe_openfwlog_with_2_params(const char * filename, const char * mode);

void _fwProbe_partition_info_with_3_params(uint32_t PartitionNumber, uint32_t SectorCount, uint32_t InterfaceNum);

void _fwProbe_physicallbaspendingaccept_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_physicallbaspendingaccept_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FirstSector, uint32_t NumSectors);

void _fwProbe_pmuglitch_with_4_params(uint32_t Rail, uint32_t Voltage, uint64_t Delay, uint64_t Width);


void _fwProbe_pmusetpower_with_4_params(uint32_t Rail, uint32_t Voltage, uint64_t Delay, uint64_t Width);


void _fwProbe_portwrite_with_4_params(uint32_t Address, uint32_t DatLengthInBits, uint32_t Data, uint16_t PacketOpCode);


void _fwProbe_primeacceptance_with_9_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t FMU, uint32_t sectors);

void _fwProbe_primeacceptance_with_8_params(uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t FMU, uint32_t sectors);

uint64_t _fwProbe_readregistervalueinzerotime_with_4_params(const char* busName, const char* moduleName, const char* registerName, uint16_t regIndexInArrayOfRegs);


void _fwProbe_registercontroldatamap_with_2_params(const char* Name, uint32_t ID);

void _fwProbe_remapkernelirq_with_2_params(uint32_t src, uint32_t dest);


void _fwProbe_resumerandomerrorinjection_with_1_params(uint32_t reType);

uint32_t _fwProbe_savestm_with_2_params(const char* path, uint32_t handle);


const char* _fwProbe_searchregisterinzerotime_with_1_params(const char* regName);


void _fwProbe_sederrorinject_with_3_params(uint32_t Addr, uint64_t Delay, uint32_t NumBitFlips);


void _fwProbe_sedinternalerrorinject_with_3_params(uint32_t Addr, uint64_t Delay, uint32_t NumBitFlips);


void _fwProbe_set_secure_format_flag_with_2_params(uint32_t isSecureFormat, uint32_t InterfaceNum);

void _fwProbe_set_user_capacity_with_3_params(LBA_t FirstLba, LBA_t LastLba, uint32_t InterfaceNum);

void _fwProbe_setadmanalogline_with_4_params(const char* command, uint32_t line_index, uint32_t value, uint64_t duration_ns);


void _fwProbe_setblockstm_with_6_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Revert);

void _fwProbe_setblockstm_with_5_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block);

uint32_t _fwProbe_setboolvar_with_2_params(const char* varName, uint32_t val);

void _fwProbe_seteventbufferflush_with_2_params(const char* command, uint32_t val);


void _fwProbe_setflashtiming_with_4_params(uint32_t Package, const char* TimingName, uint32_t TimeValue, uint32_t die);

void _fwProbe_setfwvcd_with_2_params(uint32_t index, uint32_t value);


int32_t _fwProbe_setintvar_with_2_params(const char* varName, int32_t val);

void _fwProbe_setmaxeccbits_with_1_params(uint16_t Value);

void _fwProbe_setmetablockinfo_with_3_params(uint32_t PlanesPerMetablock, uint32_t Banks, uint32_t MetablocksPerFim);

void _fwProbe_setphysicalblocks_with_4_params(uint32_t MetablockNumber, uint32_t BankNumber, uint32_t ArraySize, void* PhysicalBlocks);

void _fwProbe_setphysicalsubblocks_with_4_params(uint32_t MetablockNumber, uint32_t BankNumber, uint32_t ArraySize, void* PhysicalBlocks);

uint32_t _fwProbe_setspecialwlstm_with_7_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, const char* Wordline, uint32_t Revert);


uint32_t _fwProbe_setstringvar_with_2_params(const char* varName, const char* val);

void _fwProbe_setsystemreprogramcheck_with_2_params(uint32_t type, uint32_t _case);

void _fwProbe_setsystemreprogramcheckparam_with_6_params(uint32_t type, uint32_t offset, uint32_t mask, uint32_t delta, int32_t* fwvalues, int32_t fwvaluesSize);

void _fwProbe_setsystemreprogramscenarios_with_2_params(uint32_t type, uint32_t numCases);

uint32_t _fwProbe_setuintvar_with_2_params(const char* varName, uint32_t val);

uint32_t _fwProbe_setwordlinestm_with_7_params(uint32_t STMhandle, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t Wordline, uint32_t Revert);


void _fwProbe_snowbirdinjectirqerror_with_2_params(const char* command, uint32_t val);


void _fwProbe_strictarcaddresses_with_0_params(void);

void _fwProbe_suspendrandomerrorinjection_with_1_params(uint32_t reType);

void _fwProbe_switchtoram_with_0_params(void);


void _fwProbe_testcpuexit_with_2_params(uint32_t exitcode, const char* msg);

void _fwProbe_testcpustart_with_0_params(void);

void _fwProbe_testcpustart_with_1_params(uint32_t ignored);

void _fwProbe_testexit_with_2_params_plus_varargs(uint32_t exitcode, const char* format, ...);


void _fwProbe_trace_with_2_params(const char* flag, uint32_t enable);

void _fwProbe_traceoff_with_1_params(const char* flag);

void _fwProbe_traceon_with_1_params(const char* flag);

void _fwProbe_unknown_probe_with_1_params_plus_varargs(const char* name, ...);

void _fwProbe_vcddump_with_1_params(uint32_t enable);

void _fwProbe_writecacheswreset_with_0_params(void);

void _fwProbe_writefwlog_with_1_params_plus_varargs(const char* format, ...);

void _fwProbe_writeregisterhaltmask_with_5_params(uint32_t package, uint32_t die, uint32_t regType, uint32_t registerAddress, uint32_t mask);


void _fwProbe_writeregisterignoremask_with_5_params(uint32_t package, uint32_t die, uint32_t regType, uint32_t registerAddress, uint32_t mask);


void _fwProbe_xorunrollcomplete_with_10_params(void* buffer, uint32_t BufferLen, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t string, uint32_t wordline, uint32_t bit, uint32_t column);


void _fwProbe_xorunrollcomplete_with_9_params(void* buffer, uint32_t BufferLen, uint32_t Package, uint32_t die, uint32_t plane, uint32_t block, uint32_t page, uint32_t bit, uint32_t column);

#line 78 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/fwportability.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/platform/fw/portability.h"

#line 16 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/fwportability.h"

#line 90 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"

#line 108 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
unsigned long _LivetIntrinsic ReadRegister(unsigned long Addr);
void   _LivetIntrinsic WriteRegister(unsigned long Addr, unsigned long value);
void   _LivetIntrinsic WriteRegisterNoUpdate(unsigned long Addr, unsigned long value);
unsigned long _LivetIntrinsic ReadRegisterPtr(void *addr);
void   _LivetIntrinsic WriteRegisterPtr(void *addr, unsigned long value);
unsigned long _LivetIntrinsic ModelToHardware(unsigned long PCaddr);
unsigned long _LivetIntrinsic HardwareToModel(unsigned long ARCaddr);
unsigned char _LivetIntrinsic ReadRegister8(unsigned long Addr);
void   _LivetIntrinsic WriteRegister8(unsigned long Addr, unsigned char value);

unsigned short _LivetIntrinsic ReadRegister16(unsigned long Addr);
void   _LivetIntrinsic WriteRegister16(unsigned long Addr, unsigned short value);
unsigned short _LivetIntrinsic ReadRegisterPtr16(void *addr);
void   _LivetIntrinsic WriteRegisterPtr16(void *addr, unsigned short value);
unsigned long long _LivetIntrinsic ReadRegister64(unsigned long Addr);
void   _LivetIntrinsic WriteRegister64(unsigned long Addr, unsigned long long value);
unsigned long long _LivetIntrinsic ReadRegisterPtr64(void* addr);
void   _LivetIntrinsic WriteRegisterPtr64(void* addr, unsigned long long value);

#line 158 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic DataTracking_SectorCreated( void * DataAddr, unsigned long long LogAddr, unsigned long NumSectors, unsigned char IsControl, const char * File, int Line );
void _LivetIntrinsic Dummy_DataTracking_SectorCreated( void * DataAddr, unsigned long long LogAddr, unsigned long NumSectors, unsigned char IsControl, void * pBufThrStruct, const char * File, int Line );
void _LivetIntrinsic DataTracking_SectorCopied( void * Source, void * Destination, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_CompareExpectedNonHostData(void * Source, unsigned long long LogAddr, const char * File, int Line);
void _LivetIntrinsic DataTracking_CompareExpected(void * Source, unsigned long long LogAddr, const char * File, int Line);
void _LivetIntrinsic DataTracking_ReleaseBuffers( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_ReleaseBytes( void * Source, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagHeader( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagSeed( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagCrc( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagEcc( void * Source, unsigned long Length, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagPadOnes(void* Source, unsigned long Length, const char* File, int Line);
void _LivetIntrinsic DataTracking_TagPadZeroes(void* Source, unsigned long Length, const char* File, int Line);
void _LivetIntrinsic DataTracking_SCTPRead( void * Source, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_SCTPWrite( void * Source, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_DataErased( unsigned long long StartLBA, unsigned long long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetBitErrorRate( void * Source, unsigned long BitErrorFrac1to0, unsigned long BitErrorFrac0to1, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetEntropyValue( void * Source, unsigned char EntropyValue, const char * File, int Line );
void _LivetIntrinsic DataTracking_DefineEblock( void* parameter[], unsigned long NumFields, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetAsPaddingData( void * Addr, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_ClearPaddingData( void * Addr, unsigned long NumSectors, const char * File, int Line );
void _LivetIntrinsic DataTracking_DataCopied( void* Source, void* Destination, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_XorData( void* Source, void* Destination, unsigned long NumBytes, const char * File, int Line );
void _LivetIntrinsic DataTracking_SetHeaderFlag( void* Source, unsigned int Flag, const char * File, int Line );
void _LivetIntrinsic DataTracking_ClearHeaderFlag( void* Source, unsigned int Flag, const char * File, int Line );
void _LivetIntrinsic DataTracking_TagNumEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_TagErasedEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_ReleaseNumEBlocks(void * Source, unsigned long NumEBlocks, const char * File, int Line);
void _LivetIntrinsic DataTracking_EmulateHostWrite(void * DataAddr, unsigned long long LBA, unsigned long Written, const char * File, int Line);
void _LivetIntrinsic DataTracking_CreatedSectorWritten(void * DataAddr);
void _LivetIntrinsic DataTracking_SetPageFormatIndex(void* Source, unsigned int Length, unsigned char Index, const char* File, int Line);

#line 234 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic ModelBlock(int FromRTOS);
void _LivetIntrinsic ModelUnblock(void);
void _LivetIntrinsic LivetCpuTimedDelay(unsigned long NumClocks);






void _LivetIntrinsic LivetCpuWaitSignal(unsigned int CoreId, unsigned int TimeoutMicroSecs);
void _LivetIntrinsic LivetCpuSendSignal(void);




void _LivetIntrinsic  EnableIrq();
int  _LivetIntrinsic  DisableIrq();
int  _LivetIntrinsic  RestoreIrq(int val);
void _LivetIntrinsic  EnableFiq();
int  _LivetIntrinsic  DisableFiq();
void _LivetIntrinsic  Wfi();
void _LivetIntrinsic  Wfe();
void _LivetIntrinsic SetCPSR(unsigned int cpsr);
unsigned int _LivetIntrinsic GetCPSR();
void _LivetIntrinsic CP15RegWrite64(unsigned int opc1, unsigned int srcLo, unsigned int srcHi, unsigned int CRm);
unsigned long long _LivetIntrinsic CP15RegRead64(unsigned int opc1, unsigned int CRm);
void _LivetIntrinsic CP15RegWrite(unsigned int opc1, unsigned int src, unsigned int CRn, unsigned int CRm, unsigned int opc2);
unsigned int _LivetIntrinsic CP15RegRead(unsigned int opc1, unsigned int CRn, unsigned int CRm, unsigned int opc2);

#line 276 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic LivetCpuSuspendCurrent(void);
void _LivetIntrinsic LivetCpuSuspend(unsigned int CoreId);
void _LivetIntrinsic LivetCpuResume(unsigned int CoreId);
void _LivetIntrinsic LivetCpuRestart(unsigned int CoreId);







void _LivetIntrinsic RegisterWaypoint(int EventKey, const char *EventName);
void _LivetIntrinsic _LivetZeroTime Waypoint(int EventKey, unsigned long NumArgs, ...);
void _LivetIntrinsic _LivetYield();
 extern int *WaypointMap;







void _LivetIntrinsic MediaModel_SpindleSpinUp();
void _LivetIntrinsic MediaModel_SpindleStopSpindle();
void _LivetIntrinsic MediaModel_SpindleReduceToStandbySpeed();
void _LivetIntrinsic MediaModel_SpindleRecoverFromStandbySpeed();
unsigned long _LivetIntrinsic MediaModel_SpindleGetCurrentSpeed();

unsigned long _LivetIntrinsic MediaModel_IsSpindleStopped();
unsigned long _LivetIntrinsic MediaModel_IsSpindleFullSpeed();
unsigned long _LivetIntrinsic MediaModel_IsSpindleStandby();

void _LivetIntrinsic MediaModel_HeadParkHead( unsigned long Actuator, unsigned long Tag );
void _LivetIntrinsic MediaModel_HeadMoveToTrack( unsigned long Actuator, unsigned long TrackID, unsigned long Tag );
void _LivetIntrinsic MediaModel_HeadMoveToTrackWithOffset(unsigned long Actuator, unsigned long TrackID, unsigned long Tag, short int Offset);
void _LivetIntrinsic MediaModel_HeadSwitchHead( unsigned long Actuator, unsigned long HeadID, unsigned long Tag );
void _LivetIntrinsic MediaModel_SetInhibitSID( unsigned long Actuator, unsigned long InhibitSID );

unsigned long _LivetIntrinsic MediaModel_HeadGetLastCompletedTag(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentTrack(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentHead(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentSID(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetCurrentSector(unsigned long Actuator);
unsigned long _LivetIntrinsic MediaModel_HeadGetLastSeekStartSID(unsigned long Actuator);

void _LivetIntrinsic MediaModel_HeadAbortOperation(unsigned long Actuator, unsigned long Tag);

unsigned long _LivetIntrinsic MediaModel_HeadWriteSectors(unsigned long Actuator, unsigned long StartOffset, unsigned long NumSectors, void * DataAddr, void * MDAddr, unsigned long Tag);
unsigned long _LivetIntrinsic MediaModel_HeadReadSectors(unsigned long Actuator, unsigned long StartOffset, unsigned long NumSectors, void * DataAddr, void * MDAddr, unsigned long Tag);

void _LivetIntrinsic MediaModel_WaitForHeadCompletion(unsigned long Actuator, unsigned long Tag);
unsigned long _LivetIntrinsic MediaModel_HeadGetSIDCount(unsigned long Actuator);

void _LivetIntrinsic MediaModel_InjectError(unsigned long Head, unsigned long Track, unsigned long Sector, void* ErrorDesc);
void _LivetIntrinsic MediaModel_SetLogicalTrigger(unsigned long long LBA, unsigned long Operation, unsigned long SkipCount, void* ErrorDesc);
void _LivetIntrinsic MediaModel_InjectSeekError(unsigned long Head, unsigned int TargetTrack, void* ErrorDesc);

unsigned long _LivetIntrinsic LivetCPU_CheckDestructorReset();

#line 352 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void *LivetMemcpy(void *dst, const void *src, size_t sz);
void *LivetMemmove(void *dst, const void *src, size_t sz);
void *LivetMemset(void *dst, int val, size_t sz);
int LivetMemcmp ( const void *p1, const void *p2, size_t sz);
char * LivetStrcpy(char *dst, const char * src);
size_t LivetStrlen(const char * str);
void *LibMemcpy(void *dst, const void *src, size_t sz);
void *LibMemmove(void *dst, const void *src, size_t sz);
void *LibMemset(void *dst, int val, size_t sz);
int LibMemcmp ( const void *p1, const void *p2, size_t sz);
char * LibStrcpy(char *dst, const char * src);
size_t LibStrlen(const char * str);

#line 421 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
void _LivetIntrinsic HaltFileLineMsg(const char *file,int line,const char *msg);



_LivetIntrinsic void* _fwProbe(const char *cmd, ...);

#line 454 "d:/gitrepo/fpgcss-vega/_out/model/livetsource/source/firmwareinterface/modelmacros.h"
typedef unsigned long long LBA_t;




static const LBA_t UNDEFINED_LBA             = ( (LBA_t)(-1)  - 1);

static const LBA_t PAD_ZEROS_SECTOR          = ( (LBA_t)(-1)  - 3);
static const LBA_t PAD_ONES_SECTOR           = ( (LBA_t)(-1)  - 4);
static const LBA_t PAD_PATTERN_SECTOR        = ( (LBA_t)(-1)  - 5);










static const LBA_t PAD_OVERWRITTEN           = ( (LBA_t)(-1)  - 16);




static const LBA_t THROW_AWAY_DATA           = ( (LBA_t)(-1)  - 21);

#line 72 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_platformmacros.h"

   extern BOOL _always_false_;

#line 103 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_platformmacros.h"
   extern void ARCSleep(unsigned long IntMask);







   void   _sr(uint32 value, uint32 regNum);
   uint32 _lr(uint32 regNum);

#line 141 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_platformmacros.h"
   extern void _ASM(char*);


   __inline static  void EnableInt(void)
   {
      _seti(0x1F);
   }



   __inline static  uint32_t DisableInt(void)
   {
      return _clri();
   }



   __inline static  void RestoreInt(uint32_t old_posture)
   {
      _seti(old_posture);;
   }

#line 65 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_statuscoderanges.h"
#line 25 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_statuscoderanges.h"
typedef enum Status_T_Ranges_e
{
   STATUS_OK               = 0,
   STATUS_ERROR            = 1,
   STATUS_BOOT_ROM_BASE    = 0x00000010,
   STATUS_BEFS_BASE        = 0x01000000,
   STATUS_NVME_BASE        = 0x02000000,
   STATUS_FTL_BASE         = 0x03000000,
   STATUS_INFRA_BASE       = 0x04000000,
   STATUS_PS_BASE          = 0x05000000,
   STATUS_SECURITY_BASE    = 0x06000000,
   STATUS_DIAG_BASE        = 0x07000000,
   STATUS_IEXA_BASE        = 0x08000000,
}   Status_T_Ranges_t;







typedef uint32_t Status_t;


typedef union status32_Map
{

   uint32_t all32;


   struct ROM_SecurityStatus_s
   {
      uint32_t detailedErr       : 22;
      uint32_t notUsed1          : 2;
      uint32_t ip                : 4;
      uint32_t notUsed2          : 4;
   } ROM_SecurityStatusMap;


   struct ROM_GeneralStatus_s
   {
      uint32_t detailedErr       : 16;
      uint32_t notUsed1          : 8;
      uint32_t ip                : 4;
      uint32_t notUsed2          : 4;
   } ROM_GeneralStatusMap;
}status32_Map_t;

#line 66 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng_groups.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"
enum SYS_OVL_GROUP_ID_e
{
    SYS_OVL_GROUP_ID_NONE = 0,
    SYS_OVL_GROUP_ID_DIAG,
    SYS_OVL_GROUP_ID_DIAG_2,
    SYS_OVL_GROUP_ID_DIAG_3,
    SYS_OVL_GROUP_ID_DIAG_4,

    SYS_OVL_GROUP_ID_FE_SEC_ST,
    SYS_OVL_GROUP_ID_FE_SMART,
    SYS_OVL_GROUP_ID_FE_SMART_RESET,
    SYS_OVL_GROUP_ID_FE_ADMIN_SETFEATURE,
    SYS_OVL_GROUP_ID_FE_ADMIN_GETFEATURE,
    SYS_OVL_GROUP_ID_FE_ADMIN_DELETEQ,
    SYS_OVL_GROUP_ID_FE_ADMIN_IDENTIFY,
    SYS_OVL_GROUP_ID_FE_ADMIN_DST,
    SYS_OVL_GROUP_ID_FE_ADMIN_FORMAT,
    SYS_OVL_GROUP_ID_FE_ADMIN_DOWNLOAD,
    SYS_OVL_GROUP_ID_FE_ADMIN_COMMIT,
    SYS_OVL_GROUP_ID_FE_ADMIN_CREATEQ,
    SYS_OVL_GROUP_ID_FE_GET_LOGPAGE_DIRECT,
    SYS_OVL_GROUP_ID_FE_GET_LOGPAGE_START,
    SYS_OVL_GROUP_ID_FE_GET_LOGPAGE_COMPLETE,
    SYS_OVL_GROUP_ID_FE_NAMESPACE,
    SYS_OVL_GROUP_ID_FE_NAMESPACE_ATTACH,
    SYS_OVL_GROUP_ID_FE_NAMESPACE_DEL,
    SYS_OVL_GROUP_ID_FE_NAMESPACE_CREATE,
    SYS_OVL_GROUP_ID_FE_NAMESPACE_DETACH,
    SYS_OVL_GROUP_ID_FE_IO_WUC,
    SYS_OVL_GROUP_ID_FE_IO_FLUSH,
    SYS_OVL_GROUP_ID_FE_IO_COMPARE,
    SYS_OVL_GROUP_ID_FE_IO_READ,
    SYS_OVL_GROUP_ID_FE_ERROR_LOG_E2E_ERROR,
    SYS_OVL_GROUP_ID_FE_ERROR_LOGERROR,
    SYS_OVL_GROUP_ID_FE_INIT_FW_INIT,
    SYS_OVL_GROUP_ID_FE_INIT_HIM_INIT,
    SYS_OVL_GROUP_ID_FE_PMM,
    SYS_OVL_GROUP_ID_FE_TASK,
    SYS_OVL_GROUP_ID_FE_PMM_AON,
    SYS_OVL_GROUP_ID_FE_FSM,
    SYS_OVL_GROUP_ID_FE_LBA_CHECK,
    SYS_OVL_GROUP_ID_FE_HW_SET_EVENTS,
    SYS_OVL_GROUP_ID_FE_CMD_ERR,
    SYS_OVL_GROUP_ID_FE_POWER_LOSS,
    SYS_OVL_GROUP_ID_FE_HNVME,
    SYS_OVL_GROUP_ID_FE_PCIE_EYE,
    SYS_OVL_GROUP_ID_FE_HMB,
    SYS_OVL_GROUP_ID_FE_LOCKDOWN,
    SYS_OVL_GROUP_ID_FE_ADMIN_VS_LED,
    SYS_OVL_GROUP_ID_FE_ADMIN_VS_HMB,
    SYS_OVL_GROUP_ID_FE_ADMIN_VS_COMMON,
    SYS_OVL_GROUP_ID_FE_DOE_INIT_RESET,
    SYS_OVL_GROUP_ID_FE_DOE,
    SYS_OVL_GROUP_ID_FE_HAQ,
    SYS_OVL_GROUP_ID_FE_PCIE,
    SYS_OVL_GROUP_ID_FE_MAIN,
    SYS_OVL_GROUP_ID_FE_HAL,
    SYS_OVL_GROUP_ID_FE_VS_EI,
    SYS_OVL_GROUP_ID_FE_FIS,
    SYS_OVL_GROUP_ID_FE_CROSS_IP,
    SYS_OVL_GROUP_ID_FE_SANITIZE,
    SYS_OVL_GROUP_ID_FE_VS_CD_LOG,
    SYS_OVL_GROUP_ID_FE_HMD,

    SYS_OVL_GROUP_ID_INFRA_UART,
    SYS_OVL_GROUP_ID_INFRA_EVTSTATUS,
    SYS_OVL_GROUP_ID_INFRA_GPIO,
    SYS_OVL_GROUP_ID_INFRA_EFUSE,
    SYS_OVL_GROUP_ID_INFRA_EFUSE_WRITE,
    SYS_OVL_GROUP_ID_INFRA_PSREQ,
    SYS_OVL_GROUP_ID_INFRA_FADI,
    SYS_OVL_GROUP_ID_INFRA_FFU,
    SYS_OVL_GROUP_ID_INFRA_SCTP_CONFIGURE,
    SYS_OVL_GROUP_ID_INFRA_THERMAL,
    SYS_OVL_GROUP_ID_INFRA_RDC,
    SYS_OVL_GROUP_ID_INFRA_FS,
    SYS_OVL_GROUP_ID_INFRA_COMMON,
    SYS_OVL_GROUP_ID_INFRA_FTLREQ,
    SYS_OVL_GROUP_ID_INFRA_RW,
    SYS_OVL_GROUP_ID_INFRA_I2C,
    SYS_OVL_GROUP_ID_INFRA_CLOCK,

    SYS_OVL_GROUP_ID_FTL_FNVM,
    SYS_OVL_GROUP_ID_FTL_FNVM_2,
    SYS_OVL_GROUP_ID_FTL_HWD_GRP,
    SYS_OVL_GROUP_ID_FTL_PWS,
    SYS_OVL_GROUP_ID_FTL_MNT,
    SYS_OVL_GROUP_ID_FTL_MNT_2,
    SYS_OVL_GROUP_ID_FTL_MNT_3,
    SYS_OVL_GROUP_ID_FTL_MNT_4,
    SYS_OVL_GROUP_ID_FTL_MNT_5,
    SYS_OVL_GROUP_ID_FTL_MNT_6,
    SYS_OVL_GROUP_ID_FTL_MNT_7,
    SYS_OVL_GROUP_ID_FTL_MNT_8,
    SYS_OVL_GROUP_ID_FTL_MNT_9,
    SYS_OVL_GROUP_ID_FTL_MNT_10,
    SYS_OVL_GROUP_ID_FTL_MNT_11,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_2,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_3,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_4,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_5,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_6,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_7,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_8,
    SYS_OVL_GROUP_ID_FTL_MNT_UGSD_9,
    SYS_OVL_GROUP_ID_FTL_FIRST_MNT,
    SYS_OVL_GROUP_ID_FTL_FIRST_MNT2,
    SYS_OVL_GROUP_ID_FTL_SHD,
    SYS_OVL_GROUP_ID_FTL_DPS2,
    SYS_OVL_GROUP_ID_FTL_CS,
    SYS_OVL_GROUP_ID_FTL_CS_2,
    SYS_OVL_GROUP_ID_FTL_RSS,
    SYS_OVL_GROUP_ID_FTL_RESET_REUSE,
    SYS_OVL_GROUP_ID_FTL_OPEN_COLSE,
    SYS_OVL_GROUP_ID_FTL_OPEN_COLSE_2,
    SYS_OVL_GROUP_ID_FTL_ALLOC,
    SYS_OVL_GROUP_ID_FTL_BRLC,
    SYS_OVL_GROUP_ID_FTL_MTM_MOUNT,
    SYS_OVL_GROUP_ID_FTL_MTM_RLC,
    SYS_OVL_GROUP_ID_FTL_BML,
    SYS_OVL_GROUP_ID_FTL_BML_GENERAL,
    SYS_OVL_GROUP_ID_FTL_BML_GENERAL_2,
    SYS_OVL_GROUP_ID_FTL_BML_ALLOCATE,
    SYS_OVL_GROUP_ID_FTL_BML_ALLOCATE_2,
    SYS_OVL_GROUP_ID_FTL_BML_ALLOCATE_3,
    SYS_OVL_GROUP_ID_FTL_BML_RELEASE,
    SYS_OVL_GROUP_ID_FTL_BML_DECOMISSION,
    SYS_OVL_GROUP_ID_FTL_BML_CONTROL_SYNC,
    SYS_OVL_GROUP_ID_FTL_RLC_SRC_SELECTION,
    SYS_OVL_GROUP_ID_FTL_RS,
    SYS_OVL_GROUP_ID_FTL_RS_2,
    SYS_OVL_GROUP_ID_FTL_XORM_RLC,
    SYS_OVL_GROUP_ID_FTL_DST,
    SYS_OVL_GROUP_ID_FTL_BKOPS,
    SYS_OVL_GROUP_ID_FTL_SMART,
    SYS_OVL_GROUP_ID_FTL_SMART_2,
    SYS_OVL_GROUP_ID_FTL_SMART_3,
    SYS_OVL_GROUP_ID_FTL_SMART_4,
    SYS_OVL_GROUP_ID_FTL_ERROR_LOG,
    SYS_OVL_GROUP_ID_FTL_PRM,
    SYS_OVL_GROUP_ID_FTL_DHM,
    SYS_OVL_GROUP_ID_FTL_CONFIG_GET,
    SYS_OVL_GROUP_ID_FTL_READ_ONLY,
    SYS_OVL_GROUP_ID_FTL_MVP,

    SYS_OVL_GROUP_ID_SECURITY_HMAC_CALCULATION,
    SYS_OVL_GROUP_ID_SECURITY_RSA,
    SYS_OVL_GROUP_ID_SECURITY_TCG_PARSER,
    SYS_OVL_GROUP_ID_SECURITY_UTILITIES,
    SYS_OVL_GROUP_ID_SECURITY_RETRIEVE_DATA,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB2,
    SYS_OVL_GROUP_ID_SECURITY_HANDLE_COMMAND,
    SYS_OVL_GROUP_ID_SECURITY_RESPONSE_GENERATOR,
    SYS_OVL_GROUP_ID_SECURITY_CRYPTO_LIB,
    SYS_OVL_GROUP_ID_SECURITY_CRYPTO_KEY_MANAGEMENT,
    SYS_OVL_GROUP_ID_SECURITY_CRYPTO_KEY_MANAGEMENT2,
    SYS_OVL_GROUP_ID_SECURITY_PMM_EXIT,
    SYS_OVL_GROUP_ID_SECURITY_ATA,
    SYS_OVL_GROUP_ID_SECURITY_TCG_GENERAL,
    SYS_OVL_GROUP_ID_SECURITY_TCG_TRIM,
    SYS_OVL_GROUP_ID_SECURITY_COMMON_ATA_TCG,
    SYS_OVL_GROUP_ID_SECURITY_KM,
    SYS_OVL_GROUP_ID_SECURITY_RMA,
    SYS_OVL_GROUP_ID_SECURITY_LOG,
    SYS_OVL_GROUP_ID_SECURITY_PRODUCTION,
    SYS_OVL_GROUP_ID_SECURITY_PRODUCTION2,
    SYS_OVL_GROUP_ID_SECURITY_PRODUCTION_PARAM_SAVER,
    SYS_OVL_GROUP_ID_SECURITY_PRODUCTION_DLE_GROUP,
    SYS_OVL_GROUP_ID_SECURITY_FTL,
    SYS_OVL_GROUP_ID_SECURITY_CONFIGURATION,
    SYS_OVL_GROUP_ID_SECURITY_TCG_CU,
    SYS_OVL_GROUP_ID_SECURITY_TCG_BT,
    SYS_OVL_GROUP_ID_SECURITY_TCG_BT2,
    SYS_OVL_GROUP_ID_SECURITY_UTILITIES_FILES,
    SYS_OVL_GROUP_ID_SECURITY_UTILITIES_MM,
    SYS_OVL_GROUP_ID_SECURITY_UTILITIES_TRNG,
    SYS_OVL_GROUP_ID_SECURITY_UTILITIES_CONFIG,
    SYS_OVL_GROUP_ID_SECURITY_TCG_BLOCK_SID,
    SYS_OVL_GROUP_ID_SECURITY_TCG_KEYS,
    SYS_OVL_GROUP_ID_SECURITY_TCG_GENERAL_HANDLER,
    SYS_OVL_GROUP_ID_SECURITY_TCG_GENERAL_HANDLER2,
    SYS_OVL_GROUP_ID_SECURITY_TCG_PARSER_ERROR,
    SYS_OVL_GROUP_ID_SECURITY_TCG_PARSER_HEADER,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB_RANGES,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB_GENERAL,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB_AC,
    SYS_OVL_GROUP_ID_SECURITY_TCG_SDB_TRANSACTION,
    SYS_OVL_GROUP_ID_SECURITY_TCG_GENERAL_REACTIVATE,
    SYS_OVL_GROUP_ID_SECURITY_TCG_HANDLER_OPERATION,
    SYS_OVL_GROUP_ID_SECURITY_TCG_PARSER_UPDATE,
    SYS_OVL_GROUP_ID_SECURITY_TCG_LEMON_PARSER,
    SYS_OVL_GROUP_ID_SECURITY_TELEMETRY,
    SYS_OVL_GROUP_ID_SECURITY_EDRIVE,
    SYS_OVL_GROUP_ID_SECURITY_RPMB,
    SYS_OVL_GROUP_ID_SECURITY_RPMB2,
    SYS_OVL_GROUP_ID_SECURITY_RPMB3,
    SYS_OVL_GROUP_ID_SECURITY_FIPS_PROTOCOL,
    SYS_OVL_GROUP_ID_SECURITY_SBOOT_LOG,
};

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/ftl_sys_ovl.h"

#line 225 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/infra_sys_ovl.h"

#line 226 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/fe_nvme_sys_ovl.h"

#line 227 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/security_sys_ovl.h"

#line 228 "d:/gitrepo/fpgcss-vega/source/infra/modules/aom/inc_public/sys_ovl.h"

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng_groups.h"

#line 17 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng_ftl_groups.h"

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng_fe_groups.h"

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/modules/codeattrgrpmng/inc_public/sys_codeattrgrpmng.h"

#line 68 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"

#line 76 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
      enum
      {
         SECTOR_SIZE_IN_BYTES       = 512,
         SECTOR_SIZE_IN_BYTES_LOG2  = 9,
      };



      enum
      {
         BLOCK_SIZE_512_BYTES_LOG2   = 9,
         BLOCK_SIZE_1KB_BYTES_LOG2   = 10,
         BLOCK_SIZE_2KB_BYTES_LOG2   = 11,
         BLOCK_SIZE_4KB_BYTES_LOG2   = 12,
         BLOCK_SIZE_8KB_BYTES_LOG2   = 13,
         BLOCK_SIZE_16KB_BYTES_LOG2  = 14,

         BLOCK_SIZE_512_BYTES        = 512,
         BLOCK_SIZE_1KB_BYTES        = 1024,
         BLOCK_SIZE_2KB_BYTES        = 2048,
         BLOCK_SIZE_4KB_BYTES        = 4096,
         BLOCK_SIZE_8KB_BYTES        = 8192,
         BLOCK_SIZE_16KB_BYTES       = 16384,
         BLOCK_SIZE_32KB_BYTES       = 32768,
         BLOCK_SIZE_64KB_BYTES       = 65536,
         BLOCK_SIZE_128KB_BYTES      = 131072,
         BLOCK_SIZE_256KB_BYTES      = 262144,
         BLOCK_SIZE_512KB_BYTES      = 524288,
      };

#line 126 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_globals.h"
      extern BOOL8  reserveTRW ;

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_assert.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/sysexception/inc_public/sys_exceptionhandling_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/ll_exphdl.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/modules/sysexception/inc_public/sys_exceptionhandling_api.h"

#line 36 "d:/gitrepo/fpgcss-vega/source/infra/modules/sysexception/inc_public/sys_exceptionhandling_api.h"
typedef struct {
   PVFV_t Reset;
   PVFV_t MemoryError;
   PVFV_t InstructionError;
   PVFV_t EV_MachineCheck;
   PVFV_t EV_TLBMissI;
   PVFV_t EV_TLBMissD;
   PVFV_t EV_ProtV;
   PVFV_t EV_PrivilegeV;
   PVFV_t EV_SWI;
   PVFV_t EV_Trap;
   PVFV_t EV_Extension;
   PVFV_t EV_DivZero;
   PVFV_t EV_DCError;
   PVFV_t EV_Maligned;
   PVFV_t Unused0;
   PVFV_t Unused1;
} SYS_ARCv2ExceptionVector_t, *SYS_ARCv2ExceptionVector_tp;

typedef union {
   struct {
      uint32_t H  : 1;
      uint32_t E  : 4;
      uint32_t AE : 1;
      uint32_t DE : 1;
      uint32_t U  : 1;
      uint32_t V  : 1;
      uint32_t C  : 1;
      uint32_t N  : 1;
      uint32_t Z  : 1;
      uint32_t L  : 1;
      uint32_t DZ : 1;
      uint32_t SC : 1;
      uint32_t ES : 1;
      uint32_t RB : 3;
      uint32_t AD : 1;
      uint32_t US : 1;
      uint32_t Reserved : 10;
      uint32_t IE : 1;
   } b;
   uint32_t all;
} ARCv2_Status32_t, *ARCv2_Status32_tp;

typedef union {
   struct {
      uint32_t Parameter : 8;
      uint32_t CauseCode : 8;
      uint32_t VectorNum : 8;
      uint32_t Reserved  : 6;
      uint32_t U         : 1;
      uint32_t P         : 1;
   } b;
   uint32_t all;
} ARCv2_ExceptionCauseRegister_t, *ARCv2_ExceptionCauseRegister_tp;

typedef struct {
   uint32_t eret;
   uint32_t erbta;
   ARCv2_Status32_t erstatus;
   ARCv2_ExceptionCauseRegister_t ecr;
   uint32_t efa;
} ARCv2_ExceptionRegisters_t, *ARCv2_ExceptionRegisters_tp;

typedef struct {
   uint32_t type;
   ARCv2_Status32_t status32;
   uint32_t r[26];
   uint32_t gp;
   uint32_t fp;
   uint32_t sp;
   uint32_t ilink;
   uint32_t r30;
   uint32_t blink;
   ARCv2_ExceptionRegisters_t expt;
} SYS_ExceptionData_t, *SYS_ExceptionData_tp;

typedef struct {
   uint16_t fileName;
   uint16_t line;
   uint32_t logCode;
   uint32_t parm0;
   uint32_t parm1;
   uint32_t parm2;
   uint32_t parm3;
   uint32_t parm4;
   BOOL     bcStayOn;
   SYS_ExceptionData_t expData;
} SYS_FwExceptionData_t, *SYS_FwExceptionData_tp;

#line 142 "d:/gitrepo/fpgcss-vega/source/infra/modules/sysexception/inc_public/sys_exceptionhandling_api.h"
typedef enum ExceptionHandlingResult_e
{
   EXCEPTION_RECOVER = 0,
   EXCEPTION_HALT,
   EXCEPTION_RESULT_TYPES
} ExceptionHandlingResult_t;


typedef enum {
   SYS_FATAL_RESET_TYPE_NONE = 0,
   SYS_FATAL_RESET_TYPE_GEN,
   SYS_FATAL_RESET_TYPE_HW,
   SYS_FATAL_RESET_TYPE_DP,
   SYS_FATAL_RESET_TYPES
} SYS_FatalResetType_t;

#line 180 "d:/gitrepo/fpgcss-vega/source/infra/modules/sysexception/inc_public/sys_exceptionhandling_api.h"
Status_t SYS_ExceptionHandlingInit(void);
void SYS_DisableResetHandling(void);
uint32_t SYS_GetCoreIndex(void);
SYS_ExceptionData_tp SYS_GetLastExceptionData(void);
SYS_FwExceptionData_tp SYS_GetLastFwExceptionData(void);
void SYS_FwException(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t parm0, uint32_t parm1, uint32_t parm2, uint32_t parm3, uint32_t parm4);
void SYS_FwExceptionGeneric(uint16_t fileName, uint16_t line);
SYS_FatalResetType_t SYS_GetFatalResetType(void);
SYS_FatalResetType_t SYS_SetFatalResetType(SYS_FatalResetType_t type);

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_assert.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_debug.h"

#line 21 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_assert.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/asic_constants.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/dllbuild/shuri_ei.ram/softmap.h"

#line 21 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/asic_constants.h"

#line 41 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines_vega.h"

#line 120 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines_vega.h"
typedef struct _SFR_AON {
    HW_REG AON_RAM_CTRL                                 ;
    HW_REG Reserved0;
    HW_REG TBRAM_CTRL                                   ;
    HW_REG Reserved1;
    HW_REG AON_CPU_MEM_CTRL                             ;
    HW_REG Reserved2;
    HW_REG I3C_RAM_CTRL                                 ;
    HW_REG AON_MLM_CTRL                                 ;
    HW_REG Reserved3;
    HW_REG I3C_CTRL_1                                   ;
    HW_REG I3C_CTRL_2                                   ;
    HW_REG I3C_CTRL_3                                   ;
    HW_REG AON_GPIO_CTRL_1                              ;
    HW_REG AON_GPIO_CTRL_2                              ;
    HW_REG AON_GPIO_CTRL_3                              ;
    HW_REG MTS_CTRL_1                                   ;
    HW_REG MTS_CTRL_2                                   ;
    HW_REG AON_ICG_CTRL                                 ;
    HW_REG JTAG_CTRL                                    ;
    HW_REG AON_CMC_PD_MODE_STATUS                       ;
    HW_REG MP0_PC                                       ;
    HW_REG MP1_PC                                       ;
    HW_REG PS0_PC                                       ;
    HW_REG PS1_PC                                       ;
    HW_REG GP_FW_REG_1                                  ;
    HW_REG GP_FW_REG_2                                  ;
    HW_REG GP_FW_REG_3                                  ;
    HW_REG CLKREQ_CTRL                                  ;
    HW_REG SOC2AON_CPU_IRQ                              ;
    HW_REG SPARE_REG_IN                                 ;
    HW_REG SPARE_REG_OUT                                ;
    HW_REG Reserved4;
    HW_REG DEBUG_WRAP_IEX2SOC_IRQ                       ;
    HW_REG SECURITY_DIS_STRAP_PAD_CTRL                  ;
    HW_REG ATB_PAD_CTRL                                 ;
    HW_REG FW_TRIG_PAD_CTRL                             ;
    HW_REG PMIC_PAD_CTRL                                ;
    HW_REG AON_MEM_STATUS                               ;
    HW_REG SOC2HE_CPU_IRQ                               ;
    HW_REG NGSET0_DETECT_MATCH                          ;
    HW_REG Reserved5[24];
    HW_REG SOC2MP0_CPU_IRQ                              ;
    HW_REG SOC2MP1_CPU_IRQ                              ;
    HW_REG SOC2PS0_CPU_IRQ                              ;
    HW_REG SOC2PS1_CPU_IRQ                              ;
    HW_REG I2C_I3C_SMBUS_PAD_CTRL                       ;
    HW_REG AON_MLM_HW_PURGE_EN                          ;
    HW_REG I3C_SMBUS_START_DETECTION                    ;
    HW_REG Reserved6;
    HW_REG EXCPN_IRQ_GEN                                ;
    HW_REG EXCPN_IRQ_CLR                                ;
    HW_REG EXCPN_IRQ_STATUS                             ;
    HW_REG EXCPN_IRQ_HISTORY0                           ;
    HW_REG EXCPN_IRQ_HISTORY1                           ;
    HW_REG EXCPN_IRQ_HISTORY2                           ;
    HW_REG EXCPN_IRQ_HISTORY3                           ;
    HW_REG Reserved7;
    HW_REG ROM_STATUS                                   ;
    HW_REG DEBUG_PHY_CLK_STATUS                         ;
    HW_REG Reserved8[2];
    HW_REG PERSTN_PAD_DEB_CTRL                          ;
    HW_REG PERSTN_PAD_DEB_TIMER_LO_CFG                  ;
    HW_REG PERSTN_PAD_DEB_TIMER_HI_CFG                  ;
    HW_REG PERSTN_PAD_DEB_IRQ_MASK                      ;
    HW_REG PERSTN_PAD_DEB_IRQ_CLR                       ;
    HW_REG PERSTN_PAD_DEB_IRQ_STATUS                    ;
    HW_REG PERSTN_PAD_RAW_STATUS                        ;
    HW_REG Reserved9;
    HW_REG CLKREQN_PAD_DEB_CTRL                         ;
    HW_REG CLKREQN_PAD_DEB_TIMER_LO_CFG                 ;
    HW_REG CLKREQN_PAD_DEB_TIMER_HI_CFG                 ;
    HW_REG CLKREQN_PAD_DEB_IRQ_MASK                     ;
    HW_REG CLKREQN_PAD_DEB_IRQ_CLR                      ;
    HW_REG CLKREQN_PAD_DEB_IRQ_STATUS                   ;
    HW_REG CLKREQN_PAD_RAW_STATUS                       ;
    HW_REG AON_IRQ_23_MASK                              ;
    HW_REG MP0_CTRL                                     ;
    HW_REG MP1_CTRL                                     ;
    HW_REG PS0_CTRL                                     ;
    HW_REG PS1_CTRL                                     ;
    HW_REG AON_CPU_SLEEP_STATUS                         ;
    HW_REG AON_LP_CTRL_1                                ;
    HW_REG AON_LP_CTRL_2                                ;
    HW_REG Reserved10[5];
    HW_REG AON_IRQ_23_STATUS                            ;
    HW_REG VDD_CORE_DIP_IRQ_MASK                        ;
    HW_REG Reserved11[2];
    HW_REG XTAL_CLK_LOSS_CONFIG                         ;
    HW_REG HOST_PHY_CLK_LOSS_CONFIG                     ;
}SFR_AON_t, *PSFR_AON;

#line 45 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_analogue_defines_vega.h"

#line 115 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_analogue_defines_vega.h"
typedef struct _SFR_ANALOGUE {
    HW_REG PCMS_OSC_CTRL_REG                            ;
    HW_REG PCMS_OSC_STATUS_REG                          ;
    HW_REG PCMS_VDET_REG                                ;
    HW_REG PCMS_FORCE_POR_REG                           ;
    HW_REG Reserved0;
    HW_REG PCMS_FORCE_POC_GPIO_AON_HIGH_REG             ;
    HW_REG Reserved1;
    HW_REG PCMS_RESET_REG                               ;
    HW_REG PCMS_VOK_STATUS_REG                          ;
    HW_REG PCMS_PVT_1_REG                               ;
    HW_REG STRESS_SENSOR_CTRL_REG                       ;
    HW_REG PCMS_ATEST_CTRL_REG                          ;
    HW_REG PCMS_SPARE_IN_REG1                           ;
    HW_REG PCMS_SPARE_OUT_REG                           ;
    HW_REG XTAL_CTRL_REG                                ;
    HW_REG AON_SOFT_RSTN_REG                            ;
    HW_REG CORE_SOFT_RSTN_REG                           ;
    HW_REG RING_OSC_CTRL_REG                            ;
    HW_REG PCMS_DPLL_CTRL_REG                           ;
    HW_REG Reserved2;
    HW_REG HIM_DP_CLK_SEL_REG                           ;
    HW_REG HIM_PWR_SW_CTRL_REG                          ;
    HW_REG HIM_PWR_SW_ACK_REG                           ;
    HW_REG Reserved3[2];
    HW_REG MP1_DCCM_PWR_REG                             ;
    HW_REG PS0_DCCM_PWR_REG                             ;
    HW_REG PS1_DCCM_PWR_REG                             ;
    HW_REG MRAM1A_PWR_REG                               ;
    HW_REG MRAM2A_PWR_REG                               ;
    HW_REG Reserved4;
    HW_REG TRAM_PWR_REG                                 ;
    HW_REG XRAM_PWR_REG                                 ;
    HW_REG ADP_RAM_PWR_REG                              ;
    HW_REG TBRAM1_PWR_REG                               ;
    HW_REG PCMS_VDET_REG2                               ;
    HW_REG PCMS_DEBUG_VDET_REG                          ;
    HW_REG PCMS_SPARE_IN_REG2                           ;
    HW_REG PCMS_FORCE_POC_FIO1_HIGH_REG                 ;
    HW_REG PCMS_FORCE_SIGNATURE_REG                     ;
    HW_REG MRAM1B_PWR_REG                               ;
    HW_REG MRAM2B_PWR_REG                               ;
    HW_REG Reserved5[2];
    HW_REG SFR_ROT_HW_CTRL                              ;
    HW_REG PCMS_RLT_OSC_CTRL_REG                        ;
    HW_REG PCMS_RLT_OSC_STATUS_REG                      ;
    HW_REG PCMS_FORCE_POC_GPIO_AON_LOW_REG              ;
    HW_REG PCMS_FORCE_POC_FIO1_LOW_REG                  ;
    HW_REG PCMS_ALL_VDETS_RESET_POR_REG                 ;
    HW_REG PCMS_CLEAR_ALL_DROP_LATCH_REG                ;
    HW_REG DEBUG_VDD_POWER_LOSS                         ;
    HW_REG MTS_SNS_CTRL_REG                             ;
    HW_REG PCMS_FORCE_POC_FIO2_HIGH_REG                 ;
    HW_REG PCMS_FORCE_POC_FIO2_LOW_REG                  ;
    HW_REG PCMS_FORCE_POC_FIM_CORE_HIGH_REG             ;
    HW_REG PCMS_FORCE_POC_FIM_CORE_LOW_REG              ;
    HW_REG PCMS_VDET_REG3                               ;
    HW_REG PLLS_REF_CLK_SEL_REG                         ;
    HW_REG SMS_CTRL_REG                                 ;
    HW_REG HIM_MEM_POFF_CTRL_REG                        ;
    HW_REG AON_ISOLATION_CTRL_REG                       ;
    HW_REG ROT_MEM_PWR_REG                              ;
    HW_REG HIM_CLK_GATE_CTRL_REG                        ;
    HW_REG HIM_CLK_GATE_STATUS_REG                      ;
    HW_REG HIM_FUNC_RESET_ISOLATION_CTRL_REG            ;
    HW_REG PCMS_PVT_2_REG                               ;
    HW_REG PCMS_TOSC_FLL_CTRL_REG                       ;
    HW_REG Reserved6[4];
    HW_REG PCMS_NRESET_CTRL_REG                         ;
    HW_REG ROM_LATCH_DATA_LSB                           ;
    HW_REG ROM_LATCH_DATA_MSB                           ;
    HW_REG ROM_LATCH_STATUS_LSB                         ;
    HW_REG ROM_LATCH_STATUS_MSB                         ;
    HW_REG PCMS_SPARE_OUT_REG2                          ;
    HW_REG SPARE_IN_REG1                                ;
    HW_REG SPARE_IN_REG2                                ;
    HW_REG SPARE_OUT_REG1                               ;
    HW_REG SPARE_OUT_REG2                               ;
    HW_REG ISOLATION_VDET_VOK_MASK_REG                  ;
    HW_REG PROTEANTECS_CTRL_REG                         ;
}SFR_ANALOGUE_t, *PSFR_ANALOGUE;

#line 46 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_clocks_defines_vega.h"

#line 56 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_clocks_defines_vega.h"
typedef struct _SFR_CLOCKS {
    HW_REG Reserved0[4];
    HW_REG SYS_PLL0_CTRL_1                              ;
    HW_REG SYS_PLL0_CTRL_2                              ;

    HW_REG SYS_PLL0_CTRL_3                              ;

    HW_REG SYS_PLL0_CTRL_4                              ;

    HW_REG SYS_PLL0_STATUS                              ;

    HW_REG SYS_PLL0_LOCK                                ;

    HW_REG SYS_PLL0_CLK_OUT_SW                          ;

    HW_REG SYS_PLL0_REF_CLK_SEL                         ;
    HW_REG TM_PLL0_REF_CLK_SEL                          ;
    HW_REG SYS_PLL0_PAD_OUT                             ;
    HW_REG DPLL_CTRL                                    ;
    HW_REG FM_CTRL                                      ;
    HW_REG DPLL_REF_CLK_SEL                             ;
}SFR_CLOCKS_t, *PSFR_CLOCKS;

#line 47 "d:/gitrepo/fpgcss-vega/source/infra/drivers/sfr/inc_public/sfr_aon_defines.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines_vega.h"

#line 52 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines_vega.h"
typedef struct _SFR_TOP {
    HW_REG64 TOP_CTRL_1_REG                             ;
    HW_REG64 HEB_WRAP_CTRL_REG                          ;
    HW_REG64 DP_MLM_CTRL_REG                            ;
    HW_REG64 DESC_RAM_CTRL_REG                          ;
    HW_REG64 TBRAM_CTRL_REG                             ;
    HW_REG64 ATB_RAM_CTRL_REG                           ;
    HW_REG64 TOP_STATUS_1_REG                           ;
    HW_REG64 Reserved0;
    HW_REG64 HEB_MLM_HW_PURGE_EN_REG                    ;
    HW_REG64 ROT_EFUSE_SW_CTRL_REG                      ;
}SFR_TOP_t, *PSFR_TOP;

#line 42 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_clocks_defines_vega.h"

#line 43 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_tm_pll_defines_vega.h"

#line 68 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_tm_pll_defines_vega.h"
typedef struct _SFR_TM_PLL {
    HW_REG Reserved0[4];
    HW_REG TM_PLL0_CTRL_1                               ;
    HW_REG TM_PLL0_CTRL_2                               ;
    HW_REG TM_PLL0_CTRL_3                               ;
    HW_REG TM_PLL0_CTRL_4                               ;
    HW_REG TM_PLL1_CTRL_1                               ;
    HW_REG TM_PLL1_CTRL_2                               ;
    HW_REG TM_PLL1_CTRL_3                               ;
    HW_REG TM_PLL1_CTRL_4                               ;
    HW_REG Reserved1[4];
    HW_REG TM_PLL0_STATUS                               ;
    HW_REG TM_PLL1_STATUS                               ;
    HW_REG Reserved2;
    HW_REG TM_PLL0_LOCK                                 ;
    HW_REG TM_PLL1_LOCK                                 ;
    HW_REG TM_PLL_CLK_SW                                ;
    HW_REG IPLL0_CTRL_1                                 ;
    HW_REG IPLL0_CTRL_2                                 ;
    HW_REG IPLL0_CTRL_3                                 ;
    HW_REG IPLL1_CTRL_1                                 ;
    HW_REG IPLL1_CTRL_2                                 ;
    HW_REG IPLL1_CTRL_3                                 ;
    HW_REG IPLL0_STATUS                                 ;
    HW_REG IPLL1_STATUS                                 ;
    HW_REG TM_PLL0_FIM_AIDLE_CTRL_REG                   ;
    HW_REG TM_PLL1_FIM_AIDLE_CTRL_REG                   ;
    HW_REG TM_PLL0_PRTN_ICG_CTRL_REG                    ;
    HW_REG TM_PLL1_PRTN_ICG_CTRL_REG                    ;
}SFR_TM_PLL_t, *PSFR_TM_PLL;

#line 44 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_cpu_defines_vega.h"

#line 116 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_cpu_defines_vega.h"
typedef struct _SFR_CPU {
    HW_REG64 VERSION_ID                                 ;

    HW_REG64 Reserved0[3];
    HW_REG64 MRAM1A_CTRL                                ;
    HW_REG64 MRAM1B_CTRL                                ;
    HW_REG64 MRAM2A_CTRL                                ;
    HW_REG64 MRAM2B_CTRL                                ;
    HW_REG64 ROM_CTRL                                   ;
    HW_REG64 ROM2_CTRL                                  ;
    HW_REG64 Reserved1;
    HW_REG64 JBA2VBA_BMP_CTRL                           ;
    HW_REG64 DDR_CACHE_RAM_CTRL                         ;
    HW_REG64 DDR_CMD_TAG_QUEUES_RAM_CTRL                ;
    HW_REG64 DDR_CMDS_ARRAY_RAM_CTRL                    ;
    HW_REG64 MP0_DCCM                                   ;
    HW_REG64 MP0_IC_TAG                                 ;
    HW_REG64 MP0_IC_DATA                                ;
    HW_REG64 MP0_BC_RAM                                 ;
    HW_REG64 MP0_PT_RAM                                 ;
    HW_REG64 MP1_DCCM                                   ;
    HW_REG64 MP1_IC_TAG                                 ;
    HW_REG64 MP1_IC_DATA                                ;
    HW_REG64 MP1_BC_RAM                                 ;
    HW_REG64 MP1_PT_RAM                                 ;
    HW_REG64 PS0_DCCM                                   ;
    HW_REG64 PS0_IC_TAG                                 ;
    HW_REG64 PS0_IC_DATA                                ;
    HW_REG64 PS0_BC_RAM                                 ;
    HW_REG64 PS0_PT_RAM                                 ;
    HW_REG64 PS1_DCCM                                   ;
    HW_REG64 PS1_IC_TAG                                 ;
    HW_REG64 PS1_IC_DATA                                ;
    HW_REG64 PS1_BC_RAM                                 ;
    HW_REG64 PS1_PT_RAM                                 ;
    HW_REG64 ROP_STATUS_1                               ;
    HW_REG64 ROP_STATUS_2                               ;
    HW_REG64 MP0_CTRL                                   ;
    HW_REG64 MP1_CTRL                                   ;
    HW_REG64 PS0_CTRL                                   ;
    HW_REG64 PS1_CTRL                                   ;
    HW_REG64 CPU_LL_MLM_CTRL                            ;
    HW_REG64 CPU_HS_MLM_CTRL                            ;
    HW_REG64 CPU_LS_MLM_CTRL                            ;
    HW_REG64 CPU_DEBUG_MLM_CTRL                         ;
    HW_REG64 CPU_ICG_CTRL_1                             ;
    HW_REG64 CPU_ICG_CTRL_2                             ;
    HW_REG64 CPU_MEM_OVERRIDE                           ;
    HW_REG64 CPU2LDPC_DEC_MERGE                         ;
    HW_REG64 SOC_ROT_IRQ_0                              ;
    HW_REG64 SOC_ROT_IRQ_1                              ;
    HW_REG64 SOC_ROT_IRQ_2                              ;
    HW_REG64 Reserved2[12];
    HW_REG64 MP0_NMI_CTRL                               ;
    HW_REG64 MP1_NMI_CTRL                               ;
    HW_REG64 PS0_NMI_CTRL                               ;
    HW_REG64 PS1_NMI_CTRL                               ;
    HW_REG64 NMI_STATUS_REG                             ;
    HW_REG64 Reserved3;
    HW_REG64 GP_REG_LOAD_0                              ;
    HW_REG64 GP_REG_LOAD_1                              ;
    HW_REG64 GP_REG_LOAD_2                              ;
    HW_REG64 GP_REG_LOAD_3                              ;
    HW_REG64 GP_REG_SET_0                               ;
    HW_REG64 GP_REG_SET_1                               ;
    HW_REG64 GP_REG_SET_2                               ;
    HW_REG64 GP_REG_SET_3                               ;
    HW_REG64 GP_REG_CLR_0                               ;
    HW_REG64 GP_REG_CLR_1                               ;
    HW_REG64 GP_REG_CLR_2                               ;
    HW_REG64 GP_REG_CLR_3                               ;
    HW_REG64 GP_FW_REG_0                                ;
    HW_REG64 GP_FW_REG_1                                ;
    HW_REG64 GP_FW_REG_2                                ;
    HW_REG64 GP_FW_REG_3                                ;
    HW_REG64 SPARE_REG_IN_0                             ;
    HW_REG64 SPARE_REG_IN_1                             ;
    HW_REG64 SPARE_REG_OUT_0                            ;
    HW_REG64 SPARE_REG_OUT_1                            ;
}SFR_CPU_t, *PSFR_CPU;

#line 45 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_top_defines.h"

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_infraerrorsubranges.h"
#line 18 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_infraerrorsubranges.h"
typedef enum Status_T_InfraRanges_e
{
   STATUS_UART_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000100,
   STATUS_SYS_LOADER_ERROR_BASE           = STATUS_INFRA_BASE + 0x00000200,
   STATUS_SYS_BLOCK_POOL_ERROR_BASE       = STATUS_INFRA_BASE + 0x00000300,
   STATUS_SYS_INIT_ERROR_BASE             = STATUS_INFRA_BASE + 0x00000400,
   STATUS_RTOS_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000500,
   STATUS_SCTP_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00000600,
   STATUS_INFRA_DIAG_ERROR_BASE           = STATUS_INFRA_BASE + 0x00000700,
   STATUS_CFG_ERROR_BASE                  = STATUS_INFRA_BASE + 0x00000800,
   STATUS_TM_ERROR_BASE                   = STATUS_INFRA_BASE + 0x00000900,
   STATUS_FADI_ERROR_BASE                 = STATUS_INFRA_BASE + 0x00001000,
   STATUS_PS_COMM_ERROR_BASE              = STATUS_INFRA_BASE + 0x00001100,
   STATUS_PMM_ERROR_BASE                  = STATUS_INFRA_BASE + 0x00001200,
   STATUS_TIMER_ERROR_BASE                = STATUS_INFRA_BASE + 0x00001300,
   STATUS_INFRA_SECDED_BASE               = STATUS_INFRA_BASE + 0x00001400,
   STATUS_INFRA_EFUSE_SECDED_BASE         = STATUS_INFRA_BASE + 0x00001500,
   STATUS_INFRA_EFUSE_BASE                = STATUS_INFRA_BASE + 0x00001700,
   STATUS_INFRA_DDRC_BASE                =  STATUS_INFRA_BASE + 0x00001800,
}   Status_T_InfraRanges_t;

#line 27 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"

#line 81 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
enum
{
   AON_RESTART_REASON_HW_POWER_ON      = 0x00000000,
   AON_RESTART_REASON_COLD_BOOT        = 0x00000001,
   AON_RESTART_REASON_WARM_DPS2        = 0x00000002,
   AON_RESTART_REASON_WARM_DPS3_1      = 0x00000004,
   AON_RESTART_REASON_WARM_DPS3_2      = 0x00000008,
   AON_RESTART_REASON_WARM_SOC_RESET   = 0x00000010,
   AON_RESTART_ENABLE_FAST_BOOT        = 0x00000100,
   AON_RESTART_STATUS_PCU_COMPLETE     = 0x00010000,
   AON_RESTART_REASON_BOOT_COMPLETE    = 0x10000000,
};






typedef enum SoftRstSig_e
{
   SOFT_RST_SIG_INVALID        = 0x00000000,
   SOFT_RST_SIG_COLD_BOOT      = 0xDECAFB10,
   SOFT_RST_SIG_ROM_IDLE       = 0xB00D0001,
   SOFT_RST_SIG_ROM_WARM_BOOT  = 0xB00D0002,
   SOFT_RST_SIG_PREFA_RESET    = 0xB00D0003,
   SOFT_RST_SIG_FLASH_V_DROOP  = 0xB00D0004,
   SOFT_RST_SIG_FFU_RESTART    = 0xB00D0005,
   SOFT_RST_SIG_DLE_START      = 0xB00D0006,
   SOFT_RST_SIG_PCIE_PERST     = 0xB00D0007,
   SOFT_RST_SIG_FFU_CTRL_RESET = 0xB00D0008,
   SOFT_RST_SIG_FFU_NSSR_RESET = 0xB00D0009,
   SOFT_RST_SIG_FFU_FLR_RESET  = 0xB00D000A,
   SOFT_RST_SIG_FFU_PCIE_PERST = 0xB00D000B,
   SOFT_RST_SIG_EIB_L2         = 0xB00D000C,
   SOFT_RST_SIG_PAD3           = 0xB00D000D,
   SOFT_RST_SIG_LINK_DOWN_L2   = 0xB00D000E,
   SOFT_RST_SIG_POSTFA_RESET   = 0xB00D000F,
   SOFT_RST_SIG_MEDIC_MODE     = 0xB00D0010,
}   SoftRstSig_t;

#line 198 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
enum
{
   BOOT_PHASE_ROM_STARTUP,
   BOOT_PHASE_ROM_BOOT_BLOCK_FOUND,
   BOOT_PHASE_ROM_UPLOAD_FAILED,
   BOOT_PHASE_DLE_PRE_RTOS,
   BOOT_PHASE_DLE_POST_RTOS,
   BOOT_PHASE_RAM_PRE_RTOS,
   BOOT_PHASE_RAM_POST_RTOS,
   BOOT_PHASE_RAM_BOOT_COMPLETE,
   BOOT_PHASE_RAM_READY_FOR_HOST,
   BOOT_PHASE_PSLNK_0,
   BOOT_PHASE_PSLNK_COLD_BOOT,
   BOOT_PHASE_PSLNK_WARM_BOOT,
   BOOT_PHASE_BL_STARTUP,
   BOOT_WAKEUP_DPS2_DPS31,
   BOOT_PHASE_PCU_STARTUP,
   BOOT_PHASE_MPSLAVE_STARTUP,
   BOOT_PHASE_ALTIEXA_STARTUP,
   BOOT_PHASE_NUM,
};
typedef uint32_t SysBootPhase_t;

typedef void(*pWarmBootVector_t)(uint32_t phase);

#line 233 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
typedef  _Packed  struct SysBootInfo_s
{
   SoftRstSig_t      BrokeRomSoftResetSignature;
   pWarmBootVector_t SysWarmVector;
   PVFV_t            SysPS_CPU_StartVector;
   PVFV_t            SysMP1_CPU_StartVector;
   uint32_t          SysBootStraps;
   uint64_t          version_id;
   SoftRstSig_t      SysSoftResetSignature;
   uint32_t          mountState;
   uint32_t          reserved;
}   SysBootInfo_t;

#line 331 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
enum SYS_InitTypes_e
{
   SYS_INIT_COLD_BOOT         = 0x00000001,
   SYS_INIT_OTHER_RESET       = 0x00000002,
   SYS_INIT_PERST_RESET       = 0x00000004,

   SYS_INIT_DPS2              = 0x00000010,
   SYS_INIT_DPS3_1            = 0x00000020,
   SYS_INIT_DPS3_2            = 0x00000040,

   SYS_INIT_COMMIT_IA         = 0x00000100,
   SYS_INIT_FFU_CTRL_RESET    = 0x00000200,
   SYS_INIT_FFU_NSSR_RESET    = 0x00000400,
   SYS_INIT_FFU_FLR_RESET     = 0x00000800,
   SYS_INIT_ASS_FAT_RESET     = 0x00001000,

   SYS_INIT_FFU_PERST_RESET   = 0x00002000,
   SYS_INIT_LINK_DOWN_L2_RESET = 0x00004000,
   SYS_INIT_EIB_L2             = 0x00008000,

   SYS_INIT_AFTER_FATAL_RESET =  0x00100000,

   SYS_INIT_RESET_NO_BOOT     = 0x01000000,

   SYS_INIT_BOOT_COMPLETE     = 0x10000000,
};
typedef uint32_t SYS_InitTypes_t;


SYS_InitTypes_t    SYS_GetBootInitType(void);
Status_t  SYS_SetBootInitType(void);

#line 380 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
__inline static  SysBootInfo_t* SYS_GetBootInfoPtr(void)        { return (SysBootInfo_t*) (HardwareToModel((unsigned long)( 0x0081ffd8 ))) ; }


   __inline static  BOOL32 IsCPUHalt(void)            { return( (0) ); }
   __inline static  BOOL32 IsUartDownload(void)       { return( (0) ); }
   __inline static  BOOL32 IsRTTEnabled(void)         { return( (0) ); }
   __inline static  BOOL32 IsForceDownload(void)      { return( (0) ); }
   __inline static  BOOL32 IsNANDVoltage1_8(void)     { return( (0) ); }
   __inline static  BOOL32 IsDDR3(void)               { return( (0) ); }
   __inline static  BOOL32 IsNormal(void)             { return( (1) );  }

#line 400 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
__inline static  uint32_t SYS_Get_AON_RestartReg(void) { return  ReadRegister( (unsigned long)( ( 0xfa300000  + 96 ) ) ) ; }
__inline static  void     SYS_Set_AON_RestartReg(uint32_t value) {  WriteRegister( (unsigned long)( ( 0xfa300000  + 96 ) ), (unsigned long)(value) ) ; }


void SYS_ZeroMemIn32ByteChunks(void* startAddr, uint32_t length);

Status_t SYS_eFuseWriteEnable(BOOL en);

#line 420 "d:/gitrepo/fpgcss-vega/source/infra/core/init/inc_public/sys_init.h"
__inline static  BOOL32 SYS_IsSoftReset(void)
{
   return ((AON_RESTART_REASON_WARM_SOC_RESET & SYS_Get_AON_RestartReg()) != 0);
}

__inline static  SoftRstSig_t SYS_GetSoftResetSignature(void) { return SYS_GetBootInfoPtr()->SysSoftResetSignature; }

#line 20 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_footer.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sfr_cpu_defines_vega.h"

#line 30 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"

#line 43 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"
      __inline static  void SYS_CacheAsicIdRegData(void) { (SYS_GetBootInfoPtr()->version_id) =  ( ReadRegister64( (unsigned long)( ( 0xf83a0000  + 0 ) ) ) ) ; }

#line 64 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"
typedef union CORE_IDENTITY_REG_u
{
   struct CORE_IDENTITY_REG_s
   {
      struct
      {
         uint8_t ver   :4;
         uint8_t type  :4;
      }ARCVER;
      struct
      {
         uint8_t id    :4;
         uint8_t func  :4;
      }ARCNUM;
      uint16_t CHIPID;
   }bits;
   uint32_t all32;
}CORE_IDENTITY_REG_t;

typedef enum
{
   ASIC_ID_PART_ASIC      = 0,
   ASIC_ID_PART_FPGA      = 1,
   ASIC_ID_PART_PALLADIUM = 2,
} ASIC_ID_PART;

typedef enum
{
   ASIC_REV_A0             = 0,
} ASIC_REV;

typedef enum
{
   ASIC_MINOR_REV_A0       = 0,
   ASIC_MINOR_REV_A1       = 1,
} ASIC_MINOR_REV;

enum
{
   CORE_MAIN     = 0,
   CORE_PS       = 1,
   CORE_LLFS     = 2,
   CORE_PCU      = 3,
   CORE_IEXA     = 4,
   CORE_HELNK    = 5,
};
typedef uint8_t CoreFunction_t;

enum
{
   CORE_MP0 = 0x00,
   CORE_MP1 = 0x01,
};
typedef uint8_t CoreArcnum_t;

#line 169 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"
__inline static  CORE_IDENTITY_REG_t SET_IDENTITY_STRUCT(uint32_t regVal)
{
   CORE_IDENTITY_REG_t coreIdentityRegVal;
   coreIdentityRegVal.all32 = regVal;
   return coreIdentityRegVal;
}

#line 197 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_asic_id.h"
   __inline static  uint64_t SYS_GetAsicIdPartMask(void) { return  ( ((( ( ReadRegister64( (unsigned long)( ( 0xf83a0000  + 0 ) ) ) ) )& (0x00000003UL << 19 ) )>> 19 ) ) ; }
   __inline static  BOOL32 IS_FPGA(void)        { return (SYS_GetAsicIdPartMask() == ASIC_ID_PART_FPGA); }
   __inline static  BOOL32 IS_ASIC(void)        { return (SYS_GetAsicIdPartMask() == ASIC_ID_PART_ASIC); }
   __inline static  BOOL32 IS_PALLADIUM(void)   { return (SYS_GetAsicIdPartMask() == ASIC_ID_PART_PALLADIUM); }










   __inline static  BOOL32 IS_REVA0(void)        { return  (1) ; }
   __inline static  BOOL32 IS_REVA1(void)        { return  (0) ; }

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_footer.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_dumpmanager.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_smalldump.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_def.h"

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"

#line 359 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_UECC_DUMP_CODE;

#line 372 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_SET_EVENTS_CODE;

#line 385 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_MP_RTOS_REGISTERS_CODE;

#line 399 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_PS_RTOS_REGISTERS_CODE;

#line 413 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_HIM_TABLE_CODE;

#line 427 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_MP_CODE;

#line 441 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_PS0_CODE;

#line 455 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_RTFADI_PS1_CODE;

#line 469 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FW_TRACE_CODE;

#line 483 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_CORE_DUMP_CODE;

#line 497 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_RTFADI_MP_CODE;

#line 511 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_PS0_RTFADI_CODE;

#line 525 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_PS1_RTFADI_CODE;

#line 539 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_SET_EVENT_CODE;

#line 553 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    na_0;
   uint32_t    na_1;
   uint32_t    na_2;
   uint32_t    na_3;
   uint32_t    na_4;
} SNAPTOOL_FATAL_ASSERT_HIM_TABLE_CODE;

#line 582 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint16_t    blkCat;
   uint8_t     isBWL;
   uint8_t     hiPriority;
}RS_SEND_BLK_TO_RLC_params;

typedef struct
{
   uint32_t                   VBA;
   uint32_t                   syndWt;
   uint32_t                   JBID;
   uint32_t                   source;
   RS_SEND_BLK_TO_RLC_params  params;
}SNAPTOOL_PS_RS_SEND_BLK_TO_RLC;

#line 607 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    PBA;
   BOOL32      blkType;
   uint32_t    SW;
   uint32_t    rfu[2];
} SNAPTOOL_PS_CVD_DRI;

#line 619 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   BOOL32      blkType;
   uint32_t    TTIdx1;
   uint32_t    TTIdx2;
   uint32_t    tempZone;
   uint32_t    rfu;
} SNAPTOOL_PS_CVD_COMPACTION;

#line 632 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   BOOL32      blkType;
   uint32_t    PBA;
   uint32_t    BERresults;
   uint32_t    TTidx;
   uint32_t    targetBER;
} SNAPTOOL_PS_CVD_COMPACTION_BER;

#line 645 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    VBA;
   uint32_t    TTIdx;
   uint32_t    blkType;
   uint32_t    isFTTU;
   uint32_t    TBER;
} SNAPTOOL_PS_CVD_TTU;

#line 658 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    blkType;
   uint32_t    TTIdx;
   uint32_t    MD;
   uint32_t    src;
   uint32_t    rfu;
} SNAPTOOL_PS_EL_CVD_INVALIDATE_LATT;

#line 671 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    dieInFIM;
   uint32_t    TTIdx;
   uint32_t    isFree;
   uint32_t    MBCnt1;
   uint32_t    MBCnt2;
} SNAPTOOL_PS_EL_CVD_DB_MBCNT_ERR;

#line 684 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t    dieInFIM;
   uint32_t    blkType;
   uint32_t    cnt1;
   uint32_t    cnt2;
   uint32_t    rfu;
} SNAPTOOL_PS_EL_CVD_DB_TTCNT_ERR;

#line 697 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_XOR_LOG_PARAM;

#line 710 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_SGD_LOG_PARAM;

#line 723 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_IFT_LOG_PARAM;

#line 738 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_ERROR_HANDLING_PARAM;

#line 751 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_ERROR_HANDLING_PARAM;

#line 765 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_EH_FVT_CRITICAL_PARAM;

#line 782 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_FATAL_ASSERT_PARAM;

#line 795 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_FATAL_ASSERT_TEST_PARAM;

#line 813 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_FATAL_ASSERT_PARAM;

#line 826 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_EH_FATAL_ASSERT_PARAM;

#line 840 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_MAILBOX_OVFLW_FATAL_ASSERT_PARAM;

#line 853 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DGM_SHELF_FATAL_ASSERT_PARAM;

#line 866 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_REC_GET_MD_FATAL_ASSERT_PARAM;

#line 879 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_GET_DPCA_ID_FATAL_ASSERT_PARAM;

#line 892 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_XOR_SET_DPCA_VAL_FATAL_FATAL_ASSERT_PARAM;

#line 905 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_LDPC_ENC_ST_FIFO_FATAL_ASSERT_PARAM;

#line 918 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FLASH_CRITICAL_FAIL_FATAL_ASSERT_PARAM;

#line 931 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FLASH_FLASH_HW_RECOVERY_FAIL_FATAL_ASSERT_PARAM;

#line 944 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_HW_TIMEOUT_FAIL_FATAL_ASSERT_PARAM;

#line 957 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_NPDP_FW_WD_TIMEOUT_FAIL_FATAL_ASSERT_PARAM;

#line 970 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_TBL_DUALL_ERROR_FATAL_ASSERT_PARAM;

#line 983 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_STATUS_REQ_DUAL_READ_FATAL_ASSERT_PARAM;

#line 998 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_BUS_ERROR_READ_FATAL_ASSERT_PARAM;

#line 1012 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_RELEASE_INT_READ_FATAL_ASSERT_PARAM;

#line 1025 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_INCONSISTENT_READ_FATAL_ASSERT_PARAM;

#line 1038 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_RA_VIR_UNDRFLW_READ_FATAL_ASSERT_PARAM;

#line 1051 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_RSV_PWR_VIR_UNDRFLW_READ_FATAL_ASSERT_PARAM;

#line 1064 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
        typedef struct
        {
          uint32_t p0;
          uint32_t p1;
          uint32_t p2;
          uint32_t p3;
          uint32_t p4;
        } SNAPTOOL_PS_RSV_OOR_FATAL_ASSERT_PARAM;

#line 1077 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
        typedef struct
        {
          uint32_t p0;
          uint32_t p1;
          uint32_t p2;
          uint32_t p3;
          uint32_t p4;
        } SNAPTOOL_PS_RSV_GENERAL_FATAL_ASSERT_PARAM;

#line 1091 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DPCA_OVER_UNDER_FLOW_FATAL_ASSERT_PARAM;

#line 1105 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
        uint32_t p0;
        uint32_t p1;
        uint32_t p2;
        uint32_t p3;
        uint32_t p4;
      } SNAPTOOL_PS_DPCA_BUS_ERROR_FATAL_ASSERT_PARAM;

#line 1118 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t Status;
         uint32_t pBadPtr;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_STARTUP_FATAL_ASSERT_PARAM;

#line 1131 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t Status;
         uint32_t pBadPtr;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_INIT_FATAL_ASSERT_PARAM;

#line 1144 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t MdInPs;
         uint32_t FimInPs;
         uint32_t phyPlOffset;
         uint32_t phyBlk;
         uint32_t p4;
      } SNAPTOOL_PS_BBM_TRANSLATE_FATAL_ASSERT_PARAM;

#line 1157 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t queueIdx;
         uint32_t descIdx;
         uint32_t CAM_failedAllocCnt;
         uint32_t failedDispatchCnt;
         uint32_t zero;
      } SNAPTOOL_PS_MQD_CAM_ALLOC_INIT_FATAL_ASSERT_PARAM;

#line 1170 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t p0;
         uint32_t p1;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_CAM_BUS_ERROR_ASSERT_PARAM;

#line 1183 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t p0;
         uint32_t p1;
         uint32_t p2;
         uint32_t p3;
         uint32_t p4;
      } SNAPTOOL_PS_CVD_MORPH_FATAL_ASSERT_PARAM;

#line 1196 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
      typedef struct
      {
         uint32_t startAddress;
         uint32_t size;
         uint32_t isUGSD;
         uint32_t expectedSize;
         uint32_t p4;
      } SNAPTOOL_PS_CVD_MNT_TABLES_SIZE_FATAL_ASSERT_PARAM;

#line 1217 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_LLFS_GENERIC_FATAL_ASSERT_PARAM;

#line 1234 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_GENERIC_PARAM;

#line 1247 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_CORE_EXCEPTION_PARAM;

#line 1260 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FATAL_ASSERT_INFRA_SPEC_PARAM;

#line 1273 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_PLL;

#line 1286 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_DRAM;

#line 1299 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_SRAM;

#line 1313 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_HIM_RAM;

#line 1327 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FTL_FATAL_ASSERT_GENERIC_PARAM;

#line 1341 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_INIT_ONLY_PARAM;

#line 1354 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_SVCI_ISR_PARAM;

#line 1368 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_SVCI_ISR_UNKNOWN_PARAM;

#line 1381 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_EXCEPTION_PARAM;

#line 1394 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_CORRUPTED_PARAM;

#line 1408 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_MP_FATAL_ASSERT_SYS_BUFFER;

#line 1421 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PS_NON_EH_FVT_WARNING_PARAM;

#line 1435 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_BOOT_PAGE_EXAMPLE_PARAM;

#line 1449 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_SET_EVENT_DUMP_PARAM;

#line 1463 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_IFS_PARAM_Warning;

#line 1477 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_IFS_PARAM_Critical;

#line 1491 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_THERMAL_SHUTDOWN_PARAM;

#line 1504 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_PARAM;

#line 1517 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_SHUTDOWN_PARAM;

#line 1531 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint8_t p0;
  uint8_t p1;
  uint8_t p2;
  uint8_t p3;
  uint32_t p4;
  uint64_t timestamp;
  uint32_t pRFU;
} SNAPTOOL_PMIC_POK_PARAM;

#line 1546 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint8_t p0;
  uint8_t p1;
  uint8_t p2;
  uint8_t p3;
  uint32_t p4;
  uint64_t timestamp;
  uint32_t pRFU;
} SNAPTOOL_PMIC_IRQ_PARAM;

#line 1562 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_SLIP_PARAM;

#line 1575 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_PCU_INIT_EXCEPTION_PARAM;

#line 1589 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MP_ARC_REGS_RTOS_DUMP_PARAM;

#line 1603 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_PS_ARC_REGS_STACK_DUMP_PARAM;

#line 1619 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t moduleID;
  uint32_t reason;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_READ_ONLY_PARAM;

#line 1632 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t resetType;
  uint32_t dbgEventsBitmap;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_NON_COMMON_RESET;

#line 1645 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t resetType;
  uint32_t dbgEventsBitmap;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_PCIE_DUMP_ON_LINK_UP_TO;

#line 1658 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_DUPLICATE_CONTROLLER_ENABLE;

#line 1671 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t nvmeCurrErr;
  uint32_t feUniqueErr;
  uint32_t cmdContext;
  uint32_t cmdOpcode;
  uint32_t cmfIndex;
} SNAPTOOL_FE_INTERNAL_ERROR;

#line 1684 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t cmdIndex;
   uint32_t sectorsFailed_sectorOffset;
   uint32_t ueccType;
   uint32_t commandSize;
   uint32_t startingLBA;
} SNAPTOOL_FE_XFER_ERROR_WARNING;

#line 1697 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t cmdIndex;
   uint32_t sectorsFailed_sectorOffset;
   uint32_t ueccType;
   uint32_t commandSize;
   uint32_t startingLBA;
} SNAPTOOL_FE_XFER_ERROR_CRITICAL;

#line 1711 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t pcieWrapEvents;
   uint32_t corrErrStatus;
   uint32_t uncorrErrStatus;
   uint32_t pcieDevCap;
   uint32_t fake5;
} SNAPTOOL_FVT_FE_PCIE_DUMP_1_ERROR;

#line 1724 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t pcieWrapLinkStat;
   uint32_t pcieLmLocalErrStat;
   uint32_t pcieBaseCfgCS;
   uint32_t macAxiCfgOB;
   uint32_t fake5;
} SNAPTOOL_FVT_PCIE_DUMP_2_ERROR;

#line 1738 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t asyncEventRequestCQ;
   uint32_t asyncEventIndex;
   uint32_t asyncCmdIndex;
   uint32_t cmdContext;
   uint32_t cmdCQID;
} SNAPTOOL_FVT_FE_AER_ERROR;

#line 1751 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_FVT_FE_HNVME_RESTORATION_ERROR;

#line 1766 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_FE_CRITICAL_PARAM;

#line 1780 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_GENERIC_FATAL;

#line 1794 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_E2E_DP_FATAL;

#line 1808 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
      uint32_t p0;
      uint32_t p1;
      uint32_t p2;
      uint32_t p3;
      uint32_t p4;
   } SNAPTOOL_FE_HABM_SFIFO_TYPE_FATAL;

#line 1822 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HIM_CMD_TABLE_DUMP_PARAM;

#line 1836 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HA_ARB_SECDED_PARAM;

#line 1851 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p3;
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p4;
   } SNAPTOOL_HIM_SVCI_PARAM;

#line 1865 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HWRE_UNKNOWN_ERROR_PARAM;

#line 1880 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HABM_UNKNOWN_ERROR_PARAM;

#line 1904 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HAWA_FLUSH_PARAM;

#line 1919 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_SVCI_PARAM;

#line 1934 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_SECDED_PARAM;

#line 1948 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_ITAG_DEALLOC_PARAM;

#line 1962 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HNVME_TRANSACTION_PARAM;

#line 1976 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HIM_IRAM_SECDED_PARAM;

#line 1990 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_HIM_INVALID_CMD_ARRIVAL;

#line 2004 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_INIT_FAIL_PARAM;

#line 2018 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FE_INVALID_FE_PMM_STATE;

#line 2032 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t pcieInitStatus;
  uint32_t bootInitType;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_FE_PCIE_INIT_PARAM;

#line 2047 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
   uint32_t p0;
   uint32_t p1;
   uint32_t p2;
   uint32_t p3;
   uint32_t p4;
} SNAPTOOL_FE_PCIE_DUMP;

#line 2061 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_FE_WARNING_PARAM;

#line 2076 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_FVT_INFRA_WARNING_PARAM;

#line 2090 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MST_ERRORLOG_CRITICAL;

#line 2103 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_MST_ERRORLOG_WARNING;

#line 2117 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_SECURITY_CRITICAL_PARAM;

#line 2130 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_SECURITY_WARNING_PARAM;

#line 2144 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
   typedef struct
   {
     uint32_t p0;
     uint32_t p1;
     uint32_t p2;
     uint32_t p3;
     uint32_t p4;
   } SNAPTOOL_INFRA_WARNING_PARAM;





typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_OVER_VOLTAGE_PARAM;

#line 2170 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;
} SNAPTOOL_PMIC_OVER_CURRENT_PARAM;

#line 2185 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog_codes.h"
typedef struct
{
  uint32_t p0;
  uint32_t p1;
  uint32_t p2;
  uint32_t p3;
  uint32_t p4;

} SNAPTOOL_FE_DUI_START_PARAM;

#line 17 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_smalldump.h"




typedef struct FADI_ESL_HEADER_T
{
  uint16_t label;
  uint16_t size;
}FADI_ESL_Header_t;

typedef struct
{
  uint32_t groups;
}FADI_ESL_Reg_Dump_Header_t;

typedef struct FADI_REG_DUMP_ENTRY_T
{
  uint16_t offset;
  uint16_t count;
}FADI_Reg_Dump_Entry_t;

typedef struct
{
  uint32_t offset;
  uint32_t numBytes;
}FADI_Reg_Offset_Size_t;

typedef struct FADI_REG_DUMP_SET_T
{
   uint32_t regEslHeader;
   uint32_t baseAddress;
   uint32_t count;
   FADI_Reg_Dump_Entry_t * pRegEntryList;
}FADI_Reg_Dump_Set_t;


typedef struct FADI_REG_DUMP_LIST_T
{
   FADI_Reg_Dump_Set_t * pRegSet;
   uint32_t            regSetsNum;
}FADI_Reg_Dump_List_t;


typedef struct FADI_RAM_DUMP_ENTRY_T
{
   FADI_ESL_Header_t ramEslheader;
   uint32_t address;
}FADI_Ram_Dump_Entry_t;


typedef struct FADI_RAM_DUMP_LIST_T
{
   FADI_Ram_Dump_Entry_t *pRamEntry;
   uint32_t ramSetsNum;
} FADI_Ram_Dump_List_t;


typedef struct FADI_SMDP_GROUP_DESCRIPTOR_T
{
   FADI_Reg_Dump_List_t *pRegDumpList;
   FADI_Ram_Dump_List_t *pRamDumpList;
} FADI_SDMP_Group_Descriptor_t;

#line 85 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_smalldump.h"
extern FADI_SDMP_Group_Descriptor_t gFaSdmpDescriptorsRam[ (10) ];

#line 91 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_smalldump.h"
extern uint32_t FADI_SmallDumpCollect(uint32_t logCode, uint8_t * pSmallDump, FADI_SDMP_Group_Descriptor_t * sdmpDescriptor);

void FADI_InitErrorStatsSDL(void* pData);

#line 17 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_dumpmanager.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_def.h"

#line 18 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/ps/inc_public/sys_ps_comm.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/infra/ps/inc_public/sys_ps_comm.h"
typedef enum Infra_Mailbox_MsgID_e
{
   MAILBOX_RD_RAW_COMPLETION_MSG_ID = 1,
   MAILBOX_WR_RAW_COMPLETION_MSG_ID = 2,
   MAILBOX_FIRST_INFRA_BARRIER_COMPLETION_MSG_ID = 3,
   MAILBOX_SECOND_INFRA_BARRIER_COMPLETION_MSG_ID = 4,
}Infra_Mailbox_MsgID_t;

typedef struct
{
    uint32_t channel    ;
    uint32_t chip       ;
    uint32_t die        ;
    uint32_t plane      ;
    uint32_t block      ;
    uint32_t page       ;
    uint32_t fmu        ;
}Physical_Block_Address_t;





typedef union
{
   uint32_t all32;
   struct
   {
      union
      {
         uint16_t all16 : 16;
         uint16_t dmcResult : 16;
         struct
         {
            uint16_t    errorCode            :4;
            uint16_t    UECC_BitMap          :4;
            uint16_t    eraseRead_BitMap     :4;
            uint16_t    eiIdx                :4;
         }errorBits;
      }messageData;

      uint16_t mailID:8;
      uint16_t messageID:8;
   }bits;

   struct
   {
      union
      {
         uint16_t all16 : 16;
         struct
         {
            uint16_t    UECC_BitMap          :8;
            uint16_t    eraseRead_BitMap     :8;
         }errorBits;
      }messageData;

      uint16_t mailID:8;
      uint16_t messageID:8;
   }sctp_bits;
}Mail_t;

Status_t SendWritePhyPsRequest(uint8_t blkType, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint32_t waitForPsMsgDone);
Status_t SendReadPhyPsRequest(uint8_t readSrc, uint8_t blkType, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint8_t ifFADIRead, uint32_t waitForPsMsgDone);
Status_t SendErasePhyPsRequest(uint32_t elcAddr, uint8_t blkType, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t waitForPsMsgDone, BOOL shallowErase, uint32_t PEC, uint8_t erasePlaneCount);
Status_t SendBesPhyPsRequest(uint8_t blkType, Physical_Block_Address_t * pba, uint32_t waitForPsMsgDone);

Status_t   SendReadRawPhyPsRequest(uint8_t fastRead, uint8_t firstread, uint8_t isDLA, uint8_t rawRead, uint8_t noReadRetry, uint8_t xorOn, uint8_t forcedCVD, uint8_t rehReadOption, uint8_t *pUserVCGR, uint8_t xferOnly, uint8_t sbNum, uint8_t blkType, uint8_t numFmu,
   Physical_Block_Address_t * pba, Mail_t * requestId, uint32_t header, uint32_t data, uint32_t waitForPsMsgDone);
Status_t   SendWriteRawPhyPsRequest(uint8_t rawWrite, uint32_t plcAddr, uint8_t blkType, uint8_t xferOnly, uint8_t numFmu, Physical_Block_Address_t * pba, Mail_t * mail, uint32_t header, uint32_t data, uint32_t waitForPsMsgDone);

#line 106 "d:/gitrepo/fpgcss-vega/source/infra/ps/inc_public/sys_ps_comm.h"
Status_t SendIFSCompletionMessage(uint32_t psType, uint32_t cookie, Status_t ifsStatus);
Status_t WaitPsReqMsgDone(Mail_t * reqId);
Status_t SendUARTPSMessage(uint32_t psType, Status_t uartStatus);
void     MP_Main_Mailbox_Valid_Count_ISR(void);
void     MP_Main_Mailbox_Overflow_ISR(void);
Status_t   SendReqFVTErrorLogEntryMessage(uint32_t psType, uint32_t severity, uint32_t *pParams);
Status_t   SendReqFVTErrorLogEntryMessagePS0(uint32_t severity, uint32_t *pParams);
Status_t   SendReqFVTErrorLogEntryMessagePS1(uint32_t severity, uint32_t *pParams);

void MP_Spare_Mailbox_Valid_Count_ISR(void);

#line 21 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_vba_flavor_definitions.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_pmm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_rfm_aon_api.h"

#line 39 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_rfm_aon_api.h"
typedef union PS_RFM_AON_s
{
   uint8_t bytes[ (16) ];

#line 55 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_rfm_aon_api.h"
}   PS_RFM_AON_t;

#line 19 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_pmm_api.h"










typedef enum PS_Boot_type
{
   PS_BOOT_TYPE_COLD = 0,
   PS_BOOT_TYPE_WARM,
   PS_BOOT_TYPE_INVALID,
} PS_BootType_t;

typedef enum PS_PMM_Power_State
{
   PS_PMM_PWR_STATE_NORMAL = 0,
   PS_PMM_PWR_STATE_SHUTDOWN,
   PS_PMM_PWR_STATE_INVALID,
}   PS_PMM_Power_State_t;





typedef struct
{
   uint32_t reservedSpace[ ( 1024  / 4) ];
} PS_AON_Region_t;


typedef uint32_t PS_Boot_Flag_t;
typedef struct PS_AON_Boot_s
{
   PS_Boot_Flag_t bootFlags;
   uint8_t   reserved[4];
}   PS_AON_Boot_t;

typedef struct PS_AON_Data_s
{
   PS_AON_Boot_t bootAonData;
   PS_RFM_AON_t  refreshManagerAonData;

}   PS_AON_Data_t;

#line 86 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_pmm_api.h"
void PS_PMM_SetBootFlags(PS_BootType_t bootFlagVal);









Status_t PS_PMM_MP_RestoreRAM(void);









Status_t PS_PMM_MP_RetainRAM(void);










Status_t PS_PMM_SERV_Handler(void);









BOOL PS_IsSysBootInitWarm(void);

void  __attribute__((section("TRW")))  PS_setDpsFirstVector(void);

#line 23 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_msgtypes.h"

#line 159 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( (0x00)  + 74) < ( (0x00)  + (0x50) ) )) ? 1 : -1] ;

#line 205 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( ( ( (0x00)  + (0x50) ) )  + 39) < ( ( ( (0x00)  + (0x50) ) )  + (0x40) ) )) ? 1 : -1] ;

#line 237 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_msgtypes.h"
extern char __ct_[(( ( ( ( ( (0x00)  + (0x50) ) )  + (0x40) )      + 21) < (0xFF) )) ? 1 : -1] ;

#line 24 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_def.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_devba_def.h"

#line 8 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_devba_def.h"
typedef union devba
{
   uint32_t all32;
   struct
   {
      uint32_t fmu         :  4 ;
      uint32_t metaWLpage  :  13 ;
      uint32_t phyBlock    :  11 ;
      uint32_t md          :  4 ;
   }bits;

   struct
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t fim            :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t MB             :  11 ;
      uint32_t MD             :  4 ;
   } PS_flavor3;

   struct
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t lFim           :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t block          :  11 ;


      uint32_t psId           :  1 ;
      uint32_t dieInFim       :  3 ;

#line 44 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_devba_def.h"
   } vbaTlc;

   struct
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t lFim           :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t subBlock       :  1 ;
      uint32_t block          :  10 ;

      uint32_t psId           :  1 ;
      uint32_t dieInFim       :  3 ;

#line 62 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_devba_def.h"
   } vbaSlc_sbm;


} DeVBA_t;

#line 4 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_def.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_mrph_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/cfg_manager_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/ifs/inc_public/ifs_filenumbers.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/infra/modules/ifs/inc_public/ifs_filenumbers.h"
enum
{
   FS_FID_INVALID                   =  0,
   FS_FID_COMMON_CODE_BASE          =  200,
   FS_FID_CODE_BASE                 =  232,
   FS_FID_ROOTLOADER_CODE           =  234,
   FS_FID_SYS_MEDIC_BLR_MP_CODE     =  235,
   FS_FID_IEXA_CODE                 =  236,
   FS_FID_HOST_EMULATOR_CODE        =  239,
   FS_FID_SYS_MP_BOOT_CODE_IMAGE    =  240,
   FS_FID_SYS_MEDIC_ROT_CODE        =  241,
   FS_FID_INVALIDFILE               =  0xFF,
};

typedef uint32_t FsFileId_t;



typedef struct FileNameRecord_s
{
   uint8_t   fileNumber;
   uint8_t   nameString[32];
}   FileNameRecord_t;

#line 78 "d:/gitrepo/fpgcss-vega/source/infra/modules/ifs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_FILE_MAP_e  { FS_FID_FILE_MAP  = 1 }  ViewerFileId_FILE_MAP_t ;
typedef enum ViewerFSId_FILE_NAMES_LIST_e  { FS_FID_FILE_NAMES_LIST  = 2 }  ViewerFileId_FILE_NAMES_LIST_t ;
typedef enum ViewerFSId_CFG_DATA_DLE_BLOB_e  { FS_FID_CFG_DATA_DLE_BLOB  = 3 }  ViewerFileId_CFG_DATA_DLE_BLOB_t ;
typedef enum ViewerFSId_CFG_DATA_FILE_e  { FS_FID_CFG_DATA_FILE  = 4 }  ViewerFileId_CFG_DATA_FILE_t ;
typedef enum ViewerFSId_CFG_INTERNAL_DATA_e  { FS_FID_CFG_INTERNAL_DATA  = 5 }  ViewerFileId_CFG_INTERNAL_DATA_t ;
typedef enum ViewerFSId_MORPHEUS_DATA_e  { FS_FID_MORPHEUS_DATA  = 6 }  ViewerFileId_MORPHEUS_DATA_t ;
typedef enum ViewerFSId_FFU_DL_TABLE_e  { FS_FID_FFU_DL_TABLE  = 7 }  ViewerFileId_FFU_DL_TABLE_t ;
typedef enum ViewerFSId_SYNOPSYS_PHY_FW_UPDATE_e  { FS_FID_SYNOPSYS_PHY_FW_UPDATE  = 10 }  ViewerFileId_SYNOPSYS_PHY_FW_UPDATE_t ;
typedef enum ViewerFSId_FTL_LOG_PTR_e  { FS_FID_FTL_LOG_PTR  = 16 }  ViewerFileId_FTL_LOG_PTR_t ;
typedef enum ViewerFSId_EI_CONFIG_e  { FS_FID_EI_CONFIG  = 17 }  ViewerFileId_EI_CONFIG_t ;
typedef enum ViewerFSId_ERR_FILE_NAME_MP_e  { FS_FID_ERR_FILE_NAME_MP  = 18 }  ViewerFileId_ERR_FILE_NAME_MP_t ;
typedef enum ViewerFSId_ERR_FILE_NAME_PS_e  { FS_FID_ERR_FILE_NAME_PS  = 19 }  ViewerFileId_ERR_FILE_NAME_PS_t ;
typedef enum ViewerFSId_EI_GLOBALS_e  { FS_FID_EI_GLOBALS  = 20 }  ViewerFileId_EI_GLOBALS_t ;
typedef enum ViewerFSId_MORPHEUS_USERROM_PAYLOAD_e  { FS_FID_MORPHEUS_USERROM_PAYLOAD  = 22 }  ViewerFileId_MORPHEUS_USERROM_PAYLOAD_t ;
typedef enum ViewerFSId_MORPHEUS_PAYLOAD_e  { FS_FID_MORPHEUS_PAYLOAD  = 23 }  ViewerFileId_MORPHEUS_PAYLOAD_t ;
typedef enum ViewerFSId_NAND_REG_DEFAULT_VALUES_e  { FS_FID_NAND_REG_DEFAULT_VALUES  = 24 }  ViewerFileId_NAND_REG_DEFAULT_VALUES_t ;
typedef enum ViewerFSId_NVME_DST_LOG_e  { FS_FID_NVME_DST_LOG  = 28 }  ViewerFileId_NVME_DST_LOG_t ;
typedef enum ViewerFSId_NVME_ERROR_LOG_e  { FS_FID_NVME_ERROR_LOG  = 32 }  ViewerFileId_NVME_ERROR_LOG_t ;
typedef enum ViewerFSId_LBA_RANGE_TYPE_e  { FS_FID_LBA_RANGE_TYPE  = 38 }  ViewerFileId_LBA_RANGE_TYPE_t ;
typedef enum ViewerFSId_HOST_METADATA_DB_e  { FS_FID_HOST_METADATA_DB  = 39 }  ViewerFileId_HOST_METADATA_DB_t ;
typedef enum ViewerFSId_NAMESPACE_e  { FS_FID_NAMESPACE  = 40 }  ViewerFileId_NAMESPACE_t ;
typedef enum ViewerFSId_MANUFACTURING_SECTOR_e  { FS_FID_MANUFACTURING_SECTOR  = 41 }  ViewerFileId_MANUFACTURING_SECTOR_t ;
typedef enum ViewerFSId_EOM_LANE_DESC_DB_e  { FS_FID_EOM_LANE_DESC_DB  = 42 }  ViewerFileId_EOM_LANE_DESC_DB_t ;
typedef enum ViewerFSId_ST_INPUT_e  { FS_FID_ST_INPUT  = 51 }  ViewerFileId_ST_INPUT_t ;
typedef enum ViewerFSId_ST_OUTPUT_e  { FS_FID_ST_OUTPUT  = 52 }  ViewerFileId_ST_OUTPUT_t ;
typedef enum ViewerFSId_DUMMY_DIR_SYNC_e  { FS_FID_DUMMY_DIR_SYNC  = 93 }  ViewerFileId_DUMMY_DIR_SYNC_t ;
typedef enum ViewerFSId_VIEWER_XML_e  { FS_FID_VIEWER_XML  = 95 }  ViewerFileId_VIEWER_XML_t ;
typedef enum ViewerFSId_SECURITY0_e  { FS_FID_SECURITY0  = 100 }  ViewerFileId_SECURITY0_t ;
typedef enum ViewerFSId_SECURITY1_e  { FS_FID_SECURITY1  = 101 }  ViewerFileId_SECURITY1_t ;
typedef enum ViewerFSId_SECURITY2_e  { FS_FID_SECURITY2  = 102 }  ViewerFileId_SECURITY2_t ;
typedef enum ViewerFSId_SECURITY3_e  { FS_FID_SECURITY3  = 103 }  ViewerFileId_SECURITY3_t ;
typedef enum ViewerFSId_SECURITY4_e  { FS_FID_SECURITY4  = 104 }  ViewerFileId_SECURITY4_t ;
typedef enum ViewerFSId_SECURITY5_e  { FS_FID_SECURITY5  = 105 }  ViewerFileId_SECURITY5_t ;
typedef enum ViewerFSId_SECURITY6_e  { FS_FID_SECURITY6  = 106 }  ViewerFileId_SECURITY6_t ;
typedef enum ViewerFSId_SECURITY7_e  { FS_FID_SECURITY7  = 107 }  ViewerFileId_SECURITY7_t ;
typedef enum ViewerFSId_SECURITY8_e  { FS_FID_SECURITY8  = 108 }  ViewerFileId_SECURITY8_t ;
typedef enum ViewerFSId_SECURITY9_e  { FS_FID_SECURITY9  = 109 }  ViewerFileId_SECURITY9_t ;
typedef enum ViewerFSId_SECURITY10_e  { FS_FID_SECURITY10  = 110 }  ViewerFileId_SECURITY10_t ;
typedef enum ViewerFSId_SECURITY11_e  { FS_FID_SECURITY11  = 111 }  ViewerFileId_SECURITY11_t ;

#line 140 "d:/gitrepo/fpgcss-vega/source/infra/modules/ifs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_ROT_BOOT_INIT_e  { FS_FID_ROT_BOOT_INIT  = 202 }  ViewerFileId_ROT_BOOT_INIT_t ;
typedef enum ViewerFSId_ROT_FULL_INIT_e  { FS_FID_ROT_FULL_INIT  = 204 }  ViewerFileId_ROT_FULL_INIT_t ;
typedef enum ViewerFSId_ROT_STATIC_FILE_e  { FS_FID_ROT_STATIC_FILE  = 206 }  ViewerFileId_ROT_STATIC_FILE_t ;

typedef enum ViewerFSId_SYSTEM_IP_CFG_e  { FS_FID_SYSTEM_IP_CFG  = 221 }  ViewerFileId_SYSTEM_IP_CFG_t ;
typedef enum ViewerFSId_BBM_PS_0_e  { FS_FID_BBM_PS_0  = 224 }  ViewerFileId_BBM_PS_0_t ;
typedef enum ViewerFSId_BBM_PS_1_e  { FS_FID_BBM_PS_1  = 225 }  ViewerFileId_BBM_PS_1_t ;
typedef enum ViewerFSId_MBBT_e  { FS_FID_MBBT  = 226 }  ViewerFileId_MBBT_t ;
typedef enum ViewerFSId_BBM_UECC_LIST_PS_0_e  { FS_FID_BBM_UECC_LIST_PS_0  = 227 }  ViewerFileId_BBM_UECC_LIST_PS_0_t ;
typedef enum ViewerFSId_BBM_UECC_LIST_PS_1_e  { FS_FID_BBM_UECC_LIST_PS_1  = 228 }  ViewerFileId_BBM_UECC_LIST_PS_1_t ;
typedef enum ViewerFSId_FTL_MB_STATUS_TABLE_e  { FS_FID_FTL_MB_STATUS_TABLE  = 229 }  ViewerFileId_FTL_MB_STATUS_TABLE_t ;
typedef enum ViewerFSId_IFT_OPT_e  { FS_FID_IFT_OPT  = 230 }  ViewerFileId_IFT_OPT_t ;
typedef enum ViewerFSId_DLE_e  { FS_FID_DLE  = 233 }  ViewerFileId_DLE_t ;

typedef enum ViewerFSId_IEXA_CODE_IMAGE_e  { FS_FID_IEXA_CODE_IMAGE  = FS_FID_IEXA_CODE }  ViewerFileId_IEXA_CODE_IMAGE_t ;
typedef enum ViewerFSId_HOST_EMULATOR_CODE_IMAGE_e  { FS_FID_HOST_EMULATOR_CODE_IMAGE  = FS_FID_HOST_EMULATOR_CODE }  ViewerFileId_HOST_EMULATOR_CODE_IMAGE_t ;


typedef enum ViewerFSId_MEDIC_MP_BLR_IMAGE_e  { FS_FID_MEDIC_MP_BLR_IMAGE  = FS_FID_SYS_MEDIC_BLR_MP_CODE }  ViewerFileId_MEDIC_MP_BLR_IMAGE_t ;
typedef enum ViewerFSId_OVERLAY_MP_FILE_e  { FS_FID_OVERLAY_MP_FILE  = 242 }  ViewerFileId_OVERLAY_MP_FILE_t ;
typedef enum ViewerFSId_ROT_ROOTLOADER_CODE_IMAGE_e  { FS_FID_ROT_ROOTLOADER_CODE_IMAGE  = FS_FID_ROOTLOADER_CODE }  ViewerFileId_ROT_ROOTLOADER_CODE_IMAGE_t ;
typedef enum ViewerFSId_ROT_ROOTLOADER_RECOVERY_CODE_IMAGE_e  { FS_FID_ROT_ROOTLOADER_RECOVERY_CODE_IMAGE  = FS_FID_SYS_MEDIC_ROT_CODE }  ViewerFileId_ROT_ROOTLOADER_RECOVERY_CODE_IMAGE_t ;
typedef enum ViewerFSId_FWT_EVENT_DIC_e  { FS_FID_FWT_EVENT_DIC  = 244 }  ViewerFileId_FWT_EVENT_DIC_t ;
typedef enum ViewerFSId_IEXA_ALT_CODE_IMAGE_e  { FS_FID_IEXA_ALT_CODE_IMAGE  = 237 }  ViewerFileId_IEXA_ALT_CODE_IMAGE_t ;

typedef enum ViewerFSId_RAM_CODE_IMAGE_e  { FS_FID_RAM_CODE_IMAGE  = 246 }  ViewerFileId_RAM_CODE_IMAGE_t ;

#line 170 "d:/gitrepo/fpgcss-vega/source/infra/modules/ifs/inc_public/ifs_filenumbers.h"
typedef enum ViewerFSId_PSLNK_CODE_IMAGE_e  { FS_FID_PSLNK_CODE_IMAGE  = 248 }  ViewerFileId_PSLNK_CODE_IMAGE_t ;
typedef enum ViewerFSId_FTL_CORE_IMAGE_e  { FS_FID_FTL_CORE_IMAGE  = 238 }  ViewerFileId_FTL_CORE_IMAGE_t ;
typedef enum ViewerFSId_LLFS_CODE_IMAGE_e  { FS_FID_LLFS_CODE_IMAGE  = 250 }  ViewerFileId_LLFS_CODE_IMAGE_t ;
typedef enum ViewerFSId_PCU_CODE_IMAGE_e  { FS_FID_PCU_CODE_IMAGE  = 252 }  ViewerFileId_PCU_CODE_IMAGE_t ;
typedef enum ViewerFSId_SET_EVENT_DIC_e  { FS_FID_SET_EVENT_DIC  = 254 }  ViewerFileId_SET_EVENT_DIC_t ;
typedef enum ViewerFSId_TERMINATOR_e  { FS_FID_TERMINATOR  = FS_FID_INVALIDFILE }  ViewerFileId_TERMINATOR_t ;

#line 20 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/cfg_manager_api.h"

#line 37 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/cfg_manager_api.h"
typedef enum CFG_SetNumbers_e
{
   RESERVED_CFG                     = 0,
   PS_CFG_SET                          ,
   SYS_VERSION_CFG                     ,
   FTL_FORMAT_CFG_SET                  ,
   FTL_PHYSICAL_CFG_SET                ,
   THERMAL_THRESHOLD_SET               ,
   FE_PCIE_CFG                         ,
   FE_HNVME_CFG                        ,
   FE_NCR_CFG                          ,
   FE_HA_CFG                           ,
   FE_HABM_CFG                         ,
   FE_HAWA_CFG                         ,
   FE_HPM_CFG                          ,
   FE_ID_CONTROLLER_CFG                ,
   FE_DEFAULT_SET_FEAT_CFG             ,
   FTL_EXT_CFG_SET                     ,
   PS_MRPH_TABLE_ENTRY                 ,
   PS_MRPH_CVD_TRACKING                ,
   PS_MRPH_FLGP_AND_WA                 ,
   PS_MRPH_CVD_DRD                     ,
   PS_MRPH_FAST_SLC_PROGRAM            ,
   PS_MRPH_READ_SCRUB                  ,
   PS_MRPH_ZQ_CALIBRATION              ,
   PS_MRPH_LDPC                        ,
   PS_MRPH_REH_OPTION                  ,
   PS_MRPH_READ_PERF_IMPROVEMENTS      ,
   PS_MRPH_LDPC_STATIC_CONFIG          ,
   PS_MRPH_BES                         ,
   PS_MRPH_VCGR                        ,
   PS_MRPH_FTL                         ,
   PS_MRPH_NAND_MT_VERSION             ,
   SEC_CFG                             ,
   FE_NAMESPACES_CFG                   ,
   FE_CUSTOM_CFG                       ,
   FE_PM_CFG                           ,
   FE_CMD_SUPPORTED_CFG                ,
   FE_VENDOR_SPECIFIC_IDLOG            ,
   PS_MRPH_MAP                         ,
   PS_CFG_FAST_SLC_PROGRAM             ,
   PS_CFG_VCGR                         ,
   FE_THERMAL_THROTTLING               ,
   PS_KGD_NAND_PARAMS                  ,
   PS_EFUSE_ROM_PARAMS                 ,
   FTL_PARAM_CFG_SET                   ,
   SMBUS_CONFIG_SET                    ,
   FE_AUTO_POWER_TRANSIT_TABLE         ,
   FE_DATA_CONTAINER                   ,
   SYS_SKU_VERSION_CFG                 ,
   FE_DEVICE_UNIQUE_INFO               ,
   FE_DEVICE_MODEL_IDS_INFO            ,
   FE_POWER_STATES_CFG                 ,
   PS_MRPH_SGD                         ,
   PS_CFG_SGD                          ,
   FE_SANITIZE_DATA                    ,
   FE_SANITIZE_CFG                     ,
   FE_PLP_CFG                          ,
   CONTROL_DEBUG_FEATURE               ,
   FE_HMB_CFG                          ,
   FE_EXTERNAL_INFO                    ,
   PS_MRPH_IFT                         ,
   PS_MRPH_ERASE                       ,
   PS_MRPH_INIT                        ,
   FTL_HSLC_CFG_SET                    ,
   FFU_CFG                             ,
   PS_MRPH_TIMING                      ,
   FE_NON_OP_PS_CFG                    ,
   HW_ACTIVE_IDLE_CFG                  ,
   FE_ERROR_RECOVERY_IDLOG             ,
   FE_UUID_CFG                         ,
   FE_PWRDIS_CFG                       ,
   FE_LED_CONF                         ,
   FE_LED_CONF_IDTFY                   ,
   FE_HSLC_ENDIS_CFG                   ,

   LAST_CFG                    = 0x7FFF,
}   CFG_SetNumbers_t;

enum CFG_Status_e
{
   CFG_DLE_FAIL = STATUS_CFG_ERROR_BASE,
   CFG_DLE_CFG_SET_SIZE_MISALIGN,
   CFG_INIT_FAIL,
   CFG_INIT_READ_FAIL,
   CFG_INIT_WRITE_FAIL,
   CFG_DLE_FAIL_SET_SIZE_NOT_MATCHED,
   CFG_DLE_FAIL_CONFIG_SET_NOT_FOUND,
   CFG_READ_FAIL,
   CFG_WRITE_FAIL,
   CFG_SIGNATURE_MISMATCH,
   CFG_CONFIG_SET_SIZE_MISALIGNED,
   CFG_FFU_WRONG_BUFFER_PASSED,
   CFG_FFU_CONFIG_SET_NOT_FOUND_INDEX_FILE,
   CFG_FFU_CONFIG_FILE_NOT_RECEIVED,
   CFG_FFU_NOT_ABLE_FIND_CONFIG_SET_HDR,
   CFG_CACHE_BUFFER_TOO_SMALL,
   CFG_INDEX_NOT_SET,
   CFG_PMM_DPS2_SIZE_ALLOCATED_BY_PMM_DOES_NOT_MATCH_HDR_BLOB,
   CFG_DLE_SIZE_MISMATCH_FTL_PHY_CFG_SET,
   CFG_FFU_CONFIG_SET_NOT_FOUND_IN_FLUF,
   CFG_DATA_CONFIG_CRC_CALCULATION_FAIL,
   CFG_DIAG_CONFIGURE_CRC_MISMATCH,
   CFG_FFU_FTL_RAM_PTR_NULL,
   CFG_DLE_INDEX_OUT_OF_BOUNDS,
   CFG_FFU_MRPH_FW_MISMATCH,
   CFG_DLE_FWSET_SIGN_FAILURE,
   CFG_ALLOC_FAIL,
}  ;

enum CFG_Config_Sets_Source_e
{
   CFG_GENERAL_SET = 0,
   CFG_MORPHEUS_SET,
   CFG_MORPHEUS_GENERATED_SET,
};

typedef struct CFG_SetHdr_s
{
   uint32_t    setNumber;
   uint32_t    setVersion;
   uint32_t    setSizeInBytes;
   uint32_t    numberOfSets;
   uint32_t    isFFUAble;
   uint32_t    signature;
   uint32_t    sourceConfigSet;
   uint32_t    reserved;
}   CFG_SetHdr_t;



Status_t  __attribute__((section("TRW")))  CFG_ManagerInit(SysBootPhase_t bootPhase);
Status_t  __attribute__((section("CODE_MEDIUM")))  CFG_ReadCfg(uint32_t setNumber, uint8_t *pUserBuffer, uint32_t size);
Status_t  __attribute__((section("CODE_MEDIUM")))  CFG_WriteCfg(uint32_t setNumber, uint8_t *pUserBuffer, uint32_t size);
uint32_t   CFG_GetSetLength(uint32_t Set_ID);

#line 175 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/cfg_manager_api.h"
Status_t CFG_DPS2MemSize(uint32_t *returnSize);
Status_t CFG_retainDPS2(uint8_t *ptr, uint32_t size);
Status_t  __attribute__((section("TRW")))  CFG_restoreDPS2(uint8_t *ptr, uint32_t size);

#line 32 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_mrph_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse_driver_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse.h"

#line 6 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse.h"
typedef struct eFuse_bit_Array_t
{


   union
   {
      struct
      {
         uint32_t Y_COORD : 8;
         uint32_t X_COORD : 8;
         uint32_t WAFER_LOT : 16;
      } bits;
      uint32_t all32;
   } word0;


   union
   {
      struct
      {
         uint32_t WAFER_NUM : 5;
         uint32_t WS_VERSION : 5;
         uint32_t RESERVED : 6;
         uint32_t RESERVED2 : 6;
         uint32_t SECDED_IO : 10;
      } bits;
      uint32_t all32;
   } word1;


   union
   {
      struct
      {
         uint32_t TWO_CH : 3;
         uint32_t ATB_ENABLE : 3;
         uint32_t XTAL : 3;
         uint32_t HSSTP_READY_SKIP : 3;
         uint32_t TM4_BOOT_ENABLE : 3;
         uint32_t Fast_POR : 3;
         uint32_t TM_RD_SPEED : 3;
         uint32_t SYS_PLL_OP : 3;
         uint32_t ASIC_RX_ANALOGUE : 3;
         uint32_t RoT_SECP_Halt : 3;
         uint32_t Reserved : 2;
      } bits;
      uint32_t all32;
   } word2;


   union
   {
      struct
      {
         uint32_t CORE_V_CAL_LOW : 10;
         uint32_t CORE_V_CAL_HIGH : 10;
         uint32_t CORE_V_SECDED : 7;
         uint32_t Reserved : 5;
      } bits;
      uint32_t all32;
   } word3;


   union
   {
      struct
      {
         uint32_t IO_V_CAL_LOW : 10;
         uint32_t IO_V_CAL_HIGH : 10;
         uint32_t IO_V_SECDED : 7;
         uint32_t Reserved : 5;
      } bits;
      uint32_t all32;
   } word4;


   union
   {
      struct
      {
         uint32_t VDD_CORE_LEAK_RT : 16;
         uint32_t VDD_AON_LEAK_RT : 16;
      } bits;
      uint32_t all32;
   } word5;


   union
   {
      struct
      {
         uint32_t VDD_FPHY_LEAK_RT : 16;
         uint32_t SECDED_LEAK_RT : 16;
      } bits;
      uint32_t all32;
   } word6;


   union
   {
      struct
      {
         uint32_t VDD_CORE_LEAK_HOT : 16;
         uint32_t VDD_AON_LEAK_HOT : 16;
      } bits;
      uint32_t all32;
   } word7;


   union
   {
      struct
      {
         uint32_t VDD_FPHY_LEAK_HOT : 16;
         uint32_t SECDED_LEAK_HOT : 16;
      } bits;
      uint32_t all32;
   } word8;


   union
   {
      struct
      {
         uint32_t DPLLREG_PROG : 5;
         uint32_t TOSC_HP_PROG : 9;
         uint32_t TOSC_LP_CAL : 8;
         uint32_t TOSC_LP_PROG : 5;
         uint32_t VDET_VDD_CORE_PROG_ROM : 5;
      } bits;
      uint32_t all32;
   } word9;


   union
   {
      struct
      {
         uint32_t SECDED_DPLL_TOSC : 8;
         uint32_t RLT_TOSC_CAL : 9;
         uint32_t REF_VCURVE : 3;
         uint32_t REF_VLEVEL : 4;
         uint32_t Reserved : 8;
      } bits;
      uint32_t all32;
   } word10;


   union
   {
      struct
      {
         uint32_t VDET_VDD_AON_PROG : 5;
         uint32_t VDET_VDD_CORE_PROG : 5;
         uint32_t VDET_FIMPHY_VIN_PROG : 6;
         uint32_t VDET_FIMPHY_CORE_PROG : 5;
         uint32_t VDET_DEBUG_VDD_PROG : 5;
         uint32_t VDET_VDDH_ATOP_PROG : 6;
      } bits;
      uint32_t all32;
   } word11;


   union
   {
      struct
      {
         uint32_t SPARE_IN : 16;
         uint32_t SECDED_ANALOGUE : 10;
         uint32_t Reserved : 6;
      } bits;
      uint32_t all32;
   } word12;


   union
   {
      struct
      {
         uint32_t DPLLREG_PROG_FT : 5;
         uint32_t SECDED_DPLLREG_PROG_FT : 5;
         uint32_t DPLLREG_PROG_Valid : 3;
         uint32_t SPARE_IN : 16;
         uint32_t Reserved : 3;
      } bits;
      uint32_t all32;
   } word13;


   union
   {
      struct
      {
         uint32_t TOSC_HP_PROG_FT : 9;
         uint32_t SECDED_TOSC_HP_PROG_FT : 9;
         uint32_t TOSC_HP_PROG_Valid : 3;
         uint32_t TOSC_LP_CAL_FT : 8;
         uint32_t Reserved : 3;
      } bits;
      uint32_t all32;
   } word14;


   union
   {
      struct
      {
         uint32_t SECDED_TOSC_LP_CAL_FT : 8;
         uint32_t TOSC_LP_CAL_Valid : 3;
         uint32_t LPTOSC_REG_PROG_FT : 5;
         uint32_t SECDED_LPTOSC_REG_PROG : 5;
         uint32_t LPTOSC_REG_PROG_Valid : 3;
         uint32_t VDET_VDD_AON_PROG_Valid : 3;
         uint32_t VDET_VDD_CORE_PROG_Valid : 3;
         uint32_t Reserved : 2;
      } bits;
      uint32_t all32;
   } word15;


   union
   {
      struct
      {
         uint32_t VDET_FIMPHY_VIN_PROG_Valid : 3;
         uint32_t VDET_FIMPHY_CORE_PROG_Valid : 3;
         uint32_t VDET_VDDH_ATOP_PROG_Valid : 3;
         uint32_t VDET_DEBUG_VDD_PROG_Valid : 3;
         uint32_t REF_VCURVE_FT : 3;
         uint32_t REF_VLEVEL_FT : 4;
         uint32_t SECDED_REF_VCURVE_FT : 3;
         uint32_t SECDED_REF_VLEVEL_FT : 4;
         uint32_t REF_VCURVE_Valid : 3;
         uint32_t REF_VLEVEL_Valid : 3;
      } bits;
      uint32_t all32;
   } word16;


   union
   {
      struct
      {
         uint32_t RLT_TOSC_CAL_FT : 9;
         uint32_t SECDED_RLT_TOSC_CAL_FT : 9;
         uint32_t RLT_TOSC_CAL_Valid : 3;
         uint32_t Reserved : 11;
      } bits;
      uint32_t all32;
   } word17;


   uint32_t Reserved1[4];


   union
   {
      struct
      {
         uint32_t Reserved : 10;
         uint32_t ANALOGUE_FT_VALIDS : 7;
         uint32_t SECDED_ANALOGUE_FT_VALIDS : 6;
         uint32_t Reserved2 : 9;
      } bits;
      uint32_t all32;
   } word22;


   union
   {
      struct
      {
         uint32_t Stress_Sensor_Balanced_Centre : 10;
         uint32_t Stress_Sensor_Balanced_Top_left : 10;
         uint32_t Reserved : 2;
         uint32_t Stress_Sensor_Balanced_ATOP_Corner : 10;
      } bits;
      uint32_t all32;
   } word23;


   union
   {
      struct
      {
         uint32_t Stress_Sensor_Balanced_ATOP_Under_the_bump : 10;
         uint32_t Stress_Sensor_Strong_Centre : 10;
         uint32_t Reserved : 2;
         uint32_t Stress_Sensor_Strong_Top_left : 10;
      } bits;
      uint32_t all32;
   } word24;


   union
   {
      struct
      {
         uint32_t Stress_Sensor_Strong_ATOP_Corner : 10;
         uint32_t Stress_Sensor_Strong_ATOP_Under_the_bump : 10;
         uint32_t Reserved : 2;
         uint32_t SECDED_STRESS_SENSOR : 10;
      } bits;
      uint32_t all32;
   } word25;


   union
   {
      struct
      {
         uint32_t FT1_Insertion : 3;
         uint32_t CP1_Insertion : 3;
         uint32_t CP2_Insertion : 3;
         uint32_t CP3_Insertion : 3;
         uint32_t Reserved : 20;
      } bits;
      uint32_t all32;
   } word26;


   union
   {
      struct
      {
         uint32_t LDPC_Code_Selection_Bit_0 : 3;
         uint32_t LDPC_Code_Selection_Bit_1 : 3;
         uint32_t LDPC_Code_Selection_Bit_2 : 3;
         uint32_t LDPC_Code_Selection_Bit_3 : 3;
         uint32_t BUID_EN : 3;
         uint32_t Reserved : 17;
      } bits;
      uint32_t all32;
   } word27;


   union
   {
      struct
      {
         uint32_t MOORTEC1_TDET_DOUT_RT : 12;
         uint32_t MOORTEC2_TDET_DOUT_RT : 12;
         uint32_t SECDED_MORTEC_TDET_RT : 8;
      } bits;
      uint32_t all32;
   } word28;


   union
   {
      struct
      {
         uint32_t MOORTEC1_TDET_DOUT_HOT : 12;
         uint32_t MOORTEC2_TDET_DOUT_HOT : 12;
         uint32_t SECDED_MORTEC_TDET_HOT : 8;
      } bits;
      uint32_t all32;
   } word29;


   union
   {
      struct
      {
         uint32_t FIM_VREF_EN0_DQ : 3;
         uint32_t FIM_VREF_EN1_DQ : 3;
         uint32_t FIM_VREF_EN_DQS : 3;
         uint32_t FIM_DIFF : 3;
         uint32_t FIM_ODT : 3;
         uint32_t FIM_PE_STR : 3;
         uint32_t FIM_PS_P_DQS : 3;
         uint32_t FIM_PE_P_DQS : 3;
         uint32_t FIM_PS_N_DQS : 3;
         uint32_t FIM_PE_N_DQS : 3;
         uint32_t Reserved : 2;
      } bits;
      uint32_t all32;
   } word30;


   union
   {
      struct
      {
         uint32_t FIM_PS_P_REN : 3;
         uint32_t FIM_PE_P_REN : 3;
         uint32_t FIM_PS_N_RE : 3;
         uint32_t FIM_PE_N_RE : 3;
         uint32_t FIM_PS_DQ : 3;
         uint32_t FIM_PE_DQ : 3;
         uint32_t Reserved : 14;
      } bits;
      uint32_t all32;
   } word31;


   union
   {
      struct
      {
         uint32_t FIM0_VREFH_ADJ : 24;
         uint32_t FIM0_SECDED_VREFH_ADJ : 8;
      } bits;
      uint32_t all32;
   } word32;


   union
   {
      struct
      {
         uint32_t FIM0_VREFL_ADJ : 24;
         uint32_t FIM0_SECDED_VREFL_ADJ : 8;
      } bits;
      uint32_t all32;
   } word33;


   union
   {
      struct
      {
         uint32_t FIM0_CALN : 6;
         uint32_t FIM0_CALP : 6;
         uint32_t FIM0_CALODT : 6;
         uint32_t Reserved : 6;
         uint32_t FIM0_SECDED_CAL : 8;
      } bits;
      uint32_t all32;
   } word34;


   union
   {
      struct
      {
         uint32_t FIM_DIFF2 : 2;
         uint32_t FIM0_CAL_RTRIM : 8;
         uint32_t FIM0_CAL_COMPTRIM : 8;
         uint32_t Reserved : 6;
         uint32_t FIM0_SECDED_TRIM : 8;
      } bits;
      uint32_t all32;
   } word35;


   union
   {
      struct
      {
         uint32_t FIM_SR_DQ : 2;
         uint32_t FIM_SR_DQS : 2;
         uint32_t FIM_SR_REN : 2;
         uint32_t Reserved : 18;
         uint32_t FIM_SECDED_SR : 8;
      } bits;
      uint32_t all32;
   } word36;


   union
   {
      struct
      {
         uint32_t FIM1_VREFH_ADJ : 24;
         uint32_t FIM1_SECDED_VREFH_ADJ : 8;
      } bits;
      uint32_t all32;
   } word37;


   union
   {
      struct
      {
         uint32_t FIM1_VREFL_ADJ : 24;
         uint32_t FIM1_SECDED_VREFL_ADJ : 8;
      } bits;
      uint32_t all32;
   } word38;


   union
   {
      struct
      {
         uint32_t FIM1_CALN : 6;
         uint32_t FIM1_CALP : 6;
         uint32_t FIM1_CALODT : 6;
         uint32_t Reserved : 6;
         uint32_t FIM1_SECDED_CAL : 8;
      } bits;
      uint32_t all32;
   } word39;


   union
   {
      struct
      {
         uint32_t FIM1_CAL_RTRIM_RESERVED : 8;
         uint32_t FIM1_CAL_COMPTRIM_RESERVED : 8;
         uint32_t Reserved : 8;
         uint32_t FIM1_SECDED_TRIM : 8;
      } bits;
      uint32_t all32;
   } word40;


   union
   {
      struct
      {
         uint32_t FIM2_VREFH_ADJ : 24;
         uint32_t FIM2_SECDED_VREFH_ADJ : 8;
      } bits;
      uint32_t all32;
   } word41;


   union
   {
      struct
      {
         uint32_t FIM2_VREFL_ADJ : 24;
         uint32_t FIM2_SECDED_VREFL_ADJ : 8;
      } bits;
      uint32_t all32;
   } word42;


   union
   {
      struct
      {
         uint32_t FIM2_CALN : 6;
         uint32_t FIM2_CALP : 6;
         uint32_t FIM2_CALODT : 6;
         uint32_t Reserved : 6;
         uint32_t FIM2_SECDED_CAL : 8;
      } bits;
      uint32_t all32;
   } word43;


   union
   {
      struct
      {
         uint32_t FIM2_CAL_RTRIM : 8;
         uint32_t FIM2_CAL_COMPTRIM : 8;
         uint32_t Reserved : 8;
         uint32_t FIM2_SECDED_TRIM : 8;
      } bits;
      uint32_t all32;
   } word44;


   union
   {
      struct
      {
         uint32_t FIM3_VREFH_ADJ : 24;
         uint32_t FIM3_SECDED_VREFH_ADJ : 8;
      } bits;
      uint32_t all32;
   } word45;


   union
   {
      struct
      {
         uint32_t FIM3_VREFL_ADJ : 24;
         uint32_t FIM3_SECDED_VREFL_ADJ : 8;
      } bits;
      uint32_t all32;
   } word46;


   union
   {
      struct
      {
         uint32_t FIM3_CALN : 6;
         uint32_t FIM3_CALP : 6;
         uint32_t FIM3_CALODT : 6;
         uint32_t Reserved : 6;
         uint32_t FIM3_SECDED_CAL : 8;
      } bits;
      uint32_t all32;
   } word47;


   union
   {
      struct
      {
         uint32_t FIM3_CAL_RTRIM_RESERVED : 8;
         uint32_t FIM3_CAL_COMPTRIM_RESERVED : 8;
         uint32_t Reserved : 8;
         uint32_t FIM3_SECDED_TRIM : 8;
      } bits;
      uint32_t all32;
   } word48;


   union
   {
      struct
      {
         uint32_t E0 : 1;
         uint32_t E1 : 1;
         uint32_t E3 : 1;
         uint32_t E4 : 1;
         uint32_t INT_CAP : 5;
         uint32_t Reserved : 15;
         uint32_t SECDED_XTAL : 8;
      } bits;
      uint32_t all32;
   } word49;


   uint32_t Reserved[14];


}     eFuse_bit_Array_t;

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse_driver_api.h"

#line 231 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse_driver_api.h"
Status_t SYS_eFuseActivateKeyCopy(uint32_t keyCopyNum, BOOL32 parityCheckRequired);

enum
{
    SEC_EFUSE_KEY_COPY_0 = 0,
    SEC_EFUSE_KEY_COPY_1 = 1,
    SEC_EFUSE_KEY_COPY_2 = 2,


    SEC_EFUSE_KEY_NUM,
};

#line 262 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse_driver_api.h"
typedef enum
{
   NO_ERROR_DETECTED = 0x0,
   ONE_BIT_ERROR_CORRECTED,
   UNCORRECTABLE_ERROR_DETECTED,
}SEC_Secded_Result_t;




enum
{

   TM400_ENABLED_BIT = 0,
   TWO_CH_BIT,
   ATB_ENABLE_BIT,
   XTAL_BIT,
   HSSTP_READY_SKIP_BIT,
   TM4_BOOT_ENABLE,
   FAST_POR_BIT,
   SYS_PLL_OP,
   ASIC_RX_ANALOGUE,
   ROT_SECP_HALT,
   VDET_VDD_CORE_PROG_Valid,
   LDPC_CODE_SELECTION_0_BIT,
   LDPC_CODE_SELECTION_1_BIT,
   LDPC_CODE_SELECTION_2_BIT,
   LDPC_CODE_SELECTION_3_BIT,
   BUID_EN_BIT,
   FIM_ODT,

   DPLLREG_PROG_Valid_BIT,
   TOSC_HP_PROG_Valid_BIT,
   TOSC_LP_CAL_Valid_BIT,
   LPTOSC_REG_PROG_Valid_BIT,
   VDET_VDD_AON_PROG_Valid_BIT,
   VDET_FIMPHY_VIN_PROG_Valid_BIT,
   VDET_FIMPHY_CORE_PROG_Valid_BIT,
   VDET_VDDH_ATOP_PROG_Valid_BIT,
   VDET_DEBUG_VDD_PROG_Valid_BIT,
   REF_VCURVE_Valid_BIT,
   REF_VLEVEL_Valid_BIT,
   RLT_TOSC_CAL_Valid_BIT,
   FT1_Insertion_BIT,
   CP1_Insertion_BIT,
   CP2_Insertion_BIT,
   CP3_Insertion_BIT,
   FIM_VREF_EN0_DQ_BIT,
   FIM_VREF_EN1_DQ_BIT,
   FIM_VREF_EN_DQS_BIT,
   FIM_DIFF_BIT,
   FIM_PE_STR_BIT,
   FIM_PS_P_DQS_BIT,
   FIM_PE_P_DQS_BIT,
   FIM_PS_N_DQS_BIT,
   FIM_PE_N_DQS_BIT,
   FIM_PS_P_REN_BIT,
   FIM_PE_P_REN_BIT,
   FIM_PS_N_RE_BIT,
   FIM_PE_N_RE_BIT,
   FIM_PS_DQ_BIT,
   FIM_PE_DQ_BIT,


};

enum
{
   STATUS_EFUSE_TIMEOUT_ERROR,
   STATUS_EFUSE_BUFFER_ALLOCATION_ERROR,
   STATUS_EFUSE_INIT_ERROR,
   STATUS_EFUSE_PROGRAMMING_ERROR,
   STATUS_SEC_EFUSE_INCORRECT_BSTATE,
};


typedef enum
{
   DIAG_EFUSE_SET_TM ,
   DIAG_EFUSE_SET_RESERVED_1,
   DIAG_EFUSE_SET_BUID_EN,
   DIAG_EFUSE_SET_LDPC_CODE_SEL,
   DIAG_EFUSE_SET_ALL_BRINGUP,
   DIAG_EFUSE_SET_RESERVED_2,
   DIAG_EFUSE_SET_RESERVED_3,
   DIAG_EFUSE_SET_RESERVED_4,
   DIAG_EFUSE_SET_RESERVED_5,
   DIAG_EFUSE_SET_RESERVED_6,
   DIAG_EFUSE_SET_RESERVED_7,
   DIAG_EFUSE_SET_RESERVED_8,
   DIAG_EFUSE_SET_RESERVED_9,
   DIAG_EFUSE_SET_RESERVED_10,
   DIAG_EFUSE_SET_RESERVED_11,
   DIAG_EFUSE_SET_ANY_DATA_MODEL,
} DIAG_EFUSE_SET_FIELDS_t;






typedef union
{
    struct
    {
        uint32_t LDPC_Code_Selection_Bit_0 : 3;
        uint32_t LDPC_Code_Selection_Bit_1 : 3;
        uint32_t LDPC_Code_Selection_Bit_2 : 3;
        uint32_t LDPC_Code_Selection_Bit_3 : 3;
        uint32_t BUID_EN : 3;
        uint32_t Reserved : 17;
    } bits;
    uint32_t all32;
} word27_t;



typedef struct
{
   uint32_t    signature;
   eFuse_bit_Array_t  eFuseBitArray;
   uint32_t bitflipsMap;
   uint64_t tempForSecdedUnalignedAddr;


   BOOL toscProgValidity;
   BOOL fim0VerfHValidity;
   BOOL fim1VerfHValidity;
   BOOL fim2VerfHValidity;
   BOOL fim3VerfHValidity;


   BOOL two_ch;
   BOOL atb_enable;
   BOOL xtal;
   BOOL hsstp_ready_skip;
   BOOL tm4_boot_enable;
   BOOL fast_por;
   BOOL tm_rd_speed_400;
   BOOL sys_pll_op;
   BOOL asic_rx_analogue;
   BOOL rot_secp_Halt;
   BOOL vdet_vdd_core_prog_valid;
   uint32_t ldpc_code_selection;
   BOOL BUID_EN;
   BOOL FIM_ODT;


   BOOL SECDED_IO;
   BOOL CORE_V_SECDED;
   BOOL IO_V_SECDED;
   BOOL SECDED_LEAK_RT;
   BOOL SECDED_LEAK_HOT;
   BOOL SECDED_ANALOGUE;
   BOOL SECDED_DPLLREG_PROG_FT;
   BOOL SECDED_TOSC_HP_PROG_FT;
   BOOL SECDED_TOSC_LP_CAL_FT;
   BOOL SECDED_LPTOSC_REG_PROG;
   BOOL SECDED_REF_VCURVE_FT;
   BOOL SECDED_REF_VLEVEL_FT;
   BOOL SECDED_RLT_TOSC_CAL_FT;
   BOOL SECDED_ANALOGUE_FT_VALIDS;
   BOOL SECDED_STRESS_SENSOR;
   BOOL SECDED_MORTEC_TDET_RT;
   BOOL SECDED_MORTEC_TDET_HOT;
   BOOL FIM0_SECDED_VREFL_ADJ;
   BOOL FIM0_SECDED_CAL;
   BOOL FIM0_SECDED_TRIM;
   BOOL FIM_SECDED_SR;
   BOOL FIM1_SECDED_VREFL_ADJ;
   BOOL FIM1_SECDED_CAL;
   BOOL FIM1_SECDED_TRIM;
   BOOL FIM2_SECDED_VREFL_ADJ;
   BOOL FIM2_SECDED_CAL;
   BOOL FIM2_SECDED_TRIM;
   BOOL FIM3_SECDED_VREFL_ADJ;
   BOOL FIM3_SECDED_CAL;
   BOOL FIM3_SECDED_TRIM;
   BOOL SECDED_XTAL;


   BOOL DPLLREG_PROG_Valid;
   BOOL TOSC_HP_PROG_Valid;
   BOOL TOSC_LP_CAL_Valid;
   BOOL LPTOSC_REG_PROG_Valid;
   BOOL VDET_VDD_AON_PROG_Valid;
   BOOL VDET_FIMPHY_VIN_PROG_Valid;
   BOOL VDET_FIMPHY_CORE_PROG_Valid;
   BOOL VDET_VDDH_ATOP_PROG_Valid;
   BOOL VDET_DEBUG_VDD_PROG_Valid;
   BOOL REF_VCURVE_Valid;
   BOOL REF_VLEVEL_Valid;
   BOOL RLT_TOSC_CAL_Valid;
   BOOL FT1_Insertion;
   BOOL CP1_Insertion;
   BOOL CP2_Insertion;
   BOOL CP3_Insertion;
   BOOL FIM_VREF_EN0_DQ;
   BOOL FIM_VREF_EN1_DQ;
   BOOL FIM_VREF_EN_DQS;
   BOOL FIM_DIFF;
   BOOL FIM_PE_STR;
   BOOL FIM_PS_P_DQS;
   BOOL FIM_PE_P_DQS;
   BOOL FIM_PS_N_DQS;
   BOOL FIM_PE_N_DQS;
   BOOL FIM_PS_P_REN;
   BOOL FIM_PE_P_REN;
   BOOL FIM_PS_N_RE;
   BOOL FIM_PE_N_RE;
   BOOL FIM_PS_DQ;
   BOOL FIM_PE_DQ;

   BOOL reservedFlag[24];

} AON_eFuseData_t;





Status_t   SYS_eFuseInit(void);

BOOL   majorityFnBitFlips(uint32_t bits);
AON_eFuseData_t * SYS_GetAONeFuseData(void);





Status_t SYS_eFuseRead(uint32_t *efuse_data, uint32_t efuse_addr);
Status_t SYS_eFuseReadArray(uint32_t *efuse_data, uint32_t efuse_addr, uint32_t num_words);

Status_t   SYS_eFuse1ReadArray(uint32_t *efuse_data, uint32_t efuse_addr, uint32_t num_words);

#line 503 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/efuse_driver_api.h"
void     SYS_eFusePowerOn(BOOL32 isProgramOperation);
void     SYS_eFusePowerOff(BOOL32 isProgramOperation);
void     SYS_EfuseMarginalRead(BOOL32 enableMarginalRead);
Status_t SECDED_Decode(uint32_t* pData, uint32_t dataSizeBytes, uint32_t parity);
uint32_t SECDED_Encode(uint32_t* pData, uint32_t dataSizeBytes);
uint32_t SECDED_GetParitySize(uint32_t dataSizeBits);
Status_t SYS_eFuseSetTest (uint8_t *pAppCmdData, uint32_t* pBuffer, uint32_t numBytes);



BOOL     SYS_eFuseReturn2CHValue(void);
BOOL       SYS_eFuseReturnATBEnableValue(void);
BOOL     SYS_eFuseReturnXTALValue(void);
BOOL       SYS_eFuseReturnHsstpReadySkipValue(void);
BOOL     SYS_eFuseReturnTM4BootEnableValue(void);
BOOL     SYS_eFuseReturnFastPorValue(void);
BOOL     SYS_eFuseReturnTM400Value(void);
BOOL     SYS_eFuseReturnSysPllOp(void);
BOOL     SYS_eFuseReturnAsicRxAnalougeValue(void);
BOOL     SYS_eFuseReturnRoTSecpHaltValue(void);
BOOL     SYS_eFuseReturnVdetVddCoreProgValidValue(void);
BOOL     SYS_eFusetoscProgValidityValue(void);
BOOL     SYS_eFuseReturnBUIDValue(void);
BOOL     SYS_eFuseReturnFimOdtValue(void);
void     SYS_eFuseReturnLDPC_CodeSelection(uint32_t *pLDPC_CodeSelection);
BOOL     SYS_eFuseReturnFim_Verfl_Adj_Details(uint32_t fimIndex, uint32_t* value);
Status_t   SYS_eFuseBurnBUIDEnableBits(void);

Status_t   SYS_eFuseVerifySecdedAndMajorityForRam();

__inline static  eFuse_bit_Array_t * SYS_GeteFuseData(void)
{
   return  &(SYS_GetAONeFuseData())->eFuseBitArray;
}

#line 33 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_mrph_api.h"

#line 46 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_mrph_api.h"
typedef uint16_t nandParamAddr_t;
typedef uint16_t nandParamData_t;


typedef struct PS_MRPHTableEntry_s
{

   uint8_t morpheusVersion[6];
   uint8_t padding[6];
   uint8_t sectionTerminator[4];
}  PS_MRPHTableEntry_t;

typedef struct PS_MRPHTableEntryConfig_s
{
   CFG_SetHdr_t            setHdr;
   PS_MRPHTableEntry_t setData;
}   PS_MRPHTableEntryConfig_t;



typedef struct PS_MRPH_NandMtVersion_s
{
   uint32_t             nandVersion;
   uint8_t              nandType;
   uint8_t              mtVersion;
   uint8_t              romFuseRPGM;
   uint32_t             morpheusFWFormatVersion;
   uint8_t              rfu[4];
}  PS_MRPH_NandMtVersion_t;

typedef struct PS_MRPH_NandMtVersionConfig_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_NandMtVersion_t setData;
}  PS_MRPH_NandMtVersionConfig_t;

typedef struct PS_KGD_DataSet_s
{
   uint16_t year;
   uint16_t month;
   uint16_t day;
   uint16_t hour;
   uint16_t minutes;
   uint16_t second;
   uint32_t reserved1;
   uint8_t  productCode[5];
   uint8_t  lotNo[13];
   uint8_t  waferId[10];
   uint16_t wafNo;
   uint16_t xAdd;
   uint16_t yAdd;
   uint16_t reserved2;
   uint32_t dutNo;
   uint32_t paramVer;
   uint8_t  programVer[3];
   uint8_t  reserved3[9];
}   PS_KGD_DataSet_t;

typedef struct PS_KGD_ConfigSet_s
{
   CFG_SetHdr_t         setHdr;
   PS_KGD_DataSet_t     setData;
}   PS_KGD_ConfigSet_t;

typedef struct PS_EFUSE_DataSet_s
{
   uint32_t data[ (2)  +  (4)  + 1];
   uint8_t padding[4];
}   PS_EFUSE_DataSet_t;

typedef struct PS_EFUSE_ConfigSet_s
{
   CFG_SetHdr_t         setHdr;
   PS_EFUSE_DataSet_t   setData;
}   PS_EFUSE_ConfigSet_t;



enum
{
   Morpheus_TableEntry = 0,
   CVDTracking_TableEntry,
   FLGPandWA_TableEntry,
   CVDDRDScan_TableEntry,
   FastSLCProgram_TableEntry,
   ReadScrub_TableEntry,
   LDPC_TableEntry,
   REHOption_TableEntry,
   ReadPerfImprv_TableEntry,
   BES_TableEntry,
   VCGR_TableEntry,
   FTL_TableEntry,
   SGD_TableEntry,
   IFT_TableEntry,
   ERASE_TableEntry,
   INIT_TableEntry,
   TIMING_TableEntry,
   EndOfMap_TableEntry,

   NUM_TABLE_ENTRIES,
};

typedef struct
{
   uint16_t TableEntry;
   uint16_t FormatVersion;
   uint16_t ValueVersion;
   uint16_t PayloadSize;
} PS_MRPH_MAP_TableEntry_t;

typedef struct PS_MRPH_MAP_Params_s
{
   PS_MRPH_MAP_TableEntry_t mapParams[NUM_TABLE_ENTRIES];
}   PS_MRPH_MAP_Params_t;

typedef struct PS_MRPH_MAP_CFG_Params_s
{
   CFG_SetHdr_t            setHdr;
   PS_MRPH_MAP_Params_t    setData;
}   PS_MRPH_MAP_CFG_Params_t;

Status_t PS_MRPH_DLE_Init();
Status_t PS_MRPH_DLE_Init_End(void);
void PS_MRPH_DLE_ReleaseBuffer(void);
Status_t PS_MRPH_readMORPHEUS(uint32_t tableEntry, uint8_t *buffer, uint32_t size);
Status_t PS_MRPH_ProcessPackage(uint8_t* pFileData);
void PS_MRPH_getNandMtVersion(uint8_t *pDstBuffer);
Status_t CFG_FFU_parseMRPHPackage(uint8_t *ffuBuffer, BOOL *updateNeeded);
Status_t CFG_FFU_parseMRPHPackage_CleanUp();
Status_t PS_MRPH_fillMORPHEUSTable(uint8_t *buffer);

Status_t PS_MRPH_processDLEPackageHdr(uint8_t *pFileData, uint8_t *found, uint32_t *retIndex, uint32_t formatVersionUROM, uint32_t valueVersionUROM, uint32_t *foundValueVersionDLE);
Status_t PS_MRPH_DLE_ProcessRSPackage(uint8_t *pFileData, BOOL *updateNeeded);
Status_t PS_NPARAM_CFG_GenerateFastSLCData( uint8_t *pMrphBuffer);

void PS_NPARAM_CFG_getFastSLCData(uint8_t* pDstBuffer);
Status_t PS_NPARAM_CFG_GenerateVCGRData( uint8_t *pMrphBuffer);
void PS_NPARAM_CFG_getVCGRData(uint8_t* pDstBuffer);
Status_t PS_NPARAM_CFG_GenerateSGDData (uint8_t *pMrphBuffer);
void PS_NPARAM_CFG_getSGDData (uint8_t* pDstBuffer);
Status_t SYS_Diag_getTestStampUserrom(uint8_t *pDstBuffer);
Status_t SYS_Diag_compareTestStampPayload(uint8_t *first, uint8_t *second);

#line 5 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_def.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/xor_zones_config.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/xor_zones_config.h"
enum {
   XOR_ZONE_INDEX_0,
   XOR_ZONE_INDEX_1,
   XOR_ZONE_INDEX_2,
   XOR_ZONE_INDEX_3,
   XOR_ZONE_INDEX_4,
   XOR_ZONE_INDEX_5,
   XOR_ZONE_INDEX_6,
   XOR_ZONE_INDEX_7,
   XOR_ZONE_INDEX_8,
   XOR_ZONE_INDEX_9,
   XOR_ZONE_INDEX_10,
   XOR_ZONE_INDEX_11,
   XOR_ZONE_INDEX_12,
   XOR_ZONE_INDEX_13,
   XOR_ZONE_INDEX_14,
   XOR_ZONE_INDEX_15,
   XOR_ZONE_INDEX_INVALID,
};

#line 6 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_def.h"









typedef uint32_t PS_FlashType_e;
typedef DeVBA_t PS_InfraGBBData_t;



typedef struct PS_ConfigData_s
{
   PS_FlashType_e FlashType;
   uint8_t        FlashID[  ( 4  * sizeof(uint16_t))  ];
   uint8_t        FlashExtdID[  ( 4  * sizeof(uint16_t))  ];
   uint16_t       blocksPerPlane;
   uint8_t        diesPerPhysChip;
   uint16_t       burstModeThesValuS;
   uint8_t        xorZonesPerBlock;
   uint16_t       xorZonesSizes[ ( (16) ) ];
   uint8_t        rfu[2];

} PS_ConfigData_t;

extern char __ct_[( ( (((sizeof(PS_ConfigData_t))) + (8) - 1) & ~((8) - 1) )  == sizeof(PS_ConfigData_t)) ? 1 : -1] ;




typedef struct PS_Container_s
{
   volatile uint16_t          mpps0Sig;
   volatile uint16_t          mpps1Sig;
   PS_ConfigData_t            *pCfgData;
   uint32_t                   *pFBBM_DCCM[ 2 ];
   uint32_t                   *pFBBM_ARAM[ 2 ];
   uint32_t                   *pflatBBMAuxTable[ 2 ];
   uint32_t                   *pflatBBMTbl[ 2 ];
   uint32_t                   *pRelinkTbl[ 2 ];
   uint32_t                   *pBbmCounters[ 2 ];
   uint32_t                   *pBbmLastGoodBlk[ 2 ];
   uint32_t                   *pBbmUeccList[ 2 ];
   uint32_t                   *pBbmSecondaryUeccList[ 2 ];
   PS_InfraGBBData_t          *pInfraGBBData_PS0;
   PS_InfraGBBData_t          *pInfraGBBData_PS1;
   uint32_t                   *pPsMrphDir;
   uint16_t                   productionDone;
   uint16_t                   nandParamDefault;
   uint32_t                   *pVpgmBaseAddr;
   uint32_t                   *pVcgrBaseAddr;
   uint32_t                   *pNANDDieParams;
   uint32_t                   *pSgdBaseAddr;
   uint32_t                   *pSgd_TLC_Detect_BaseAddr;
   uint32_t                   *pSgd_SLC_Detect_BaseAddr;
   uint32_t                   *pSgd_Correct_BaseAddrBlanket_PS0;
   uint32_t                   *pSgd_Correct_BaseAddrDie_PS0;

      uint32_t                *pSgd_Correct_BaseAddrBlanket_PS1;
      uint32_t                *pSgd_Correct_BaseAddrDie_PS1;

#line 73 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_def.h"
   PS_MRPH_NandMtVersion_t     nandMtVersion;
   uint16_t                    FtlSlcBudget;
   uint16_t                    rfu[3];
} PS_Container_t;


extern char __ct_[( 160  == sizeof(PS_Container_t)) ? 1 : -1] ;
extern char __ct_[(( 0x00000140  == (sizeof(PS_Container_t) * ( 2 ) ))) ? 1 : -1] ;

#line 5 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_container_api.h"

extern PS_Container_t *pContainer;

#line 25 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"

#line 265 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef struct PSRequest_s PSRequest_t;

#line 295 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
enum
{
   SLC_HOST_CLOSED_BLK  =  (0 << 1) ,
   SLC_HOST_OPEN_BLK    = ( (0 << 1)  |  (1 << 0) ),
   SLC_CTRL_CLOSED_BLK  =  (1 << 1) ,
   SLC_CTRL_OPEN_BLK    = ( (1 << 1)  |  (1 << 0) ),
   TLC_HOST_CLOSED_BLK  = ( (1 << 2)   |  (0 << 1) ),
   TLC_HOST_OPEN_BLK    = ( (1 << 2)   |  (0 << 1)  |  (1 << 0) ),
   RS_FTL_NON_CLASIFIED,
   INFRA_BLK            =  (7) ,
};
typedef uint16_t BlkCat_e;


enum
{
   RS_SRC_PASSIVE_SCAN = 0,
   RS_SRC_RANDOM_SCAN,
   RS_SRC_ACTIVE_SCAN,
   RS_SRC_REH,
   RS_SRC_CVD,
   RS_SRC_UT_RS,
};
typedef uint16_t EntrySrc_e;

#line 335 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef struct RS_MorpheusParamsCB_s
{
   uint8_t openBlockNumWlsToScan;
   uint8_t closedBlockNumWlsToScan;
   uint8_t openBlockWls[ (22) ];
   uint8_t closedBlockWls[ (22) ];
   uint8_t rfu[6];
}   RS_MorpheusParamsCB_t, *RS_MorpheusParamsCB_p;

typedef struct RS_debugStat_s
{
   uint32_t minVacancy;
   uint32_t numDropped;
   uint32_t retryRelo;
   uint32_t infraRelo;
   uint32_t ftlRelo;
   uint32_t accMode;
   uint32_t psvScanHBER;
   uint32_t rndScanSW;
   uint32_t actScanSW;
   uint32_t rehEntries;
   uint32_t rehFtlRelo;
   uint32_t rehInfraRelo;
   uint32_t PriCvdHandle;
}   RS_debugStat_t;



enum
{
   PS_PHY_RD_REQ_CACHE_MODE_AUTO       = 0,
   PS_PHY_RD_REQ_CACHE_MODE_OFF        = 1,
   PS_PHY_RD_REQ_CACHE_MODE_ON         = 2,
};

enum
{
   PS_PHY_RD_REQ_FIRST_RD_MODE_AUTO       = 0,
   PS_PHY_RD_REQ_FIRST_RD_MODE_OFF        = 1,
   PS_PHY_RD_REQ_FIRST_RD_MODE_ON         = 2,
};

typedef enum
{
   DONT_SKIP_LOAD,
   SKIP_LOAD,
} PS_SkipLoad_t;

typedef enum
{
   PS_OPB_READ_PHYSICALLY_CLOSED,
   PS_OPB_READ_LOGICALLY_CLOSED,
   PS_OPB_READ_OPEN,
} PS_OpbReadType_t;

#line 715 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
extern char __ct_[( 7  <= 7 ) ? 1 : -1] ;

#line 774 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef enum
{
   PS_API_LOWER_PAGE = 0,
   PS_API_MIDDLE_PAGE   ,
   PS_API_UPPER_PAGE    ,
   PS_API_MAX_NUM_OF_PAGES,
   MAX_EPWR_PAGE_TYPE,
} PageType_e;

typedef enum
{
   PS_API_MODE_AUTO,
   PS_API_FR_FORCE_OFF,
   PS_API_FR_FORCE_ON,
} FastRead_e;

typedef enum
{
   FLGP_BER_CNTR_GOOD,
   FLGP_BER_CNTR_MARG,
   FLGP_BER_CNTR_BAD,
   FLGP_BER_CNTR_TOTAL,
} FlgpBerCntr_e;

#line 807 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef union vba
{

   uint32_t vba32;


   struct FTL_flavor1_s
   {
      uint32_t fmuInMB       :  17 ;
      uint32_t MBID          :  15 ;
   }   FTL_flavor1;


   struct FTL_flavor2_s
   {
      uint32_t fmuInMB        :  17 ;
      uint32_t MB             :  11 ;
      uint32_t MD             :  4 ;
   }   FTL_flavor2;


   struct FTL_flavor3_s
   {
      uint32_t fmuInMB        :  17 ;
      uint32_t MB             :  11 ;

      uint32_t CG             :  1 ;
      uint32_t MD             :  3 ;

#line 839 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   }   FTL_flavor3;


   struct vba_bits_s
   {

      uint32_t fmu            :  4 ;
      uint32_t diePageInMB    :  13 ;
      uint32_t MB             :  11 ;
      uint32_t MD             :  4 ;
   }   bits;


   struct PS_Flavor2_s
   {
      uint32_t fmu            :  4 ;
      uint32_t fim            :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t MB             :  11 ;
      uint32_t MD             :  4 ;
   }   PS_flavor2;


   struct PS_flavor3_s
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t fim            :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t MB             :  11 ;
      uint32_t MD             :  4 ;
   }   PS_flavor3;

   struct vbaTlc_s
   {

      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t lFim           :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t block          :  11 ;


      uint32_t psId           :  1 ;
      uint32_t dieInFim       :  3 ;

#line 889 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   }   vbaTlc;

   struct vbaSlc_sbm_s
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t lFim           :  1 ;
      uint32_t diePageInBlk   :  12 ;
      uint32_t subBlock       :  1 ;
      uint32_t block          :  10 ;

      uint32_t psId           :  1 ;
      uint32_t dieInFim       :  3 ;

#line 907 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   }   vbaSlc_sbm;

}   VBA_t;


typedef struct BlkEntry_s
{
   VBA_t       VBA;
   BlkCat_e    blkCat;
   uint16_t    syndWt;
   uint16_t    JBID;
   EntrySrc_e  source;
   uint16_t    origSource;
   uint8_t     isBWL;
   uint8_t     hiPriority :1;
   uint8_t     isProc     :1;
   uint8_t     rfu        :6;
}   BlkEntry_t;

#line 934 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef union flashAddress_s
{
   uint32_t all32;
   struct
   {
      uint32_t fmu            :  2 ;
      uint32_t plane          :  2 ;
      uint32_t fim_low        :  1 ;
      uint32_t diePageInBlock :  12 ;
      uint32_t phyBlock       :  11 ;

      uint32_t psId           :  1 ;
      uint32_t dieInFim       :  3 ;

#line 951 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   }bits;
} flashAddress_t;



typedef union PS_XOR_ParityBinComposite
{
   uint16_t     all16;
   struct
   {
      uint16_t     parBin         :8;
      uint16_t     parBinGroupID  :8;
   }parts;
} PS_XOR_ParityBinComposite_t;


typedef struct PS_XOR_WriteParams_s
{
   uint8_t OPBID              : 4;
   uint8_t XBID               : 4;
} PS_XOR_WriteParams_t;

typedef struct PS_XOR_ReadParams_s
{
   uint8_t OPBID              : 4;
   uint8_t isParityPage       : 1;

   uint8_t skipXOR            : 1;
   uint8_t rfu2               : 2;
} PS_XOR_ReadParams_t;

typedef  union PS_XOR_Params_s
{
   uint8_t                 all;
   PS_XOR_WriteParams_t    writeParams;
   PS_XOR_ReadParams_t     readParams;
} PS_XOR_Params_t;



typedef struct PS_MsgTypeCntFlags_s
{

   uint8_t msgType;

   PS_XOR_Params_t xor;


   uint8_t blkType    : 1;
   uint8_t ignoreHBER : 1;
   uint8_t parityBit  : 1;
   uint8_t isHSLC     : 1;
   uint8_t isSBM      : 1;
   uint8_t rfu0       : 3;


   uint8_t secCnt : 8;



   uint8_t eiDoInject     : 1;
   uint8_t eiIvIdx        : 4;
   uint8_t eiIsPsInternal : 1;




   uint8_t rfu1           : 2;


   uint8_t rfu[3];


} PS_MsgTypeCntFlags_t;

typedef  union PS_Common_D0_s
{

    uint64_t                all;

#line 1033 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   PS_MsgTypeCntFlags_t    split;
} PS_Common_D0_t;



typedef struct PS_ReqGeneric_s
{

   PS_Common_D0_t  dw0;

   VBA_t VBA;

   uint32_t mbxAddr;

   uint32_t cookie;



   uint32_t dummyPedding;


} PS_ReqGeneric_t;







typedef struct WritePhyReqOption_s
{
   uint16_t isRawWriteReq     :1;
   uint16_t cache             :1;
   uint16_t xferOnly          :1;
   uint16_t isDRAM            :1;
   uint16_t compType          :2;
   uint16_t isUnterminated    :1;


   uint16_t supportMstCh      :1;
   uint16_t disableDynWrite   :1;
   uint16_t oneProgZeroVer    :1;
   uint16_t disableCoupleWr   :1;
   uint16_t rfu0              :5;

#line 1081 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
} WritePhyReqOptionFields_t;

typedef union WritePhyReqOption_u
{
   uint16_t all;
   WritePhyReqOptionFields_t fields;
} WritePhyReqOption_t;




typedef struct PHY_writeReqSpecific_s
{
   uint16_t            blockNumber1;
   WritePhyReqOption_t option;
   uint32_t            dataAddrLP;
   uint32_t            headerAddrLP;
   uint32_t            progLoopCountAddr;
} PHY_writeReqSpecific_t;

typedef struct PHY_writeReq_s
{









   PS_ReqGeneric_t common;

   PHY_writeReqSpecific_t specific;
} PHY_writeReq_t;







typedef struct ReadPhyReqOption_s
{
   uint16_t isRawReadReq   : 1;
   uint16_t noReadRetry    : 1;
   uint16_t forcedCVD      : 1;
   uint16_t rehReadOption  : 1;
   uint16_t src            : 1;
   uint16_t enSR           : 1;
   uint16_t cache          : 2;
   uint16_t firstRd        : 2;
   uint16_t fastRdMode     : 2;
   uint16_t xferOnly       : 1;
   uint16_t isDRAM         : 1;
   uint16_t doCvdComp        : 1;
   uint16_t doBoundaryWLComp : 1;
} ReadPhyReqOptionFields_t;

typedef union ReadPhyReqOption_u
{
   uint16_t all;
   ReadPhyReqOptionFields_t fields;
} ReadPhyReqOption_t;

typedef struct PHY_readReqSpecific_s
{
   uint16_t             blockNumber1 : 12;
   uint16_t             forceDLA     : 1;
   uint16_t             sbNum        : 2;
   uint16_t             isFADILogRead: 1;
   ReadPhyReqOption_t   option;
   uint32_t             dataAddrLP;
   uint32_t             headerAddrLP;
   uint8_t              cvdShifts[4];
} PHY_readReqSpecific_t;

typedef struct PHY_readReq_s
{









   PS_ReqGeneric_t   common;

   PHY_readReqSpecific_t specific;
} PHY_readReq_t;


typedef struct ReadPhyHeaderRehOption_s
{
   uint8_t  rehStatus;
   uint8_t  decodeSuccessStage;
   uint16_t syndromeWeight;
   uint8_t  ldpcPowerLevel;
   uint8_t  rfu[27];
} ReadPhyHeaderRehOption_t;


typedef struct PS_DIAG_RawReadStatusByte_s
{
   uint32_t statusByte      :8;
   uint32_t rehStatus       :1;
   uint32_t successStage    :4;
   uint32_t syndromWeight   :16;
   uint32_t ldpcPowerLevel  :2;
   uint32_t validREHdata    :1;
}PS_DIAG_RawReadStatusByte_t;




typedef struct PHY_eraseReqSpecific_s
{
   uint16_t          blockNumber1;
   uint8_t           ignoreFailure     : 1;
   uint8_t           forceFlashWr      : 1;
   uint8_t           shallowErasePhyBlk: 1;
   uint8_t           disableFlashFill  : 1;
   uint8_t           rfu0              : 4;
   uint8_t           rfu1;
   uint32_t          PEC;
   uint8_t           rfu2[4];
   uint32_t          eraseLoopCountAddr;
} PHY_eraseReqSpecific_t;

typedef struct PHY_eraseReq_s
{









   PS_ReqGeneric_t   common;

   PHY_eraseReqSpecific_t specific;
} PHY_eraseReq_t;







typedef struct PS_ReadDMCReqSpecific_s
{
   uint8_t     rfu0[3];
   uint8_t     failedPSRequestIndex;
   uint8_t     mode;
   uint8_t     isPhysical;
   uint8_t     doCvdComp        : 1;
   uint8_t     doBoundaryWLComp : 1;
   uint8_t     isHSLC:1;
   uint8_t     rfu_bits  : 5;
   uint8_t     rfu1[1];
   uint8_t     callerData[8];
} PS_ReadDMCReqSpecific_t;

typedef struct PS_ReadDMCReq_s
{









   PS_ReqGeneric_t common;

   PS_ReadDMCReqSpecific_t specific;
} PS_ReadDMCReq_t;




typedef struct INFRA_tempTickReqSpecific_s
{
   uint32_t           bufAddr;
   uint32_t           tickCnt;
   uint16_t           nandTemp;
   uint16_t           asicTemp;
   uint32_t           msgCount;
} INFRA_tempTickReqSpecific_t;

typedef struct INFRA_tempTickReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempTickReqSpecific_t specific;
} INFRA_tempTickReq_t;




typedef struct FADI_ELReqSpecific_s
{
   uint32_t severity;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
} FADI_ELReqSpecific_t;

typedef struct FADI_EL_Req_s
{
   PS_ReqGeneric_t      common;
   FADI_ELReqSpecific_t specific;
} FADI_EL_Req_t;




typedef struct INFRA_IFSStatusReqSpecific_s
{
   Status_t           status;
   uint8_t            rfu0[12];
} INFRA_IFSStatusReqSpecific_t;

typedef struct INFRA_IFSStatusReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_IFSStatusReqSpecific_t specific;
} INFRA_IFSStatusReq_t;




typedef struct INFRA_swFreqSetReqSpecific_s
{
   uint8_t            rfu0[16];
} INFRA_swFreqSetReqSpecific_s;

typedef struct INFRA_swFreqSetReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempTickReqSpecific_t specific;
} INFRA_swFreqSetReq_t;





typedef struct INFRA_changePWRStateReqSpecific_s
{
   uint32_t          oldPwrState;
   uint32_t          newPwrState;
   uint8_t           rfu0[8];
} INFRA_changePWRStateReqSpecific_t;

typedef struct INFRA_changePWRStateReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_changePWRStateReqSpecific_t specific;
} INFRA_changePWRStateReq_t;





typedef struct INFRA_changePWRStateRespSpecific_s
{
   uint32_t          oldPwrState;
   uint32_t          newPwrState;
   uint32_t          status;
   uint8_t           rfu0[4];
} INFRA_changePWRStateRespSpecific_t;

typedef struct INFRA_changePWRStateResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_changePWRStateRespSpecific_t specific;
} INFRA_changePWRStateResp_t;




typedef struct INFRA_UART_StateRespSpecific_s
{
   Status_t           status;
} INFRA_UART_StateRespSpecific_t;

typedef struct INFRA_UARTReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_UART_StateRespSpecific_t specific;
} INFRA_UARTReq_t;




typedef struct INFRA_ClkTickMsgSpecific_s
{
   uint32_t          clkTickCount;
   uint8_t          rfu[12];
} INFRA_ClkTickMsgSpecific_t;

typedef struct INFRA_ClkTickMsg_s
{









   PS_ReqGeneric_t   common;

   INFRA_ClkTickMsgSpecific_t specific;
} INFRA_ClkTickMsg_t;









typedef struct INFRA_writePhyFailureRespSpecific_s
{
   uint32_t          errStatus;
   uint8_t           rfu0[12];
} INFRA_writePhyFailureRespSpecific_t;

typedef struct INFRA_writePhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_writePhyFailureRespSpecific_t specific;
} INFRA_writePhyFailureResp_t;





typedef struct INFRA_readPhyFailureRespSpecific_s
{
   uint32_t         errStatus;
   uint32_t         cookie;
   uint8_t          failedFmuBitField;
   uint8_t          rfu0[3];
   uint32_t         rfu1;
} INFRA_readPhyFailureRespSpecific_t;

typedef struct INFRA_readPhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_readPhyFailureRespSpecific_t specific;
} INFRA_readPhyFailureResp_t;





typedef struct INFRA_erasePhyFailureRespSpecific_s
{
   uint32_t          errStatus;
   uint8_t           rfu0[12];
} INFRA_erasePhyFailureRespSpecific_t;

typedef struct INFRA_erasePhyFailureResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_erasePhyFailureRespSpecific_t specific;
} INFRA_erasePhyFailureResp_t;





typedef struct INFRA_BERAboveThrRespSpecific_s
{
   uint8_t           rfu0[16];
} INFRA_BERAboveThrRespSpecific_t;

typedef struct INFRA_BERAboveThrResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_BERAboveThrRespSpecific_t specific;
} INFRA_BERAboveThrResp_t;





typedef struct INFRA_tempAboveThrRespSpecific_s
{
   uint32_t          src;
   uint32_t          measTemp;
   uint32_t          thrTemp;
   uint8_t           rfu0[4];
} INFRA_tempAboveThrRespSpecific_t;

typedef struct INFRA_tempAboveThrResp_s
{









   PS_ReqGeneric_t   common;

   INFRA_tempAboveThrRespSpecific_t specific;
} INFRA_tempAboveThrResp_t;





typedef struct INFRA_flushBbmFilesReqSpecific_s
{
   uint32_t          fid;
   uint32_t          byteCount;
   uint8_t*          pUserBuffer;
   uint8_t           rfu0[4];
} INFRA_flushBbmFileReqSpecific_t;


typedef struct INFRA_flushBbmFileToIfsReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_flushBbmFileReqSpecific_t specific;
} INFRA_flushBbmFileReq_t;





typedef struct INFRA_flushIftFilesReqSpecific_s
{
   uint32_t          fid;
   uint32_t          byteCount;
   uint8_t*          pUserBuffer;
   uint8_t           rfu0[4];
} INFRA_flushIftFileReqSpecific_t;


typedef struct INFRA_flushIftFileToIfsReq_s
{









   PS_ReqGeneric_t   common;

   INFRA_flushIftFileReqSpecific_t specific;
} INFRA_flushIftFileReq_t;

typedef union INFRA_flusFileToIfsReqSpecific_s
{
   INFRA_flushIftFileReqSpecific_t  iftFlushReqSpecific;
   INFRA_flushBbmFileReqSpecific_t  bbmFlushReqSpecific;
} INFRA_flusFileToIfsReqSpecific_t;


typedef struct INFRA_flushFileToIfsReq_s
{
   PS_ReqGeneric_t   common;
   INFRA_flusFileToIfsReqSpecific_t specific;
} INFRA_flushFileToIfsReq_t;










typedef struct FTL_hostWriteReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          ctxIdx;
   uint32_t          compType;
   uint32_t          rfu0;
} FTL_hostWriteReqSpecific_t;

typedef struct FTL_hostWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostWriteReqSpecific_t specific;
} FTL_hostWriteReq_t;






typedef struct FTL_hostReadReqSpecific_d4_bits_s
{
   uint32_t secOff         : 8;
   uint32_t QDepth         : 8;
   uint32_t streamStatus   : 2;
   uint32_t rehSecCount    : 8;

#line 1718 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   uint32_t rehSecOff      : 3;
   uint32_t doPsRndRdOptz  : 1;
   uint32_t wasPreErased   : 1;
   uint32_t rfu0           : 1;
} FTL_hostReadReqSpecific_d4_bits_t;

typedef  union FTL_hostReadReqSpecific_d4_s
{
   uint32_t                             all;
   FTL_hostReadReqSpecific_d4_bits_t    bits;
} FTL_hostReadReqSpecific_d4_t;

typedef struct FTL_hostReadReqSpecific_s
{
   uint16_t JBLIdx;
   uint8_t opbCounter;
   uint8_t isOpenBlock : 2;
   uint8_t readOpbId : 4;
   uint8_t rfu : 2;
   uint32_t cmdIdx;
   uint32_t cmdOffset;
   FTL_hostReadReqSpecific_d4_t dw4;
} FTL_hostReadReqSpecific_t;

typedef struct FTL_hostReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostReadReqSpecific_t specific;
} FTL_hostReadReq_t;





typedef struct FTL_hostlessPartialFMUReadReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;


   uint32_t          secOff:8;
   uint32_t          otherBits:21;
   uint32_t          wasPreErased : 1;
   uint32_t          rfu : 2;
} FTL_hostlessPartialFMUReadReqSpecific_t;

typedef struct FTL_hostlessPartialFMUReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_hostlessPartialFMUReadReqSpecific_t specific;
} FTL_hostlessPartialFMUReadReq_t;




typedef struct FTL_xorParityWriteReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint16_t          dpcaCounterId;
   uint8_t           compType;
   uint8_t           isWriteToXorJB :1;
   uint8_t           idxPlane0InSecondaryParityXorAddrArr : 7;
} FTL_xorParityWriteReqSpecific_t;

typedef struct FTL_xorParityWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_xorParityWriteReqSpecific_t specific;
} FTL_xorParityWriteReq_t;




typedef struct FTL_controlWriteReqSpecific_s
{
   uint32_t          JBLIdx     :  16;
   uint32_t          isDRAM     :  16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint32_t          compType;
} FTL_controlWriteReqSpecific_t;

typedef struct FTL_controlWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_controlWriteReqSpecific_t specific;
} FTL_controlWriteReq_t;





typedef struct FTL_controlReadReqSpecific_s
{
   uint32_t          JBLIdx : 16;
   uint32_t          dpcaId : 16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint8_t           secOff;
   uint8_t           isHostData   : 1;
   uint8_t           isDRAM       : 1;
   uint8_t           isLoadXor    : 1;
   uint8_t           rfu0         : 5;
   uint8_t           streamStatus : 2;
   uint8_t           loadXorMsgIdx: 6;

   uint8_t           XBIDLoadXor  : 4;
   uint8_t           rfu2         : 1;
   uint8_t           wasPreErased : 1;
   uint8_t           rfu3         : 2;

} FTL_controlReadReqSpecific_t;

typedef struct FTL_controlReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_controlReadReqSpecific_t specific;
} FTL_controlReadReq_t;




typedef struct FTL_ReadPage0ReqSpecific_s
{
   uint32_t          JBLIdx : 16;
   uint32_t          isDRAM : 16;
   uint32_t          dataAddrLP;
   uint32_t          headerAddrLP;
   uint8_t           isHSLC : 1;
   uint8_t           rfu0   : 7;
   uint8_t           rfu1[3];
} FTL_ReadPage0ReqSpecific_t;

typedef struct FTL_ReadPage0Req_s
{









   PS_ReqGeneric_t   common;

   FTL_ReadPage0ReqSpecific_t specific;
} FTL_ReadPage0Req_t;






typedef struct FTL_scanForwardReqSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          pFFLBA;
   uint8_t           rfu0[8];
} FTL_scanForwardReqSpecific_t;

typedef struct FTL_scanForwardReq_s
{









   PS_ReqGeneric_t   common;

   FTL_scanForwardReqSpecific_t specific;
} FTL_scanForwardReq_t;





typedef struct FTL_phyErasePreparationReqSpecific_s
{
   uint16_t          rfu0;
   uint8_t           ignoreFailure      : 1;
   uint8_t           forceFlashWr       : 1;
   uint8_t           rfu1               : 6;
   uint8_t           rfu2[13];
} FTL_phyErasePreparationReqSpecific_t;

typedef struct FTL_phyErasePreparationReq_s
{









   PS_ReqGeneric_t   common;

   FTL_phyErasePreparationReqSpecific_t specific;
} FTL_phyErasePreparationReq_t;





typedef struct FTL_phyEraseReqSpecific_s
{
   uint16_t          rfu0;
   uint8_t           ignoreFailure     : 1;
   uint8_t           waitForEndErase   : 1;
   uint8_t           forceSGDTrigger   : 1;
   uint8_t           noDecommission    : 1;
   uint8_t           disableFlashFill  : 1;
   uint8_t           isHSLC            : 1;
   uint8_t           nextPecIncBy2     : 1;
   uint8_t           rfu1 : 1;
   uint8_t           rfu2;
   uint32_t          PEC;
   uint16_t          waitForJbid;
   uint8_t           opbidOfWaitJbid;
   uint8_t           rfu3[5];
} FTL_phyEraseReqSpecific_t;



typedef struct FTL_phyEraseReq_s
{









   PS_ReqGeneric_t   common;

   FTL_phyEraseReqSpecific_t specific;
} FTL_phyEraseReq_t;





typedef struct FTL_barrierReqSpecific_s
{
   uint32_t          barrierId;
   uint32_t          numRequests;
   uint32_t          isControlSync : 1;
   uint32_t          internalOps   : 1;
   uint32_t          internalCVD   : 1;
   uint32_t          rfu1          : 29;
   uint8_t           isUrgentQueue;
   uint8_t           rfu0[3];
} FTL_barrierReqSpecific_t;

typedef struct FTL_barrierReq_s
{









   PS_ReqGeneric_t   common;

   FTL_barrierReqSpecific_t specific;
} FTL_barrierReq_t;





typedef struct FTL_controlSyncDoneIndSpecific_s
{
   uint32_t          barrierId;
   uint8_t           rfu0[12];
} FTL_controlSyncDoneIndSpecific_t;

typedef struct FTL_controlSyncDoneInd_s
{









   PS_ReqGeneric_t   common;

   FTL_controlSyncDoneIndSpecific_t specific;
} FTL_controlSyncDoneInd_t;




typedef struct FTL_EndEraseMarkerReqSpecific_s
{
   uint16_t          JBId;


   uint8_t           rfu0[14];
} FTL_EndEraseMarkerReqSpecific_t;

typedef struct FTL_EndEraseMarkerReq_s
{









   PS_ReqGeneric_t   common;

   FTL_EndEraseMarkerReqSpecific_t specific;
} FTL_EndEraseMarkerReq_t;





typedef union FMUsOffsetOrHeaderAddr_u
{
   uint32_t   FTL_FMUsOffset;
   uint32_t   PS_headerAddrLP;

} FMUsOffsetOrHeaderAddr_t;

typedef struct FTL_relocationReadReqSpecific_s
{
   uint32_t                   JBLIdx     : 16 ;
   uint32_t                   RLCIdx     : 8  ;
   uint32_t                   FMU_Offset : 6  ;
   uint32_t                   toggleBit  : 1  ;
   uint32_t                   isMasterPS : 1  ;
   uint32_t                   JBA;
   uint32_t                   dataAddrList;
   uint32_t                   headerAddrList;

} FTL_relocationReadReqSpecific_t;


typedef struct FTL_relocationReadReq_s
{









   PS_ReqGeneric_t   common;

   FTL_relocationReadReqSpecific_t specific;
} FTL_relocationReadReq_t;






typedef union mountInfoOrDataAddrLP_u
{
   uint32_t          FTL_mountInfo;
   uint32_t          PS_dataAddrLP;

} mountInfoOrDataAddrLP_t;

typedef union numFMUsInMasterOrHeaderAddrLP_u
{
   uint32_t          FTL_numFMUsInMaster;
   uint32_t          PS_headerAddrLP;

} numFMUsInMasterOrHeaderAddrLP_t;


typedef struct FTL_relocationWriteReqSpecific_s
{
   uint32_t                          JBLIdx                 :  16              ;
   uint32_t                          RLCIdx                 :  8           ;
   uint32_t                          numPaddingFMUs         :  5  ;
   uint32_t                          isUrgentQueue          :  1       ;
   uint32_t                          rfu                    : 32
                                                              -  16
                                                              -  8
                                                              -  5
                                                              -  1     ;
   uint32_t                          RSV_ReleaseAddr                                              ;
   mountInfoOrDataAddrLP_t           mountInfoOrDataAddrLP                                        ;
   numFMUsInMasterOrHeaderAddrLP_t   numFMUsInMasterOrHeaderAddrs                                 ;

} FTL_relocationWriteReqSpecific_t;

typedef struct FTL_relocationWriteReq_s
{









   PS_ReqGeneric_t   common;

   FTL_relocationWriteReqSpecific_t specific;
} FTL_relocationWriteReq_t;





typedef struct FTL_FLGPReqSpecific_s
{
   uint32_t          BMAddress;
   uint32_t          respAddr;
   uint32_t          pec;
   uint16_t          JBLIdx;
   uint8_t           logIdx;
   uint8_t           dmcOnly            :1;
   uint8_t           isHybridOrUnknown  :1;
   uint8_t           onlyFirstVba       :1;
   uint8_t           rfu                :5;
} FTL_FLGPReqSpecific_t;

typedef struct FTL_FLGPReq_s
{









   PS_ReqGeneric_t   common;

   FTL_FLGPReqSpecific_t specific;
} FTL_FLGPReq_t;





typedef struct FTL_changeHealthStateReqSpecific_s
{
   uint32_t          src;
   uint32_t          oldThrIdx;
   uint32_t          newThrIdx;
   uint8_t           rfu0[4];
} FTL_changeHealthStateReqSpecific_t;

typedef struct FTL_changeHealthStateReq_s
{









   PS_ReqGeneric_t   common;

   FTL_changeHealthStateReqSpecific_t specific;
} FTL_changeHealthStateReq_t;





typedef struct FTL_setHealthStateReqSpecific_s
{
   uint16_t          maxSLC_PEC;
   uint16_t          maxTLC_PEC;
   uint16_t          VPGM_SLC_thrIdx;
   uint16_t          Fast_SLC_thrIdx;
   uint16_t          Fast_TLC_thrIdx;
   uint8_t           rfu0[6];
} FTL_setHealthStateReqSpecific_t;

typedef struct FTL_setHealthStateReq_s
{









   PS_ReqGeneric_t   common;

   FTL_setHealthStateReqSpecific_t specific;
} FTL_setHealthStateReq_t;





typedef struct FTL_MB_decomRespSpecific_s
{
   uint32_t          LogTS;
   uint32_t          psCookie;
   uint8_t           rfu0[8];
} FTL_MB_decomRespSpecific_t;

typedef struct FTL_MB_decomResp_s
{









   PS_ReqGeneric_t   common;

   FTL_MB_decomRespSpecific_t specific;
} FTL_MB_decomResp_t;



typedef enum
{
   OPEN_BLOCK = 0,
   CLOSED_BLOCK,
   ERASED_BLOCK,
   NOT_ALLOCATED_BLOCK,
}Block_Status_t;





typedef struct FTL_MB_StatusRespSpecific_s
{
   Block_Status_t    blockStatus;
   uint8_t           rfu0[12];
} FTL_MB_StatusRespSpecific_t;

typedef struct FTL_MB_StatusResp_s
{
   PS_ReqGeneric_t   common;
   FTL_MB_StatusRespSpecific_t specific;
} FTL_MB_StatusRespResp_t;





typedef struct FTL_JBL_releaseReqSpecific_s
{
   uint32_t          JBLIdx;
   uint16_t          MBID;
   uint16_t          rfu[3];




   uint32_t          VLD_BMP;
} FTL_releaseReqSpecific_t;

typedef struct FTL_releaseReq_s
{









   PS_ReqGeneric_t   common;

   FTL_releaseReqSpecific_t specific;
} FTL_releaseReq_t;





typedef struct FTL_activeRSScanReqSpecific_s
{
   uint32_t JBLIdx;
   uint8_t  WLIdx;
   uint8_t  IsCtrlBlock;
   uint8_t  wasJbPreErased;
   uint8_t  rfu0[9];
} FTL_activeRSScanReqSpecific_t;

typedef struct FTL_activeRSScanReq_s
{









   PS_ReqGeneric_t   common;

   FTL_activeRSScanReqSpecific_t specific;
} FTL_activeRSScanReq_t;





typedef struct FTL_setOpenBlockSpecificReq_s
{
   uint16_t          JBLIdx;
   uint8_t           isHostBlock    : 1;
   uint8_t           skipLoad       : 1;
   uint8_t           isWABlock      : 1;
   uint8_t           isXORProtected : 1;
   uint8_t           isHSLC         : 1;
   uint8_t           rfu0           : 3;
   uint8_t           opbCounter;
   VBA_t             nextZoneVBA;

   uint16_t          MBID;
   uint16_t          rfu1[3];
} FTL_setOpenBlockReqSpecific_t;

typedef struct FTL_setOpenBlockReq_s
{









   PS_ReqGeneric_t   common;

   FTL_setOpenBlockReqSpecific_t specific;
} FTL_setOpenBlockReq_t;





typedef struct FTL_CVDRestoreJBReqSpecific_s
{
   uint32_t          JBLIdx;
   uint16_t          MBID;
   uint8_t           rfu0[10];
} FTL_CVDRestoreJBReqSpecific_t;

typedef struct FTL_CVDRestoreJBReq_s
{









   PS_ReqGeneric_t   common;

   FTL_CVDRestoreJBReqSpecific_t specific;
} FTL_CVDRestoreJBReq_t;





typedef struct FTL_JBL_infoRespSpecific_s
{
   uint32_t          JBLIdx;
   uint32_t          VBAlastFMU;




   uint16_t          MBIDs[4];

} FTL_JBL_infoRespSpecific_t;

typedef struct FTL_JBL_infoResp_s
{









   PS_ReqGeneric_t   common;

   FTL_JBL_infoRespSpecific_t specific;
} FTL_JBL_infoResp_t;





typedef enum RebuildMode_e
{
   REBUILD_UGSD,
   REBUILD_LOAD_FAILURE
} RebuildMode_t;

typedef struct FTL_XOR_RebuildXORZoneReqSpecific_s
{
   uint64_t          Bitmap;
   uint32_t          VBAFirstErased;
   uint16_t          JBLIdx;
   uint8_t           rebuildMode;
   uint8_t           isUrgentQueue;
} FTL_XOR_RebuildXORZoneReqSpecific_t;
typedef struct FTL_XOR_RebuildXORZoneReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_RebuildXORZoneReqSpecific_t specific;
} FTL_XOR_RebuildXORZoneReq_t;




typedef struct FTL_XOR_storeXORReqSpecific_s
{
   uint16_t          JBLIdx;
   uint8_t           GroupID;
   uint8_t           OPBID_XPB;
   uint32_t          dataAddrPtrs;
   uint32_t          headerAddrPtrs;
   uint16_t          dpcaCounterId;
   uint16_t          XorStoreOption :3;
   uint16_t          completionByUrgentQueue :1;
   uint16_t          rfu0 : 12;
} FTL_XOR_storeXORReqSpecific_t;

typedef struct FTL_XOR_storeXORReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_storeXORReqSpecific_t specific;
} FTL_XOR_storeXORReq_t;





typedef struct FTL_XOR_storeLoadXORDoneIndSpecific_s
{
   uint16_t JBLIdx;
   uint8_t  completionByUrgentQueue;
   uint8_t  XorOperation;
   uint8_t  rfu0[12];
}FTL_XOR_storeLoadXORDoneIndSpecific_t;

typedef struct FTL_XOR_storeLoadXORDoneInd_s
{









   PS_ReqGeneric_t   common;
   FTL_XOR_storeLoadXORDoneIndSpecific_t specific;
} FTL_XOR_storeLoadXORDoneInd_t;




typedef struct FTL_XOR_loadXORReqSpecific_s
{
   uint16_t          JBLIdx;
   uint8_t           SequenceID;
   uint8_t           OPBID_XPB;

   uint32_t          dataAddrPtrs;
   uint32_t          headerAddrPtrs;

   uint16_t          dpcaCounterId;

   uint16_t          XorLoadOption : 3;
   uint16_t          completionByUrgentQueue : 1;



   uint16_t          rfu0 : 12;

} FTL_XOR_loadXORReqSpecific_t;


typedef struct FTL_XOR_loadXORReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_loadXORReqSpecific_t specific;
} FTL_XOR_loadXORReq_t;

#line 2703 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef struct FTL_XOR_PauseForXORRecoveryReqSpecific_s
{
   uint32_t                      JBID;
   uint32_t                      rfu0[2];
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
} FTL_XOR_PauseForXORRecoveryReqSpecific_t;

typedef struct FTL_XOR_PauseForXORRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_PauseForXORRecoveryReqSpecific_t specific;
} FTL_XOR_PauseForXORRecoveryReq_t;





typedef struct FTL_XOR_GetParityPageForRecoveryReqSpecific_s
{
   uint32_t                      rfu0[2];
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       rfu1[2];
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
   uint8_t                       isDRAM;
} FTL_XOR_GetParityPageForRecoveryReqSpecific_t;

typedef struct FTL_GetParityPageForRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_GetParityPageForRecoveryReqSpecific_t specific;
} FTL_XOR_GetParityPageForRecoveryReq_t;





typedef struct FTL_XOR_StartXORRecoveryReqSpecific_s
{
   uint16_t                      decompIndex;
   uint8_t                       FMUNeedsCorrectionBitmap;
   uint8_t                       parityPageFMUErrorBitmap;
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint8_t                       bypassUnroll;
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
   uint8_t                       rfu[6];
} FTL_XOR_StartXORRecoveryReqSpecific_t;

typedef struct FTL_XOR_StartXORRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_StartXORRecoveryReqSpecific_t specific;
} FTL_XOR_StartXORRecoveryReq_t;





typedef struct FTL_XOR_EndXORZoneReqSpecific_s
{
   uint32_t          JBLIdx;
   uint8_t           rfu0[12];
} FTL_XOR_EndXORZoneReqSpecific_t;

typedef struct FTL_XOR_EndXORZoneReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_EndXORZoneReqSpecific_t specific;
} FTL_XOR_EndXORZoneReq_t;




typedef struct FTL_XOR_ZeroFillReqSpecific_s
{
   uint64_t          Bitmap;
   uint32_t          JBLIdx;
   uint8_t           isUrgentQueue;
   uint8_t           rfu0[3];
} FTL_XOR_ZeroFillReqSpecific_t;

typedef struct FTL_XOR_ZeroFillReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_ZeroFillReqSpecific_t specific;
} FTL_XOR_ZeroFillReq_t;




typedef struct FTL_XOR_HmbFinishedReqSpecific_s
{
   uint16_t          JBLIdx;
   uint8_t           isUrgentQueue;
   uint8_t           rfu0[13];
} FTL_XOR_HmbFinishedReqSpecific_t;

typedef struct FTL_XOR_HmbFinishedReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_HmbFinishedReqSpecific_t specific;
} FTL_XOR_HmbFinishedReq_t;




typedef struct FTL_ADM_SwapOBIDReqSpecific_s
{
   uint8_t           tmpOBID;
   uint8_t           tmpXBID;
   uint8_t           rfu0[14];
} FTL_ADM_SwapOBIDReqSpecific_t;

typedef struct FTL_ADM_SwapOBIDReq_s
{









   PS_ReqGeneric_t   common;

   FTL_ADM_SwapOBIDReqSpecific_t specific;
} FTL_ADM_SwapOBIDReq_t;




typedef struct FTL_LogReadyIndSpecific_s
{
   uint32_t          CVDRegionOrigin;
   uint32_t          CVDRegionLength;
   uint32_t          UGSDFlag;
   uint32_t          testFlags;
} FTL_LogReadyIndSpecific_t;

typedef struct FTL_LogReadyInd_s
{









   PS_ReqGeneric_t   common;

   FTL_LogReadyIndSpecific_t specific;
} FTL_LogReadyInd_t;




typedef struct FTL_XOR_RecoveryCompletionReqSpecific_s
{
   uint32_t       rfu2;
   uint32_t       rfu3;
   uint8_t        FMUNeedsCorrectionBitmap;
   uint8_t        parityPageFMUErrorBitmap;
   uint8_t        PS0UnrollFMUErrorBitmap;
   uint8_t        PS1UnrollFMUErrorBitmap;
   uint8_t        rfu4;
   uint8_t        rfu5;
   uint8_t        requestingPSID;
   uint8_t        rfu6;

} FTL_XOR_RecoveryCompletionReqSpecific_t;

typedef struct FTL_XOR_RecoveryCompletionReq_s
{









   PS_ReqGeneric_t   common;

   FTL_XOR_RecoveryCompletionReqSpecific_t specific;
} FTL_XOR_RecoveryCompletionReq_t;





typedef struct FTL_SetBkOpsSpecific_s
{
   BOOL32           isBkopsSet;
   uint8_t          rfu0[12];
} FTL_SetBkOpsSpecific_t;

typedef struct FTL_SetBkOpsReq_s
{









   PS_ReqGeneric_t   common;

   FTL_SetBkOpsSpecific_t specific;
} FTL_SetBkOpsReq_t;





typedef struct FTL_UpdatePECReqSpecific_s
{
   uint32_t PEC;
   uint8_t  rfu[12];
} FTL_UpdatePECReqSpecific_t;

typedef struct FTL_UpdatePECReq_s
{









   PS_ReqGeneric_t   common;

   FTL_UpdatePECReqSpecific_t specific;
} FTL_UpdatePECReq_t;





typedef struct FTL_CVDRefreshReqSpecific_s
{
   BOOL32            isTestRefreshMassage;
   uint8_t           rfu0[12];
} FTL_CVDRefreshReqSpecific_t;

typedef struct FTL_CVDRefreshReq_s
{









   PS_ReqGeneric_t   common;

   FTL_CVDRefreshReqSpecific_t specific;
} FTL_CVDRefreshReq_t;





typedef struct FTL_CVD_DRD_ReqSpecific_s
{
   uint32_t         respAddr;
   uint16_t         OPB_ID_bitmap;
   uint8_t          rfu0[10];
} FTL_CVD_DRD_ReqSpecific_t;

typedef struct FTL_CVD_DRD_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_CVD_DRD_ReqSpecific_t specific;
} FTL_CVD_DRD_Req_t;





typedef struct FTL_GBBSpareSecureErase_ReqSpecific_s
{
   uint8_t        rfu[16];
}
FTL_GBBSpareSecureErase_ReqSpecific_t;

typedef struct FTL_GBBSpareSecureErase_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_GBBSpareSecureErase_ReqSpecific_t specific;
} FTL_GBBSpareSecureErase_Req_t;




typedef struct FTL_GenericException_ReqSpecific_s
{
   uint32_t        cookieForPSAck;
   uint64_t        ueccLba;
   uint32_t        mbPec;
} FTL_GenericException_ReqSpecific_t;

typedef struct FTL_GenericExceptionResp_s
{









   PS_ReqGeneric_t   common;

   FTL_GenericException_ReqSpecific_t specific;
} FTL_GenericExceptionResp_t;




typedef struct FTL_DST_ReqSpecific_s
{
   uint8_t           rfu0[16];
} FTL_DST_ReqSpecific_t;

typedef struct FTL_DST_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_DST_ReqSpecific_t specific;
} FTL_DST_Req_t;




typedef struct FTL_ReqSpecific_s
{
   uint8_t           rfu0[16];
} FTL_ReqSpecific_t;

typedef struct FTL_Req_s
{









   PS_ReqGeneric_t   common;

   FTL_ReqSpecific_t specific;
} FTL_Req_t;




typedef struct PS_ReadScrubRelocReqSpecific_s
{
   uint32_t          JBLIdx;
   uint8_t           blkCat   :  3;
   uint8_t           rfu      :  5;
   uint8_t           srcEntry;
   uint8_t           origSrcEntry;
   uint8_t           isBWL;
   uint16_t          syndWt;
   uint8_t           hiPriority;
   uint8_t           rfu0[5];
} PS_ReadScrubRelocReqSpecific_t;

typedef struct PS_ReadScrubRelocReq_s
{









   PS_ReqGeneric_t   common;

   PS_ReadScrubRelocReqSpecific_t specific;
} PS_ReadScrubRelocReq_t;





typedef struct PS_MB_decomReqSpecific_s
{
   uint32_t psCookie;

   uint32_t isFake;

#line 3207 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   uint8_t  notifyOnly;
   uint8_t  rfu[7];
} PS_MB_decomReqSpecific_t;

typedef struct PS_MB_decomReq_s
{









   PS_ReqGeneric_t   common;

   PS_MB_decomReqSpecific_t specific;
} PS_MB_decomReq_t;





typedef struct PS_MB_statusReqSpecific_s
{
   uint8_t           rfu0[16];
} PS_MB_statusReqSpecific_t;

typedef struct PS_MB_statusReq_s
{
   PS_ReqGeneric_t            common;
   PS_MB_statusReqSpecific_t  specific;
} PS_MB_statusReq_t;







typedef struct PS_JBL_infoReqSpecific_s
{
   uint8_t           rfu0[16];
} PS_JBL_infoReqSpecific_t;

typedef struct PS_JBL_infoReq_s
{









   PS_ReqGeneric_t   common;

   PS_JBL_infoReqSpecific_t specific;
} PS_JBL_infoReq_t;




typedef struct PS_EI_OriginInfo_s
{
   uint8_t eiDoInject   : 1;
   uint8_t eiIvIdx      : 4;
   uint8_t  rfu         : 3;
} PS_EI_OriginInfo_t;


typedef struct PS_XOR_RequestRecoveryReqSpecific_s
{
   uint32_t                      JBLIdx;
   uint16_t                      orgRdPSReqIdx;
   uint8_t                       FMUNeedsCorrectionBitmap;
   PS_EI_OriginInfo_t            eiOriginInfo;
   PS_XOR_ParityBinComposite_t   parBinComposite;
   uint16_t                      rfu2;
   uint8_t                       eiMaxPages;
   uint8_t                       requestingPSID;
   uint8_t                       XORZone;
   uint8_t                       isOpenZone;
} PS_XOR_RequestRecoveryReqSpecific_t;

typedef struct PS_XOR_RequestRecoveryReq_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_RequestRecoveryReqSpecific_t specific;
} PS_XOR_RequestRecoveryReq_t;




typedef struct PS_XOR_RecoveryCompletionRespSpecific_s
{
   uint32_t       Rfu[4];
} PS_XOR_RecoveryCompletionRespSpecific_t;

typedef struct PS_XOR_RecoveryCompletionResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_RecoveryCompletionRespSpecific_t specific;
} PS_XOR_RecoveryCompletionResp_t;




typedef struct PS_XOR_PauseForXORRecoveryRespSpecific_s
{
   uint8_t       eiMaxPages;
   uint8_t       isOpenZone;
   uint8_t       Rfu[14];
} PS_XOR_PauseForXORRecoveryRespSpecific_t;

typedef struct PS_XOR_PauseForXORRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_PauseForXORRecoveryRespSpecific_t specific;
} PS_XOR_PauseForXORRecoveryResp_t;




typedef struct PS_XOR_SwapMailRespSpecific_s
{
   uint32_t       Rfu[4];
} PS_XOR_SwapMailRespSpecific_t;

typedef struct PS_XOR_SwapMailResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_SwapMailRespSpecific_t specific;
} PS_XOR_SwapMailResp_t;

#line 3413 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef struct PS_XOR_GetParityPageForRecoveryRespSpecific_s
{
   uint8_t         parityPageFMUErrorBitmap;
   uint8_t         bypassUnroll;
   uint16_t        Rfu1;
   uint32_t        Rfu2[3];
} PS_XOR_GetParityPageForRecoveryRespSpecific_t;

typedef struct PS_XOR_GetParityPageForRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_GetParityPageForRecoveryRespSpecific_t specific;
} PS_XOR_GetParityPageForRecoveryResp_t;




typedef struct PS_XOR_StartXORRecoveryRespSpecific_s
{
   uint8_t         unrollErrorBitmap;
   uint8_t         endingXORRecovery;
   uint16_t        Rfu1;
   uint32_t        Rfu2[3];
} PS_XOR_StartXORRecoveryRespSpecific_t;

typedef struct PS_XOR_StartXORRecoveryResp_s
{









   PS_ReqGeneric_t   common;

   PS_XOR_StartXORRecoveryRespSpecific_t specific;
} PS_XOR_StartXORRecoveryResp_t;

#line 3499 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef struct PS_GenericExceptionReqSpecific_s
{
   uint8_t         exceptionMsgType;
   uint8_t         rfu0;
   uint16_t        errorCode;
   uint32_t        cookieForPSAck;
   uint32_t        report;
   uint8_t         rfu1[4];
} PS_GenericExceptionReqSpecific_t;

typedef struct PS_GenericExceptionReq_s
{









   PS_ReqGeneric_t   common;

   PS_GenericExceptionReqSpecific_t specific;
} PS_GenericExceptionReq_t;




typedef struct PS_HostReadExceptionReqSpecific_s
{
   uint8_t         numSectFailed;
   uint8_t         isWuc;
   uint16_t        rfu;
   uint32_t        cookieForPSAck;
   uint32_t        commandIndex;
   uint32_t        commandOffset;
} PS_HostReadExceptionReqSpecific_t;

typedef struct PS_HostReadExceptionReq_s
{









   PS_ReqGeneric_t   common;

   PS_HostReadExceptionReqSpecific_t specific;
} PS_HostReadExceptionReq_t;




typedef struct PS_CVD_DRD_RespSpecific_s
{
   uint16_t         DRI_bitmap;
   uint8_t          rfu0[14];
} PS_CVD_DRD_RespSpecific_t;

typedef struct PS_CVD_DRD_Resp_s
{









   PS_ReqGeneric_t   common;

   PS_CVD_DRD_RespSpecific_t specific;
} PS_CVD_DRD_Resp_t;

typedef struct PS_FADI_ErLog_Request_Specific_s
{
    uint32_t index;
    uint32_t dumpSize;
    uint32_t rfu[2];
}FADI_PS_ErLog_Request_Specific_t;

typedef struct FADI_PS_ErrorLog_Request_s
{









   PS_ReqGeneric_t   common;

   FADI_PS_ErLog_Request_Specific_t specific;
} FADI_PS_ErrorLog_Request_t;

typedef struct PS_FADI_BigDump_Request_Specific_s
{
    uint8_t *ptr;
    uint32_t dataSize;
    uint32_t bufSize;
    uint8_t dumpRegion;
    uint8_t logType;
    uint8_t dumpType;
    uint8_t rfu8;
}INFRA_FADI_BigDump_Request_Specific_t;

typedef struct FADI_PS_BigDump_Request_s
{









   PS_ReqGeneric_t   common;

   INFRA_FADI_BigDump_Request_Specific_t specific;
} FADI_PS_BigDump_Request_t;




typedef struct PS_DIAG_MsgSpecific_s
{
   uint32_t          diagMsgSubCode;
   uint32_t          msgSpecificBufPtr;
   uint32_t          mpReturnBufferPtr;
   uint8_t           diagMsgArgument;
   uint8_t           rfu0[3];
} PS_DIAG_MsgSpecific_t;


typedef struct PS_DIAG_Msg_s
{









   PS_ReqGeneric_t   common;

   PS_DIAG_MsgSpecific_t specific;
} PS_DIAG_Msg_t;


typedef struct PS_DIAG_DMC_MsgSpecific_s
{
   uint32_t          diagMsgSubCode;
   uint32_t          msgSpecificBufPtr;
   uint32_t          mpReturnBufferPtr;
   uint8_t           mode;
   uint8_t           isPhysical;
   uint8_t           isSBM;
   uint8_t           rfu0;
} PS_DIAG_DMC_MsgSpecific_t;


typedef struct PS_DIAG_DMC_Msg_s
{









   PS_ReqGeneric_t   common;

   PS_DIAG_DMC_MsgSpecific_t specific;
} PS_DIAG_DMC_Msg_t;




typedef struct PS_BBM_Test_ReqSpecific_s
{
   VBA_t          VBA;
   uint8_t        blkType;
   uint8_t        phyPlOffset;
   uint16_t       testType;
   uint32_t       msgId;
   uint8_t        rfu0[4];
} PS_BBM_Test_ReqSpecific_t;

typedef struct PS_BBM_Test_Request_s
{









   PS_ReqGeneric_t   common;

   PS_BBM_Test_ReqSpecific_t specific;
} PS_BBM_Test_Request_t;






typedef union PS_Specific_t
{
   uint32_t dword[4];
} PS_specific_t;

typedef struct PS_generic_s
{
   PS_ReqGeneric_t common;
   PS_specific_t   specific;
}PS_genericMsg_t;

#line 3750 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   __inline static  void PS_ConvertDeVBA2PBA(Physical_Block_Address_t *pba, uint32_t DeVBA)
   {
      DeVBA_t DeLinkedVBA;


      DeLinkedVBA.all32 = DeVBA;
      pba->fmu          = DeLinkedVBA.vbaTlc.fmu;
      pba->plane        = DeLinkedVBA.vbaTlc.plane;
      pba->channel      = (DeLinkedVBA.vbaTlc.lFim + (DeLinkedVBA.vbaTlc.psId *  ( ( 4 ) / ( 2 ) ) ));
      pba->page         = DeLinkedVBA.vbaTlc.diePageInBlk;
      pba->block        = DeLinkedVBA.vbaTlc.block;
      pba->die          = DeLinkedVBA.vbaTlc.dieInFim;
      pba->chip         = 0;

   }

#line 3779 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
   __inline static  void PS_ConvertPBA2DeVBA(Physical_Block_Address_t *pba, DeVBA_t *pDeVBA)
   {
      pDeVBA->vbaTlc.fmu          = pba->fmu;
      pDeVBA->vbaTlc.plane        = pba->plane;
      pDeVBA->vbaTlc.lFim         = (pba->channel %  ( ( 4 ) / ( 2 ) ) );
      pDeVBA->vbaTlc.diePageInBlk = pba->page;
      pDeVBA->vbaTlc.block        = pba->block;
      pDeVBA->vbaTlc.psId         = (pba->channel /  ( ( 4 ) / ( 2 ) ) );
      pDeVBA->vbaTlc.dieInFim     = (pba->chip *  (8) ) + pba->die;
   }


typedef enum XorLoadStoreTypeEnum_e
{
   PS_XOR_LOAD_DONE  = 0,
   PS_XOR_STORE_DONE = 1,
} XorLoadStoreTypeEnum_t;
typedef uint8_t XorLoadStoreType_t;


typedef enum XorLoadTypeEnum_e
{
   PS_XOR_LOAD_NAND_TO_XRAM = 0,
   PS_XOR_LOAD_DRAM_TO_XRAM,
   PS_XOR_LOAD_TOTAL_MODE,
   PS_XOR_LOAD_INVALID_MODE = 0xf
} XorLoadTypeEnum_t;
typedef uint8_t XorLoadType_t;


typedef enum XorStoreTypeEnum_e
{
   PS_XOR_STORE_XRAM_TO_NAND = 0,
   PS_XOR_STORE_XRAM_TO_DRAM,
   PS_XOR_STORE_DRAM_TO_NAND,
   PS_XOR_STORE_TOTAL_MODE,
   PS_XOR_STORE_INVALID_MODE = PS_XOR_LOAD_INVALID_MODE,
} XorStoreTypeEnum_t;
typedef uint8_t XorStoreType_t;

#line 3991 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef enum PS_blkType_e
{
   PS_API_BLOCK_TYPE_SLC      = 0,
   PS_API_BLOCK_TYPE_TLC      = 1,


   PS_API_BLOCK_TYPE_TOTAL    = 2,
} PS_blkType_t;

typedef enum PS_RelinkBlkType_e
{


   PS_API_BLOCK_TYPE_GENERIC  = 2,
   PS_API_BLOCK_TYPE_NEW_SPARE_NOT_ERASED = 3,
} PS_RelinkBlkType_t;

typedef enum PS_BlockType_s
{
   PS_BLOCK_DSLC = PS_API_BLOCK_TYPE_SLC,
   PS_BLOCK_TLC = PS_API_BLOCK_TYPE_TLC,
   PS_BLOCK_HSLC = 2,
   PS_BLOCK_TYPE_TOTAL,
} PS_BlockType_t;

typedef enum
{
   PS_COMPLETION_MSG_ON_ENCODE_AND_TRANSFER = 0,
   PS_COMPLETION_MSG_ON_PROGRAM             = 1,
   PS_NO_COMPLETION_MSG_NEEDED              = 2,
} PS_CompletionType_t;





typedef enum PS_ProgVerify_s
{
   PS_WL_PROG_VERIFY = 0,
   PS_WL_PROG_NO_VERIFY,
} PS_ProgVerify_t;

typedef enum PS_ProgType_s
{
   PS_CACHED_PROG,
   PS_UNCACHED_PROG,
} PS_ProgType_t;




enum MAILBOX_MISC_TEST
{
   PS_MBX_SEND_USING_PSID_TEST = 0,
   PS_NAND_READ_EI_MODE_BEFORE_SET        = 1,
   PS_NAND_SET_EI_MODE                    = 2,
   PS_NAND_GET_EI_MODE                    = 3,
};


enum
{
   PS_DMC_TRUE_ERASE_MODE,
   PS_DMC_BIN_SEARCH_MODE,
   PS_DMC_FLASHFILL_MODE,
   PS_DMC_MODE_MAX_CNT,
};
typedef uint8_t PS_DMC_READ_MODE;

enum
{
   EH_STATUS_OK            = 0,

   EPWR_FAILURE            = 1,

   NAND_ERASE_FAILURE      = 2,
   UNCORRECTABLE           = 4,
   PROGRAM_FAILURE         = 6,
   NAND_TIMEOUT            = 7,
   HCR                     = 8,
   DCBR                    = 8,
   READ_FROM_ERASED_PAGE   = 10,

   XOR_UNROLL_ERROR        = 12,
   READ_PHY_REH_TRIGGERED  = 15,
   NAND_SGD_FAILURE        = 16,


   MAX_EH_ERROR            = 0xFF
 };
typedef uint8_t EHStatus_t;



enum
{

  PS_FLASH_TYPE_BiCS5_512Gb_EX3_16K,
  PS_FLASH_TYPE_BiCS5_1Tb_EX4_16K,
  PS_FLASH_TYPE_BiCS5_1Tb_EX3_16K,


  PS_FLASH_TYPE_BiCS6_512Gb_EX3_16K,
  PS_FLASH_TYPE_BiCS6_1Tb_EX3_ODT_ON_B,
  PS_FLASH_TYPE_BiCS6_1Tb_EX4_ODT_ON,


  PS_FLASH_TYPE_BiCS8_1Tb_EX3_ODT_ON,
  PS_FLASH_TYPE_BiCS8_1Tb_EX4_ODT_ON,
  PS_FLASH_TYPE_BiCS8_683Gb_EX3_ODT_ON,
  PS_FLASH_TYPE_BiCS8_2Tb_EX4_ODT_ON,


  PS_FLASH_TYPE_BiCS9_1Tb_EX3_4P_ODT_ON,
  PS_FLASH_TYPE_BiCS9_1Tb_EX4_4P_ODT_ON,
  PS_FLASH_TYPE_BiCS9_683Gb_EX3_4P_ODT_ON,


  PS_FLASH_TYPE_NUM,
};



enum
{
  PS_INFRA_BLOCK_TYPE_BOOT = 0,
  PS_INFRA_BLOCK_TYPE_PARTITION,
  PS_INFRA_BLOCK_TYPE_FADI,
  PS_INFRA_TOTAL_TYPES_OF_BLOCKS,
};



typedef union
{
   uint16_t all16;
   struct
   {
      uint8_t PSReqIdx;
      uint8_t PSInternalReqIdx;
   } bits;
} PS_NPARAM_Diag_Hdr_t;

typedef struct
{
   uint16_t             paramRegValue;
   PS_NPARAM_Diag_Hdr_t paramHeader;
   uint16_t             paramRegAddr;
   uint16_t             padding;
   uint32_t             featureRegValue;
} PS_NPARAM_Diag_Buffer_t;




typedef struct EI_VER_PFPatternPages_s
{
   VBA_t       pagesUsingAlternateBins[ (6) ];
   VBA_t       pagesUsingRegularBins[ (4) ][ (48) ];
} EI_VER_PFPatternPages_t;




typedef struct PS_FLGPRespSpecific_s
{
   VBA_t             VBANerPlusOne;
   VBA_t             VBALastValid;
   VBA_t             VBAFirstErased;
   uint16_t          JBLIdx;
   uint8_t           psId;
   uint8_t           rfu;
   VBA_t             np1[ (8) ][ ( ( 4 ) / ( 2 ) ) ];
} PS_FLGPRespSpecific_t;

typedef struct PS_FLGPResp_s
{









   PS_ReqGeneric_t   common;

   PS_FLGPRespSpecific_t specific;
} PS_FLGPResp_t;

#line 4252 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
typedef enum SET_PS_Debug_Control_e
{
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_RECOVERED             = (1<<1 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_UNRECOVERED           = (1<<3 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_SKIPPED               = (1<<5 ),
   SET_PS_DEBUG_CONTROl_STOPONUECC_XOR_DISABLED              = (1<<7 ),
   SET_PS_DEBUG_CONTROl_EPWR_STOPONFAILURE                   = (1<<9 ),
   SET_PS_DEBUG_CONTROl_PROGRAM_STOPONFAILURE                = (1<<11 ),
   SET_PS_DEBUG_CONTROl_ERASE_STOPONFAILURE                  = (1<<13 ),
   SET_PS_DEBUG_CONTROl_FIM_EXCP_STOPONFAILURE               = (1<<14 ),
   SET_PS_DEBUG_CONTROl_DUMP_UECC_RAW_DATA                   = (1<<15 ),
}   SET_PS_Debug_Control_t;

typedef enum FW_Debug_Control_e
{
   SET_FW_DBG_LEVEL_DEFAULT                          = 0,
   SET_FW_DBG_LEVEL_RMA                              = 1,
   SET_FW_DBG_LEVEL_FULL                             = 2,
   SET_FW_DBG_LEVEL_MED                              = 3,
   SET_FW_DBG_LEVEL_CUSTOM                           = 4,
   SET_FW_DBG_LEVEL_RDT                              = 5,
   SET_FW_DBG_LEVEL_RMA_SUBM                         = 6,
}   FW_Debug_Control_t;



typedef enum
{
   LOWER_SUBBLOCK       = 0,
   UPPER_SUBBLOCK,
   FULL_BLOCK,
}PS_BlockMode_t;





typedef union PS_DebugControl_u
{
    uint32_t all;

    struct
    {
       uint32_t  stoponUECC_xorRecovered_brk        :1;
       uint32_t  stoponUECC_xorRecovered_assert     :1;
       uint32_t  stoponUECC_xorUnRecovered_brk      :1;
       uint32_t  stoponUECC_xorUnRecovered_assert   :1;
       uint32_t  stoponUECC_xorSkipped_brk          :1;
       uint32_t  stoponUECC_xorSkipped_assert       :1;
       uint32_t  stoponUECC_xorDisabled_brk         :1;
       uint32_t  stoponUECC_xorDisabled_assert      :1;
       uint32_t  stopOnFailure_EPWR_brk             :1;
       uint32_t  stopOnFailure_EPWR_assert          :1;
       uint32_t  stopOnFailure_PF_brk               :1;
       uint32_t  stopOnFailure_PF_assert            :1;
       uint32_t  stopOnFailure_EF_brk               :1;
       uint32_t  stopOnFailure_EF_assert            :1;
       uint32_t  stopOnFailure_FIM_excp_brk         :1;
       uint32_t  dumpUECC_rawData                   :1;
       uint32_t  rfu                                :16;
    } fields;

} PS_DebugControl_t;

#line 4353 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
void     PS_Main(void);
Status_t PS_InitBoot(SysBootPhase_t bootPhase);
BOOL     PS_IsReady(void);
void     PS_XOR_RecoveryReentryMgr(void);
void     PS_GetConfigData(void *pBuffer);
Status_t PS_isFMU_Erased(VBA_t vba, uint32_t cookie, BOOL * result);
PS_FlashType_e PS_GetFlashType(void);
uint32_t PS_GetNumDiesPerPhysChip(void);
uint32_t PS_GetNumDiesPerPS(void);

void PS_AssertVBAValidity(VBA_t vba, PS_blkType_t blockType, uint8_t isSBM);

void     PS_RS_GetActiveScanMorpheusParam(RS_MorpheusParamsCB_t *pActScanMrph);
void     PS_RS_SwTimeRndScanFreqBaseHandler(void);
void     PS_FADI_RealTimeInit(void);
void     PS_FADI_RealTimeSample(void);
uint32_t *PS_CodeCoverageBuffAddr(void);


void     PS_UpdateInfraGBBList(void);
Status_t PS_IsolateVBABlockRequest(DeVBA_t *ptr, BOOL isolate);
BOOL32 PS_ConvertCurrBlockToVba(uint32_t currBlockIndex, uint8_t blockType, DeVBA_t *deviceVba);



uint32_t PS_XOR_GetProgFailPatternPages(VBA_t injVBA, uint8_t  injPattern, EI_VER_PFPatternPages_t* pPatternPages);
uint32_t PS_XOR_GetProgFailPatternPagesWithInjBitmap(VBA_t injVBA, uint8_t  injPattern, EI_VER_PFPatternPages_t* pPatternPages, uint8_t injBitmap);







   __inline static   void PS_LDPC_ISR_Set_Bypass ( uint32_t * addr )
   {
      *addr = *addr |  (0x1) ;
   }










__inline static  uint8_t PS_PWL_TO_SB_WL(uint8_t pwl)
{
    if (pwl<  ( (218) / (2) ) )
    {

        return (uint8_t)( ( (218) / (2) ) -1-pwl);
    }
    else
    {
        return(uint8_t)(pwl -  ( (218) / (2) ) );
    }
}

#line 4424 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_api.h"
__inline static  uint16_t PS_SB_WL_TO_PWL(uint16_t sbWl, uint8_t sbBit)
{
    if (sbBit)
    {

       return (uint16_t)( ( (218) / (2) )  -1 - sbWl);
    }
    else
    {

       return (uint16_t)( ( (218) / (2) )  + sbWl);
    }
}




__inline static  void PS_DoNOPDelay(uint32_t num_of_nops)
{
   for (uint32_t delay_cnt = 0; delay_cnt < num_of_nops; delay_cnt++)
   {

      LivetCpuTimedDelay( 1 ) ;

     _nop();
   }
}






static uint32_t countOnes(uint32_t bits)
{
   uint32_t count = 0;
   while (bits)
   {
      if (bits & 1)
      {
         count++;
      }
      bits >>= 1;
   }
   return count;
}

uint8_t PS_GetNumXorZonesPerBlk(uint16_t mbId);
BOOL8 PS_SBM_FTL_MB_isSBMeligible(uint32_t mb);
PS_BlockMode_t PS_SBM_FTL_MB_GetBlockMode(uint32_t mb);

#line 20 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_dumpmanager.h"

#line 46 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_dumpmanager.h"
typedef void(*DumpCallBack)(uint32_t);




typedef enum
{
   FADI_DUMP_TYPE_ERRORLOG     = 0,
   FADI_DUMP_TYPE_RAM,
   FADI_DUMP_TYPE_SET_EVENTS,
   FADI_DUMP_TYPE_FW_TRACE,
   FADI_DUMP_TYPE_STATIC_UNIT_INFO,
   FADI_DUMP_TYPE_ERROR_STATISTICS,
   FADI_DUMP_TYPE_NAND_PARAMS,
   FADI_DUMP_TYPE_WRITE_AMPLIFICATION,
   FADI_DUMP_TYPE_SMART_COUNTERS,
   FADI_DUMP_TYPE_FRONT_END_INFO,
   FADI_DUMP_TYPE_PEC_STATISTICS,
   FADI_DUMP_TYPE_FTL_LOG_DATA,
   FADI_DUMP_TYPE_FW_CFG,
   FADI_DUMP_TYPE_FFU_HISTORY,
}FADI_DUMP_TYPE_t;

typedef enum
{
   FADI_DUMP_FIX_REGION = 0,
   FADI_DUMP_CIRCULAR_REGION,
   FADI_DUMP_CORE_DUMP_FIX_REGION,
   FADI_DUMP_CORE_DUMP_CIRCULAR_REGION,

   FADI_DUMP_TELEMETRY_REGION,

#line 80 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_dumpmanager.h"
   FADI_DUMP_REGION_NUM,
}FADI_Logic_Region_t;

typedef enum
{
   FADI_LOG_TYPE_CRITICAL_ERRORLOG = 0,
   FADI_LOG_TYPE_WARNING_ERRORLOG,
   FADI_LOG_TYPE_BIG_DUMP,
   FADI_LOG_TYPE_UECC_DUMP,
   FADI_LOG_TYPE_SET_EVENTS,
   FADI_LOG_TYPE_MP_RTOS_REGISTERS,
   FADI_LOG_TYPE_PS_RTOS_REGISTERS,
   FADI_LOG_TYPE_HIM_TABLE,
   FADI_LOG_TYPE_RTFADI_MP,
   FADI_LOG_TYPE_RTFADI_PS0,
   FADI_LOG_TYPE_RTFADI_PS1,
   FADI_LOG_TYPE_FW_TRACE,
   FADI_LOG_TYPE_TELEMETRY_GENERIC,
   FADI_LOG_TYPE_TELEMETRY_SNAPSHOT,
   FADI_LOG_TYPE_TELEMETRY_MP_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_PS0_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_PS1_RTFADI,
   FADI_LOG_TYPE_TELEMETRY_SET_EVENT,
   FADI_LOG_TYPE_TELEMETRY_SMART_LOG,
   FADI_LOG_TYPE_TELEMETRY_SECURITY_INFO,
   FADI_LOG_TYPE_TELEMETRY_STATIC_UNIT_INFO,
   FADI_LOG_TYPE_TELEMETRY_ERROR_STATISTICS,
   FADI_LOG_TYPE_TELEMETRY_NAND_PARAMS,
   FADI_LOG_TYPE_TELEMETRY_WRITE_AMPLIFIATION,
   FADI_LOG_TYPE_TELEMETRY_SMART_COUNTERS,
   FADI_LOG_TYPE_TELEMETRY_FRONT_END_INFO,
   FADI_LOG_TYPE_TELEMETRY_PEC_STATISTICS,
   FADI_LOG_TYPE_TELEMETRY_FTL_LOG_DATA,
   FADI_LOG_TYPE_TELEMETRY_FW_CFG,
   FADI_LOG_TYPE_TELEMETRY_FFU_HISTORY,
   FADI_LOG_TYPE_CORE_DUMP,
   FADI_LOG_TYPE_FATAL_ASSERT_RTFADI_MP,
   FADI_LOG_TYPE_FATAL_ASSERT_PS0_RTFADI,
   FADI_LOG_TYPE_FATAL_ASSERT_PS1_RTFADI,
   FADI_LOG_TYPE_FATAL_ASSERT_SET_EVENT,
   FADI_LOG_TYPE_FATAL_ASSERT_HIM_TABLE,
   FADI_LOG_TYPE_NUM,
}FADI_LOG_TYPE_t;

typedef enum
{
   FADI_BIGDUMP_USER_BUFFER = 0,
   FADI_BIGDUMP_DYNAMIC_ALLOC_BUFFER,
   FADI_BIGDUMP_IFS_BUFFER,

}FADI_BigDump_Buffer_t;


typedef enum
{
   FADI_DUMP_OPCODE_LOG_DUMP = 0,
   FADI_DUMP_OPCODE_REINIT_FADI_BLOCKS = 1,
}FADI_Dump_Opcode_t;

typedef struct _FADI_DumpRequest_s
{

   uint32_t addr;
   uint16_t numFmu;
   uint8_t dumpType;
   uint8_t logType;
   uint8_t dumpRegion;
   DumpCallBack callBackAddr;
   uint8_t bufType;
   uint8_t freeSector;
   uint8_t footerNeeded;
   uint8_t opCode;
} FADI_DumpRequest_t;

typedef struct FADI_DumpControl_s
{
   uint8_t headIndex;
   uint8_t tailIndex;
   uint8_t queueDepth;
   uint8_t counter;
}FADI_DumpControl_t;

typedef struct FADI_DumpManager_s
{
   FADI_DumpControl_t FADIDumpControl;
   FADI_DumpRequest_t FADIDumpQueue[ 20 ];
   uint16_t dumpedFmuCount;
   uint8_t bootPageFlush;
   uint8_t rfu8;
}FADI_DumpManager_t;


typedef struct _FADIHeader_t
{

   uint16_t   LDPC_Scrambler_seed;
   uint8_t    Data_Type;

   uint8_t    fmu;
   uint16_t   Sig;
   uint16_t   FMU_addr;
   uint8_t    padding[24];
}  FADIHeader_t;



void FADI_DumpManagerHandling(void);
void FADI_StoreTelemetryFMU(uint16_t fmu);
void FADI_DumpQueueInit(void);
Status_t FADI_CleanFADIBlocksRequest(void);
Status_t SYS_Diag_FADI_Get_Core_Dump_Size(uint32_t numBytes, uint32_t* pBuffer);
Status_t SYS_Diag_FADI_Get_Number_Of_Core_Dumps(uint32_t numBytes, uint32_t* pBuffer);



uint16_t  FADI_ReadTelemetryFMU(void);
Status_t FADI_DumpErrorLog(uint32_t index, uint8_t dumpRegion, uint8_t dumpType);
Status_t  __attribute__((section("CODE_SLOW")))  FADI_BigDumpRequest(uint8_t dumpType, uint8_t logType, uint8_t dumpRegion, FADI_ESL_Header_t eslHdrArr[], uint8_t * dataPtrArr[], uint32_t dumpNum, DumpCallBack callBackAddr, uint16_t file, uint16_t line);
Status_t  __attribute__((section("CODE_SLOW")))  FADI_FormattedBigDumpRequest(uint8_t bufType, uint8_t logType, uint8_t dumpRegion, uint8_t dumpType, uint8_t * ptr, uint32_t dataSize, uint32_t bufSize, DumpCallBack callBackAddr, uint16_t file, uint16_t line);
uint32_t FADI_GetStartFMUFromEndFMU(uint32_t region, uint32_t endFMU, uint32_t sizeFMU);


Status_t FADI_PsBigDumpHandler(FADI_PS_BigDump_Request_t * msg);

BOOL     FADI_ifQueueEmpty(void);
Status_t  __attribute__((section("CODE_SLOW")))  FADI_DumpMgrReadSpecificFmu(uint32_t fmu, uint8_t *pBuf, FADI_Logic_Region_t region);

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_footer.h"

#line 44 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_footer.h"
extern const uint8_t FADI_FooterSignature[ 12  +  1 ];





typedef enum
{
  FADI_DUMP_DISP_COLOR_WHITE = 0,
  FADI_DUMP_DISP_COLOR_PINK  = 1,
  FADI_DUMP_DISP_COLOR_RED   = 2,
}FADI_DUMP_DISPLAY_COLOR_t;

typedef struct FADI_DM_DUMP_OWNER_T
{


   uint8_t processor;
   uint8_t cpuInstance;


   uint8_t task;
   uint8_t reserved;



   uint16_t file;


   uint16_t line;
}FADI_DM_Dump_Owner_t;



typedef struct FADI_DM_DUMP_INFO_T
{

   FADI_DM_Dump_Owner_t owner;


   uint32_t param[ 5 ];


   uint64_t timeStamp;
   uint64_t setTimeStamp;


   uint32_t code;


} FADI_DM_Dump_Info_t;







typedef struct FADI_DUMP_FOOTER_t
{
   uint8_t revision;
   uint8_t  rfu8[3];
   uint16_t logCnt[FADI_DUMP_REGION_NUM];
   uint16_t currentFmu[FADI_DUMP_REGION_NUM];
   uint16_t prodBuild;
   uint8_t  dumpLabel;
   uint8_t  logType;
   uint16_t partsCount;
   uint16_t dispColor;
   uint8_t  productID[4];
   FADI_DM_Dump_Info_t dumpInfo;
   uint32_t fwGitID;
   uint32_t logIndex;
   uint32_t powerCycle;
   uint8_t  signature[12];

}FADI_Dump_Footer_t;


typedef struct
{
   uint32_t x[1024 * 2 - sizeof(FADI_Dump_Footer_t)/sizeof(uint32_t) - 1];

}FADI_BIG_Dump_Data_Example1_t;

typedef struct
{
   uint32_t x[1024 * 2 - 10];

}FADI_BIG_Dump_Data_Example2_t;

typedef struct
{

   uint32_t x[1024 * 4 - 1];

}FADI_BIG_Dump_Data_Example3_t;

typedef struct
{

   uint32_t x[1024 - sizeof(FADI_Dump_Footer_t)/sizeof(uint32_t) - 1 - 1];
}FADI_BIG_Dump_Data_Example4_t;

typedef struct
{
   uint32_t x[1024*8];

}FADI_BIG_Dump_Data_Example5_t;


typedef struct
{
   uint8_t     *pBuffInUsed;
   uint8_t     *pBuffStartAddress;
   uint8_t     *pDataToSave;
   uint16_t    bufferAllocSize;
   uint16_t    eslLabel;
   uint16_t    bytesToSave;
   uint16_t    bytesSavedSoFar;
   uint16_t    lineNumber;
   uint16_t    fileNameIndex;
   uint16_t    dumpLabel;
   uint8_t     numberOfDumps;
}FADI_Big_Dump_Pass_Params_t;


Status_t FADI_GenerateDumpInfo(FADI_DM_Dump_Info_t * pDumpInfo, uint16_t fileCode, uint16_t line, uint32_t logCode, uint32_t *pUserParams);

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_romver.h"

#line 107 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_romver.h"
uint8_t* SYS_GetROMVersion(uint8_t* pByteLength);

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlogbuffermanager.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlogbuffermanager.h"
typedef enum
{
   FADI_ERRORLOG_BUFFER_AVAILABLE,
   FADI_ERRORLOG_BUFFER_IN_USE,
   FADI_ERRORLOG_BUFFER_WAIT_DUMPING,
   FADI_ERRORLOG_BUFFER_DUMPING,
}FADI_ErrorLog_Buffer_Status_t;

typedef struct ErrorLog_ENTRY_T
{
   uint32_t bufAddr;
   uint8_t * OpPtr;
   FADI_ErrorLog_Buffer_Status_t status;
}FADI_ErrorLog_Entry_t;



typedef struct
{
   FADI_ErrorLog_Entry_t errorLogEntry[ 5 ];
   uint8_t  dumpMgmInitComplete;
   uint8_t  errorlogEnable;
   uint8_t  reserved8[2];
   uint32_t reserved32[4];
}FADI_ErrorLog_Buffer_Manager_t;




typedef struct
{
   uint32_t validSignature;
   uint32_t fatalErrorBufAddr;
   uint32_t fatalErrorEntryLen;
   uint32_t errLogHdrBaseLen;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
   uint32_t param3;
   uint32_t param4;
   uint32_t fatalCode;
   uint32_t reserved[6];
}FADI_ErrorLog_BufSharedInfo_t;


extern volatile FADI_ErrorLog_Buffer_Manager_t * gErrorLogBufferManager;
extern volatile FADI_ErrorLog_BufSharedInfo_t *gErrorLogSharedInfo;


void FADI_ErrorLogBufferInit(void);
void * FADI_PickUpErrorLogBuffer(uint32_t * retIndex);


FADI_ErrorLog_Buffer_Status_t FADI_ReadBufferStatus(uint32_t index);
void FADI_ChangeBufferStatus(uint32_t index, FADI_ErrorLog_Buffer_Status_t newStatus);
uint32_t FADI_ReadBufferAddress(uint32_t index);
uint8_t * FADI_ReadBufferOpAddr(uint32_t index);
void FADI_ChangeBufferOpPtr(uint32_t index, uint8_t * ptr);
void * FADI_PickUpWarningErrorLogBuffer(uint32_t * retIndex);
void * FADI_PickUpWarningErrorLogBuffer(uint32_t * retIndex);

#line 20 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/mpc_driver.h"

#line 47 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/mpc_driver.h"
enum MPC_SEM_e
{
   MPC_BASIC_SEMAPHORE,
   MPC_PCU_MSG_SEMAPHORE,
   MPC_SEMAPHORE_1
};



typedef enum MPC_MUTEX_NUMBER_e
{
   MPC_MUTEX_ERRORLOG,
   MPC_MUTEX_UART_ACCESS,
   MPC_MUTEX_ATB_RTT_ACCESS,
   MPC_MUTEX_SOC_GENQ_ACCESS,
   MPC_MUTEX_FADI_DUMP,
   MPC_MUTEX_HIM_CTLRBUSYTIME,
   MPC_MUTEX_PF_EH_BUFFER,
   MPC_MUTEX_BULLSEYE_SYNC_PS,
   MPC_MUTEX_FWT,
   MPC_MUTEX_FADI_DUMP_QUEUE,
   MPC_MUTEX_FADI_BIG_DUMP,
   MPC_MUTEX_SECURE_DRIVE_SYNC,
   MPC_MUTEX_SECURITY_LOG_SYNC,
   MPC_MUTEX_HA3_REQUEUE_ACCESS,
   MPC_MUTEX_DRAIN_MODE_ACCESS,
   MPC_MUTEX_GLOBAL_FETCH_ACCESS,
   MPC_MUTEX_HNVME_SW_RESET_ACCESS,
   MPC_MUTEX_ASPM_SET_ACCESS,
   MPC_MUTEX_GLOBAL_CC_ACCESS,
   MPC_MUTEX_FWTA_PROTECTION,
   MPC_MUTEX_HMBC_DRAIN_PROTECTION,
   MPC_MUTEX_INVALID
}MPC_MUTEX_NUMBER_t;




typedef enum MPC_SWI_IDS_e
{
  MPC_SWI_ID0 = 0,
  MPC_SWI_ID1,
  MPC_SWI_ID2,
  MPC_SWI_ID3,
  MPC_SWI_ID4,
  MPC_SWI_ID5,


  MPC_SWI_NUM
} MPC_SWI_IDS_t;




typedef enum MPC_SWI_E_e
{
  MPC_SWI_E_0,
  MPC_SWI_E_1,
  MPC_SWI_E_2,
  MPC_SWI_E_3,
  MPC_SWI_E_4,
  MPC_SWI_E_5,
  MPC_SWI_E_6,
  MPC_SWI_E_7,


  MPC_SWI_E_NUM
} MPC_SWI_E_t;



enum
{
   MPC_MUTEX_LOCK_CONTEXT_INTERRUPTS_DISABLED = 0,
   MPC_MUTEX_LOCK_CONTEXT_INTERRUPTS_ENABLED  = 1,
};

#line 211 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/mpc_driver.h"
typedef enum
{
    CPU_ID_MP,
    CPU_ID_PS0,
    CPU_ID_PS1,
    CPU_ID_PCU,

}CPU_ID_t;


BOOL     MPC_Lock(uint8_t mutexNum, uint8_t mutexTransaction, BOOL Block);
BOOL     MPC_UnLock(uint8_t mutexNum, uint8_t mutexTransaction);
BOOL     MPC_Lock_InterruptsDisabled(uint8_t mutexNum, uint8_t mutexTransaction, BOOL Block);
BOOL     MPC_UnLock_InterruptsDisabled(uint8_t mutexNum, uint8_t mutexTransaction);
BOOL      __attribute__((section("CODE_MEDIUM")))  MPC_Halt_CPU(CPU_ID_t cpuId);
void      __attribute__((section("CODE_MEDIUM")))  MPC_HaltPSandLLFSCoProcessors(void);


void     MPC_TestMutex(void);
void     MPC_EnableMultipleCoProcessors(uint32_t coProcessors);
void     MPC_StopAllCoProcessors(void);
void      __attribute__((section("CODE_MEDIUM")))  MPC_HaltAllCPUsExceptPCU(void);
void     MPC_ReStartMultipleProcessors(uint32_t coProcessors);
uint32_t MPC_GenerateCPUAndThreadID(void);




Status_t  __attribute__((section("TRW")))  SYS_MPC_Init(void);
Status_t MPC_SetSWIEventHandler(uint32_t irq, uint32_t event, PVFV_t pISR);
uint32_t MPC_GetSWIEvent(uint32_t irq, uint32_t event);
void     MPC_SetSWIEvent(uint32_t irq, uint32_t event);
void     MPC_ClearSWIEvent(uint32_t irq, uint32_t event);
void     MPC_EnableSWIEvent(uint32_t irq, uint32_t event);
void     MPC_DisableSWIEvent(uint32_t irq,uint32_t event);
uint32_t MPC_ReadSWIEventReg(uint32_t irq);
void     MPC_ExecuteSWIEventHandler(uint32_t irq, uint32_t event);

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_productversion.h"

#line 30 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_productversion.h"
typedef struct SYS_VersionsCfg_s
{
   uint32_t vcsCommit;
   uint8_t  Char_R;
   uint8_t  RM_ProductFamily;
   uint8_t  RM_VersionChar;
   uint8_t  RM_MemoryType;
   uint8_t  FE_RomMajorRev;
   uint8_t  FE_RomMinorRev;
   uint8_t  BE_RomMajorRev;
   uint8_t  BE_RomMinorRev;
   uint8_t  FW_VersionStr[ ( 8  + 1) ];
   uint8_t  reserved[3];
}   SYS_VersionsCfg_t;

typedef struct SYS_VersionsCfgOpt_s
{
   CFG_SetHdr_t      setHdr;
   SYS_VersionsCfg_t setOpt[ 1 ];
}   SYS_VersionsCfgOpt_t;

typedef struct SYS_SKUVersionsCfg_s
{
   uint8_t fileName[ (48) ];
}   SYS_SKUVersionsCfg_t;

typedef struct SYS_SKUVersionsCfgOpt_s
{
   CFG_SetHdr_t      setHdr;
   SYS_SKUVersionsCfg_t setOpt[ 1 ];
}   SYS_SKUVersionsCfgOpt_t;


typedef struct
{
   uint32_t versionDebugSignature;
   uint32_t vcs_Id;
   uint8_t  linkName[4];
   uint8_t  flashwareVersionInternal[ ( 8  + 1) ];
   uint8_t  pad1[3];
   uint8_t  flashwareVersionExternal[ ( 8  + 1) ];
   uint8_t  securityProgramId;
   uint8_t  pad2[2];
   uint8_t  prodName[ 32 ];
   uint8_t  skuName[ (48) ];
} VerInfoGroupedForDebug_t;

Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_GetFW_Version(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_GetROM_Version(uint8_t* pBuff, uint8_t* pByteLength);
Status_t SYS_GetExtOrInt_FW_Version(uint8_t* pBuff, uint8_t* pByteLength, BOOL32 external);
int32_t   __attribute__((section("CODE_MEDIUM")))  SYS_ExtractFW_VersionNumber(uint8_t* pFW_Version);
int32_t   __attribute__((section("CODE_MEDIUM")))  SYS_GetFW_VersionNumber();
Status_t SYS_Get_FW_VersionForSlot(uint8_t * pBuff, uint32_t  slot, uint8_t * pByteLength);
Status_t SYS_Get_FW_ActiveNextSlots(uint8_t * activeSlot, uint8_t * nextSlot);
Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_GetSKUandCommit(uint32_t cfgTotalSets, uint8_t* srcBuffer, uint8_t* dstBuffer);
Status_t  __attribute__((section("TRW")))  SYS_ProductVersionInit(SysBootPhase_t bootPhase);
Status_t   SYS_GetSKUFileName(SYS_SKUVersionsCfg_t *pBuffer);
Status_t   SYS_GetVCSCommit(uint32_t *pBuffer);
uint32_t SYS_GetVCSCommitID(void* pBuff);
Status_t SYS_GetVCSCommitIDFromFile(void* pBuffer, uint32_t bufferSize, uint32_t offsetInFile, uint32_t *pVCSID);
Status_t SYS_GetVCSCommitIDFromOverlayFile(void* pBuffer, uint32_t bufferSize, uint32_t offsetInFile, uint32_t *pVCSID);

#line 30 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"

#line 84 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/errorlog/inc_public/fadi_errorlog.h"
typedef enum
{
   FADI_EL_EXCEPTION_QUEUE_FULL = 0,
   FADI_EL_EXCEPTION_WRITE_FAILURE,
   FADI_EL_NUM_OF_EXCEPTIONS,
}FADI_ErrorLog_Exception_t;



typedef enum
{
   FADI_FVT_CRITICAL = 1,
   FADI_FVT_WARNING,
   FADI_FVT_INFO,
   FADI_FVT_BIG_DUMP,
   FADI_FVT_SET_EVENT_DUMP,
   FADI_FVT_CREATE_FATAL_ASSERT,
}FADI_ErrorLog_FvtMarker_t;


typedef enum
{
   FADI_FVT_EL_PS0 ,
   FADI_FVT_EL_PS1,
   FADI_FVT_EL_FTL,
   FADI_FVT_EL_INFRA,
   FADI_FVT_EL_FE,
   FADI_FVT_EL_SECURITY,
}FADI_ErrorLog_FvtSource_t;


typedef struct FADI_ERRORLOG_BASE_DATA_T
{

   uint8_t              signature[ 4 ];


   uint8_t              controller[ 4 ];


   uint8_t              romwareVersion[ 8 ];


   uint8_t              asicRevision;


   uint8_t              asicId;


   uint8_t              flashType;


   uint8_t              diesNum;


   uint8_t              FwVersion[ 8 ];


   uint32_t             cardConfig;


   uint16_t             criticalLogReq;


   uint16_t             warningLogReq;


   uint16_t             criticalLogWritten;


   uint16_t             warningLogWritten;


   uint16_t             asicTemp;


   uint16_t             nandPeakTemp;


   uint8_t              numDiesPerPhysChip;


   uint8_t              numDiesPerPS;


   uint16_t             revision;


   uint8_t              fwState[20];


}FADI_ErrorLog_Base_Data_t;

typedef struct FADI_ERRORLOG_BASE_T
{

   FADI_ESL_Header_t   hdr;


   FADI_ErrorLog_Base_Data_t   data;
}FADI_ErrorLog_Base_t;


typedef union
{
   uint32_t all32;
   struct
   {
      uint32_t id             : 16;
      uint32_t group          : 11;
      uint32_t special        : 2;
      uint32_t severify       : 3;
   }specific;
}FADI_ErrorLogCode_t;


typedef struct
{
   FADI_ErrorLog_Base_t logBase;


   uint8_t smallDump[ ( 4096  - (sizeof(FADI_ErrorLog_Base_t))  - (sizeof(FADI_Dump_Footer_t)) ) ];

   FADI_Dump_Footer_t footer;
}FADI_ErrorLog_t;





Status_t          FADI_PsErrorLogRequestHandler(FADI_PS_ErrorLog_Request_t * msg);

void              FADI_ErrorLog_Init(void);
Status_t          FADI_PostponedErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * sdmpDescriptor);
void              FADI_AssertFatalMPErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * pSdmpDescriptor);
Status_t          FADI_AssertFatalPSErrorLog(uint16_t fileName, uint16_t line, uint32_t logCode, uint32_t *pUserParams, FADI_SDMP_Group_Descriptor_t * pSdmpDescriptor);
uint32_t          FADI_SetBoundary(uint8_t * pBuffer);
Status_t          FADI_SetEventCollect(uint8_t * ptr, uint32_t size);
void              SYS_DisableErrorLog(BOOL32 ifClean);
void              SYS_EnableErrorLog(void);
BOOL32            SYS_IsErrorLogPending(void);

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_esl_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/secded_defines.h"

#line 41 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/secded_defines.h"
 typedef struct SECDED_SRAM_INFO_s
 {
    uint32_t bytesPerInstance;
    uint32_t baseAddr;
    uint32_t length;
 } SECDED_SRAM_INFO_t;

#line 449 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/secded_defines.h"
typedef struct MRAM1_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_MRAM1_i0_0;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i0_1;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i0_2;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i0_3;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i1_0;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i1_1;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i1_2;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i1_3;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i2_0;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i2_1;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i2_2;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i2_3;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i3_0;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i3_1;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i3_2;
   HW_REG64 MLM_DEBUG_REG_MRAM1_i3_3;
} MRAM1_SECDED_Registers_t;

typedef struct MRAM2_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_MRAM2_i0_0;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i0_1;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i0_2;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i0_3;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i1_0;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i1_1;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i1_2;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i1_3;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i2_0;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i2_1;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i2_2;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i2_3;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i3_0;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i3_1;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i3_2;
   HW_REG64 MLM_DEBUG_REG_MRAM2_i3_3;
} MRAM2_SECDED_Registers_t;

typedef struct TBRAM1_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_TBRAM1;
} TBRAM1_SECDED_Registers_t;

typedef struct DEBUG_CPU_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_DEBUG_CPU_RAM;
} DEBUG_CPU_RAM_SECDED_Registers_t;


typedef struct TRAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_TRAM_i0;
   HW_REG64 MLM_DEBUG_REG_TRAM_i1;
   HW_REG64 MLM_DEBUG_REG_TRAM_i2;
   HW_REG64 MLM_DEBUG_REG_TRAM_i3;
   HW_REG64 MLM_DEBUG_REG_TRAM_i4;
   HW_REG64 MLM_DEBUG_REG_TRAM_i5;
   HW_REG64 MLM_DEBUG_REG_TRAM_i6;
   HW_REG64 MLM_DEBUG_REG_TRAM_i7;

} TRAM_SECDED_Registers_t;

typedef struct XRAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_XRAM_i0;
   HW_REG64 MLM_DEBUG_REG_XRAM_i1;
   HW_REG64 MLM_DEBUG_REG_XRAM_i2;
   HW_REG64 MLM_DEBUG_REG_XRAM_i3;
} XRAM_SECDED_Registers_t;

typedef struct BRAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_BRAM_i0;
   HW_REG64 MLM_DEBUG_REG_BRAM_i1;
   HW_REG64 MLM_DEBUG_REG_BRAM_i2;
   HW_REG64 MLM_DEBUG_REG_BRAM_i3;
} BRAM_SECDED_Registers_t;

typedef struct DP_DESC_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_DP_DESC_RAM_i0;
   HW_REG64 MLM_DEBUG_REG_DP_DESC_RAM_i1;
   HW_REG64 MLM_DEBUG_REG_DP_DESC_RAM_i2;
   HW_REG64 MLM_DEBUG_REG_DP_DESC_RAM_i3;
} DP_DESC_RAM_SECDED_Registers_t;

typedef struct ADP_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_ADP_RAM_i0;
   HW_REG64 MLM_DEBUG_REG_ADP_RAM_i1;
} ADP_RAM_SECDED_Registers_t;

typedef struct AON_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_AON_RAM;
} AON_RAM_SECDED_Registers_t;

typedef struct TBRAM0_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_TBRAM0;
} TBRAM0_SECDED_Registers_t;

typedef struct UHRAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_UHRAM_i0;
   HW_REG64 MLM_DEBUG_REG_UHRAM_i1;
} UHRAM_SECDED_Registers_t;

typedef struct SEC_KEYS_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_SEC_KEYS_RAM;
} SEC_KEYS_RAM_SECDED_Registers_t;

typedef struct HNVME_REG_RAM_SECDED_Registers_s
{
   HW_REG64 MLM_DEBUG_REG_NVME_RAM;
} HNVME_REG_RAM_SECDED_Registers_t;

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_esl_api.h"

#line 196 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/dump/inc_public/fadi_esl_api.h"
typedef enum
{
   REG_DUMP_FADI_ESL_SET_EVENT_CONTROL_LABEL =  ( ((0x0)<< 10 ) | ( 0x11 ) ) ,
   REG_DUM_SET_EVENT_CONTROL_NUM_REG_DUMPS   = 2,
   REG_DUMP_SET_OFFSET_REG_FIRST_DUMP        = 0,
   REG_DUMP_SET_NUM_REG_FIRST_DUMP           = 4,
   REG_DUMP_SET_OFFSET_REG_SECOND_DUMP       = 0x18,
   REG_DUMP_SET_NUM_REG_SECOND_DUMP          = (0x160/4),
} FADI_SET_Control_Reg_Dump_Details_t;







typedef enum
{
   REG_DUMP_FADI_ESL_DDR_CFG_STS_LABEL =  ( ((0x0)<< 10 ) | ( 0x50 ) ) ,
   REG_DUMP_DDR_CFG_STS_NUM_REG_DUMPS = 2,
   REG_DUMP_DDR_CFG_STS_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_CFG_STS_NUM_REG_FIRST_DUMP = 0x48 / sizeof(uint32_t),
   REG_DUMP_DDR_CFG_STS_OFFSET_REG_SECOND_DUMP = 0x0400 / sizeof(uint32_t),
   REG_DUMP_DDR_CFG_STS_NUM_REG_SECOND_DUMP = 0xD8 / sizeof(uint32_t),
} FADI_DDR_CFG_STS_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_INDIRECT_CACHE_LABEL =  ( ((0x0)<< 10 ) | ( 0x51 ) ) ,
   REG_DUMP_DDR_INDIRECT_CACHE_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_INDIRECT_CACHE_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_INDIRECT_CACHE_NUM_REG_FIRST_DUMP = 0x100 / sizeof(uint32_t),
} FADI_DDR_INDIRECT_CACHE_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_DMA_LABEL =  ( ((0x0)<< 10 ) | ( 0x52 ) ) ,
   REG_DUMP_DDR_DMA_NUM_REG_DUMPS = 2,
   REG_DUMP_DDR_DMA_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_DMA_NUM_REG_FIRST_DUMP = 0x390 / sizeof(uint32_t),
   REG_DUMP_DDR_DMA_OFFSET_REG_SECOND_DUMP = 0x0700 / sizeof(uint32_t),
   REG_DUMP_DDR_DMA_NUM_REG_SECOND_DUMP = 0x100 / sizeof(uint32_t),
} FADI_DDR_DMA_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_UMCTL_LABEL =  ( ((0x0)<< 10 ) | ( 0x53 ) ) ,
   REG_DUMP_DDR_UMCTL_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_UMCTL_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_UMCTL_NUM_REG_FIRST_DUMP = 0x400 / sizeof(uint32_t),
} FADI_DDR_UMCTL_Reg_Dump_Details_t;






typedef enum
{
   REG_DUMP_FADI_ESL_DDR_PUB_LABEL =  ( ((0x0)<< 10 ) | ( 0x54 ) ) ,
   REG_DUMP_DDR_PUB_NUM_REG_DUMPS = 1,
   REG_DUMP_DDR_PUB_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DDR_PUB_NUM_REG_FIRST_DUMP = 0x1000 / sizeof(uint32_t),
} FADI_DDR_PUB_Reg_Dump_Details_t;







typedef enum
{
   REG_DUMP_FADI_ESL_MRAM1_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x41 ) ) ,
   REG_DUMP_MRAM1_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_MRAM1_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_MRAM1_SECDED_NUM_REG_FIRST_DUMP = sizeof(MRAM1_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_MRAM1_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_MRAM2_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x42 ) ) ,
   REG_DUMP_MRAM2_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_MRAM2_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_MRAM2_SECDED_NUM_REG_FIRST_DUMP = sizeof(MRAM2_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_MRAM2_SECDED_Reg_Dump_Details_t;





typedef enum
{
   REG_DUMP_FADI_ESL_TBRAM1_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x44 ) ) ,
   REG_DUMP_TBRAM1_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_TBRAM1_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_TBRAM1_SECDED_NUM_REG_FIRST_DUMP = sizeof(TBRAM1_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_TBRAM1_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_DEBUG_CPU_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x45 ) ) ,
   REG_DUMP_DEBUG_CPU_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_DEBUG_CPU_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DEBUG_CPU_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(DEBUG_CPU_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_DEBUG_CPU_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_TRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x46 ) ) ,
   REG_DUMP_TRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_TRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_TRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(TRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_TRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_XRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x47 ) ) ,
   REG_DUMP_XRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_XRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_XRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(XRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_XRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_BRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x48 ) ) ,
   REG_DUMP_BRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_BRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_BRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(BRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_BRAM_SECDED_Reg_Dump_Details_t;





typedef enum
{
   REG_DUMP_FADI_ESL_DP_DESC_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x49 ) ) ,
   REG_DUMP_DP_DESC_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_DP_DESC_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_DP_DESC_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(DP_DESC_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_DP_DESC_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_ADP_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4A ) ) ,
   REG_DUMP_ADP_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_ADP_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_ADP_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(ADP_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_ADP_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_AON_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4B ) ) ,
   REG_DUMP_AON_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_AON_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_AON_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(AON_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_AON_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_TBRAM0_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4C ) ) ,
   REG_DUMP_TBRAM0_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_TBRAM0_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_TBRAM0_SECDED_NUM_REG_FIRST_DUMP = sizeof(TBRAM0_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_TBRAM0_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_UHRAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4D ) ) ,
   REG_DUMP_UHRAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_UHRAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_UHRAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(UHRAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_UHRAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_SEC_KEYS_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4E ) ) ,
   REG_DUMP_SEC_KEYS_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_SEC_KEYS_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_SEC_KEYS_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(SEC_KEYS_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_SEC_KEYS_RAM_SECDED_Reg_Dump_Details_t;




typedef enum
{
   REG_DUMP_FADI_ESL_HNVME_REG_RAM_SECDED_REG_DUMP_LABEL =  ( ((0x0)<< 10 ) | ( 0x4F ) ) ,
   REG_DUMP_HNVME_REG_RAM_SECDED_NUM_REG_DUMPS = 1,
   REG_DUMP_HNVME_REG_RAM_SECDED_OFFSET_REG_FIRST_DUMP = 0x0000,
   REG_DUMP_HNVME_REG_RAM_SECDED_NUM_REG_FIRST_DUMP = sizeof(HNVME_REG_RAM_SECDED_Registers_t) / sizeof(uint32_t),
} FADI_HNVME_REG_RAM_SECDED_Reg_Dump_Details_t;

#line 25 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventconfig.h"

#line 40 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"

#line 55 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum MISC_HWEventEnable_Control_e
{
   SET_HW_DEBUG_EVENTS_RS                                       = (1<<0 ),
   SET_HW_DEBUG_EVENTS_LDPCENC                                  = (1<<1 ),
   SET_HW_DEBUG_EVENTS_LDPCDEC                                  = (1<<2 ),
   SET_HW_DEBUG_EVENTS_DPCA                                     = (1<<3 ),
   SET_HW_DEBUG_EVENTS_FE                                       = (1<<4 ),
}   MISC_HWEventEnable_Control_t;

#line 134 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
enum SET_HWEvent_HIM_XML_e
{

   FE_HW_EVENT_PCIE_LINK_STATUS_CHANGE             = (0x00001),
   FE_HW_EVENT_HOST_COMMAND_RECEPTION              = (0x00002),
   FE_HW_EVENT_HA_COMMAND_QUEUEING                 = (0x00004),
   FE_HW_EVENT_HNVME_DESCRIPTOR_QUEUEING           = (0x00008),

   FE_HW_EVENT_HSEC_DESCRIPTOR_QUEUEING            = (0x00010),
   FE_HW_EVENT_HMBC_DESCRIPTOR_FETCHING            = (0x00020),
   FE_HW_EVENT_HNVME_DESCRIPTOR_COMPLETION         = (0x00040),
   FE_HW_EVENT_HSEC_DESCRIPTOR_COMPLETION          = (0x00080),

   FE_HW_EVENT_HMBC_DESCRIPTOR_COMPLETION          = (0x00100),
   FE_HW_EVENT_NEW_DESCRIPTOR_FETCHED              = (0x00200),
   FE_HW_EVENT_SECTOR_RELEASE                      = (0x00400),
   FE_HW_EVENT_SECTOR_AVAILABLE                    = (0x00800),

   FE_HW_EVENT_HAWA_HABM_DESCRIPTOR_GEN_UPPER      = (0x01000),
   FE_HW_EVENT_HAWA_HABM_DESCRIPTOR_GEN_LOWER      = (0x02000),
   FE_HW_EVENT_HWD_CONTEXT_GENERATION              = (0x04000),
   FE_HW_EVENT_FLAT_LBA_UPPER                      = (0x08000),

   FE_HW_EVENT_FLAT_LBA_MIDDLE                     = (0x10000),
   FE_HW_EVENT_FLAT_LBA_LOWER                      = (0x20000),
   FE_HW_EVENT_HMBC_DESCRIPTOR_COMPLETE            = (1<<27),
   FE_HW_EVENT_HA_IRQ                              = (0x40000),
   FE_HW_EVENT_HABM_IRQ                            = (0x80000),

   FE_HW_EVENT_HAWA_IRQ                            = (0x100000),
   FE_HW_EVENT_HSEC_IRQ                            = (0x200000),
   FE_HW_EVENT_HNVME_IRQ                           = (0x400000),
   FE_HW_EVENT_HA_FSM                              = (0x800000),

   FE_HW_EVENT_HABM_FSM                            = (0x1000000),
   FE_HW_EVENT_HAWA_FSM                            = (0x2000000),
   FE_HW_EVENT_HNVME_FSM                           = (0x4000000),

   FE_HW_EVENT_HMBC_DESCRIPTOR_QUEUING             = (1<<27),

   FE_HW_EVENT_HMBC_FSM                            = (0x10000000),
   FE_HW_EVENT_CMD_LENGTH                          = (0x20000000),
   FE_HW_EVENT_CMD_ATTR                            = (0x40000000),
   FE_HW_EVENT_CMD_COMPLETE                        = (0x80000000),

   FE_HW_EVENT_ALL_EVENT_CONTROL_BITS              = (0xFFFFFFFF),
}  ;
typedef uint32_t SET_HWEvent_HIM_t;

#line 227 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_FIM_e
{
   FIM_HW_EVENT_GENERIC0                                     = (1<<0 ),
   FIM_HW_EVENT_GENERIC1                                     = (1<<1 ),
   FIM_HW_EVENT_GENERIC2                                     = (1<<2 ),
   FIM_HW_EVENT_GENERIC3                                     = (1<<3 ),
   FIM_HW_EVENT_STATUS_CHECK_FLASH_INTERFACE_TIMER_TIMEOUT   = (1<<4 ),
   FIM_HW_EVENT_EXTERNAL_DATA_RELEASE                        = (1<<5 ),
   FIM_HW_EVENT_LOCAL_COUNTER_CHANGED_FROM_0_TO_NON_ZERO     = (1<<6 ),
   FIM_HW_EVENT_COMMAND_ISSUED_ON_BUS                        = (1<<7 ),
   FIM_HW_EVENT_ADDRESS_BYTE_ISSUED_ON_BUS                   = (1<<8 ),
   FIM_HW_EVENT_DATA_TRANSFER_ON_BUS                         = (1<<9 ),
   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_0_TO_15         = (1<<10),
   FIM_HW_EVENT_FLASH_STATUS_POLL_START_DIES_16_TO_31        = (1<<11),
   FIM_HW_EVENT_FLASH_STATUS_POLL_CHANGE                     = (1<<12),
   FIM_HW_EVENT_FLASH_INTERFACE_DRIVES_NEW_CE_VALUE          = (1<<13),
   FIM_HW_EVENT_READY_BUSY_CHANGE_DETECTED                   = (1<<14),
   FIM_HW_EVENT_FW_DIE_STATUS_MESSAGE_SENT                   = (1<<15),
   FIM_HW_EVENT_FW_STATE_VARIABLE_CHANGE_BUSY_TO_EXPIRED     = (1<<16),
   FIM_HW_ALL_EVENTS_BITS_CONTROL                            = ((1<<17) - 1),
}   SET_HWEvent_FIM_t;

#line 294 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_CAP_e
{
   CAP_HW_EVENT_HEB_DATA                                    = (1<<0 ),
   CAP_HW_EVENT_CONF_FETCH                                  = (1<<1 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_0_3                  = (1<<2 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_4_7                  = (1<<3 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_8_11                 = (1<<4 ),
   CAP_HW_EVENT_DIE_TRUE_STATUS_CHANGE_12_15                = (1<<5 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_0_3                 = (1<<6 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_4_7                 = (1<<7 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_8_11                = (1<<8 ),
   CAP_HW_EVENT_DIE_CACHE_STATUS_CHANGE_12_15               = (1<<9 ),
   CAP_HW_EVENT_RS_CONF_ACCEPTED_1                          = (1<<10 ),
   CAP_HW_EVENT_RS_CONF_ACCEPTED_2                          = (1<<11 ),
   CAP_HW_EVENT_CCD_SECHEDULED_1                            = (1<<12 ),
   CAP_HW_EVENT_CCD_SECHEDULED_2                            = (1<<13 ),
   CAP_HW_EVENT_POWER_RELEASE                               = (1<<14 ),
   CAP_HW_EVENT_REGISTER_ACCESS_1                           = (1<<15 ),
   CAP_HW_EVENT_REGISTER_ACCESS_2                           = (1<<16 ),
   CAP_HW_EVENT_REGISTER_ACCESS_3                           = (1<<17 ),
   CAP_HW_EVENT_FIM_UPDATE_BROADCAST                        = (1<<18 ),
   CAP_HW_EVENT_FIM_UPDATE                                  = (1<<19 ),
   CAP_HW_EVENT_PENDING_TABLE_UPDATE                        = (1<<20 ),
   CAP_HW_EVENT_RELEASE_TABLEW_UPDATE_1                     = (1<<21 ),
   CAP_HW_EVENT_RELEASE_TABLEW_UPDATE_2                     = (1<<22 ),
   CAP_HW_EVENT_SCH_Q_HEAD                                  = (1<<23 ),
   CAP_HW_EVENT_SCH_Q_TAIL                                  = (1<<24 ),
   CAP_HW_EVENT_FIM_STATUS                                  = (1<<25 ),
   CAP_HW_EVENT_RS_ALLOC_REQ                                = (1<<26 ),
   CAP_HW_EVENT_RS_ALLOC_DIFF_REQ                           = (1<<27 ),
   CAP_HW_EVENT_EXCEPTION                                   = (1<<28 ),
   CAP_HW_EVENT_POWER_INDEX_RENDERED_INVALID                = (1<<29 ),
   CAP_NEW_BIT_1                                            = (1<<30),
   CAP_NEW_BIT_2                                            = (1<<31),







   CAP_HW_ALL_EVENTS_BITS_CONTROL                           = 0x7FFFFFFF,
}    SET_HWEvent_CAP_t;

#line 366 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_CAM_e
{
   CAM_ALLOCATION_REQUEST                                   = (1<<0 ),
   CAM_RELEASE_REQ                                          = (1<<1 ),
   CAM_ARRAY_FULL                                           = (1<<2 ),
   CAM_REGISTER_REQUEST_1                                   = (1<<3 ),
   CAM_REGISTER_REQUEST_2                                   = (1<<4 ),
   CAM_REGISTER_REQUEST_3                                   = (1<<5 ),
   CAM_HW_ALL_EVENTS_BITS_CONTROL                           = ((1<<6) - 1),
}    SET_HWEvent_CAM_t;

#line 389 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_RS_e
{
   RS_POOL_0                                                = (1<<0 ),
   RS_POOL_1                                                = (1<<1 ),
   RS_DATA_PATH_LSBS                                        = (1<<2 ),
   RS_DATA_PATH_HSBS                                        = (1<<3 ),
   RS_RELEASE_LSBS                                          = (1<<4 ),
   RS_RELEASE_HSBS                                          = (1<<5 ),
   RS_VIRTUAL_POOL_ALLOC                                    = (1<<6 ),
   RS_REAL_POOL_ALLOCRS_FW_EVENT                            = (1<<7 ),
   RS_TRANSITION                                            = (1<<8 ),
   RS_STARVED_0                                             = (1<<9 ),
   RS_STARVED_1                                             = (1<<10),
   RS_STARVED_2                                             = (1<<11),
   RS_STARVED_3                                             = (1<<12),
   RS_VALIDATION_BLOCK_1                                    = (1<<13),
   RS_VALIDATION_BLOCK_2                                    = (1<<14),
   RS_VALIDATION_ALLOCATION_BLOCK_1                         = (1<<15),
   RS_VALIDATION_ALLOCATION_BLOCK_2                         = (1<<16),
   RS_CONFIGURATION_1                                       = (1<<17),
   RS_CONFIGURATION_2                                       = (1<<18),
   RS_ACCESS_DETAILS_1                                      = (1<<19),
   RS_ACCESS_DETAILS_2                                      = (1<<20),
   RS_RA_BUFF_ALLOCATED                                     = (1<<21),
   RS_RA_BUFF_RELEASED                                      = (1<<22),
   RS_POWER_ALLOCATED                                       = (1<<23),
   RS_POWER_RELEASED                                        = (1<<24),
   RS_STARVED_4                                             = (1<<25),
   RS_STARVED_5                                             = (1<<26),
   RS_STARVED_6                                             = (1<<27),
   RS_ALLOCATION_DONE                                       = (1<<28),
   RS_ACCESS_DETAILS_3                                      = (1<<29),
   RS_EXCEPTION                                             = (1<<30),
   RS_DPC_POWER_CHANGE                                      = (1<<31),
   RS_HW_ALL_EVENTS_BITS_CONTROL                            = 0xFFFFFFFF,
}   SET_HWEvent_RS_t;

#line 438 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hwevents.h"
typedef enum SET_HWEvent_LDPC_DEC_e
{
   LDPC_DEC_NEW_DESCRIPTOR_FETCH                            = (1<<0 ),
   LDPC_DEC_OPERATION_START                                 = (1<<1 ),
   LDPC_DEC_SECTOR_AVAILABLE                                = (1<<2 ),
   LDPC_DEC_SECTOR_RELEASE                                  = (1<<3 ),
   LDPC_DEC_BER                                             = (1<<4 ),
   LDPC_DEC_MODE_SWITCH                                     = (1<<5 ),
   LDPC_DEC_MODE_COMPLETE                                   = (1<<6 ),
   LDPC_DEC_MODE_STATUS1                                    = (1<<7 ),
   LDPC_DEC_MODE_STATUS2                                    = (1<<8 ),
   LDPC_DEC_ALL_EVENTS_BITS_CONTROL                         = ((1<<9) - 1),

}   SET_HWEvent_LDPC_DEC_t;








typedef enum SET_HWEvent_LDPC_ENC_e
{
   LDPC_ENC_NEW_DESCRIPTOR_FETCH                               = (1<<0 ),
   LDPC_ENC_OPERATION_START                                    = (1<<1 ),
   LDPC_ENC_SECTOR_AVAILABLE                                   = (1<<2 ),
   LDPC_ENC_SECTOR_RELEASE                                     = (1<<3 ),
   LDPC_EN_ALL_EVENTS_BITS_CONTROL                             = ((1<<4) - 1),
}   SET_HWEvent_LDPC_ENC_t;








typedef enum SET_HWEvent_LDPC_DPCA_e
{
   DPCA_COUNTER_UPDATE_0                                       = (1<<0 ),
   DPCA_COUNTER_UPDATE_1                                       = (1<<1 ),
   DPCA_GROUP_NOTIFICATION                                     = (1<<2 ),
   DPCA_EN_ALL_EVENTS_BITS_CONTROL                             = ((1<<3) -1 ),
}   SET_HWEvent_DPCA_ENC_t;










 typedef union FIM_HWSetEvents_u
{
    uint32_t all;

    struct
    {
         uint32_t  generic0                         :1;
         uint32_t  generic1                         :1;
         uint32_t  generic2                         :1;
         uint32_t  generic3                         :1;
         uint32_t  statusCheckFITimeOut             :1;
         uint32_t  extDataRelease                   :1;
         uint32_t  timerChange0ToNonZero            :1;
         uint32_t  cmdIssuedOnBus                   :1;
         uint32_t  addressByteIssuedonbus           :1;
         uint32_t  dataTransferOnBus                :1;
         uint32_t  flashStatusPollStartdies0to15    :1;
         uint32_t  flashStatusPollStartdies16to31   :1;
         uint32_t  flashStatusPollChange            :1;
         uint32_t  flashInterfaceDrivesNewCEValue   :1;
         uint32_t  readyBusyChangeDetected          :1;
         uint32_t  dieStatusMessageSent             :1;
         uint32_t  stateVariableFromBusyToExpired   :1;
         uint32_t  reserved                         :15;
     } fields;
}
FIM_HWSetEvents_t;




typedef union CAP_HWSetEvents_u
{
   uint64_t all;

   struct
   {
      uint64_t  hebData                          :1;
      uint64_t  confFetch                        :1;
      uint64_t  dieTrueStatusChange03            :1;
      uint64_t  dieTrueStatusChange47            :1;
      uint64_t  dieTrueStatusChange811           :1;
      uint64_t  dieTrueStatusChange1215          :1;
      uint64_t  dieCacheStatusChange03           :1;
      uint64_t  dieCacheStatusChange47           :1;
      uint64_t  dieCacheStatusChange811          :1;
      uint64_t  dieCacheStatusChange1215         :1;
      uint64_t  rsConfAccepted1                  :1;
      uint64_t  rsConfAccepted2                  :1;
      uint64_t  ccdSchedule1                     :1;
      uint64_t  ccdSchedule2                     :1;
      uint64_t  powerRelease                     :1;
      uint64_t  registerAccess1                  :1;
      uint64_t  registerAccess2                  :1;
      uint64_t  registerAccess3                  :1;
      uint64_t  fimUpdateBroadcast               :1;
      uint64_t  fimUpdate                        :1;
      uint64_t  pendingTableUpdate               :1;
      uint64_t  releaseTablewUpdate_1            :1;
      uint64_t  releaseTablewUpdate_2            :1;
      uint64_t  schQHead                         :1;
      uint64_t  schQTail                         :1;
      uint64_t  fimStatus                        :1;
      uint64_t  rsAllocReq                       :1;
      uint64_t  rsAllocDiffReq                   :1;
      uint64_t  exception                        :1;
      uint64_t  powerIndexRenderedInvalid        :1;
      uint64_t  new_item_1                       :1;
      uint64_t  new_item_2                       :1;
      uint64_t  new_item_3                       :1;
      uint64_t  new_item_4                       :1;
      uint64_t  new_item_5                       :1;
      uint64_t  new_item_6                       :1;
      uint64_t  new_item_7                       :1;
      uint64_t  new_item_8                       :1;
      uint64_t  new_item_9                       :1;
      uint64_t  rfu                              :25;
     } fields;

} CAP_HWSetEvents_t;






typedef union CAM_HWSetEvents_u
{
   uint32_t all;

   struct
   {

      uint32_t  camAllocationRequest              :1;
      uint32_t  camReleaseReq                     :1;
      uint32_t  camArrayFull                      :1;
      uint32_t  camRegisterRequest1               :1;
      uint32_t  camRegisterRequest2               :1;
      uint32_t  camRegisterRequest3               :1;
      uint32_t  rfu                               :26;
    } fields;
} CAM_HWSetEvents_t;






typedef union RS_HWSetEvents_u
{
   uint32_t all;

   struct
   {
      uint32_t  rsPool0                        :1;
      uint32_t  rsPool1                        :1;
      uint32_t  rsDataPathLSBS                 :1;
      uint32_t  rsDataPathHSBS                 :1;
      uint32_t  rsReleaseLSBS                  :1;
      uint32_t  rsReleaseHSBS                  :1;
      uint32_t  rsVirtualPoolAllocation        :1;
      uint32_t  rsRealPoolAllocation           :1;
      uint32_t  rsTransition                   :1;
      uint32_t  rsStarved0                     :1;
      uint32_t  rsStarved1                     :1;
      uint32_t  rsStarved2                     :1;
      uint32_t  rsStarved3                     :1;
      uint32_t  rsValidationBlock1             :1;
      uint32_t  rsValidationBlock2             :1;
      uint32_t  rsValidationAllocation_block1  :1;
      uint32_t  rsValidationAllocation_block2  :1;
      uint32_t  rsConfiguration1               :1;
      uint32_t  rsConfiguration2               :1;
      uint32_t  rsAccess_details1              :1;
      uint32_t  rsAccess_details2              :1;
      uint32_t  rsRABuffAllocated              :1;
      uint32_t  rsRABuffReleased               :1;
      uint32_t  rsPowerAllocated               :1;
      uint32_t  rsPowerReleased                :1;
      uint32_t  rsStarved4                     :1;
      uint32_t  rsStarved5                     :1;
      uint32_t  rsStarved6                     :1;
      uint32_t  rsAllocationDone               :1;
      uint32_t  rsAccessDetails3               :1;
      uint32_t  rsException                    :1;
      uint32_t  rsDpcPowerChange               :1;
    } fields;
}   RS_HWSetEvents_t;





typedef union LDPC_ENC_HWSetEvents_u
{
   uint32_t all;
   struct
   {
      uint32_t  ldpcENCNewDescriptorFetch      :1;
      uint32_t  ldpcENCOperationStart          :1;
      uint32_t  ldpcENCSectorAvailable         :1;
      uint32_t  ldpcENCSectorRelease           :1;
      uint32_t  rfu                            :28;
    } fields;
}   LDPC_ENC_HWSetEvents_t;






typedef union LDPC_DEC_HWSetEvents_u
{
   uint32_t all;

   struct
   {
      uint32_t  ldpcDECNewDescriptorFetch      :1;
      uint32_t  ldpcDECOperationStart          :1;
      uint32_t  ldpcDECSectorAvailable         :1;
      uint32_t  ldpcDECSectorRelease           :1;
      uint32_t  ldpcDECBER                     :1;
      uint32_t  ldpcDECModeSwitch              :1;
      uint32_t  ldpcDECOperationComplete       :1;
      uint32_t  ldpcDECStatus1                 :1;
      uint32_t  ldpcDECStatus2                 :1;
      uint32_t  rfu                            :23;
     } fields;

}   LDPC_DEC_HWSetEvents_t;





typedef union DPCA_HWSetEvents_u
{
   uint32_t all;

   struct
   {
      uint32_t  dpcaCounterUpdate0             :1;
      uint32_t  dpcaCounterUpdate1             :1;
      uint32_t  dpcaGroupNotification          :1;
      uint32_t  rfu                            :29;
   } fields;

}   DPCA_HWSetEvents_t;




typedef union FE_HWSetEvents_u
{
   uint32_t all;

   struct
   {

      uint32_t fePCIELinkStatusChange                     :1;
      uint32_t feHostCommandReception                     :1;
      uint32_t feHACommandQueueing                        :1;
      uint32_t feHNVMEDescriptorQueueing                  :1;
      uint32_t feHSECDescriptorQueueing                   :1;
      uint32_t feHMBCDescriptorQueueing                   :1;
      uint32_t feHNVMEDescriptorCompletion                :1;
      uint32_t feHSECDescriptorCompletion                 :1;
      uint32_t feHMBCDescriptorCompletion                 :1;
      uint32_t feNEWDescriptorFetched                     :1;
      uint32_t feSectorRelease                            :1;
      uint32_t feSectorAvailable                          :1;
      uint32_t feHAWAHABMDescriptorGenUpper               :1;
      uint32_t feHAWAHABMDescriptorGenLower               :1;
      uint32_t feHWDContextGeneration                     :1;
      uint32_t feFlatLBAUpper                             :1;
      uint32_t feFlatLBAMiddle                            :1;
      uint32_t feFlatLBALower                             :1;
      uint32_t feHAIrq                                    :1;
      uint32_t feHABMIrq                                  :1;
      uint32_t feHAWAIrq:                                  1;
      uint32_t feHSECrq                                   :1;
      uint32_t feHNVMErq                                  :1;
      uint32_t feHAFSM                                    :1;
      uint32_t feHABMFSM                                  :1;
      uint32_t feHAWAFSM                                  :1;
      uint32_t feHNVMEFSM                                 :1;
      uint32_t feHMBCDescQ                                :1;
      uint32_t feHMBCFSM                                  :1;
      uint32_t feCmdLen                                   :1;
      uint32_t feCmdAttr                                  :1;
      uint32_t feCmdCmpl                                  :1;
   } fields;
}   FE_HWSetEvents_t;




typedef union FIM_HWSetEventsControl_u
{
   uint32_t all;

    struct
    {
        uint32_t  fimEvent0      :1;
        uint32_t  fimEvent1      :1;
        uint32_t  fimEvent2      :1;
        uint32_t  fimEvent3      :1;
        uint32_t  fimEvent4      :1;
        uint32_t  fimEvent5      :1;
        uint32_t  fimEvent6      :1;
        uint32_t  fimEvent7      :1;
        uint32_t  fimEvent8      :1;
        uint32_t  fimEvent9      :1;
        uint32_t  fimEvent10      :1;
        uint32_t  fimEvent11      :1;
        uint32_t  fimEvent12      :1;
        uint32_t  fimEvent13      :1;
        uint32_t  fimEvent14      :1;
        uint32_t  fimEvent15      :1;
        uint32_t  fimEvent16      :1;
        uint32_t  rfu             :15;
    } fields;
} FIM_HWSetEventsControl_t;





typedef union CAP_HWSetEventsControl_u
{
   uint8_t all;

    struct
    {
        uint8_t  capEvent0      :1;
        uint8_t  capEvent1      :1;
        uint8_t  capEvent2      :1;
        uint8_t  capEvent3      :1;
        uint8_t  capEvent4      :1;
        uint8_t  capEvent5      :1;
        uint8_t  capEvent6      :1;
        uint8_t  capEvent7      :1;
    } fields;
} CAP_HWSetEventsControl_t;




typedef union CAM_HWSetEventsControl_u
{
   uint8_t all;

    struct
    {
        uint8_t  camEvent0      :1;
        uint8_t  camEvent1      :1;
        uint8_t  reserved       :6;
    } fields;
} CAM_HWSetEventsControl_t;




typedef union MISC_HWSetEventsControl_u
{
   uint8_t all;
    struct
    {
        uint8_t  rsEvent           :1;
        uint8_t  ldpcEncEvent      :1;
        uint8_t  ldpcDecEvent      :1;
        uint8_t  dpcaEvent         :1;
        uint8_t  feEvent           :1;
        uint8_t  reserved          :3;
    } fields;
} MISC_HWSetEventsControl_t;




typedef struct ALL_HWSetEventsControl_s
{
   FIM_HWSetEventsControl_t  fimEventbitmap;
   CAP_HWSetEventsControl_t  capEventbitmap;
   CAM_HWSetEventsControl_t  camEventbitmap;
   MISC_HWSetEventsControl_t miscEventflags;
   uint8_t                   rfu[5];
} ALL_HWSetEventsControl_t;





typedef struct Control_SetEvents_s
{
   ALL_HWSetEventsControl_t   allHWControlflags;

   FIM_HWSetEvents_t          fimHWSetEvents[ ( 4 ) ];
   CAP_HWSetEvents_t          capHWSetEvents[ ( 4 ) ];

   CAM_HWSetEvents_t          camHWSetEvents[ 2 ];
   RS_HWSetEvents_t           rsHWSetEvents;
   LDPC_ENC_HWSetEvents_t     ldpcEncHWSetEvents;
   LDPC_DEC_HWSetEvents_t     ldpcDecHWSetEvents;
   DPCA_HWSetEvents_t         dpcaHWSetEvents;
   FE_HWSetEvents_t           feHWSetEvents;

}  Control_SetEvents_t;

#line 26 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"

#line 64 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
static Status_t FADI_MP_POSTPONED_ERRORLOG(uint32_t logCode, ...)  {return STATUS_OK;}
static Status_t FADI_MP_BIG_DUMP(uint32_t dumpType, ...)           {return STATUS_OK;}
static Status_t FADI_MP_FORMATTED_BIG_DUMP(uint32_t bufType, ...)  {return STATUS_OK;}

#line 92 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
void FADI_SetMountBmlDone(BOOL32 isBmlMountEnd);


BOOL32 FADI_IsMountBmlDone();






enum FADI_SaveFailuresDumpTrigger_e
{
   FADI_SAVE_TGT_DONT_USE,
   FADI_SAVE_TGT_AGING,
   FADI_SAVE_TGT_SMART,
   FADI_SAVE_TGT_ERR_LOG,
   FADI_SAVE_TGT_FATAL_ASSERT,
   FADI_SAVE_TGT_TEST,
   FADI_SAVE_TGT_HOST_TELEMETRY,
   FADI_SAVE_TGT_INTERNAL_TEST,
};
typedef uint16_t FADI_SaveFailuresDumpTrigger_t;

#line 126 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
typedef struct DebugControlSignatures_s
{
   uint16_t                   validSignature;
   uint16_t                   flashValidSignature;

} DebugControlSignatures_t;

typedef struct DbgCntrlSignatures_s
{
   uint16_t                   validSig;
   uint16_t                   rfu;

} DbgCntrlSignatures_t;

typedef struct ControlFWFlt_s
{
   uint32_t                   atbFlt0;
   uint32_t                   atbFlt1;
   uint32_t                   atbFlt2;
   uint32_t                   atbFlt3;

} ControlFWFlt_t;

typedef struct Control_Debug_Param1_s
{
   DebugControlSignatures_t   cfgsetSignatures;
   Control_SetEvents_t        hwControlSetEvents;
   PS_DebugControl_t          psDebugControl;
   uint32_t                   reserved[2];
}  Control_Debug_Param1_t;

typedef struct Cntrl_Dbg_Param2_s
{
   DbgCntrlSignatures_t       cfgsetSigFW;
   FW_Debug_Control_t         fwDebugCtrl;
   ControlFWFlt_t             fwFlt;
}  Cntrl_Dbg_Param2_t;


typedef struct Control_Debug_Params_s
{
   Control_Debug_Param1_t        controlDebugParams;
   Cntrl_Dbg_Param2_t             controlDebugFWParams;
}  Control_Debug_Params_t;





typedef struct PS_Control_Debug_Feature_s
{
   CFG_SetHdr_t                         setHdr;
   Control_Debug_Params_t               psDebug;
}   Control_Debug_Feature_t;

typedef struct PS_MLP_FatalAssertParams_s
{
    uint8_t  core;
    uint8_t  thread;
    uint8_t  memoryCorruption;
    uint8_t  active;
}PS_MLP_FatalAssertParams_t;






Status_t  __attribute__((section("TRW")))  FADI_Init(SysBootPhase_t bootPhase);
void     FADI_FatalPostReset(void);
void      __attribute__((section("CODE_MEDIUM")))  FADI_FatalResetInit(void);
void      __attribute__((section("CODE_MEDIUM")))  FADI_CreateFatalAssertEntry(void);
void     FADI_FatalPs0Isr(void);
void     FADI_FatalPs1Isr(void);



Status_t FADI_BuildErrorLogBase(uint8_t * pDest);
void     FADI_ProcessFatAssFromPS(uint32_t psAsserting);
void     FADI_ProcessFatAssFromLLFS(void);
Status_t FADI_FlushBootPage(BOOL32 ifImmediate);


extern uint32_t gINFRARequestHandlerGlobal;

void     FADI_EnableNandAccess(void);
void     FADI_DisableNandAccess(void);
void     FADI_EnableCallBackTimer(void);
void     FADI_DisableCallBackTimer(void);
Status_t FADI_DumpManagerInit(void);
Status_t FADI_DumpMgrCheckAddr(uint32_t firstFMU, uint32_t numBytes, BOOL checkErrorLog);
Status_t FADI_DumpMgrRead(uint32_t firstFMU, uint32_t byteCount, uint32_t * pBuf, BOOL checkErrorLog, uint16_t regionType);
Status_t FADI_FillDumpFooter(FADI_Dump_Footer_t * pFooter, uint8_t dumpRegion, uint8_t dumpType, uint8_t logType, uint16_t fmuCnt);
Status_t FADI_DumpMgrStatistics(uint32_t byteCount, uint32_t * pBuf);
uint32_t FADI_GetErrorLogSize(void);
uint32_t FADI_GetEventLogSize(void);
Status_t FADI_TestBigDumpWrapper(uint32_t test);
Status_t FADI_SaveDumpDataToBuff(FADI_Big_Dump_Pass_Params_t *pBigDumpParams);
Status_t FADI_GenerateFadiEntriesForFVT(uint32_t severity, uint32_t threadOrCPU, uint32_t *pFiveParms);
Status_t FADI_ErrorLogEntryPSorThreads(uint32_t severity, uint32_t threadOrCPU, uint32_t *pFiveParms);
Status_t FADI_TraceLogEntryPSorThreads(uint32_t severity, uint32_t threadOrCPU, uint32_t *pFiveParms);

void     FADI_CollectionControl(BOOL);
BOOL32   FADI_IsNandAccessible(void);
BOOL32   FADI_Disable(void);
void     FADI_Enable(void);
void     FADI_SaveFADumps(FADI_SaveFailuresDumpTrigger_t triggerReason);
BOOL32   FADI_AreDebugPortsOpen(void);
Status_t FADI_DumpRtMp(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_DumpRtPs0(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);


Status_t FADI_DumpRtPs1(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);

Status_t FADI_DoASingleSetEventsSave(uint8_t dumpPartition, DumpCallBack callBackAddr, FADI_SaveFailuresDumpTrigger_t triggerReason);
Status_t FADI_ErrorLogSETEvens(uint8_t * pErrorlogEventLoc, uint32_t size, uint8_t dumpRegion);
uint32_t FADI_GetBootFatalAssertedStatus(void);
void     FADI_SetBootFatalAssertedStatus(uint16_t status);
Status_t   FADI_AllocateBigDumpBuffer(FADI_Big_Dump_Pass_Params_t *pBigDumpParams);

void     FADI_FatalPostResetProccess(void);










void     FADI_RealTimeSample(void);

#line 273 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/fadi_apis.h"
void     FADI_FatalPreReset(SYS_FwExceptionData_tp fwExpData);

void SYS_DiagInjectFatalAssertCallback(void);

void FADI_DiagFatalAssert(void);


uint32_t FADI_GetJTAGSnapshotSize(void);
void  __attribute__((section("CODE_SLOW")))  FADI_GetRestJtagSnapOffsetToRead(uint8_t restJtagReadReqIndx, uint32_t* fmuToRead, uint16_t* regionToRead);


Status_t FADI_CFG_Debug_Control_Init(void);
Status_t FADI_SetCfg_Debug_Control(void);
Status_t FADI_SetCfg_Default_Debug_Control(void);
void     FADI_FatalAssertDie(void);
void     INFRA_ISR_Request_Handler(void);

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_assert.h"

#line 57 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_assert.h"
extern void ROMTrace( void *pData, ...);

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/distributer/inc_public/sys_dist_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/ps/inc_public/sys_ps_comm.h"

#line 20 "d:/gitrepo/fpgcss-vega/source/infra/modules/distributer/inc_public/sys_dist_api.h"

#line 32 "d:/gitrepo/fpgcss-vega/source/infra/modules/distributer/inc_public/sys_dist_api.h"
enum PMM_TransitionStep_e
{
   PMM_STEP_FE = 0,
   PMM_STEP_FTL,
   PMM_STEP_SEC,
   PMM_STEP_IFS,
   PMM_STEP_PS,
   PMM_STEP_PCU,
   PMM_STEP_DONE,
   PMM_STEP_NA = 99,
};
typedef uint32_t PMM_TransitionStep_t;

enum PMM_PS_SubStep_e
{
   PMM_PS_SUBSTEP_FIRST_BARRIER,
   PMM_PS_SUBSTEP_SECOND_BARRIER,
   PMM_PS_SUBSTEP_PST_MSG,
   PMM_PS_SUBSTEP_READY_TO_LPM_MSG,
   PMM_PS_SUBSTEP_PST_PREPARE_PS,
};
typedef uint32_t PMM_PS_PowerSubStep_t;


enum PMM_PowerState_e
{
   PMM_PS0,
   PMM_PS1,
   PMM_PS2,
   PMM_PS3,
   PMM_PS4,
   PMM_PS5,
   PMM_NUM_OF_PS,
   PMM_PST_FFU_RESET_SHUTDOWN = 29,
   PMM_PST_FFU_IA_SHUTDOWN = 30,
   PMM_PST_FFU_IA_ACTIVATE = 31,
   PMM_PST_RO = 32,
   PMM_PST_SHN = 33,
   PMM_PST_RESET_DEACTIVATE = 34,
   PMM_PST_RESET_ACTIVATE = 35,
   PMM_PST_POWER_ON_ACTIVATE = 36,
   PMM_PST_ACTIVE = 97,
   PMM_PST_WAKEUP = 98,
   PMM_PST_START_RFM = 99,
   PMM_PST_EXIT_L12 = 100,
   PMM_PST_NA = 101
};
typedef uint32_t PMM_PowerState_t;

#line 92 "d:/gitrepo/fpgcss-vega/source/infra/modules/distributer/inc_public/sys_dist_api.h"
enum PMM_MSG_OPCode_e
{
   PMM_MSG_OPCODE_START_PST = 0,
   PMM_MSG_OPCODE_ABORT_PST,
   PMM_MSG_OPCODE_WAKEUP_PST,
   PMM_MSG_OPCODE_AON_PST,
   PMM_MSG_OPCODE_RS_PST,
   PMM_MSG_OPCODE_RESET_DEACTIVATE,
   PMM_MSG_OPCODE_RESET_ACTIVATE,
   PMM_MSG_OPCODE_PREPARE_TO_L12,
   PMM_MSG_OPCODE_EXIT_L12_PREPARATIONS,
   PMM_MSG_OPCODE_COMPLETED,
};
typedef uint32_t PMM_MSG_OPCode_t;









typedef struct PMM_EventMsg_s
{
   PMM_MSG_OPCode_t OPCode;
   uint32_t Msg[2];
} PMM_EventMsg_t;

#line 135 "d:/gitrepo/fpgcss-vega/source/infra/modules/distributer/inc_public/sys_dist_api.h"
Status_t  __attribute__((section("TRW")))  SYS_DIST_Init(void);

Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_DIST_StartPST(PMM_PowerState_t powerState);

Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_DIST_Reset(uint32_t resetType, uint32_t activate_flag);

Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_DIST_AbortPST(void);

Status_t  __attribute__((section("CODE_MEDIUM")))  SYS_DIST_WakeUpFromSleep(void);

void                       SYS_DIST_CallMeWhenComplete(PMM_TransitionStep_t PMMStep, Status_t PMMStatus);

void  __attribute__((section("CODE_MEDIUM")))      SYS_DIST_HandleEvent(uint32_t eventBitmap);

BOOL32  __attribute__((section("CODE_MEDIUM")))    SYS_DIST_IsStepBeyondIFS(void);

PMM_PowerState_t           SYS_DIST_GetCurrPowerState(void);
PMM_PowerState_t           SYS_DIST_GetNextPowerState(void);

PMM_PowerState_t           SYS_DIST_GetDeviceState(void);
void  __attribute__((section("CODE_MEDIUM")))      SYS_DIST_ResetFEPSTParam(void);

void  __attribute__((section("CODE_MEDIUM")))      SYS_DIST_PSHandler(PMM_PowerState_t NewPowerState, PMM_PowerState_t CurrPowerState, PMM_PS_PowerSubStep_t PS_PowerSubStep, Mail_t PS_mail[]);
void                       SYS_DIST_PSRecvedMsghandler(PS_ReqGeneric_t* PSMsg);

void   SYS_DIST_GetStateAndProgress(BOOL* pIsInProgress, PMM_PowerState_t* pStateInProgress);
BOOL32 SYS_DIST_IsPrepareToLowPowerStateInProgress();

#line 23 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/ipc/inc_public/sys_socpcuif.h"

#line 56 "d:/gitrepo/fpgcss-vega/source/infra/modules/ipc/inc_public/sys_socpcuif.h"
enum PMM_MSG_ID_e
{
   PMM_MSG_ID_ENTER_DPS = 0,
   PMM_MSG_ID_AON_RESET,
   PMM_MSG_ID_DIAG_I2C,
   PMM_MSG_ID_READ_TMP103_SENS,
   PMM_MSG_ID_SET_NVME_PS,
   PMM_MSG_ID_APST_NON_OPERATIONAL_STATE_TIMER,
   PMM_MSG_ID_APST_NON_OPERATIONAL_STATE_TIMER_CANCEL,
   PMM_MSG_ID_POWER_OFF_DEVICE,
   PMM_MSG_ID_APST_RE_ENTRY,
   PMM_MSG_ID_LTR_D3HOT_DISABLE,
   PMM_MSG_ID_LTR_D3HOT_ENABLE,
   PMM_MSG_ID_DISABLE_ALL_TIMERS,
   PMM_MSG_ID_EFUSE_WRITE_ENABLE,
   PMM_MSG_ID_START_DAS,
   PMM_MSG_ID_SEND_TM_PCB_TEMP,
   PMM_MSG_ID_SMB_CFG_SET,
   PMM_MSG_ID_HOST_IDLE_TIMER_TO_FLUSH,
   PMM_MSG_ID_HOST_IDLE_TIMER_TO_FLUSH_CANCEL,

   PMM_MSG_ID_CLKREQ_INTERRUPT,

   PMM_MSG_ID_INFRA_IS_READY,
   PMM_MSG_ID_PLP_READY_DONE,
   PMM_MSG_ID_PLP_ENABLE,
   PMM_MSG_ID_PLP_DISABLE,
   PMM_MSG_ID_PLP_DISABLE_INTERRUPT,
   PMM_MSG_ID_PLP_ENABLE_INTERRUPT,
   PMM_MSG_ID_UART_INTERRUPT_ENABLE,
   PMM_MSG_ID_UART_INTERRUPT_DISABLE,
   PMM_MSG_ID_D3_MSG_REQUIRED,
   PMM_MSG_ID_D3_MSG_NOT_REQUIRED,
   PMM_MSG_ID_UART_TX_REQ_AVAILABLE,

   PMM_MSG_ID_TTE_START_WAKEUP_PHASE_TIMER,
   PMM_MSG_ID_TTE_STOP_WAKEUP_PHASE_TIMER,

   PMM_MSG_ID_PMIC_CFG,
   PMM_MSG_CHANGE_LINK_STATE,
   PMM_MSG_LINK_IDLE_APPROVAL,
   PMM_MSG_PME_TO_ENTER_EIB_POLLING_MODE,
   PMM_MSG_D3COLD_DETECTED              ,
   PMM_MSG_ID_I2C_SET_PRESCALER,

   PMM_MSG_ID_PMIC_ERROR_INJECT,

   PMM_MSG_ID_PLP_CANCEL_FINISHED,
   PMM_MSG_SWITCH_IEX_QUEUE_TOKEN_TO_PCU,
   PMM_MSG_ID_FE_PM_RST_FINISH,
   PMM_MSG_ID_PCIE_REQ_LINK_STATE,

#line 111 "d:/gitrepo/fpgcss-vega/source/infra/modules/ipc/inc_public/sys_socpcuif.h"
};

typedef uint16_t  PMM_MSG_ID_t;

enum PMM_MPCTransaction_e
{
   PMM_MPC_TR_PUSH_MP_MESSAGE,
   PMM_MPC_TR_PUSH_PCU_MESSAGE,
   PMM_MPC_TR_PULL_MP_MESSAGE,
   PMM_MPC_TR_PULL_PCU_MESSAGE
};
typedef uint32_t PMM_MPCTransaction_t;




enum PMM_DiagI2c_e
{
   WRITE_I2C = 0,
   READ_I2C,
   WRITE_I2C_SPECIAL,
};
typedef uint32_t PMM_DiagI2c_t;

enum PMM_I2cBus_e
{
   PMIC_I2C = 0,
};
typedef uint32_t PMM_I2cBus_t;

#line 207 "d:/gitrepo/fpgcss-vega/source/infra/modules/ipc/inc_public/sys_socpcuif.h"
typedef unsigned char PMM_TimersType_t;








typedef union PMM_MPC_Diag_I2C_e
{
   uint32_t   all;
   struct
   {
      uint32_t index: 8;
      uint32_t data: 8;
      uint32_t read: 8;
      uint32_t i2cBus: 8;
   } mBits;
} PMM_MPC_Diag_I2C_t;



typedef union MPPCU_IPC_Msg_Header_s
{
   struct Msg_Header_s
   {
      uint32_t msgId:16;
      uint32_t sessionId:16;
   }bits;
   uint32_t all32;
}   MPPCU_IPC_Msg_Header_t;

typedef struct PMM_MSG_s
{
   MPPCU_IPC_Msg_Header_t hdr;
   uint32_t Arg;
}   PMM_MSG_t;


typedef struct PCU_MSG_s
{
   MPPCU_IPC_Msg_Header_t hdr;
   uint32_t Arg;
}   PCU_MSG_t;


typedef struct PCU_AnswerDiagMsg_s
{
   volatile uint8_t hasPcuAnswered;
   volatile uint8_t val;
   uint16_t pad;
}   PCU_AnswerDiagMsg_t;


typedef struct PCU_MSGQueue_s
{
   volatile uint16_t HeadIdx;
   volatile uint16_t TailIdx;
   PCU_MSG_t Msg[ ( 8  + 1) ];
   PCU_AnswerDiagMsg_t pcuAnswerDiag;
}   PCU_MSGQueue_t;


typedef struct PMM_MSGQueue_s
{
   volatile uint16_t HeadIdx;
   volatile uint16_t TailIdx;
   PMM_MSG_t Msg[ ( 8  + 1) ];
}   PMM_MSGQueue_t;






void  __attribute__((section("CODE_MEDIUM")))  PMM_SendMsgToPCU(PMM_MSG_ID_t msgID, uint16_t sessionId, uint32_t msgArg);
void  __attribute__((section("CODE_MEDIUM")))  PMM_PutPCUMsg(PMM_MSG_ID_t msgID, uint32_t msgArg);
void  __attribute__((section("CODE_MEDIUM")))  PMM_PutTimerPCUMsg(PMM_MSG_ID_t msgID, uint16_t sessionId, uint32_t msgArg);
void                   PMM_HandlePCUMsg(void);
Status_t  __attribute__((section("TRW")))  PMM_Init(void);

#line 24 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set.h"

#line 66 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set.h"
typedef enum
{
  SET_ALL_EVENT_DISABLE,
  SET_ROM_EVENTS,
  SET_DLE_EVENTS,
  SET_RAM_EVENTS,
  SET_TBRAM_EVENTS,
  SET_IDLE_EVENTS,
} SET_LINK_INIT_HW_EVENTS_t;


typedef enum
{
  SET_ATB_NUM_BITS_8,
  SET_ATB_NUM_BITS_4,
} SET_NUM_OF_ATB_BITS_t;









typedef struct SET_ROM_FW_FILTERS
{
  uint32_t fwGroupsATB[ 4 ];
  uint32_t fwGroupsTBRAM[ 4 ];
} SET_ROM_FW_FILTERS_t;


typedef struct SET_ROM_COREIP_ENABLE
{
  uint32_t fwGroupsATB[ 4 ];
  uint32_t fwGroupsTBRAM[ 4 ];
} SET_ROM_COREIP_ENABLE_t;




typedef enum
{
   SET_SUBMODE_RMA_ON = 3,
   SET_SUBMODE_RMA_ON_HIM,
   SET_SUBMODE_RMA_ON_FIM0,
   SET_SUBMODE_RMA_ON_FIM1,
   SET_SUBMODE_RMA_ON_FIM2,
   SET_SUBMODE_RMA_ON_FIM3,
   SET_SUBMODE_RMA_ON_FIM4,
   SET_SUBMODE_RMA_ON_FIM5,
   SET_SUBMODE_RMA_ON_FIM6,
   SET_SUBMODE_RMA_ON_FIM7,
   SET_SUBMODE_RMA_ON_PWR = 0x13,
   SET_SUBMODE_RMA_ON_HIM_PWR,
   SET_SUBMODE_RMA_ON_FIM0_PWR,
   SET_SUBMODE_RMA_ON_FIM1_PWR,
   SET_SUBMODE_RMA_ON_FIM2_PWR,
   SET_SUBMODE_RMA_ON_FIM3_PWR,
   SET_SUBMODE_RMA_ON_FIM4_PWR,
   SET_SUBMODE_RMA_ON_FIM5_PWR,
   SET_SUBMODE_RMA_ON_FIM6_PWR,
   SET_SUBMODE_RMA_ON_FIM7_PWR,
}SET_SUBMODE_RMA;




typedef enum
{
   SET_CONFIG_HSSTP_ATB_GROUP_ID_FILTER,
   SET_CONFIG_TBRAM_GROUP_ID_FILTER,
   SET_CONFIG_HSSTP_ATB_TBRAM_GROUP_ID_FILTER,
}SET_GROUP_ID_FILTER_HANDLE;


typedef enum
{
   SET_CONFIG_EVENT_HARD_RESET_ROM,
   SET_CONFIG_EVENT_SOFT_RESET_ROM,
   SET_CONFIG_EVENT_IN_DLE,
   SET_CONFIG_EVENT_IN_FLASHWARE,
   SET_CONFIG_EVENT_IN_BOOT_LOADER,
   SET_SENDING_DRIVE_SERIAL_NUM,
   SET_CONFIG_EVENT_TIMER_SYNC,
   SET_CONFIG_EVENT_DPD2_START,
   SET_CONFIG_EVENT_DPS2_END,
   SET_CONFIG_EVENT_DPS3_1_START,
   SET_CONFIG_EVENT_DPS3_1_END,
   SET_CONFIG_EVENT_IN_ROM,
   SET_CONFIG_EVENT_DPS3_2_START,
   SET_CONFIG_EVENT_DPS3_2_END,
   SET_CONFIG_EVENT_LAST
} SET_CONFIG_EVENTS_t;


typedef enum
{
   SET_HSSTP_LOCKED,
   SET_HSSTP_LISTENING,
   SET_HSSTP_SENDING,
} SET_ATB_STATES_t;

#line 200 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set.h"
typedef struct SET_EVENT_DUMP_HEADER_s
{
   uint32_t numberOfBytesInDump;
   uint32_t status;
} SET_EVENT_DUMP_HEADER_t;







typedef struct SET_ControlBlock_s
{
   uint32_t headSig;
   const    SET_ROM_COREIP_ENABLE_t * pSETFilterConfig;
   uint32_t ATBClkFreq;
   uint32_t TimeStampsNanoSecPerClick;
   uint32_t tbRamAddrStart;
   uint32_t tbRamAddrEnd;
   uint32_t tbramWraps;
   uint32_t atbSubM;
   uint32_t subMFlag;
   uint32_t rfu_1;
   uint32_t rfu_2;
   uint16_t tbRAMAddrSaved;
   uint8_t  driveState;
   uint8_t  runningState;
   uint8_t  numberOfxPlorerSyncsSent;
   uint8_t  setTsCfg;
   uint8_t  hsstpState;
   uint8_t  atbSendOn;
   uint8_t  internalTestMode;
   uint8_t  ts07LsbOffset;
   uint8_t  ts12LsbOffset;
   uint8_t  ts16LsbOffset;
   uint8_t  ts21LsbOffset;
   uint8_t  ts24LsbOffset;
   uint8_t  setTimerPrescaler;
   uint8_t  msts21LsbOffset;
   uint8_t  reserved1;

} SET_ControlBlock_t;

#line 282 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set.h"
void                 SET_EnableDEBUG_RAM(void);
void                 SET_EnableTimers(void);
void                 SET_DisableTimer(void);
void                 SET_EnableSupressionOfTimeStampWrapEvents(void);
void                 SET_ResetAll(void);
void                 SET_TS7Resolution(uint8_t lsbLocation);
void                 SET_TS12Resolution(uint32_t lsbLocation);
void                 SET_TS16Resolution(uint32_t lsbLocation);
void                 SET_TS24Resolution(uint32_t lsbLocation);
void                 SET_ActivateCPU(uint32_t cpuNum);
void                 SET_ConfigureDebugRAM(uint32_t debugRAMSize);
BOOL                 SET_InitControlBLock(void);
void                 SET_InitTBRAM(uint32_t debugRAMSize);
void                 SET_EnableAllFWEventsToRAM(BOOL enableAll, uint32_t ngsetIndex);
void                 SET_EnableAllHWEventsToRAM(BOOL enableAll, uint32_t ngsetIndex);
void                 SET_EnableAllFWEventsToATB(BOOL enableAll);
void                 SET_EnableMediumFWEventsToATB(void);
void                 SET_EnableCustomFWEventsToATB(uint32_t flt_0, uint32_t flt_1, uint32_t flt_2, uint32_t flt_3);
void                 SET_SendInfo(uint32_t setLevel);
uint32_t               SET_GetFWGroupEventsHSSTP_ATB(uint32_t filterRegBank);
Status_t             SET_EnableFWEventGroupID(uint32_t groupID, SET_GROUP_ID_FILTER_HANDLE applyFilterTo, BOOL turnOn);
void                 SET_MainCPUThread(uint32_t thread);
void                 SET_InitHWEvents(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
Status_t             SET_InitRomHwEvents(void);
void                 SET_InitRamHwEvents(void);
uint32_t             SET_GetTSConfigurationOption(void);
void                 SET_ConfigureRunStateInCB(SET_CONFIG_EVENTS_t           newRunState);
SET_CONFIG_EVENTS_t  SET_ReturnRunState(       void);
void                 SET_ConfigureFWATBFilters(void);
void                 SET_ConfigureFWEventFilters(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
void                 SET_ConfigureAllEventFilters(SET_LINK_INIT_HW_EVENTS_t eventsGrpProfile);
Status_t             SET_ConfigureManyFimHwEvents(BOOL enableEvents, uint32_t fimBitMap, uint32_t eventsBitmap);
uint32_t               SET_FimHwEventsStatus(uint32_t fimIndex);
Status_t             SET_ConfigureOneFimHwEvents(BOOL enableEvents, uint32_t fimIndex, uint32_t eventsBitMap);
Status_t             SET_ConfigureOneCapHwEvents(BOOL enableEvents, uint32_t capIndex, uint64_t eventsBitMap);
Status_t             SET_ConfigureOneCamHwEvents(BOOL enableEvents, uint32_t capIndex, uint32_t eventsBitMap);
uint32_t               SET_CamHwEventsStatus(uint32_t camIndex);
Status_t             SET_ConfigureManyCapHwEvents(BOOL enableEvents, uint32_t capBitMap, uint64_t eventsBitmap);
uint32_t               SET_CapHwEventsStatus(uint32_t capIndex);
Status_t             SET_ConfigureManyCamHwEvents(BOOL enableEvents, uint32_t capBitMap, uint32_t eventsBitmap);
Status_t             SET_ConfigureDpcaHwEvents(BOOL enableEvents, uint32_t eventsBitMap);
uint32_t               SET_DpcaHwEventsStatus(void);
void                 SET_DefaultFimHwEvents(void);
void                 SET_DefaultFeHwEvents(void);
void                 SET_DefaultCapHwEvents(void);
void                 SET_DefaultCamHwEvents(void);
void                 SET_DefaultRsHwEvents(void);
uint32_t               SET_RsHwEventsStatus(void);
void                 SET_DefaultLdpcDecoderHwEvents(void);
void                 SET_DefaultLdpcEncoderHwEvents(void);
uint32_t               SET_LpdcDecoderHwEventsStatus(uint32_t ldpcIdx);
uint32_t               SET_LpdcEncoderHwEventsStatus(void);
void                 SET_DefaultDpcaHwEvents(void);
void                 SET_InitDLEHwEvents(void);
void                 SET_SendTimeSync(void);
void                 SET_DisableAllEvents(void);
void                 NGSET_SynchroWhoTime_IdleStart(void);
void                 NGSET_SynchroWhoTime_IdleEnd(void);
void                 NGSET_SynchroWhoTime(void) ;
void                 NGSET_ResetNotification(void);
void                 SET_SendPeriodicSyncInfo(void);
uint32_t               SET_GetFWGroupEventsRAM(uint32_t filterRegBank);
uint32_t               SET_GetFWGroupEvents(uint32_t filterRegBank);
Status_t             SET_TransferTBRAMEventsToBuffer(uint32_t *pReturnBuffer, uint32_t numberOfEvents);
void                 SET_SaveTBRAMAddr(void);
void                 SET_RestoreTBRAMAddr(void);
void                 SET_InitPSSpeedUpVars(uint32_t *PS_InstanceForNGSET);
void                 SET_EnableBreadCrumbsEvents(SET_GROUP_ID_FILTER_HANDLE mode);

void                 SET_EnableAlwaysOnEvents(SET_GROUP_ID_FILTER_HANDLE mode);
void                 SET_EnableLLFSEventsToATB(BOOL enableAll);

 void     SET_TbramThreshAddeISR(void);

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"

#line 48 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
typedef enum SET_EVENT_GROUPS_t
{


SET_EVENT_GRP_HW_CORES_RESERVED,



SET_EVENT_GRP_FA_CONFIG_GRP_UID,

#line 65 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_ROM_FW_SET_EVENT_GRP_UID ,









SET_EVENT_GRP_DLE_FW_SET_EVENT_GRP_UID ,









SET_EVENT_GRP_ERROR_LOG_SET_EVENT_GRP_UID ,

#line 97 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FE_CRITICAL_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_BREAD_CRUMBS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_DEBUG_RMA_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_SMART_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_EXCEPTION_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_PERFORMANCE_SYS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_DEBUG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_DEALLOCATE_WZ_SET_EVENT_GRP_UID ,








SET_EVENT_GRP_FE_WUC_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_SERIALIZATION_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FE_ISR_DEBUG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_PMM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_FSM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FE_SHMOO_DEBUG_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FE_THERMAL_THROTTLING_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FE_FULL_DEBUG_SET_EVENT_GRP_UID ,









SET_EVENT_GRP_FE_HMBC_DEBUG_SET_EVENT_GRP_UID ,









SET_EVENT_GRP_FE_HAQ_SET_EVENT_GRP_UID ,

#line 250 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_INFRA_CRITICAL_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_INFRA_BREAD_CRUMBS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_INFRA_DEBUG_RMA_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_INFRA_DPA_POINTS_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_INFRA_PERIODIC_EVENTS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_INFRA_TIMING_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_INFRA_DEBUG_SET_EVENT_GRP_UID ,

#line 312 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_SEC_CRITICAL_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_SEC_BREAD_CRUMBS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_SEC_DEBUG_RMA_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_SEC_DEBUG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_SEC_USAGE_4_SET_EVENT_GRP_UID ,

#line 357 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_MST_DEBUG_SET_EVENT_GRP_UID ,

#line 370 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_FTL_CRITICAL_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_BREAD_CRUMBS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_DEBUG_RMA_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_SAT_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_FML_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_BMG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_RLC_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_MTM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_LOG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_BKOPS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_MVP_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_PSR_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_HWD_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_OVP_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_DALOC_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_OBM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_PRM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_PRM_DEBUG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_HRF_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_RS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_FTL_RSQ_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_MNT_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_DHM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_FNVM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_JBM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_FMG_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_FQD_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_MBM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_PWS_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_PWS_DEBUG_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_XORM_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_EI_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_WL_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_OBM_EXT_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_FXH_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_READONLY_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_BREAD_CRUMBS_PERF_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_SMART_SET_EVENT_GRP_UID ,







   SET_EVENT_GRP_FTL_DEBUG_RMA_PERF_SET_EVENT_GRP_UID ,








   SET_EVENT_GRP_FTL_RDT_SET_EVENT_GRP_UID ,








   SET_EVENT_GRP_FTL_FOR_FULL_DEBUG_SET_EVENT_GRP_UID ,










SET_EVENT_GRP_PS_1P0V_DEBUG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_CRITICAL_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_BREAD_CRUMBS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_RMA_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_RSV_DRV_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_BULLSEYE_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_REGRESSION_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_VALIDATION_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_DGM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_MQD_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_CVD_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_OTG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_EH_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_CH_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_BOOT_MAIN_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_XOR_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_RM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_RS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_RLC_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_HW_DRV_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_FLGP_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_BBM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_MISC3_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_3_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_ADM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_XOR_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_MISC1_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_ADM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_DEBUG_MISC3_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_DGM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_MQD_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_CVD_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_OTG_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_EH_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_CH_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_BOOT_MAIN_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_XOR_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_RM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_RS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_RLC_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_HW_DRV_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_FLGP_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_BBM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_RFM_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_2_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_PERF_1_SET_EVENT_GRP_UID ,

#line 1098 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PS_DEBUG_IFT_SET_EVENT_GRP_UID ,

#line 1110 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventgroups.h"
SET_EVENT_GRP_PCU_EVENTS_SET_EVENT_GRP_UID ,







SET_EVENT_GRP_PS_INIT_SET_EVENT_GRP_UID ,






SET_EVENT_GRP_LLFS_SET_EVENT_GRP_UID ,




SET_EVENT_GROUP_MAX,




}    SET_EVENT_GROUPS_t;

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventdictionary.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"

#line 39 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
typedef struct RTOS_QueueField_s
{
   struct RTOS_QueueField_s* next;
   struct RTOS_QueueField_s* prev;
} RTOS_QueueElement_t;

typedef struct
{
   RTOS_QueueElement_t* next;
   RTOS_QueueElement_t* prev;
   uint16_t             size;
   uint16_t             max;
} RTOS_Queue_t;







enum RTOS_Status_e
{

   RTOS_OK = STATUS_OK,
   RTOS_ERROR = STATUS_ERROR,


   RTOS_LWMSGQ_INVALID_PARAMETERS = STATUS_RTOS_ERROR_BASE,
   RTOS_LWMSGQ_INVALID,
   RTOS_LWMSGQ_FULL,
   RTOS_LWMSGQ_EMPTY,
   RTOS_LWMSGQ_TIMEOUT,
   RTOS_LWEVNT_INVALID_PARAMETERS,
   RTOS_LWEVNT_TIMEOUT,
   RTOS_LWEVNT_NO_EVENT_GROUPS_AVAILABLE,
   RTOS_FAST_MSG_Q_FULL,
   RTOS_LWSEMA_TIMEOUT,
   RTOS_LWSEMA_WAIT_ERROR,
   RTOS_LWSEMA_NO_DESTRUCTION,
   RTOS_LWSEMA_CREATE_FAIL,
   RTOS_RECEIVED_NULL_PTR,
}  ;

enum ThreadId_e
{
   THREAD_NON_RTOS        = 0,
   THREAD_ID_RAM_FE       = 1,
   THREAD_ID_RAM_INFRA,
   THREAD_ID_RAM_FTL,
   THREQD_ID_RAM_PS_UT    = THREAD_ID_RAM_FTL,
   THREAD_ID_RAM_SECURITY,



   THREAD_ID_RAM_PMM,

   THREAD_ID_RAM_SMB,
   THREAD_ID_DLE_FE       = THREAD_ID_RAM_FE,
   THREAD_ID_DLE_INFRA    = THREAD_ID_RAM_INFRA,
   THREAD_ID_DLE_SMB      = THREAD_ID_RAM_SMB,
   THREAD_ID_ISR,
}  ;

enum ThreadsRAM_e
{
   THREAD_RAM_ISR = 0,
   THREAD_RAM_FE = 1,
   THREAD_RAM_INFRA,


   THREAD_RAM_FTL,

#line 123 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
   THREAD_RAM_PMM,

#line 128 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
   NUM_OF_THREADS_RAM,
};

enum ThreadsDLE_e
{
   THREAD_DLE_ISR = 0,
   THREAD_DLE_FE,
   THREAD_DLE_INFRA,

#line 139 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
   NUM_OF_THREADS_DLE,
};

typedef uint16_t RTOS_ThreadType_t;

typedef struct
{
   RTOS_ThreadType_t threadType;
   uint16_t threadInstance;
} RTOS_ThreadInfo_t;







enum
{
   MAX_STACK_INFO_ENTRIES = 32,
}  ;

typedef struct SYS_DiagStackInfoEntry_s
{
   uint8_t  coreFunction;
   uint8_t  coreInstance;
   uint8_t  threadId;
   uint8_t  RTOS_Present               : 1;
   uint8_t  stackGrowsToHighAddress    : 1;
   uint8_t  rfuBits                    : 6;
   uint32_t stackHighAddr;
   uint32_t stackLowAddr;
   uint32_t stackPeakAddr;
}   SYS_DiagStackInfoEntry_t;

typedef struct SYS_DiagStackInfo_s
{
   uint8_t numberOfEntries;
   uint8_t rfu1;
   uint8_t rfu2;
   uint8_t rfu3;
   SYS_DiagStackInfoEntry_t stackInfoEntries[MAX_STACK_INFO_ENTRIES];
}   SYS_DiagStackInfo_t;

#line 247 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
void   RTOS_Enter(void);





typedef enum
{
   waitForAny,
   waitForAll
} RTOS_MaskWaitOptions;

typedef enum EventGroup_e
{

   EVENT_GROUP_NVME,
   EVENT_GROUP_INFRA,


   EVENT_GROUP_FTL,

#line 270 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
   EVENT_GROUP_SECURITY,

#line 278 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
   EVENT_GROUP_PMM,
   NUM_EVENT_GROUPS,
} EventGroup_t;

Status_t RTOS_LightWeightEventInit(void);
Status_t RTOS_LightWeightEventSet(EventGroup_t group, uint32_t bitMask);
Status_t RTOS_LightWeightEventClear(EventGroup_t group, uint32_t bitMask);
uint32_t RTOS_LightWeightEventSampleGroup(EventGroup_t group, uint32_t bitMask);
uint32_t RTOS_LightWeightEventWait(EventGroup_t group, uint32_t bitMask, RTOS_MaskWaitOptions waitOptions, uint32_t waitMs);

#line 298 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
void                 RTOS_QueueInit(RTOS_Queue_t* queue, uint32_t size);
BOOL                 RTOS_QueueEnqueue(RTOS_Queue_t* queue, RTOS_QueueElement_t* element);
RTOS_QueueElement_t* RTOS_QueueDequeue(RTOS_Queue_t* queue);
BOOL                 RTOS_QueueInsert(RTOS_Queue_t* queue, RTOS_QueueElement_t* afterThisElement, RTOS_QueueElement_t* elementToInsert);
RTOS_QueueElement_t* RTOS_QueueHead(RTOS_Queue_t* queue);
RTOS_QueueElement_t* RTOS_QueueNext(RTOS_Queue_t* queue, RTOS_QueueElement_t* afterThisElement);
void                 RTOS_QueueUnlink(RTOS_Queue_t* queue, RTOS_QueueElement_t* elementToRemove);
BOOL                 RTOS_QueueIsEmpty(RTOS_Queue_t* queue);
uint32_t             RTOS_QueueGetSize(RTOS_Queue_t* queue);




extern void RTOS_DelayMilliSeconds(uint32_t msDelay);





void* RTOS_Alloc(uint32_t numberOfBytes);

Status_t RTOS_Free(void* handle);




Status_t RTOS_FreeSecure(void* handle);






typedef struct
{
   RTOS_Queue_t      fastQ;
   RTOS_Queue_t      freePool;
   uint32_t          eventMask;
   EventGroup_t      eventGroup;
   void*             pFreeSemaphore;
} FastMessageQueue_t;

FastMessageQueue_t*  RTOS_FastMessageQueueCreate(FastMessageQueue_t* fastQueuePtr,
                                                 uint32_t elementSizeInBytes,
                                                 uint32_t numberOfElements,
                                                 EventGroup_t eventGroup,
                                                 uint32_t eventMask);

Status_t             RTOS_FastMessageQueueSend(FastMessageQueue_t* fastQueuePtr, RTOS_QueueElement_t* elementPtr);
RTOS_QueueElement_t* RTOS_FastMessageQueueReceive(FastMessageQueue_t* fastQueuePtr);
RTOS_QueueElement_t* RTOS_FastMessageQueueGetFree(FastMessageQueue_t* qPtr, BOOL block);
BOOL                 RTOS_FastMessageQueuePutFree(FastMessageQueue_t* qPtr, RTOS_QueueElement_t*);
BOOL                 RTOS_FastMesssageQueueIsEmpty(FastMessageQueue_t* qPtr);
uint16_t             RTOS_FastMesssageQueueSize(FastMessageQueue_t* qPtr);





void*    RTOS_LightWeightSemaphoreCreate(uint32_t howMany, uint8_t* labelString);
Status_t RTOS_LightWeightSemaphoreDestroy(void* pLwSema);
Status_t RTOS_LightWeightSemaphoreWait(void* pLwSema, uint32_t timeoutMs);
Status_t RTOS_LightWeightSemaphorePost(void* pLwSema);
BOOL32   RTOS_LightWeightSemaphorePoll(void* pLwSema);

#line 382 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_api.h"
typedef struct RTOS_Mutex_s
{
   uint32_t mutexPrv[ (12) ];
} RTOS_Mutex_t;

typedef RTOS_Mutex_t* pRTOS_Mutex_t;
typedef uint32_t RTOS_MutexCeiling_t;

Status_t RTOS_MutexGetPriorityCeiling(pRTOS_Mutex_t, RTOS_MutexCeiling_t* pCeiling);
uint32_t RTOS_MutexGetWaitCount(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexInit(pRTOS_Mutex_t pMutex, uint8_t* labelString);
Status_t RTOS_MutexLock(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexSetPriorityCeiling(pRTOS_Mutex_t pMutex,
                                                  RTOS_MutexCeiling_t NewCeiling,
                                                  RTOS_MutexCeiling_t* pOldCeiling);
Status_t RTOS_MutexTryLock(pRTOS_Mutex_t pMutex);
Status_t RTOS_MutexUnlock(pRTOS_Mutex_t pMutex);






typedef void (*pRTOS_User_ISR_t)(void*);
typedef void (*pRTOS_Kernel_ISR_t)(void);

pRTOS_User_ISR_t   RTOS_InstallUser_ISR(uint32_t vectorNumber, pRTOS_User_ISR_t pISR, void* pParameter);
pRTOS_Kernel_ISR_t RTOS_InstallKernel_ISR(uint32_t vectorNumber, pRTOS_Kernel_ISR_t pISR);





BOOL     RTOS_IsRunning(void);
uint32_t RTOS_GetThreadId(void);
uint8_t* RTOS_GetThreadName(void);
void*    RTOS_GetThreadStorageBasepointer(void);

void     RTOS_IcacheInvalidate(void);
void     RTOS_IcacheInvalidateMLines(void* address, uint32_t length);
void     RTOS_IcacheEnable(void);
void     RTOS_IcacheDisable(void);
void     RTOS_DcacheDisable(void);







void     RTOS_NotifyKernelTimeIfRunning(void);
void     RTOS_Block(void);
void     RTOS_Yield(void);
void     RTOS_MakeThreadReady(void* pThreadHandle);
void*    RTOS_GetCurrentThreadHandle(void);
BOOL32   RTOS_IsIn_ISR(void);

void     RTOS_SetupInterruptLevel(uint32_t vectorNum, uint32_t intLvl);

void     RTOS_InitThreadInfo(RTOS_ThreadType_t pThreadType, uint16_t instance);
RTOS_ThreadInfo_t RTOS_GetThreadInfo(void);

void     RTOS_HW_StackCheckOff(void);
void     RTOS_HW_StackCheckOn(void);
uint32_t RTOS_GetPeakStackAddress(uint32_t stackHighAddr, uint32_t stackLowAddr, uint32_t pattern);
Status_t RTOS_GetStackInfo(SYS_DiagStackInfo_t* pStackInfo);
void     RTOS_GetThreadStackBounds(uint32_t *stackBaseAddr, uint32_t *stackLimitAddr);
Status_t RTOS_CopySysRam(uint8_t * pDistMem, uint16_t *pSize);
Status_t RTOS_CopyKernelData(uint8_t *pDistMem, uint16_t *pSize);

void SYS_SetDelayedEvent(uint32_t eventMask);
uint32_t SYS_GetDelayedEvent(void);
void SYS_ClearDelayedEvent(uint32_t eventMask);

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventdictionary.h"

#line 65 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventdictionary.h"
typedef enum
{




   PATH_EVENT_ROM_AON_SECOND_VECTOR_SET = 0x01,
   PATH_EVENT_ROM_AON_FIRST_VECTOR_SET,
   PATH_EVENT_ROM_BB_FOUND_VALID,
   PATH_EVENT_ROM_BB_SIG_FAILURE,
   PATH_EVENT_ROM_BB_NOT_FOUND,
   PATH_EVENT_ROM_BP_SEC_FAILURE,
   PATH_EVENT_ROM_BP_PRIMARY_FOUND,
   PATH_EVENT_ROM_BP_SECONDARY_FOUND,
   PATH_EVENT_ROM_BP_PRIMARY_FOUND_OLD_REVISION,
   PATH_EVENT_ROM_BP_SECONDARY_FOUND_OLD_REVISION,
   PATH_EVENT_ROM_EEPROM_READ_STATUS,
   PATH_EVENT_ROM_SENSE_KEY_SET,
   PATH_EVENT_ROM_GPIO_STRAP_VALUE,

   PATH_EVENT_ROM_BP_HMAC_FAIL = 0x10,
   PATH_EVENT_ROM_CMC_UART_CLOCK_FREQ,
   PATH_EVENT_ROM_CMC_UART_CLOCK,
   PATH_EVENT_ROM_CMC_UART_CLOCK_DOMAIN,
   PATH_EVENT_ROM_CMC_UART_PERIPHERAL_CLOCK,
   PATH_EVENT_ROM_CMC_TOP_FREQ_ZERO,
   PATH_EVENT_ROM_CMC_TOP_INIT_MULTI_CLOCK_DOMAIN,
   PATH_EVENT_ROM_CMC_TOP_INIT_CPU_SUB_DOMAIN,
   PATH_EVENT_ROM_CMC_TOP_INIT_ROM,
   PATH_EVENT_ROM_CMC_TOP_DEFAULT_INIT_COMPLETE,
   PATH_EVENT_ROM_CMC_TOP_TOSC_NOT_STABLE,
   PATH_EVENT_ROM_COLD_BOOT,
   PATH_EVENT_ROM_BS_RD_ERROR,
   PATH_EVENT_ROM_CVD_PARAMETER_REVERTED_DECODE,
   PATH_EVENT_ROM_DPS,
   PATH_EVENT_ROM_BOOT_OPTIONS,

   PATH_EVENT_ROM_HIGH_BER_THRESHOLD = 0x20,
   PATH_EVENT_ROM_ZERO_ERASE_THRESHOLD,
   PATH_EVENT_ROM_BP_HIGH_BER,
   PATH_EVENT_ROM_BP_READ_ERROR,
   PATH_EVENT_ROM_CE_MODE_SELECT,
   PATH_EVENT_ROM_TM_MULT,
   PATH_EVENT_ROM_TM_FIM_CYCLES,
   PATH_EVENT_UART_DLE_HSSTP_TIMEOUT,
   PATH_EVENT_ROM_MP_IEXA_STARTUP_END,

   PATH_EVENT_ROM_FLASH_BYPASS_CHECK_ENTERED = 0x30,
   PATH_EVENT_ROM_FLASH_BYPASS_EXECUTED,
   PATH_EVENT_ROM_FLASH_CMC_CLK_CONFIGURE_BEING_EXECUTED,
   PATH_EVENT_ROM_HSSTP_WAIT_READY,
   PATH_EVENT_ROM_NGSET_INIT_DONE,
   PATH_EVENT_ROM_NGSET_RESET,

   PATH_EVENT_ROM_HIM_MEMORY_INITD = 0x40,
   PATH_EVENT_ROM_DEVICE_CONFIG,
   PATH_EVENT_ROM_IFS_SIFS_READ,
   PATH_EVENT_ROM_FADI_PORT_ENABLED,
   PATH_EVENT_ROM_NPDP_CVD_FIRST_TRY_FAILURE,
   PATH_EVENT_ROM_NPDP_CVDROM_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_FAILED,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_BACKUP_STATUS,
   PATH_EVENT_ROM_NPDP_DEVICE_CONFIG_INVALID_ID,
   PATH_EVENT_ROM_NPDP_FLASH_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_FIM_INIT_FAILED,
   PATH_EVENT_ROM_NPDP_INIT_COMPLETED,
   PATH_EVENT_ROM_NPDP_POR,
   PATH_EVENT_ROM_COARSE_BER_RESULT,
   PATH_EVENT_ROM_FINE_BER_RESULT,
   PATH_EVENT_ROM_DECODE_RESULT,

   PATH_EVENT_ROM_NPDP_READBACKUP_ID_SUCCESS = 0x50,
   PATH_EVENT_ROM_SEC_INIT,
   PATH_EVENT_ROM_SEC_BOOTSTATE,
   PATH_EVENT_ROM_SEC_FIPS_ERROR,

   PATH_EVENT_ROM_SYS_EFUSE_ONE_BIT_ERROR_CORRECTED= 0x60,
   PATH_EVENT_ROM_SYS_EFUSE_TWO_BITS_ERROR_NOT_CORRECTED,
   PATH_EVENT_ROM_RESERVED,
   PATH_EVENT_ROM_SYS_EFUSE_PARITY_ERROR_CORRECTED,
   PATH_EVENT_ROM_SYS_EFUSE_PARITY_ERROR_NOT_CORRECTED,
   PATH_EVENT_ROM_SYS_EFUSE_FAKEK_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_FASK_HASH_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_PRSK_HASH_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_CONTROL_BITS,
   PATH_EVENT_ROM_SEC_BOOT_ST_WAIT_FOR_RMA,
   PATH_EVENT_ROM_SOFT_RST_SIG_ROM_IDLE,
   PATH_EVENT_ROM_SOFT_RESET,
   PATH_EVENT_ROM_SYS_FALLBACK,
   PATH_EVENT_ROM_SYS_RUNTIME_INIT,
   PATH_EVENT_ROM_SYS_CRITICAL_INIT,
   PATH_EVENT_ROM_SYS_EFUSE_INIT_FAIL,

   PATH_EVENT_ROM_LOADER_HIGH_BER = 0x70,
   PATH_EVENT_ROM_LOADER_READ_ERROR,
   PATH_EVENT_ROM_TOSC_CALIBRATION_DONE,
   PATH_EVENT_ROM_UART_INTERFACE,
   PATH_EVENT_ROM_FADI_PORT_DISABLED,
   PATH_EVENT_ROM_UART_ROM_INITD,
   PATH_EVENT_ROM_UART_SET_CLOCK_FREQ,
   PATH_EVENT_ROM_UNKNOWN_ECC_PAGE_SIZE,
   PATH_EVENT_ROM_WARM_VECTOR_SET,

   PATH_EVENT_ROM_SYS_EFUSE_INIT_LIFECYCLE2_FAIL,
   PATH_EVENT_ROM_SYS_EFUSE_INIT_LIFECYCLE3_FAIL,

   PATH_EVENT_ROM_IEXA_REF_CLK,

   PATH_EVENT_ROM_FS_FALLBACK,
   PATH_EVENT_ROM_TRY_FILE,
   PATH_EVENT_ROM_ROT_LOAD_FAILED,
   PATH_EVENT_ROM_BLR_LOAD_FAILED,
   PATH_EVENT_ROM_BLR_JUMP_FAILED,
   PATH_EVENT_ROM_ASIC_RESET_INFO,
   PATH_EVENT_ROM_PREV_FAILURE,
   PATH_EVENT_ROM_SYS_PLL_OP_SET,
   PATH_EVENT_ROM_VDET_CORE_PROG_DONE,
   PATH_EVENT_ROM_DLE_HANDLING,
   PATH_EVENT_WARM_BOOT,
   PATH_EVENT_SYS_VERIFY_ROT,
   PATH_EVENT_SYS_TRIGGER_ASIC_RESET,

    PATH_EVENT_SEC_WAIT_SUCCESS                             = 0x100,
    PATH_EVENT_SEC_SECP_ROM_RESET                           = 0x101,
    PATH_EVENT_SEC_REPORT_BOOT_STATUS_WAIT                  = 0x102,
    PATH_EVENT_SEC_REPORT_BOOT_PROCESS_SUCCESS_COMPLETE     = 0x103,

    PATH_EVENT_SEC_RESERVED_0                               = 0x104,
    PATH_EVENT_SEC_BOOT_PAGE_BLOB_VERIFY                    = 0x105,
    PATH_EVENT_SEC_ROT_OUTER_BLOB_VERIFY                    = 0x106,
    PATH_EVENT_SEC_ROT_INNER_BLOB_VERIFY                    = 0x107,

    PATH_EVENT_SEC_RIP_IMAGE_DESCRIPTOR_VERIFY              = 0x108,
    PATH_EVENT_SEC_COMPOSITE_IMAGE_BLOB_VERIFY              = 0x109,
    PATH_EVENT_SEC_FW_IMAGE_OUTER_BLOB_VERIFY               = 0x10A,
    PATH_EVENT_SEC_FW_IMAGE_INNER_BLOB_VERIFY               = 0x10B,

    PATH_EVENT_SEC_FW_IMAGE_DESCRIPTOR_VERIFY               = 0x10C,
    PATH_EVENT_SEC_BOOT_PAGE_HMAC_VERIFY                    = 0x10D,
    PATH_EVENT_SEC_ROT_OUTER_HMAC_VERIFY                    = 0x10E,
    PATH_EVENT_SEC_SECP_GET_ROM_REVISION_D1                 = 0x10F,

    PATH_EVENT_SEC_PHASE_1_INIT                             = 0x120,
    PATH_EVENT_SEC_PHASE_2_INIT                             = 0x121,
    PATH_EVENT_SEC_LOAD_KEYS                                = 0x122,
    PATH_EVENT_SEC_NEXT_LOADER_HEADER_RSA_VERIFY            = 0x123,

    PATH_EVENT_SEC_SECP_GET_ROM_REVISION                    = 0x124,
    PATH_EVENT_SEC_SET_SECP_CLOCK_FREQ                      = 0x125,
    PATH_EVENT_SEC_SECTION_VERIFY_CMPL                      = 0x126,
    PATH_EVENT_SEC_ROT_IS_DISABLED                          = 0x127,

    PATH_EVENT_SEC_REQUEST_TO_DISABLE_ROT                   = 0x128,
    PATH_EVENT_SEC_NEXT_LOADER_HEADER_RSA_VERIFY_FULL_FINAL = 0x129,
    PATH_EVENT_SEC_NEXT_LOADER_VERIFY_SIGNATURE_INIT        = 0x12A,
    PATH_EVENT_SEC_NEXT_LOADER_VERIFY_SIGNATURE_UPDATE      = 0x12B,

    PATH_EVENT_SEC_NEXT_LOADER_VERIFY_SIGNATURE_FINAL       = 0x12C,
    PATH_EVENT_SEC_ROM_SEC_BOOT_PAGE_HMAC_VERIFY            = 0x12D,
    PATH_EVENT_SEC_ROM_SEC_ROT_OUTER_HMAC_VERIFY            = 0x12E,
    PATH_EVENT_SEC_ROM_SD_ERROR                             = 0x12F,

    PATH_EVENT_SEC_ROM_LOCAL_ERROR                          = 0x130,
    PATH_EVENT_SEC_ROM_PRIMARY_BOOT_PAGE_HMAC               = 0x131,
    PATH_EVENT_SEC_ROM_SECONDARY_BOOT_PAGE_HMAC             = 0x132,
    PATH_EVENT_SEC_ROM_BOOTPAGE_ROLLBACK                    = 0x133,
    PATH_EVENT_SEC_ROM_ASIC_RESET_LATCH_AHEAD               = 0x134,
    PATH_EVENT_SEC_ROM_HW_CONTROL_REG_READ                  = 0x135,
    PATH_EVENT_SEC_WAIT_FAIL                                = 0x136,
    PATH_EVENT_SEC_ROM_SD_DEBUGSTOP                         = 0x137,





    PATH_EVENT_BOOT_FAILED                                  = 0x1000,
    PATH_EVENT_SELFTEST_RSA,
    PATH_EVENT_SELFTEST_HMAC,
    PATH_EVENT_SELFTEST_PRIMARY_BOOTPAGE_HMAC,
    PATH_EVENT_SELFTEST_SECONDARY_BOOTPAGE_HMAC,
    PATH_EVENT_SELFTEST_HMAC_VERIFY,
    PATH_EVENT_SELFTEST_RSA_VERIFY,
    PATH_EVENT_SELFTEST_KEY_VERIFY,
    PATH_EVENT_SELFTEST_PRIMARY_IFS_CODE_DIRECTORY_HMAC,
    PATH_EVENT_IFS_RECOVERY_CODE_PRIMARY,
    PATH_EVENT_IFS_RECOVERY_CODE_SECONDARY,
    PATH_EVENT_DLE_COMMIT,
    PATH_EVENT_SELFTEST_DLE_CODE_RSA,
    PATH_EVENT_SELFTEST_IFS_FILE_VCSID,
    PATH_EVENT_SELFTEST_RSA_CACHE_VERIFY,

    PATH_EVENT_SELFTEST_IFS_FILE_0                          = 0x1100,
    PATH_EVENT_SELFTEST_IFS_FILE_LAST = PATH_EVENT_SELFTEST_IFS_FILE_0 + 0xFF,
    PATH_EVENT_EFUSE_CORRECTABLE_ERROR,
    PATH_EVENT_EFUSE_UNCORRECTABLE_ERROR,
    PATH_EVENT_JTAG_ENABLE,

    PATH_EVENT_FIRST_FW_EVENT                           = 0x2000,
    PATH_EVENT_BOOTLOADER,
    PATH_EVENT_DLE,
    PATH_EVENT_FW,
    PATH_EVENT_SELFTEST_PRIMARY_IFS_ACTIVE_DIRECTORY_HMAC,
    PATH_EVENT_SELFTEST_SECONDARY_IFS_ACTIVE_DIRECTORY_HMAC,
    PATH_EVENT_SELFTEST_AES_CBC,
    PATH_EVENT_SELFTEST_AES_WRAP,
    PATH_EVENT_SELFTEST_AES_XTS,
    PATH_EVENT_SELFTEST_PBKDF2,
    PATH_EVENT_SELFTEST_TRNG,
    PATH_EVENT_SELFTEST_DRBG,
    PATH_EVENT_TRANSIT_TO_OPERATIONAL_FIPS_STATE,
    PATH_EVENT_SELFTEST_SECONDARY_IFS_CODE_DIRECTORY_HMAC,
    PATH_EVENT_IFS_DIRECTORY_ROLLBACK,
    PATH_EVENT_IFS_RECOVERY_DATA_PRIMARY,
    PATH_EVENT_IFS_RECOVERY_DATA_SECONDARY,
    PATH_EVENT_IFS_RECOVERY_FINISHED,
    PATH_EVENT_CRITICAL_ERROR,
    PATH_EVENT_SMBUS_INIT,
    PATH_EVENT_SELFTEST_EFUSE_INIT,


}  Path_EventParameter_e;

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/code_coverage.h"

#line 27 "d:/gitrepo/fpgcss-vega/source/infra/modules/fadi/inc_public/code_coverage.h"
extern uint32_t mp_cc_buf[];
extern uint32_t *pMPCCBuf;
extern uint32_t ps_cc_buf[];
extern uint32_t *pPSCCBuf;

void     CodeCoverageFillBuffer(uint32_t *pCCBuff, uint32_t sizeOfCCBuff);
uint16_t CodeCoverageSendOneCCBuffer(uint32_t *pCCBuff, uint32_t sizeOfCCBuff, BOOL addPSMarker);
Status_t CodeCoverageSendBuffers(void);

#line 25 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ngset.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_set_regs_defines.h"

#line 118 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_set_regs_defines.h"
typedef struct _NG_SET_REGS {
    HW_REG64 CFG                                        ;
    HW_REG64 CFG_FW_FILTER_0[2]                         ;
    HW_REG64 CFG_FW_FILTER_1[2]                         ;
    HW_REG64 CFG_FW_FILTER_2[2]                         ;
    HW_REG64 CFG_FW_FILTER_3[2]                         ;
    HW_REG64 CFG_HW_FILTER_0                            ;
    HW_REG64 CFG_HW_FILTER_1                            ;
    HW_REG64 CFG_HW_FILTER_2                            ;
    HW_REG64 CFG_HW_FILTER_3                            ;
    HW_REG64 CFG_THS_FILTER                             ;
    HW_REG64 CFG_FILTER                                 ;
    HW_REG64 CFG_CPU                                    ;
    HW_REG64 CFG_OVERFLOW_HYST                          ;
    HW_REG64 CFG_RAM_BASE                               ;
    HW_REG64 CFG_LOAD_RAM                               ;
    HW_REG64 CFG_LOAD_RAM_P                             ;
    HW_REG64 CFG_RAM_WRAP                               ;
    HW_REG64 CFG_INT_STS                                ;
    HW_REG64 CFG_INT_EN                                 ;
    HW_REG64 STS                                        ;
    HW_REG64 STS_COUNT_INPUT                            ;
    HW_REG64 STS_COUNT_FILTERED_INPUT                   ;
    HW_REG64 STS_COUNT_FIFO_INPUT                       ;
    HW_REG64 STS_COUNT_OVERFLOW                         ;
    HW_REG64 STS_COUNT_WRAP                             ;
    HW_REG64 STS_COUNT_FILTERED_LOST                    ;
    HW_REG64 STS_COUNT_FILTERED_ET_BLOCK                ;
    HW_REG64 STS_COUNT_FIFO_OUTPUT                      ;
    HW_REG64 CFG_EXPECTED_PATTERN1_L                    ;
    HW_REG64 CFG_EXPECTED_PATTERN1_H                    ;
    HW_REG64 CFG_EXPECTED_PATTERN2_L                    ;
    HW_REG64 CFG_EXPECTED_PATTERN2_H                    ;
    HW_REG64 CFG_EXPECTED_PATTERN3_L                    ;
    HW_REG64 CFG_EXPECTED_PATTERN3_H                    ;
    HW_REG64 CFG_EXPECTED_PATTERN4_L                    ;
    HW_REG64 CFG_EXPECTED_PATTERN4_H                    ;
    HW_REG64 CFG_TRIGGER1_MASK_L                        ;
    HW_REG64 CFG_TRIGGER1_MASK_H                        ;
    HW_REG64 CFG_TRIGGER2_MASK_L                        ;
    HW_REG64 CFG_TRIGGER2_MASK_H                        ;
    HW_REG64 CFG_TRIGGER3_MASK_L                        ;
    HW_REG64 CFG_TRIGGER3_MASK_H                        ;
    HW_REG64 CFG_TRIGGER4_MASK_L                        ;
    HW_REG64 CFG_TRIGGER4_MASK_H                        ;
    HW_REG64 CFG_TRIGGER                                ;
    HW_REG64 OIF_RB_BASE                                ;
    HW_REG64 OIF_RB_CFG                                 ;
    HW_REG64 OIF_HABM_RB_QUEUE                          ;
    HW_REG64 OIF_HABM_EXT_CNT                           ;
    HW_REG64 OIF_CMD_ITAG_LEN                           ;
    HW_REG64 OIF_CMD_HPTR1_LSB                          ;
    HW_REG64 OIF_CMD_HPTR1_MSB                          ;
    HW_REG64 OIF_CMD_PUSH                               ;
    HW_REG64 OIF_RB_PTR                                 ;
    HW_REG64 OIF_RB_ADDR                                ;
    HW_REG64 OIF_CUR_LEN                                ;
    HW_REG64 OIF_AVAIL_RB                               ;


    HW_REG64 OIF_AVAIL_CNT                              ;





    HW_REG64 OIF_ISR                                    ;
    HW_REG64 OIF_IER                                    ;
    HW_REG64 OIF_STATE                                  ;
    HW_REG64 OIF_IDLE                                   ;
    HW_REG64 OIF_DATA_EVENT                             ;
    HW_REG64 OIF_RSP_PENDING                            ;
    HW_REG64 OIF_RSP_FIFO                               ;
    HW_REG64 OIF_CMD_FIFO_LEVEL                         ;
    HW_REG64 OIF_DBG_CMD_ITAG_LEN                       ;
    HW_REG64 OIF_DBG_CMD_HPTR1_LSB                      ;
    HW_REG64 OIF_DBG_CMD_HPTR1_MSB                      ;
    HW_REG64 SET_DBG_WR_PTR                             ;
    HW_REG64 STS_TS48                                   ;
}NG_SET_REGS_t, *PNG_SET_REGS;

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ngset.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_feb_defines.h"

#line 56 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_feb_defines.h"
typedef struct _NG_FEB {
    HW_REG64 FEB_CTL                                    ;
    HW_REG64 FEB_INT_STS                                ;
    HW_REG64 FEB_INT_MASK                               ;
    HW_REG64 FEB_SET_BA                                 ;
    HW_REG64 TIME_STAMP                                 ;
    HW_REG64 FEB_SVCI_M                                 ;
    HW_REG64 FEB_THD[8]                                 ;
    HW_REG64 FEB_BUS_ERR_INFO1                          ;
}NG_FEB_t, *PNG_FEB;

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ngset.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_atb_top_defines.h"

#line 53 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ng_atb_top_defines.h"
typedef struct _NG_ATB_TOP {
    HW_REG MODE                                         ;
    HW_REG Reserved0;
    HW_REG P_TEST                                       ;
    HW_REG Reserved1;
    HW_REG PARALLEL_OUT_0                               ;
    HW_REG Reserved2;
    HW_REG PARALLEL_OUT_1                               ;
    HW_REG Reserved3;
    HW_REG P2S_READY                                    ;





    HW_REG Reserved4;
    HW_REG DEBUG_CLK_SEL                                ;

    HW_REG Reserved5;
    HW_REG IRQ_CLR                                      ;

    HW_REG Reserved6;
    HW_REG HEADER_CTRL                                  ;
    HW_REG Reserved7;
    HW_REG SP_CLOCK_DIV                                 ;
    HW_REG Reserved8;
    HW_REG ATB_PARITY                                   ;
}NG_ATB_TOP_t, *PNG_ATB_TOP;

#line 27 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw.h"

#line 240 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw.h"
typedef struct _SET_FW_FILTER_REG
{
   uint32_t FILTER_ENA;
   uint32_t RESERVE_FILTER_ENA;
}SET_FW_FILTER_REGs;

typedef enum SET_Get_FW_Filter_Bank_Idx_e
{
   SET_FW_FILTER_GROUP_BANK_0,
   SET_FW_FILTER_GROUP_BANK_1,
   SET_FW_FILTER_GROUP_BANK_2,
   SET_FW_FILTER_GROUP_BANK_3,
   SET_FW_FILTER_GROUP_BANK_TOO_MANY,
}   SET_Get_FW_Filter_Bank_Idx_t;

typedef struct _SET_EVENT_INT_VAL
{
   uint32_t EVENT_INT;
   uint32_t RESERVE_EVENT_INT;
}SET_EVENT_INT_VALs;

typedef struct _SET_EVENT_INT_MASK
{
   uint32_t EVENT_INT;
   uint32_t RESERVE_EVENT_INT;
}SET_EVENT_INT_MASKs;







typedef struct _SET_REGs
{
   uint32_t             SET_CFG;
   uint32_t                RESERVESET_CFG;
   uint32_t             TIMER_PRESCALE;
   uint32_t                RESERVED_TIMER_PRESCALE;
   uint32_t             TIMER_CFG_VALUE;
   uint32_t                RESERVED_TIMER_CFG_VALUE;
   SET_EVENT_INT_VALs   EVENT_INT_VAL[ 4 ];
   SET_EVENT_INT_MASKs  EVENT_INT_MASK[ 4 ];
   uint32_t             INT_STS;
   uint32_t                RESERVED_INT_STS;
   uint32_t             INT_EN;
   uint32_t                RESERVED_INT_EN;
   uint32_t             FIFO_EMPTY_STS;
   uint32_t                RESERVED_FIFO_EMPTY_STS;
   uint32_t             SW_RESET;
   uint32_t                RESERVED_SW_RESET;
   uint32_t             TS_LTI;
   uint32_t                RESERVED_TS_LTI;
   uint32_t             RAM_CFG;
   uint32_t                RESERVED_RAM_CFG;
   uint32_t             TIMER_CFG;
   uint32_t                RESERVED_TIMER_CFG;
   uint32_t             RAM_CURR_ADDR;
   uint32_t                RESERVED_RAM_CURR_ADDR;
   uint32_t             RAM_INT_TH;
   uint32_t                RESERVED_RAM_INT_TH;
   uint32_t             RAM_TYPE_EN;
   uint32_t                RESERVED_RAM_TYPE_EN;
   uint32_t             ATB_TYPE_EN;
   uint32_t                RESERVED_ATB_TYPE_EN;
   uint32_t             TIMER_LSB;
   uint32_t                RESERVED_TIMER_LSB;
   uint32_t             TIMER_MSB;
   uint32_t                RESERVED_TIME_MSB;
   uint32_t             RAM_WRAP_CTR;
   uint32_t                RESERVED_RAM_WRAP_CTR;
   uint32_t             EVENT_32_16_PREFIX_CONST;
   uint32_t                RESERVED_EVENT_32_16_PREFIX_CONST;
   uint32_t             RAM_BAD;
   uint32_t                RESERVED_RAM_BAD;
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_0_31[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_32_63[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_64_95[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_RAM_FLT_96_127[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_0_31[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_32_63[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_64_95[ 2 ];
   SET_FW_FILTER_REGs   FW_CPU_ATB_FLT_96_127[ 2 ];
   uint32_t             CPU_EN;
   uint32_t                RESERVED_CPU_EN;
   uint32_t             CPU_THREAD_MP;
   uint32_t                RESERVED_CPU_THREAD;
   uint32_t             CPU_THREAD_PS0;
   uint32_t                RESERVED_CPU_THREAD_PS0;
   uint32_t             CPU_THREAD_PS1;
   uint32_t                RESERVED_CPU_THREAD_PS1;
   uint32_t             CPU_THREAD_PCU;
   uint32_t                RESERVED_CPU_THREAD_PCU;
   uint32_t             HW_RAM_FLT;
   uint32_t                RESERVED_HW_RAM_FLT;
   uint32_t             HW_ATB_FLT;
   uint32_t                RESERVED_HW_ATB_FLT;

}SET_REGs, *pSET_REGs;

#line 401 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw.h"
uint64_t SET_GetTimerCount(void);
uint32_t SET_GetDebugRAMPointer(void);

#line 44 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/ngset.h"



Status_t  NGSET_Init(void);

#line 26 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/sctp/inc_public/sys_sctp_api.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/modules/sctp/inc_public/sys_sctp_api.h"
typedef enum SCTP_Status_e
{
   STATUS_SCTP_ERROR = STATUS_SCTP_ERROR_BASE,
   STATUS_SCTP_SIGNATURE_MISSMATCH,
   STATUS_SCTP_NO_REGISTERED_APPL_HANDLERS,
   STATUS_SCTP_WRONG_BUFFER_SIZE,
   STATUS_SCTP_BUFFER_ALLOCATION_ERROR,
   STATUS_SCTP_UNEXPECTED_SCTP_READ_CMD,
   STATUS_SCTP_READ_CMD_WHEN_SESSION_NOT_STARTED,
   STATUS_SCTP_INVALID_EVENT_TYPE,
   STATUS_SCTP_NO_MATCHING_APPLICATIONS,
   STATUS_SCTP_INCONSISTENT_NUMBER_OF_BYTES,
   STATUS_SCTP_SECURITY_LOCKED,
   STATUS_SCTP_DATA_TRANSFER_ERROR,
   STATUS_SCTP_READ_CMD_ERROR,
   STATUS_SCTP_WRITE_CMD_ERROR,
   STATUS_SCTP_CONCURRENT_SESSION,
   STATUS_SCTP_SMALL_BUFFER,
}   SCTP_Status_t;



enum
{
   SIG_LEN =          32,
   TAG_LEN =          8,
   VSD_LEN  =         432,
   UNUSED_LEN =       432,
   UNKNOWN_LENGTH =   0,
   GOOD_COMPARE   =   0,
};






enum SCTP_AppState_e
{
   SCTP_PHASE_COMMAND,
   SCTP_PHASE_READ_DATA,
   SCTP_PHASE_WRITE_DATA,
   SCTP_PHASE_STATUS,
};
typedef uint8_t SCTP_AppState_t;





enum SCTP_ExecutionPhase_e
{
   SCTP_EXEC_PHASE_COMMAND,
   SCTP_EXEC_PHASE_READ_DATA,
   SCTP_EXEC_PHASE_WRITE_DATA,

   SCTP_EXEC_PHASE_DECIDED_BY_HANDLER = SCTP_PHASE_WRITE_DATA + 2,
};
typedef uint8_t SCTP_ExecutionPhase_t;


enum SCTP_state_e
{
   SCTP_STATE_UNUSED,
   SCTP_STATE_WAIT_FOR_CMD,
   SCTP_STATE_WAIT_FOR_WR_DATA,
   SCTP_STATE_WAIT_FOR_RD_DATA,
   SCTP_STATE_WAIT_FOR_STATUS,
};
typedef uint8_t SCTP_state_t;


typedef enum SCTP_EventType_e
{
   SCTP_WRITE_CMD,
   SCTP_READ_CMD,


   SCTP_INVALID_EVENT,
} SCTP_EventType_t;

typedef union SYS_SCTP_Token_u
{
   struct SYS_SCTP_Token_s
   {
      uint32_t cmdIndex : 10;
      uint32_t reserved : 6;
      uint32_t result : 16;
   } bits;
   uint32_t all32;
} SYS_SCTP_Token_t;


typedef void(*FE_SYS_Callback_t)(Status_t status, uint32_t token);

typedef struct SYS_SCTPCmd_s
{
   uint32_t                            transferSize;
   uint32_t                            FECommandIndex;
   FE_SYS_Callback_t                   callback;
   SCTP_EventType_t                    eventType;
} SYS_SCTPCmd_t;

#line 136 "d:/gitrepo/fpgcss-vega/source/infra/modules/sctp/inc_public/sys_sctp_api.h"
typedef Status_t (*SCTP_CommandHandlerPtr_t)(SCTP_AppState_t state, uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);

#line 149 "d:/gitrepo/fpgcss-vega/source/infra/modules/sctp/inc_public/sys_sctp_api.h"
typedef Status_t SCTP_AppHandler_t(SCTP_AppState_t state, uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);





Status_t  __attribute__((section("TRW")))  SCTP_Init(void);









BOOL  __attribute__((section("TRW")))  SCTP_RegisterApplication(const uint8_t *pSig, uint8_t sigLen, SCTP_AppHandler_t *pAppCmdHandler);




BOOL SCTP_IsSessionStarted(void);




Status_t   SCTP_EventHandler(uint32_t *pBuffer, uint32_t bufSizeInBytes, SCTP_EventType_t eventType);







BOOL SCTP_GetTransferSize(SCTP_AppState_t state, uint32_t *transferSize);

#line 27 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw_macros.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/hsstp/inc_public/ng_hsstp.h"

#line 77 "d:/gitrepo/fpgcss-vega/source/infra/drivers/hsstp/inc_public/ng_hsstp.h"
typedef struct _NG_HSSTP {
    HW_REG64 HSSTP_CFG;
    HW_REG64 HSSTP_STS;
    HW_REG64 HSSTP_BUS_FLIP;
    HW_REG64 HSSTP_LINK_CFG0;
    HW_REG64 HSSTP_LINK_CFG1;
    HW_REG64 HSSTP_FSFIFO;
    HW_REG64 HSSTP_FSFIFO1;
    HW_REG64 HSSTP_SYNC_PAT;
    HW_REG64 HSSTP_SYNC_PAT1;
    HW_REG64 AURORA8B_CFG;
    HW_REG64 AURORA8B_CFG1;
    HW_REG64 AURORA8B_ORDER_SET;
    HW_REG64 AURORA8B_ORDER_SET1;
    HW_REG64 AURORA8B_TIDL_OS0;
    HW_REG64 AURORA8B_TIDL_OS1;
    HW_REG64 AURORA8B_TIDL_OS2;
    HW_REG64 AURORA8B_TIDL_OS3;
    HW_REG64 AURORA8B_TIDL_OS4;
    HW_REG64 AURORA8B_TIDL_OS5;
    HW_REG64 AURORA8B_TIDL_OS6;
    HW_REG64 AURORA8B_TIDL_OS7;
    HW_REG64 AURORA8B_PDUD0;
    HW_REG64 AURORA8B_PDUD1;
    HW_REG64 AURORA8B_PDUC;
    HW_REG64 DEBUG_CTL;
    HW_REG64 DEBUG_CTL1;
    HW_REG64 DEBUG_OUT;
    HW_REG64 FS_FIFO_CFG;
    HW_REG64 FS_FIFO_STS;
}NG_HSSTP_t, *PNG_HSSTP;

#line 31 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw_macros.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/hsstp/inc_public/hsstp_top_regs.h"

#line 368 "d:/gitrepo/fpgcss-vega/source/infra/drivers/hsstp/inc_public/hsstp_top_regs.h"
typedef struct _NG_HSSTP_TOP_REGS {
    HW_REG64 HSSTP_TOP_CFG                              ;
    HW_REG64 POWER_CTRL_REG                             ;
    HW_REG64 POWER_STS_REG                              ;
    HW_REG64 TEST_STS_REG                               ;
    HW_REG64 TEST_CFG_REG                               ;
    HW_REG64 REF_DCO_CTRL_REG                           ;
    HW_REG64 REF_CLK_CTRL_REG                           ;
    HW_REG64 REF_CTRL_REG                               ;
    HW_REG64 REF_STATE_REG                              ;
    HW_REG64 LOOPBACK_CTRL_REG                          ;
    HW_REG64 MPLLA_CTRL2_REG                            ;
    HW_REG64 MPLLA_CTRL3_REG                            ;
    HW_REG64 MPLLA_CTRL4_REG                            ;
    HW_REG64 MPLLA_CTRL7_REG                            ;
    HW_REG64 MPLLA_CTRL10_REG                           ;
    HW_REG64 MPLLA_CTRL13_REG                           ;
    HW_REG64 MPLLA_CTRL14_REG                           ;
    HW_REG64 MPLLA_CTRL15_REG                           ;
    HW_REG64 MPLLA_CTRL17_REG                           ;
    HW_REG64 MPLLA_CTRL20_REG                           ;
    HW_REG64 MPLLB_CTRL2_REG                            ;
    HW_REG64 MPLLB_CTRL3_REG                            ;
    HW_REG64 MPLLB_CTRL4_REG                            ;
    HW_REG64 MPLLB_CTRL7_REG                            ;
    HW_REG64 MPLLB_CTRL10_REG                           ;
    HW_REG64 MPLLB_CTRL13_REG                           ;
    HW_REG64 MPLLB_CTRL14_REG                           ;
    HW_REG64 MPLLB_CTRL15_REG                           ;
    HW_REG64 MPLLB_CTRL17_REG                           ;
    HW_REG64 MPLLB_CTRL20_REG                           ;
    HW_REG64 RX_ADAPT_CTRL_REG                          ;
    HW_REG64 RX_EQ_CTRL_REG                             ;
    HW_REG64 RX_EQ_DFE_CTRL_REG                         ;
    HW_REG64 RX_GENERIC_CTRL_REG                        ;
    HW_REG64 RX_CTRL1_REG                               ;
    HW_REG64 RX0_STS1_REG                               ;
    HW_REG64 RX1_STS1_REG                               ;
    HW_REG64 TX_STS_REG                                 ;
    HW_REG64 RX_VCO_LD_VAL_CTRL_REG                     ;
    HW_REG64 RX_REF_LD_VAL_CTRL_REG                     ;
    HW_REG64 RX_TERM_CTRL_REG                           ;
    HW_REG64 RX_DP_STAT_REG                             ;
    HW_REG64 RX_DP_REG                                  ;
    HW_REG64 RX_SIGDET_CTRL_REG                         ;
    HW_REG64 RX_VREF_CTRL_REG                           ;
    HW_REG64 TX0_CTRL_REG                               ;
    HW_REG64 TX1_CTRL_REG                               ;
    HW_REG64 TX_IN_GENERIC_BUS_CTRL_REG                 ;
    HW_REG64 TX0_EQ_CTRL_REG                            ;
    HW_REG64 TX1_EQ_CTRL_REG                            ;
    HW_REG64 MASTER_MPLL_STS_REG                        ;
    HW_REG64 SRAM_CTRL_REG                              ;
    HW_REG64 SUP_CTRL_REG                               ;
    HW_REG64 HSSTP_TOP_INTERRUPT_STATUS                 ;
    HW_REG64 HSSTP_TOP_INTERRUPT_ENABLE                 ;
    HW_REG64 GENERAL_CTRL_REG                           ;
    HW_REG64 TX_CLK_RDY_CTRL_REG                        ;
    HW_REG64 RESET_CTRL_REG                             ;
    HW_REG64 HSSTP_DRIVE_LOAD_DATA_LOW_CFG_REG          ;
    HW_REG64 HSSTP_DRIVE_LOAD_DATA_HIGH_CFG_REG         ;
    HW_REG64 HSSTP_DRIVE_CNTR_LOW_CFG_REG               ;
    HW_REG64 HSSTP_DRIVE_CNTR_HIGH_CFG_REG              ;
    HW_REG64 HSSTP_DRIVE_DRIVEN_STS_REG                 ;
    HW_REG64 TEST_PATTERN_CTRL_REG                      ;
    HW_REG64 TEST_MATRIX[256]                           ;
    HW_REG64 TRIGGER_CR_PARA_MUX                        ;
    HW_REG64 TRIGGER_CR_PARA_ADDR                       ;
    HW_REG64 TRIGGER_CR_PARA_READ                       ;
    HW_REG64 HSSTP_TOP_SPARE_0                          ;
}NG_HSSTP_TOP_REGS_t, *PNG_HSSTP_TOP_REGS;

#line 32 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_hw_macros.h"




extern uint32_t  PS_Instance;

extern uint32_t  PS_InstanceForNGSET;

#line 35 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"

#line 201 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
typedef enum
{

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedeventsrom.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedeventsrom.h"


























































































































































#line 28 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"




















































































































































































































































































































































































































































































































































































































































































#line 699 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

















































































































#line 822 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

















































































































































































































































































































































































































































































































































































































































































#line 1481 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"






















































































#line 1571 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

































































































































































































































#line 1803 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"





























































































































































































































































































































































































































































































































































































































































































#line 2474 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"























































































































































































































































#line 2734 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"



















































































































































































































































































































































































































































































































































































































































































































































































































#line 3525 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4647 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"



#line 4665 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

















#line 4687 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4746 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4826 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"





#line 4848 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4873 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4882 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"










































































































































































































































































































































































































































































#line 206 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedeventsrom.h"

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedeventsrom.h"
SET_EVENT_CONF_IDENT_CHECKPOINT_EVENT ,
SET_EVENT_CONF_HARD_RESET_CHECKPOINT_EVENT ,
SET_EVENT_CONF_SOFT_RESET_CHECKPOINT_EVENT ,
SET_EVENT_CONF_NGSET_RESET_CLOCK_CHECKPOINT_EVENT ,

SET_EVENT_IN_ROM_CHECKPOINT_EVENT ,




SET_EVENT_ROM_IPS_INIT_DONE_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FAILED_SYS_INIT_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FORCE_DWNLD_CHECKPOINT_EVENT ,
SET_EVENT_ROM_SKIP_BB_CHECKPOINT_EVENT ,
SET_EVENT_ROM_BS_RD_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_BAD_DEVICE_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FAILED_HW_INIT_NPDP_CHECKPOINT_EVENT ,
SET_EVENT_ROM_UPLOAD_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_READY_TO_JUMP_FLASHWARE_CODE_CHECKPOINT_EVENT ,




SET_EVENT_ROM_SEC_LIB_TRACE_CHECKPOINT_EVENT ,

SET_EVENT_ROM_SEC_BOOT_PAGE_COPY_CHECKPOINT_EVENT ,
SET_EVENT_ROM_SEC_BOOT_PAGE_HMAC_VERIFY_CHECKPOINT_EVENT ,
SET_EVENT_ROM_SEC_ROT_OUTER_HMAC_VERIFY_CHECKPOINT_EVENT ,
SET_EVENT_ROM_SEC_FW_IMAGE_OUTER_HMAC_VERIFY_CHECKPOINT_EVENT ,
SET_EVENT_SEC_LIB_SMB_COMMAND_VERIFY_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_SEC_LIB_SMB_COMMAND_HANDLER_FAIL_CHECKPOINT_EVENT ,




SET_EVENT_ROM_NPDP_LDPC_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_FIM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_CVDROM_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_INIT_COMPLETED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FLASH_INIT_RESET_CHIP_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_DEVICE_CONFIG_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_DEVICE_CONFIG_BACKUP_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_DEVICE_CONFIG_INVALID_ID_CHECKPOINT_EVENT ,
SET_EVENT_ROM_NPDP_UNRECOGN_DEVICE_ID_CHECKPOINT_EVENT ,




SET_EVENT_ROM_FE_HINBC_ERR_NVME_MO_BUFF_OVF_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_MSIX_WRITE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_MSIX_READ_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_PBA_WRITE_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_HOST_PARITY_ERR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_DBL_ERR_ERZ_FROM_EMPTY_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_DBL_ERR_ADD_TO_FULL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_DBL_ERR_VAL_EQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_DBL_ERR_OUT_OF_RNG_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_DBL_ERR_NO_Q_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_ILL_ACCS_WRONG_SZ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_ILL_ACCS_IRQ_UN_SUP_SZ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_ILL_ACCS_UNDEF_ADDR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_HINBC_ERR_ILL_ACCS_RO_REG_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_HFWR_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_HINBC_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_SVCI_ERR_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CC_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_PCIE_WRAP_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_NEW_CMD_IRQ_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CSTS_RDY_SET_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_EVT_CSTS_RDY_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HFWR_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_SVCI_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_TIMEOUT_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_NO_CMPL_DESC_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_NO_MDT_DESC_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_MDT_DESC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HABM_CMPL_DESC_FAIL_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_IRAM_INIT_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HFWR_BSY_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HNVME_IDLE_TO_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_CONTROLLER_CFS_HNVME_TRANS_ERR_CHECKPOINT_EVENT ,

SET_EVENT_ROM_FE_CONTROLLER_FATAL_CLEARED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_SUBMISSION_QUEUE_CREATED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FE_COMPLETION_QUEUE_CREATED_CHECKPOINT_EVENT ,




SET_EVENT_ROM_FADI_HIM_HW_EVENT_INIT_FAILED_CHECKPOINT_EVENT ,
SET_EVENT_ROM_FADI_CLOCK_TIMER_DIV_ROM_CHECKPOINT_EVENT ,


SET_EVENT_SEC_ROM_ROT_VERSION_CHECKPOINT_EVENT ,
SET_EVENT_SEC_DRIVE_ROM_ERROR_CHECKPOINT_EVENT ,
SET_EVENT_SEC_ROM_ASIC_VERSION_CHECKPOINT_EVENT ,



SET_EVENT_ROM_SYS_PATH_EVENT_CHECKPOINT_EVENT ,






















































#line 28 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"































SET_EVENT_INFRA_NGSET_0_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_1_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_2_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_3_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_4_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_5_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_6_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_7_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_8_CHECKPOINT_EVENT ,
SET_EVENT_INFRA_NGSET_9_CHECKPOINT_EVENT ,


















































































































































































SET_EVENT_INFRA_JUMP_TO_FLASHWARE_CHECKPOINT_EVENT ,
























































































































































































































































































































































































































































#line 699 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

















































































































#line 822 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"








































































































































































































































































SET_EVENT_MP_CODE_COVERAGE_EVENT_CHECKPOINT_EVENT ,
SET_EVENT_PS_CODE_COVERAGE_EVENT_CHECKPOINT_EVENT ,

SET_EVENT_START_CODE_COVERAGE_SEND_CHECKPOINT_EVENT ,
SET_EVENT_END_CODE_COVERAGE_SEND_CHECKPOINT_EVENT ,




































































































































































































































































































































































































#line 1481 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"






















































































#line 1571 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

































































































































































































































#line 1803 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"





























































































































































































































































































































































































































































































































































































































































































#line 2474 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"























































































































































































































































#line 2734 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"



















































































































































































































































































































































































































































































































































































































































































































































































































#line 3525 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4647 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"



#line 4665 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"

















#line 4687 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4746 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4826 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"





#line 4848 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4873 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"


#line 4882 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_supportedevents.h"










































































































































































































































































































































































































































































#line 218 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"


  SET_EVENT_EVENT_TOTAL_COUNT
}SET_EVENT_EVENTS_t;










typedef enum
{
  SET_WAI_TS_CONFIG_IDX_ROM,
  SET_WAI_TS_CONFIG_IDX_DLE,
  SET_WAI_TS_CONFIG_IDX_RAM,
  SET_WAI_TS_CONFIG_IDX_IDLE,
  SET_WAI_TS_CONFIG_IDX_ROM_LAST
}SET_WAI_TS_CONFIG_IDX_t;





typedef enum
{
  SET_EVENT_TYPE_CONTEXT_SWITCH,
  SET_EVENT_TYPE_CHECKPOINT_EVENT,
  SET_EVENT_TYPE_BOUND_CHECKPOINT_EVENT,
  SET_EVENT_TYPE_QUANTITATIVE_EVENT,
  SET_EVENT_TYPE_PROCESS_EVENT,
  SET_EVENT_TYPE_BOUND_PROCESS_EVENT,
  SET_EVENT_TYPE_PROGRAM_COUNTER,
}SET_EVENT_TYPE_t;

#line 272 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
typedef struct _SET_EVENT_EVENT
{
  uint32_t type;
  uint32_t uid;
  uint32_t end;
  char name[80];
  uint32_t min;
  uint32_t avg;
  uint32_t max;
  uint32_t predecessor;
}SET_EVENT_EVENT_INFO_t;

#line 294 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
typedef struct _SET_EVENT_EVENT_CONFIG_INF
{
  uint32_t uid;
  char name[16];
}SET_EVENT_EVENT_CONFIG_INFO_t;







typedef struct _SET_EVENT_DICTIONARY_INFO
{
  uint32_t vintage;
  char signature[16];
}SET_EVENT_DICTIONARY_INFO_t;










typedef struct _SET_EVENT_THREAD_INFO
{
  uint32_t uid;
  uint32_t cpu;
  char name[80];
}SET_EVENT_THREAD_INFO_t, *pSET_EVENT_THREAD_INFO_t;









typedef struct SET_EVENT_FPS_EVENT_INFO
{
  uint32_t uid;

   char name[17];

#line 344 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
}SET_EVENT_FPS_EVENT_INFO_t, *pSET_EVENT_FPS_EVENT_INFO_t;

#line 359 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_eventengine.h"
typedef struct SET_EVENT_TIME_INFO
{
  uint32_t systemClkFreq;
  uint32_t setTimerPrescaler;
  uint32_t msts21LsbOffset;
  uint32_t ts07LsbOffset;
  uint32_t ts12LsbOffset;
  uint32_t ts16LsbOffset;
  uint32_t ts24LsbOffset;
}SET_EVENT_TIME_INFO_t, *pSET_EVENT_TIME_INFO_t;

#line 228 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"





Status_t  __attribute__((section("TRW")))  NGSET_InitMain(SysBootPhase_t bootPhase);
void  __attribute__((section("TRW")))  NGSET_Configure_PCU(void);
uint64_t SET_GetSetTimer(void);
uint32_t SET_GetSetTimerFreqInMHz(void);
void     SET_CheckATBMode(void);
Status_t   SET_DiagGetSETEngStatus(uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);
Status_t   SET_DiagConfigSETEng(SCTP_AppState_t state, uint8_t *pAppCmdData, uint32_t *pBuffer, uint32_t numBytes);
Status_t   SET_GetAllHwEventsStatus(uint32_t *pRetData);

#line 250 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
 void SET_AtbIntHandler(void);



__inline static  void FADI_Enable_MP_SmaRT(void)
{

#line 262 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
}

__inline static  void FADI_Disable_MP_SmaRT(void)
{

#line 272 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
}

__inline static  void FADI_Enable_PS_SmaRT(void)
{

#line 282 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
}

__inline static  void FADI_Disable_PS_SmaRT(void)
{

#line 292 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
}

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/seteventstolog.h"

#line 298 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"

#line 330 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ngset/inc_public/set_apis.h"
void PCU_SendSetEventParam(uint32_t args, ...);

#line 27 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_intcontrollerdriver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_defaultintmap.h"

#line 182 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_defaultintmap.h"
;

#line 35 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_intcontrollerdriver.h"


typedef   void(*InterruptHandler_t)(void);

Status_t  __attribute__((section("TRW")))  SYS_IntControllerInit(BOOL32 EnableInterrupt);
void     SYS_MaskAll_CPU_Interrupts(void);
 void     SYS_Mask_CPU_InteruptNumber(uint32_t intNum);
void       SYS_Enable_CPU_InterruptNumber(uint32_t intNum);
BOOL     SYS_InputInterruptIsActive(uint32_t intNum);
BOOL32   SYS_IsEnabled_CPU_InterruptNumber(uint32_t intNum);
uint32_t SYS_GetStatus_CPU_InterruptNumber(uint32_t intNum);
Status_t   SYS_Install_ISR_Vector(uint32_t vectorNumber, InterruptHandler_t handler);
void     SYS_SetIntPriority(uint32_t intNum, uint32_t priority);
uint8_t  SYS_GetIntPriority(uint32_t CPU_Interrupt);
void     SYS_FireSGI(uint32_t intNum, uint8_t targetFlag);
void     SYS_ClearPulseInt(uint32_t intNum);
void     SYS_SetIntMode(uint32_t intNum, uint32_t intMode);
uint32_t SYS_GetIntMode(uint32_t intNum);
void     SYS_TriggerSwi(uint32_t intNum);
void     SYS_SetIntThreshold(uint32_t threshold);
void     SYS_InitInterruptVectors(void);

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/svci_dma_api.h"
#line 16 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/svci_dma_api.h"
typedef struct SVCI_DMA_RLS_MODE_s
{
   uint8_t mINCREMENT_AT_END_OF_READ  : 3;

   uint8_t mWRITE_OP_SRC_RELEASE_MODE : 1;


   uint8_t mINCREMENT_AT_END_OF_WRITE : 3;

   uint8_t mWRITE_OP_DST_RELEASE_MODE : 1;

}SVCI_DMA_RLS_MODE_t;


typedef struct SVCI_DMA_DescOpt_s
{
   uint8_t mSOURCE_PORT       : 2 ;





   uint8_t mDEST_PORT          : 2;





   uint8_t mDESCRIPTOR_RELEASE : 1;

   uint8_t mINTERRUPT          : 1;

   uint8_t mSEND_MESSAGE       : 1;

   uint8_t mRESERVED           : 1;
} SVCI_DMA_DescOpt_t;


typedef struct SVCI_DMA_Descriptor_s
{
   uint8_t  CHK_INT_CNT0;
   uint8_t  CHK_INT_CNT1;


   uint8_t  RLS_SRC_EXT_CNT;





   uint8_t  RLS_DST_EXT_CNT;






   SVCI_DMA_RLS_MODE_t  EXT_RLS_MODE;
   SVCI_DMA_DescOpt_t   XFER_OPTIONS;
   uint16_t             XFER_LENGTH;

   uint8_t* SRC_ADDRESS;
   uint8_t* DST_ADDRESS;

} SVCI_DMA_Descriptor_t;

typedef enum SVCI_DMA_SRC_PORT_MODE_s
{
   SRC_DEFAULT_QUEUE_CONFIGURATION = 0,
   SRC_FIXED_PATTERN = 1,
   SRC_NARROW_PORT = 2,
   SRC_WIDE_PORT = 3
}SVCI_DMA_SRC_PORT_MODE_t;






typedef enum SVCI_DMAC0_CHANNELS_e
{
   MP0_PS0_INFRA_DMA_CHAN,
   MP0_PS0_ADMIN_DMA_CHAN,
   MP0_PS0_OPB_READ_DMA_CHAN,
   MP0_PS0_HIGH_DMA_CHAN,
   MP0_PS0_RLC_READ_DMA_CHAN,
   MP0_PS0_NORMAL_DMA_CHAN,
   MP1_PS0_OBP_READ_DMA_CHAN,
   MP1_PS0_HIGH_DMA_CHAN,

   MP0_PS1_INFRA_DMA_CHAN,
   MP0_PS1_ADMIN_DMA_CHAN,
   MP0_PS1_OPB_READ_DMA_CHAN,
   MP0_PS1_HIGH_DMA_CHAN,
   MP0_PS1_RLC_READ_DMA_CHAN,
   MP0_PS1_NORMAL_DMA_CHAN,
   MP1_PS1_OBP_READ_DMA_CHAN,
   MP1_PS1_HIGH_DMA_CHAN,
   MP0_MP1_HIGH_PRIORITY_DMA_CHAN,
   MP0_MP1_SYNC_DMA_CHAN,
   MP0_MP1_INFRA_DMA_CHAN,
   MP1_MP0_ACK_DMA_CHAN,
   MP0_ASYNC_CHAN,
   PCU_ASYNC_CHAN,
   MP0_BLOCKING_ISR_CHAN,
   MP0_BLOCKING_TASK_FE_CHAN,
   MP0_BLOCKING_TASK_FTL_CHAN,
   MP0_BLOCKING_TASK_INFRA_CHAN,
   MP0_INFRA_GP_DMA_CHAN,

   MAX_DMAC0_CHAN,
}SVCI_DMAC0_CHANNELS_t;

typedef enum SVCI_DMAC1_CHANNELS_e
{
   PS0_OTG_LLFS0_DIE0_CHAN,
   PS0_OTG_LLFS0_DIE1_CHAN,
   PS0_OTG_LLFS0_DIE2_CHAN,
   PS0_OTG_LLFS0_DIE3_CHAN,

   PS0_OTG_LLFS1_DIE0_CHAN,
   PS0_OTG_LLFS1_DIE1_CHAN,
   PS0_OTG_LLFS1_DIE2_CHAN,
   PS0_OTG_LLFS1_DIE3_CHAN,

   PS0_OTG_LLFS2_DIE0_CHAN,
   PS0_OTG_LLFS2_DIE1_CHAN,
   PS0_OTG_LLFS2_DIE2_CHAN,
   PS0_OTG_LLFS2_DIE3_CHAN,

   PS0_OTG_LLFS3_DIE0_CHAN,
   PS0_OTG_LLFS3_DIE1_CHAN,
   PS0_OTG_LLFS3_DIE2_CHAN,
   PS0_OTG_LLFS3_DIE3_CHAN,

   PS0_MP0_URGENT_DMA_CHAN,
   PS0_MP0_NORMAL_DMA_CHAN,
   PS0_MP0_INFRA_DMA_CHAN,




   PS1_OTG_LLFS0_DIE0_CHAN,
   PS1_OTG_LLFS0_DIE1_CHAN,
   PS1_OTG_LLFS0_DIE2_CHAN,
   PS1_OTG_LLFS0_DIE3_CHAN,

   PS1_OTG_LLFS1_DIE0_CHAN,
   PS1_OTG_LLFS1_DIE1_CHAN,
   PS1_OTG_LLFS1_DIE2_CHAN,
   PS1_OTG_LLFS1_DIE3_CHAN,

   PS1_OTG_LLFS2_DIE0_CHAN,
   PS1_OTG_LLFS2_DIE1_CHAN,
   PS1_OTG_LLFS2_DIE2_CHAN,
   PS1_OTG_LLFS2_DIE3_CHAN,

   PS1_OTG_LLFS3_DIE0_CHAN,
   PS1_OTG_LLFS3_DIE1_CHAN,
   PS1_OTG_LLFS3_DIE2_CHAN,
   PS1_OTG_LLFS3_DIE3_CHAN,

   PS1_MP0_URGENT_DMA_CHAN,
   PS1_MP0_NORMAL_DMA_CHAN,
   PS1_MP0_INFRA_DMA_CHAN,
   MAX_DMAC1_CHAN,

}SVCI_DMAC1_CHANNELS_t;

typedef enum
{
   eSVCI_DMA_DEFAULT_PRIORITY,
   eSVCI_DMA_MEDIUM_PRIORITY,
   eSVCI_DMA_HIGH_PRIORITY,
   eSVCI_DMA_MAX_PRIORITY
}SVCI_DMA_CHANNEL_PRIORITY_t;

#line 242 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/svci_dma_api.h"
typedef struct SVCI_DMA_DescRingBuff_s
{
   uint32_t DescriptorsBaseAddr;
   uint32_t nDMA_CNT;
   uint32_t nAddressOfChannel;
   uint32_t nDescriptorsInChannel;
   uint32_t isQueueEnabled;
} SVCI_DMA_DescRingBuff_t;

typedef struct SVCI_DMA_ContBlock_s
{
   uint32_t coreBaseAddr;
   uint32_t descRingBuffBaseAddr;
   SVCI_DMA_DescRingBuff_t *ringBuffers;
   uint32_t numChannels;
   uint32_t maxNumOfBases;
   uint32_t maxChannelsPerBase[2];

} SVCI_DMA_ContBlock_t;


extern SVCI_DMA_ContBlock_t gSVCI_DMAC0_ContBlock;
extern SVCI_DMA_ContBlock_t gSVCI_DMAC1_ContBlock;

Status_t SVCI_DMA_Init(void);
uint32_t SVCI_DMA_GetDescCount(uint32_t dmaChannel);
void SVCI_DMA_SetDescriptor(SVCI_DMA_Descriptor_t *pDescriptor, void *dest, void *src, uint32_t len);
void SVCI_DMA_SetDescriptorFixedPattern(SVCI_DMA_Descriptor_t *pDescriptor, void *dest, uint32_t pattern, uint32_t len);
void SVCI_DMA_DescriptorIntEnable(SVCI_DMA_Descriptor_t *pDescriptor, BOOL isEnabled);
uint32_t SVCI_DMA_GetDescCounter(SVCI_DMA_ContBlock_t *pSVCI_DMA_ContBlock, uint32_t nChannel);
void SVCI_DMA_DescrIncrementCnt(SVCI_DMA_ContBlock_t *pSVCI_DMA_ContBlock, uint32_t nChannel);
void SVCI_DMA_SetSourcePortMode(SVCI_DMA_Descriptor_t *pDescriptor, SVCI_DMA_SRC_PORT_MODE_t srcPortMode);
void SVCI_DMA_FillDefaultDescriptor(SVCI_DMA_Descriptor_t *pDescriptor);
void SVCI_DMA_ConfigureChannelIRQ(SVCI_DMA_ContBlock_t *pSVCI_DMA_ContBlock, uint32_t nChannel, uint32_t nLine,BOOL isEnabled);
void SVCI_DMA_EnableChannelIRQ(SVCI_DMA_ContBlock_t *pSVCI_DMA_ContBlock, uint32_t nChannel, BOOL isEnabled);
void SVCI_DMA_ClearChannelIRQ(SVCI_DMA_ContBlock_t *pSVCI_DMA_ContBlock, uint32_t nChannel);
SVCI_DMA_DescRingBuff_t *SVCI_DMA_GetChannelPtr(SVCI_DMA_ContBlock_t *pDMAC_ContBlock, uint32_t nChannel);
void SVCI_DMA_SetChannelPriority(SVCI_DMA_ContBlock_t *pDMAC_ContBlock, uint32_t nChannel,uint32_t nPriority);

#line 21 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"

#line 261 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"
typedef struct MP_PQD_Queue_s
{
   uint32_t             QType;
   uint32_t             msgSizeInBytes;
   uint32_t             prodNumOfMsgs;
   uint32_t             IPCCntAddr;
   uint32_t             DMAIntCntAddr;
   uint32_t             DMADescriptorCounter;

   uint8_t              *pFirstRBMsg;
   uint8_t              *pLastRBMsg;
   uint8_t              *pCurRBMsg;

   uint32_t             pendingCommitCnt;
} MP_PQD_Queue_t;

typedef struct MP_CQD_Queue_s
{
   uint32_t             QType;
   uint32_t             msgSizeInBytes;
   uint32_t             consNumOfMsgs;
   uint32_t             prodNumOfMsgs;
   uint32_t             IPCCntAddr;
   uint32_t             MP_CQD_DMAIntCntAddr;

   uint8_t              *pFirstRBMsg;
   uint8_t              *pLastRBMsg;
   uint8_t              *pCurRBMsg;
} MP_CQD_Queue_t;

#line 309 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"
enum MP_MQD_PS_TYPE_e
{
   MP_MQD_PS_TYPE_PS0 = 0,
   MP_MQD_PS_TYPE_PS1,

   MP_MQD_PS_TYPE_LAST = MP_MQD_PS_TYPE_PS1,
   MP_MQD_PS_TYPE_NUM,
   MP_MQD_PS_TYPE_INVALID = 0xFF
};
typedef uint32_t MP_MQD_PSType_t;

#line 337 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"
typedef enum MP_MQD_Queue_Group_e
{
   MP_MQD_QUEUE_GROUP_INFRA = 0,
   MP_MQD_QUEUE_GROUP_FTL,
   MP_MQD_QUEUE_GROUP_INFRA_MP1,


   MP_MQD_QUEUE_GROUP_NUM

} MP_MQD_Queue_Group_t;




typedef enum MP_PQD_QUEUE_TYPE_e
{
   MP_PQD_QUEUE_TYPE_INFRA = 0,
   MP_PQD_QUEUE_TYPE_ADMIN,
   MP_PQD_QUEUE_TYPE_OPB_READ,
   MP_PQD_QUEUE_TYPE_HIGH,
   MP_PQD_QUEUE_TYPE_RLC_READ,
   MP_PQD_QUEUE_TYPE_NORMAL,
   MP_PQD_QUEUE_TYPE_NUM,
   MP_PQD_QUEUE_TYPE_INVALID = 0xFF,
} MP0_PS_PQD_QueueType_t;

typedef enum MP1_PS_PQD_QueueType_e
{
   MP1_PS_QUEUE_TYPE_OPB_READ_Q = 0,
   MP1_PS_QUEUE_TYPE_HIGH_Q,
   MP1_PS_QUEUE_TYPE_NUM,
   MP1_PS_QUEUE_TYPE_INVALID = 0xFF,
} MP1_PS_PQD_QueueType_t;

typedef enum MP_MP1_QUEUE_TYPE_e
{
   MP0_MP1_HIGH_PRIORITY_Q = 0,
   MP0_MP1_SYNC_Q,
   MP0_MP1_INFRA_Q,
   MP0_MP1_QUEUE_TYPE_NUM
}MP0_MP1_QUEUE_TYPE_t;

typedef enum MP1_MP0_QUEUE_TYPE_e
{
   MP1_MP0_ACK_Q = 0,
   MP1_MP0_QUEUE_TYPE_NUM
}MP1_MP0_QUEUE_TYPE_t;



typedef enum MP_CQD_QUEUE_TYPE_e
{
   MP_CQD_QUEUE_TYPE_URGENT = 0,
   MP_CQD_QUEUE_TYPE_NORMAL,
   MP_CQD_QUEUE_TYPE_INFRA,
   MP_CQD_QUEUE_TYPE_NUM
} MP_PS_CQD_QueueType_t;


typedef uint32_t MP_PQD_QueueType_t;










typedef MP0_PS_PQD_QueueType_t MP_PS_PQD_QueueType_t;
typedef MP0_MP1_QUEUE_TYPE_t MP_MP_PQD_QueueType_t;
typedef MP1_MP0_QUEUE_TYPE_t MP_MP_CQD_QueueType_t;







typedef struct MQD_RTFADI_Data_s
{
   uint16_t          CQDvalidCnt[MP_MQD_PS_TYPE_NUM][MP_CQD_QUEUE_TYPE_NUM];
   uint16_t          PQDvalidCnt[MP_MQD_PS_TYPE_NUM][MP_PQD_QUEUE_TYPE_NUM];
}  MQD_RTFADI_Data_t;

#line 443 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"
typedef enum FE_QUEUE_COUNTERS_e
{
   HAWA_QUEUE_0_CNT   = 13,
   HAWA_QUEUE_1_CNT,
   HAWA_QUEUE_2_CNT,
   HAWA_QUEUE_3_CNT,
   HAWA_QUEUE_4_CNT,
   LAST_HAWA_QUEUE_CNT = HAWA_QUEUE_4_CNT,
   HAQ_QUEUE_0_CNT = 18,
   HAQ_QUEUE_1_CNT,
   HAQ_QUEUE_2_CNT,
   HAQ_QUEUE_3_CNT,
   HAQ_QUEUE_4_CNT,
   HAQ_QUEUE_5_CNT,
   HAQ_QUEUE_6_CNT,
   HAQ_QUEUE_7_CNT,
   HAQ_QUEUE_8_CNT,
   HAQ_QUEUE_9_CNT,
   HAQ_QUEUE_10_CNT,
   HAQ_QUEUE_11_CNT,
   HAQ_QUEUE_12_CNT,
   HAQ_QUEUE_13_CNT,
   HAQ_QUEUE_14_CNT,
   HAQ_QUEUE_15_CNT,
   LAST_HAQ_QUEUE_CNT = HAQ_QUEUE_14_CNT
}FE_QUEUE_COUNTERS_t;

#line 475 "d:/gitrepo/fpgcss-vega/source/infra/modules/mqd/inc_public/mp_mqd_api.h"
void     FE_API_HAWAQ_DccmIpcIsr(uint32_t feIpcHawaqInterrupts);



uint32_t SYS_IPC_MsgGetCnt(uint32_t ipcBaseAddr, uint32_t cntIdx);

uint32_t MP_PS_CQD_GetIntMask(void);
uint32_t MP_MP_CQD_GetIntMask(void);
uint32_t MP_PS_CQD_GetStatus(void);
uint32_t MP_MP_CQD_GetStatus(void);
void MPSLAVE_MQD_Init(void);
Status_t MP_MQD_Init(void);
void MP_MQD_IntRegister(pRTOS_User_ISR_t pISR);
MP_PQD_Queue_t* MP_PS_PQD_GetQueuePtr(MP_MQD_PSType_t PSType, uint32_t QType);
uint32_t MP_PS_PQD_GetFreeCnt(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
uint32_t MP_MP_PQD_GetFreeCnt(MP_MP_PQD_QueueType_t QType);
uint32_t MP_PS_PQD_GetValidCnt(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
uint32_t MP_MP_PQD_GetValidCnt(MP_MP_PQD_QueueType_t QType);
void MP_MP_PQD_SendMsgStart(MP_MP_PQD_QueueType_t QType, uint32_t LPAddr);
void MP_MP_PQD_SendMsgEnd(MP_MP_PQD_QueueType_t QType);
void MP_PS_PQD_SendMsgStart(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType, uint32_t LPAddr);
void  __attribute__((section("CODE_RANDOM")))  MP_PS_PQD_SendMsgEnd(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
uint32_t MP_PS_PQD_Flush(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
uint32_t MP_MP_PQD_Flush(MP_MP_PQD_QueueType_t QType);
uint32_t MP_PS_PQD_GetStatusMask(void);
uint32_t MP_MP_PQD_GetStatusMask(void);
uint32_t MP_PS_PQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
uint32_t MP_MP_PQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
Status_t MP_MP_PQD_ExpandStatusBit(uint32_t statusBit, MP_MP_PQD_QueueType_t* QType);
Status_t MP_PS_PQD_ExpandStatusBit(uint32_t statusBit, MP_MQD_PSType_t* PSType, MP_PS_PQD_QueueType_t* QType);
void MP_PS_PQD_IntDisable(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
void MP_MP_PQD_IntDisable(MP_MP_PQD_QueueType_t QType);
uint32_t MP_PS_PQD_GetStatus(void);
uint32_t MP_MP_PQD_GetStatus(void);
uint32_t MP_PS_PQD_GetIntMask(void);
uint32_t MP_MP_PQD_GetIntMask(void);
void MP_PS_PQD_ClrIntMask(uint32_t intMask);
void MP_PS_PQD_SetQThr(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType, uint32_t Thr);
void MP_MP_PQD_SetQThr(MP_MP_PQD_QueueType_t QType, uint32_t Thr);
void  __attribute__((section("CODE_RANDOM")))  MP_PS_PQD_IntThrEnable(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
void MP_MP_PQD_IntThrEnable(MP_MP_PQD_QueueType_t QType);
uint32_t MP_PS_PQD_GetThrStatus(void);
uint32_t MP_MP_PQD_GetThrStatus(void);
uint32_t MP_PS_PQD_GetThrIntMask(void);
uint32_t MP_MP_PQD_GetThrIntMask(void);
void MP_PS_PQD_ClrThrIntMask(uint32_t intMask);
void MP_MP_PQD_ClrThrIntMask(uint32_t intMask);
uint32_t MP_PS_CQD_GetValidCnt(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType);
uint32_t MP_MP_CQD_GetValidCnt(MP_MP_CQD_QueueType_t QType);
void MP_PS_CQD_PeekMsgISR(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType, uint8_t** pMsg);
Status_t MP_PS_CQD_PeekMsg(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType, uint8_t** pMsg);
void MP_MP_CQD_PeekMsgISR(MP_MP_CQD_QueueType_t QType, uint8_t** pMsg);
Status_t MP_MP_CQD_PeekMsg(MP_MP_CQD_QueueType_t QType, uint8_t** pMsg);
void MP_PS_CQD_ReleaseMsg(uint32_t nConsumer, uint32_t nQType);
void MP_MP_CQD_ReleaseMsg(MP_MP_CQD_QueueType_t nQType);
void MP_PS_CQD_IntEnable(uint32_t nConsumer, uint32_t nQType);
void MP_MP_CQD_IntEnable(MP_MP_CQD_QueueType_t QType);
void MP_PS_CQD_IntDisable(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType);
void MP_MP_CQD_IntDisable(MP_MP_CQD_QueueType_t QType);
uint32_t MP_PS_CQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
uint32_t MP_MP_CQD_GetStatusGroupMask(MP_MQD_Queue_Group_t QGroup);
Status_t MP_PS_CQD_ExpandStatusBit(uint32_t statusBit, MP_MQD_PSType_t* PSType, MP_PS_CQD_QueueType_t* QType);
Status_t MP_MP_CQD_ExpandStatusBit(uint32_t statusBit, MP_MP_CQD_QueueType_t* QType);
void MP_PS_CQD_InQueueInit(void);
void MP_PS_CQD_ClrIntMask(uint32_t intMask);
void MP_MP_CQD_ClrIntMask(uint32_t intMask);
void MP_PS_CQD_SetQThr (MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType, uint32_t Thr);
void MP_MP_CQD_SetQThr (MP_MP_CQD_QueueType_t QType, uint32_t Thr);
void MP_PS_CQD_IntThrEnable(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType);
void MP_MP_CQD_IntThrEnable(MP_MP_CQD_QueueType_t QType);
void MP_PS_CQD_IntThrDisable(MP_MQD_PSType_t PSType, MP_PS_CQD_QueueType_t QType);
void MP_MP_CQD_IntThrDisable(MP_MP_CQD_QueueType_t QType);
uint32_t MP_PS_CQD_GetThrStatus(void);
uint32_t MP_MP_CQD_GetThrStatus(void);
uint32_t MP_PS_CQD_GetThrIntMask(void);
uint32_t MP_MP_CQD_GetThrIntMask(void);
void MP_PS_CQD_ClrThrIntMask(uint32_t intMask);
void MP_MP_CQD_ClrThrIntMask(uint32_t intMask);
void MP_CQD_GeneralIntDisable(uint32_t ipcMsgQueueNumber);
void MP_CQD_GeneralIntEnable(uint32_t ipcMsgQueueNumber);
uint32_t MP_CQD_GeneralGetIntMask(uint32_t ipcGroupOffset);
void MP_CQD_GeneralClrIntMaskISR(uint32_t ipcGroupOffset, uint32_t intMask);
void MP_CQD_GeneralClearValidCnt(uint32_t ipcMsgQueueNumber);
void MP_CQD_GeneralDecrementValidCnt(uint32_t ipcMsgQueueNumber);
uint32_t MP_CQD_GeneralGetCountersStatus(uint32_t ipcGroupOffset);
uint32_t MP_CQD_FE_GetCountersStatus(FE_QUEUE_COUNTERS_t nFirstCounter, FE_QUEUE_COUNTERS_t nLastCounter);
uint32_t MP_CQD_FE_GetCountersMask(FE_QUEUE_COUNTERS_t nFirstCounter, FE_QUEUE_COUNTERS_t nLastCounter);
void MP_CQD_FE_DisableCountersInt(FE_QUEUE_COUNTERS_t nFirstCounter,
                                  FE_QUEUE_COUNTERS_t nLastCounter,
                                  uint32_t mask);
uint32_t MP_MQD_GetRTFADIStatistics(MQD_RTFADI_Data_t *pMQDRTFADI);

#line 28 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver_api.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver_api.h"
typedef enum HIM_CPU_ID_e
{
   HIM_CPU_ID_MP0        = 0,
   HIM_CPU_ID_MP1        = 1,
   HIM_CPU_ID_DEBUG_CORE = 2,
   HIM_CPU_ID_PCU        = 3,
   HIM_CPU_NUM           = 4,
}HIM_CPU_ID_t;


enum
{
   HAWA_RANDOM_WRITE       = 0,
   HAWA_SEQUENTIAL_WRITE   = 1,
   HAWA_OVERLAP_WRITE      = 2,
   HAWA_LAST_USED_WR_TYPE  = HAWA_OVERLAP_WRITE,
   HAWA_SN1_WRITE          = 3,
   HAWA_SN2_WRITE          = 4,
   HAWA_NUM_WRITE_TYPES    = 5,
};
typedef uint32_t HAWA_WriteTypes_t;

#line 29 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"





typedef union HFWR_HIM_INT_EN_u
{
    struct HFWR_HIM_INT_EN_s
    {
         uint32_t hnvme              :1;
         uint32_t fsmMn              :1;
         uint32_t reserved           :30;
    } bits;
    uint32_t all32;
} HFWR_HIM_INT_EN_t;



typedef union NVM_HSQM_CMD_CTR_u
{
    struct NVM_HSQM_CMD_CTR_s
    {
        uint32_t io_Ctr                :16;
        uint32_t admin_Ctr             :16;
    } bits;
    uint32_t all32;
} NVM_HSQM_CMD_CTR_t;

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bmg_configuration.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_global.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_types.h"

#line 64 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_types.h"
;
;
;
;
;

#line 122 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_types.h"
enum
{
   VBA_UECC_INDICATOR = 0xFFFFFFFE,
   VBA_INVALID = 0xFFFFFFFF,
};







typedef enum BML_Partition_ID_e
{
   BML_PARTITION_FIRST,
   BML_PARTITION_SLC = BML_PARTITION_FIRST,

   BML_PARTITION_TLC,

   BML_NUM_PARTITIONS,

   BML_ALL_PARTITIONS = BML_NUM_PARTITIONS,

   BML_NUM_PARTITIONS_EXTENDED,

   BML_PARTITION_INVALID

}   BML_Partition_ID_t;

enum BML_BlockType_e
{
   BLOCK_TYPE_FIRST,
   BLOCK_SLC = BLOCK_TYPE_FIRST,
   BLOCK_TLC,

   NUM_BLOCK_TYPES
};

typedef enum BML_SbmType_e
{
   SBM_TYPE_FIRST,
   SBM_TYPE_SBM = SBM_TYPE_FIRST,
   SBM_TYPE_FBM,

   NUM_SBM_TYPES
} BML_SbmType_e;

typedef uint8_t   BML_SbmType_t;

enum BML_ProtectedBlockType_e
{
   NON_PROTECTED_BLOCK,
   PROTECTED_BLOCK,

   NUM_PROTECTED_TYPES
};

typedef uint8_t   BML_BlockType_t;


typedef enum BML_CompositionStrategy_e
{
   BML_COMPOSITION_REGULAR,
   BML_COMPOSITION_IRREGULAR,
   BML_NUM_ALLOCATABLE_STRATEGIES,
   BML_COMPOSITION_UNALLOCATABLE = BML_NUM_ALLOCATABLE_STRATEGIES,
   BML_COMPOSITION_ALL,
}   BML_CompositionStrategy_t;

typedef enum BML_PecStrategy_e
{
   BML_PEC_LOWEST,
   BML_PEC_HIGHEST,

   BML_NUM_PEC_STRATEGIES_INTEREXCHANGEABLE,
   BML_PEC_RESERVED = BML_NUM_PEC_STRATEGIES_INTEREXCHANGEABLE,

   BML_NUM_PEC_STRAGIES,

   BML_PEC_STRATEGY_ALL_INTEREXCHANGEABLE

}   BML_PecStrategy_t;




typedef enum BML_RevrsTransInParityLocation_e
{
   BML_REVRS_TRANS_IN_PARITY_OUT = 0,
   BML_REVRS_TRANS_IN_PARITY_FIRST,
   BML_REVRS_TRANS_IN_PARITY_MIDDLE,
   BML_REVRS_TRANS_IN_PARITY_LAST,

   BML_REVRS_TRANS_IN_PARITY_MAX = 0xffff
}BML_RevrsTransInParityLocation_t;

typedef enum BML_GetPecCaller_e
{
   BML_GET_PEC_CALLER_ALLOC_BLOCK,
   BML_GET_PEC_CALLER_LOG_CHECK,
   BML_GET_PEC_CALLER_LOG_IFS_UPDATE,
   BML_GET_PEC_CALLER_UGSD_OPEN_BLOCK,
   BML_GET_PEC_CALLER_REUSE_BLOCK,
   BML_GET_PEC_CALLER_BRLC_ALLOC_BLOCK,
   BML_GET_PEC_CALLER_UPDATE_CLOSED_BLOCK_PEC,
   BML_GET_PEC_CALLER_UGSD_REBUILD_JB,
   BML_GET_PEC_FIRST_CALLER_FROM_ARAM,
   BML_GET_PEC_CALLER_WL_ON_BLOCK_OPEN = BML_GET_PEC_FIRST_CALLER_FROM_ARAM,
   BML_GET_PEC_CALLER_IS_BLK_STUCK,
   BML_GET_PEC_CALLER_DYN_SOURCE_SELECT_SLC,
   BML_GET_PEC_CALLER_GET_STATIC_CANDID,
   BML_GET_PEC_CALLER_IS_STATIC_NEEDED,
   BML_GET_PEC_CALLER_IS_STATIC_NEEDED_ON_OPB,
   BML_GET_PEC_CALLER_PTN_AUTO_FREE,
   BML_GET_PEC_CALLER_FLGP_REQUEST,
   BML_GET_PEC_CALLER_OPB_LIST_ON_MOUNT,
   BML_GET_PEC_CALLER_MTM_CLOSED_BLOCKS,
   BML_GET_PEC_CALLER_NUM,
} BML_GetPecCaller_t;

typedef enum
{
   MBM_MOUNT_HYBRID_STATE_NOT_HYBRID,
   MBM_MOUNT_HYBRID_STATE_HYBRID_DETECTED,
   MBM_MOUNT_HYBRID_STATE_UNKNOWN,
} MBM_FlgpHybridState;




typedef uint16_t   BML_JumboBlock_ID_t;

#line 270 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_types.h"
typedef union
{
   struct
   {
      uint16_t metablockId;
      uint16_t  metadiesBitmap;
   } fields;
   uint32_t all;
} MBM_ReservedListMetablock_t;

typedef uint32_t BML_Iterator_ID_t;

typedef enum BML_FifoId_e
{
   BML_FIFO_HOST_CLOSED,
   BML_FIFO_SECURE_ERASED,
   BML_MAX_NUM_FIFOS,
   BML_FIFO_INVALID = BML_MAX_NUM_FIFOS,
} BML_FifoId_t;

typedef enum BML_FifoOperation_e
{
   BML_FIFO_APPEND,
   BML_FIFO_REMOVE,
   BML_FIFO_MAX_OPR,
}BML_FifoOperation_t;

typedef struct JBA_s
{
   uint32_t fmuInBlock :  (32 - ( (11) )) ;
   uint32_t jumboBlockId :  (11) ;
}   JBA_t;

#line 317 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_types.h"
typedef struct BML_RTFADI_Data_s
{
   uint16_t JBMInternalListSize[BML_NUM_PARTITIONS][ (2) ];
   uint16_t JBMGenericListSize[BML_NUM_PARTITIONS][BML_MAX_NUM_FIFOS];
   uint16_t MBMMdPartBinaryHeapCount[BML_NUM_PARTITIONS];
   uint16_t MBMMdPartErasedBinaryHeapCount[BML_NUM_PARTITIONS];
   uint16_t JBMNbcsReqStat[ (7) ];
   uint16_t rfu[ (7)  % 2];
   uint32_t MBMPartMaxPec[BML_NUM_PARTITIONS];
   uint32_t MBMPartMinPec[BML_NUM_PARTITIONS];
   uint32_t MBMPartAvgPec[BML_NUM_PARTITIONS];
}  BML_RTFADI_Data_t;

#line 24 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_api.h"

#line 68 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_api.h"
typedef struct RS_ConfigCB_s_s
{

    uint8_t BackgroundScanPossible;
    uint8_t ForegroundScanPossible;
    uint8_t BackgroundScanEnabledInitValue;
    uint8_t ForegroundScanEnabledInitValue;


    uint32_t BgMediaScanTotalTimeMs;
    uint32_t FgMediaScanTotalTimeMs;


    uint32_t MediaScanTimeToAllowFgScanMs;


    uint32_t MediaScanTimeTooLongMs;
    uint32_t MediaScanTimeTooFastMs;
    uint32_t MediaScanTimeTooLongEventIntervalMs;
    uint32_t MediaScanTimeTooLongMaxEvents;


    uint32_t NumJPagesToScanHighPrio;
    uint32_t NumJPagesToScanMedPrio;
    uint32_t NumJPagesToScanLowPrio;
    uint32_t PendingScanHighPrioPercent;
    uint32_t PendingScanMedPrioPercent;


    uint16_t FirstJbIdxToScan;


    uint16_t MinNumScanOps;


    uint32_t WaitBeforeFirstCallMs;


    uint32_t NumJwlsToScanPerJb;


    uint32_t NumJPagesToScan;


    uint32_t BgJPageScanIntervalMsec;
    uint32_t FgJPageScanIntervalMsec;


    uint32_t MaxNumScanOpsNormalPrioQ;
    uint32_t MaxNumScanOpsHighPrioQ;

    uint32_t PendingJPagesToScanToSetHighPrio;
    uint32_t PendingJPagesToScanToSetMedPrio;


    uint32_t rsrv;

}   RS_ConfigCB_s, *RS_ConfigCB_p;






typedef enum OBM_BlockType_e
{
    OBM_BLOCK_TYPE_DATA_BLK_BASE = 0,
    OBM_BLOCK_TYPE_TLC_BASE = OBM_BLOCK_TYPE_DATA_BLK_BASE,
    OBM_BLOCK_TYPE_DYN_RLC = OBM_BLOCK_TYPE_TLC_BASE,
    OBM_BLOCK_TYPE_STC_RLC,
    OBM_BLOCK_TYPE_HOST_SHARED_TLC ,
    OBM_BLOCK_TYPE_SLC_BASE,
    OBM_BLOCK_TYPE_HOST_SEQ_SLC = OBM_BLOCK_TYPE_SLC_BASE,
    OBM_BLOCK_TYPE_HOST_RND_SLC,
    OBM_BLOCK_TYPE_CTL_BLK_BASE,
    OBM_BLOCK_TYPE_CTL_BLK = OBM_BLOCK_TYPE_CTL_BLK_BASE,
    OBM_BLOCK_TYPE_XOR,
    OBM_BLOCK_TYPE_LOG,
    OBM_BLOCK_TYPE_BRLC,
    OBM_BLOCK_TYPE_MAX,
    OBM_NUM_XORM_ARRAY_PROTECTED_BLK = OBM_BLOCK_TYPE_BRLC + 1,
    OBM_FIRST_XOR_PROTECTED_TYPE = OBM_BLOCK_TYPE_TLC_BASE,
    OBM_LAST_XOR_PROTECTED_TYPE = OBM_BLOCK_TYPE_CTL_BLK,
    OBM_NUM_XOR_PROTECTED_TYPES = OBM_LAST_XOR_PROTECTED_TYPE + 1,
    OBM_BLOCK_TYPE_PHYSICALLY_CLOSED = 0xff,
    OBM_BLOCK_TYPE_ILLEGAL = OBM_BLOCK_TYPE_PHYSICALLY_CLOSED,
}   OBM_BlockType_t;





Status_t  __attribute__((section("TRW")))  FTL_Init(SysBootPhase_t bootPhase);

#line 165 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_api.h"
uint32_t   FTL_Config_GetTotalCapacityInFMUs(void);

uint32_t   FTL_Config_GetExportedCapacityInFMUs(void);

uint32_t   FTL_Config_GetPaddedExportedCapacityInFMUs(void);

uint32_t FTL_Config_GetShadowSpaceStartFFLBA(void);

uint32_t FTL_Config_GetRPMBSpaceStartFFLBA(void);




uint32_t  __inline static    FTL_RPMB_GetWriteCounter(uint32_t targetRPMBId) {return  0;}

Status_t FTL_DLE_VerifyBudget(uint8_t* pDataBuffer);

Status_t FTL_DLE_RetreivePartitionBudget(uint8_t* pDataBuffer, uint16_t* slcBudget, uint16_t* tlcBudget);

uint32_t   FTL_Config_GetPartitionBudget(BML_Partition_ID_t partitionID);

BOOL32     FNVM_AbortOngoingFormat(void);

uint32_t   SAT_CheckFflbaErased(uint32_t fflba);

uint16_t FTL_Config_GetWearLevelPecThrBkops(void);

uint32_t   BML_GetAverageMetaBlockPec(BML_Partition_ID_t ptnId);

Status_t FTL_GetFTLMBStatusInfo(uint8_t* asd, uint32_t *pBuffer, uint32_t numBytes);

void   RLC_FillStatisticBuffer(uint32_t* smartBufferPtr);

void BML_GetPecStatistics(uint32_t* statistics, BML_Partition_ID_t i);

void RegisterAsicInterrupts(void);

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 64 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"
typedef  _Packed  union MetaData_MountFields_u
{
   uint32_t all32;



   struct MetaData_MountFields_u_s
   {
      uint16_t openBlockId        :  (4) ;
      uint16_t pecDbg             :  (3) ;
      uint16_t allocationTS       :  (5) ;
      uint16_t metaBlockOffset    :  (4) ;
      uint16_t jumboBlockId       :  (13) ;
      uint16_t preventBmlRecovery :  (1) ;
      uint16_t pecLSB             :  (1) ;
   }   fields;

}   MetaData_MountFields_t;

#line 93 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"
typedef  _Packed  struct FMU_Metadata_s
{
   uint16_t rfu;





   uint8_t  UECC;


   uint8_t  NAME_SPACE;

   uint32_t HOST_LBA;
   uint16_t CRC[ (8) ];
   uint32_t SEQ_NUM;
   MetaData_MountFields_t MOUNT_FIELDS;


   uint32_t LDPC_SEED;

   uint8_t  reserved[ (12) ];
}   FMU_Metadata_t, *pFMU_Metadata_t;

typedef struct MTM_Header_s
{
   uint16_t rfu;
   uint8_t uecc;
   uint8_t rfu1;
   uint16_t zeros[8];
   uint16_t MTM_counter;
   uint16_t pageInJb;
   uint32_t partId;
   MetaData_MountFields_t mountFields;
   uint32_t seed;
   uint8_t  reserved[ (12) ];
}   MTM_Header_t;

typedef struct LOG_FmuHeader_s
{
   uint16_t padding1;
   uint8_t uecc;
   uint8_t padding2;
   uint32_t padding3[5];
   uint32_t logCounter;
   uint32_t padding4;
   uint32_t seed;
   uint8_t  rfu[ (12) ];
}   LOG_FmuHeader_t;

#line 149 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"
typedef struct _FSHeader_t
{
   uint16_t    rfu;


   uint8_t    UECC;


   uint8_t    Data_Type;
   uint16_t   Sig;
   uint16_t   FileId;
   uint16_t   FMU_LBA;
   uint16_t   LDPC_type;
   uint8_t    ID;
   uint8_t    padding[19];


   uint32_t   LDPC_Scrambler_seed;
   uint8_t    reserved[ (12) ];
}   FSHeader_t;


;
;
;

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/hw_alignment.h"

#line 35 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"

#line 416 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_common.h"
typedef enum PartitionTypeEnum_e
{
   PARTITION_TYPE_SLC,
   PARTITION_TYPE_TLC,
   PARTITIONS_COUNT
}   PartitionTypeEnum_t;

typedef uint8_t PartitionType_t;

enum MemoryRegionType_e
{
   FTL_CAT_REGION,
   FTL_TEMPCAT_REGION,
   FTL_TEMPCAT_REGION_XRAM,
   FTL_ZCAT_REGION,
   FTL_PRM_CONTAINER_REGION,
   FTL_XOR_REGION_TRAM,
   FTL_XOR_REGION_XRAM,
   FTL_XOR_RECOVERY_REGION,

   ERR_INJ_IV_REGION,
   ERR_INJ_GLOBAL_PARAMS_REGION,
   ERR_INJ_MP_REGION,
   ERR_INJ_JB_REV_HDRS_REGION,

   FTL_LOG_REGION,
   FTL_LOG_XRAM_REGION,
   FTL_RLC_REGION,
   FTL_MTM_REGION,
   FTL_XOR_LOAD_STORE_POINTERS_REGION,
   FTL_MNT_REGION,
   FTL_DPS3_2_PRESERVE_RGN,
   FTL_ZERO_REGION,
   FTL_DUMMY_HEADER_REGION,
   FTL_MBST_RESTORE_REGION,
   FTL_JBA2VBA_DCCM_RSP_REGION,

   FTL_MEM_REGIONS
};






typedef uint32_t bitset32_t;




extern FMU_Metadata_t *DUMMY_HEADER;
extern uint32_t const ftlCpuId;




uint8_t*    FTL_MapMemoryRegion(uint8_t regionID);
uint32_t   FTL_GetMemoryRegionSize(uint8_t regionID);

uint32_t FTL_Bitmap_GetNextBitIndex(void *bitmap, uint32_t numBits, uint32_t idxToStartWith);




__inline static  JBA_t FTL_GetIncJba(JBA_t jba, int32_t increment)
{
   jba.fmuInBlock += (uint32_t)increment;
   return jba;
}

__inline static  JBA_t FTL_MakeJba(BML_JumboBlock_ID_t jbid, uint32_t offset)
{
   JBA_t jba;
   {   (jba).jumboBlockId = (jbid);   (jba).fmuInBlock = (offset); } ;
   return jba;
}

__inline static  uint32_t FTL_NumFmusFromSectors(uint8_t sectorOffset, uint32_t sectorLength)
{
   return ((sectorOffset + sectorLength +  (8)  - 1) >>  (3) );
}

#line 26 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bmg_configuration.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_definitions.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_common_defines.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_common_defines.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_regs_defines.h"

#line 895 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_regs_defines.h"
typedef struct _RS {
    HW_REG64 RS_CTRL                                    ;
    HW_REG64 RS_STATUS                                  ;
    HW_REG64 RS_INT_STATUS                              ;
    HW_REG64 RS_INT_MASK                                ;


    HW_REG64 RS_BUS_ERROR                               ;
    HW_REG64 RS_BUS_CFG                                 ;
    HW_REG64 RS_RAM_PARITY_INIT                         ;
    HW_REG64 RS_CFG_MESSAGE_ID                          ;
    HW_REG64 RS_PWR_ACCUM_TIMER                         ;
    HW_REG64 RS_HW_BUFFER_LIST_CFG                      ;
    HW_REG64 Reserved0[2];
    HW_REG64 RS_PROFILE_TBL_VALUE0                      ;
    HW_REG64 RS_PROFILE_TBL_VALUE1                      ;
    HW_REG64 RS_PROFILE_TBL_VALUE2                      ;
    HW_REG64 RS_PROFILE_TBL_CTRL                        ;
    HW_REG64 RS_TDPPM_TBL_DATA                          ;
    HW_REG64 RS_TDPPM_TBL_CTRL                          ;
    HW_REG64 RS_PWR_CNT[4]                              ;
    HW_REG64 Reserved1[28];
    HW_REG64 RS_PWR_ACCUMULATOR[4]                      ;
    HW_REG64 Reserved2[28];
    HW_REG64 RS_CFG_STARVATION03                        ;
    HW_REG64 RS_CFG_STARVATION47                        ;
    HW_REG64 RS_MAP_TBL_VALUE0                          ;
    HW_REG64 RS_MAP_TBL_VALUE1                          ;
    HW_REG64 RS_MAP_TBL_CTRL                            ;
    HW_REG64 RS_RA_BITMAP_DEBUG_CTRL                    ;
    HW_REG64 RS_RA_BITMAP_DEBUG_STATUS                  ;
    HW_REG64 RS_RB_CFG_SIZE[7]                          ;
    HW_REG64 Reserved3;
    HW_REG64 RS_RA_CFG[16]                              ;
    HW_REG64 RS_RA_STATUS[16]                           ;
    HW_REG64 RS_RB_STATUS[28]                           ;
    HW_REG64 Reserved4[86];
    HW_REG64 RS_PWR_VIRTUAL_CFG[12]                     ;
    HW_REG64 Reserved5[244];
    HW_REG64 RS_PWR_VIRTUAL_CNT[12]                     ;
    HW_REG64 Reserved6[244];
    HW_REG64 RS_RA_VIRTUAL_CFG[128]                     ;
    HW_REG64 Reserved7[16];
    HW_REG64 RS_RA_VIRTUAL_CNT[128]                     ;
    HW_REG64 Reserved8[16];
    HW_REG64 RS_REQUEST_RA[40]                          ;
    HW_REG64 Reserved9[24];
    HW_REG64 RS_REQUEST_RB[40]                          ;
    HW_REG64 Reserved10[24];
    HW_REG64 RS_REQUEST_PWR[40]                         ;
    HW_REG64 Reserved11[24];
    HW_REG64 RS_REQUEST_PRFL[40]                        ;
    HW_REG64 Reserved12[24];
    HW_REG64 RS_REQUEST_STATE[40]                       ;
    HW_REG64 Reserved13[24];
    HW_REG64 RS_REQUEST_PENDING[5]                      ;
    HW_REG64 Reserved14[3];
    HW_REG64 RS_REQUEST_PENDING_MASK[5]                 ;
    HW_REG64 Reserved15[3];
    HW_REG64 RS_RELEASE                                 ;
    HW_REG64 RS_CANCEL_REQUEST                          ;
    HW_REG64 RS_BUF_LIST_ADDR[40]                       ;
    HW_REG64 Reserved16[24];
    HW_REG64 RS_NOTIFICATION_ADDR[40]                   ;
    HW_REG64 Reserved17[24];
    HW_REG64 RS_DP_POWER_CFG[46]                        ;
    HW_REG64 Reserved18[2002];
    HW_REG64 RS_DP_POWER_STATUS[2]                      ;
    HW_REG64 Reserved19[30];
    HW_REG64 RS_P2L_TABLE[1]                            ;
    HW_REG64 Reserved20[3];
    HW_REG64 RS_CLK_GATE                                ;
    HW_REG64 RS_HEB_DATA                                ;
    HW_REG64 RS_HEB_EVENT_FILTER                        ;
    HW_REG64 RS_HEB_PWR_EVENT                           ;
    HW_REG64 RS_DUMMY_REG                               ;
    HW_REG64 RS_DBG_FOR_SOC_0                           ;
    HW_REG64 RS_DBG_FOR_SOC_1                           ;
    HW_REG64 RS_DBG_FSM_STATE                           ;

    HW_REG64 RS_DBG_RAPC_FSM_STATE_L1                   ;

    HW_REG64 RS_DBG_RAPC_FSM_STATE_L2                   ;

    HW_REG64 RS_DBG_RAPC_FSM_STATE_L3                   ;

    HW_REG64 RS_DBG_DATA_0                              ;
    HW_REG64 RS_DBG_DATA_1                              ;
    HW_REG64 RS_DBG_DATA_2                              ;
    HW_REG64 RS_DBG_STARVED0                            ;
    HW_REG64 RS_DBG_STARVED1                            ;
    HW_REG64 RS_DBG_FW_CNCL_VEC                         ;
    HW_REG64 RS_DBG_CM1_VALUE[7]                        ;
    HW_REG64 RS_DBG_CM1_CTRL                            ;
    HW_REG64 RS_DBG_FW_REQ_VEC                          ;
    HW_REG64 RS_DBG_HW_REQ_VEC[2]                       ;
    HW_REG64 RS_DBG_FW_NO_RES_VEC                       ;
    HW_REG64 RS_DBG_HW_NO_RES_VEC[2]                    ;
    HW_REG64 RS_ECC_ERR_STATISTICS                      ;

    HW_REG64 RS_BUS_ERROR_DBG                           ;
    HW_REG64 RS_DBG_REQ_HISTORY                         ;
    HW_REG64 RS_DBG_REQ_ACCEPT_HISTORY                  ;
    HW_REG64 RS_DBG_DATA_3                              ;
    HW_REG64 RS_DBG_STARVED2                            ;
    HW_REG64 RS_DBG_REQ_ACCEPT_HISTORY_NO_DP            ;
    HW_REG64 RS_DBG_DPC_PWR_HISTORY                     ;

    HW_REG64 RS_DBG_ALLOC_STAT_CTRL                     ;
    HW_REG64 RS_DBG_ALLOC_STAT_01                       ;
    HW_REG64 RS_DBG_ALLOC_STAT_02                       ;
    HW_REG64 RS_DBG_ALLOC_STAT_03                       ;
    HW_REG64 RS_ACTIVE_IDLE                             ;
    HW_REG64 RS_HEB_OV_CNT                              ;
    HW_REG64 RS_FW_BUFFER_LIST_CFG[2]                   ;
    HW_REG64 RS_DBG_BUS_ERR_ISSUED                      ;
    HW_REG64 RS_HEB_POWER_POOL_ALLOC                    ;
}RS_t, *PRS;

#line 28 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_common_defines.h"

#line 40 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_definitions.h"

#line 27 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bmg_configuration.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_rb.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_transientdataoffsets.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/rsv_driver_rb.h"

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bmg_configuration.h"

#line 96 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bmg_configuration.h"
;

#line 68 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"

#line 99 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
enum
{
   HA_FE_CROSS_IP_INTERNAL_QUEUE = 0,
   HA_ADMIN_QUEUE,
   HA_TWO_RANGE_QUEUE,
   HA_EXCEPTION_QUEUE,
   HA_RANDOM_READ_4K_QUEUE,
   HA_READ_QUEUE,
   HA_READ_OVP_QUEUE,
   HA_PRE_MOUNT_HOLDING_QUEUE,
   HA_QUEUE8,
   HA_QUEUE9,
   HA_QUEUE10,
   HA_QUEUE11,
   HA_QUEUE12,
   HA_DEFAULT_QUEUE,
   HA_RAND_READ_4K_REQUEUE_MP0,
   HA_HAWA_QUEUE,
   HA_NUM_QUEUES,
};
typedef uint32_t HA_Queues_t;

typedef enum HAQ_Dccm_e
{
   HAQ_DCCM0 = 0,
   HAQ_DCCM1,
   HAQ_HAWA_DCCM,
   HAQ_NUM_OF_DCCM,
}HAQ_Dccm_t;

#line 137 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
enum HA_SSE_Opcode_e
{
   HA_SSE_OP_GET_INDEX = 0,
   HA_SSE_OP_ADD,
   HA_SSE_OP_GET_INDEX_AND_ADD,
   HA_SSE_OP_REMOVE,
   HA_SSE_OP_REMOVE_BY_GROUP,
   HA_SSE_OP_SEARCH,
   HA_SSE_OP_SEARCH_AND_GET_INDEX_OR_ADD,
   HA_SSE_OP_ALL_ENTRY_SEARCH,
   HA_SSE_OP_ALL_ENTRY_SEARCH_AND_ADD,
   HA_SSE_OP_SEARCH_AND_ADD,
   HA_SSE_SEARCH_ALL_AND_ADD,
   HA_SSE_SEARCH_OR_ADD,
   HA_SSE_SEARCH_ALL_OR_ADD,
};
typedef uint32_t HA_SSE_Opcode_t;


enum
{
   HA_SSE_USER_HWD = 0,
   HA_SSE_USER_PRM,
   HA_SSE_USER_ACS,
   HA_SSE_USER_FW_HWD,
   HA_SSE_USER_4,
   HA_SSE_USER_MAX,
};
typedef uint32_t HA_SSE_UserIDs_t;


enum
{
   QUEUE_VALID_EMPTY = 0,
   QUEUE_VALID_ORDER_ID_ERR,
   QUEUE_VALID_RESERVE,
   QUEUE_VALID_READY,
};
typedef uint32_t CQM_Q_State2_ValidBit_t;



enum
{
   POP_DONE         = 0,
   POP_IN_PROGRESS,
};
typedef uint32_t CQM_Q_State_PopBit_t;







enum
{
   HA_SSE_USER_BIT_HWD    = 0x01,
   HA_SSE_USER_BIT_PRM    = 0x02,
   HA_SSE_USER_BIT_ACS    = 0x04,
   HA_SSE_USER_BIT_FW_HWD = 0x08,
   HA_SSE_USER_BIT_USER_4 = 0x10,
};
typedef uint32_t HA_SSE_UserIDsBits_t;

enum
{
   HA_SSE_STATUS_OK,
   HA_SSE_CFG1_VALID_BIT_ZERO,
   HA_SSE_NO_FREE_ENTRIES_ON_ADD,
   HA_SEE_NO_ENTRIES_ON_REMOVE,

};
typedef uint32_t HA_SSE_Status_t;


enum
{
   HAWA_CONTEXT_PEEK,
   HAWA_CONTEXT_POP,
};
typedef uint32_t HAWA_ContextOperations_t;

#line 230 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
typedef union HA3_CQM_Q_STATE_u
{
   struct HA3_CQM_Q_STATE_s
   {
      uint32_t     qSize      : 10;
      uint32_t     qCiHead    : 10;
      uint32_t     qCiTail    : 10;
      uint32_t     qPop       : 1;
      uint32_t     reserved_0 : 1;
   } bits;

   uint32_t all32;
} HA3_CQM_Q_STATE_t;

typedef struct HA3_CQM_Q_STATE_64_s
{
   HA3_CQM_Q_STATE_t       HA3_CQM_Q_STATE;
   uint32_t                Reserved32_63Bits;
}HA3_CQM_Q_STATE_64_t;


typedef union HA3_CQM_Q_STATE_2_u
{
   struct HA3_CQM_Q_STATE_2_s
   {
      uint32_t     qValid : 2;



      uint32_t     reserved_0 : 30;
   } bits;

   uint32_t all32;
} HA3_CQM_Q_STATE_2_t;

typedef struct HA3_CQM_Q_STATE_2_64_s
{
   HA3_CQM_Q_STATE_2_t       HA3_CQM_Q_STATE_2;
   uint32_t                 Reserved32_63Bits;
}HA3_CQM_Q_STATE_2_64_t;



typedef union HIM_SSE_OutputContext_u
{
   struct HIM_SSE_OutputContext_s
   {
      uint32_t    status            :8;
      uint32_t    match             :1;
      uint32_t    bitmapUserID      :5;
      uint32_t    index             :12;
      uint32_t    reserved          :6;
   } bits;

   uint32_t all32;
} HIM_SSE_OutputContext_t;

typedef union HIM_HWD_ItagEntry_u
{
   struct BitsItagEntry_s
   {
      uint16_t itagIndex  :15;
      uint16_t skipBit    :1;
   }BitsItagEntry_t;
   uint16_t all16;
}HIM_HWD_ItagEntry_t;


typedef union HIM_HWD_HEADER_DW0_u
{
   struct HIM_HWD_HEADER_DW0_s
   {
      uint32_t hwdReason         : 11;

#line 315 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
      uint32_t hwdNB             : 5;


      uint32_t hwdIsFUA          : 1;



      uint32_t hwdIsMultiStream  : 1;



      uint32_t hwdIsSamePartId   : 1;


      uint32_t hwdIsLast         : 1;

      uint32_t hwdIsSameStreamId : 1;


      uint32_t hwdIsRMW          : 1;


      uint32_t hwdIsSeq          : 1;


      uint32_t hwdIsErrorStatus  : 1;


      uint32_t hwdIsHotRange     : 1;



      uint32_t hwdIsSameCommand  : 1;

      uint32_t hwdReserved_26_27 : 2;
      uint32_t hwdDataType       : 4;

   } bits;

   uint32_t all32;
} HIM_HWD_HEADER_DW0_t;

typedef union HIM_HWD_HEADER_DW1_u
{
   struct HIM_HWD_HEADER_FUA_DW1_s
   {
      uint32_t hwdRndCtxId      : 9;

      uint32_t hwdReserved_9_15 : 7;
      uint32_t hwdCmdIndex      : 16;

   } hwd_FUA_bits;

   struct HIM_HWD_HEADER_NON_FUA_DW1_s
   {
      uint32_t hwdRndCtxId : 9;

      uint32_t hwdDLen     : 23;


   } hwd_nonFUA_bits;
   uint32_t all32;
} HIM_HWD_HEADER_DW1_t;


typedef union HIM_HWD_ENTRY_DW1_u
{
   struct HIM_HWD_ENTRY_DW1_s
   {
      uint16_t streamID    : 8;

      uint16_t size        : 8;


   } bits;
   uint16_t all16;
} HIM_HWD_ENTRY_DW1_t;

typedef union HIM_HWD_ENTRY_DW2_u
{
   struct HIM_HWD_ENTRY_DW2_s
   {
      uint32_t ovpBitmap      : 5;

      uint32_t reserved5_7    : 3;
      uint32_t pid            : 8;

      uint32_t orderID        : 8;

      uint32_t reserved24_27  : 4;
      uint32_t isFUA          : 1;


      uint32_t isHot          : 1;



      uint32_t isError        : 1;


      uint32_t isRMW          : 1;



   } bits;
   uint32_t all32;
} HIM_HWD_ENTRY_DW2_t;

typedef union HIM_HWD_ENTRY_DW3_u
{
   struct HIM_HWD_ENTRY_DW3_s
   {
      uint32_t wrStreamID : 16;

      uint32_t virtFuncID : 16;

   } bits;
   uint32_t all32;
} HIM_HWD_ENTRY_DW3_t;

typedef struct HIM_HWD_ENTRY_HEADER_u
{
   uint32_t             fmuLowerFlatLBA;

   uint16_t             fmuUpperFlatLBA;

   HIM_HWD_ENTRY_DW1_t  flagsDW1;
   HIM_HWD_ENTRY_DW2_t  flagsDW2;
   HIM_HWD_ENTRY_DW3_t  flagsDW3;
} HIM_HWD_ENTRY_HEADER_t;



typedef struct HIM_HWD_Context_s
{
   HIM_HWD_HEADER_DW0_t    hwdHeaderDW_0;
   HIM_HWD_HEADER_DW1_t    hwdHeaderDW_1;
   HIM_HWD_ENTRY_HEADER_t  entry[ (0x10) ];
   HIM_HWD_ItagEntry_t     itagList[ (0x10) ];
   uint32_t                bufferListIndex[ (0x10) ];
   uint32_t                bufferPtr[ (0x10) ];
   uint32_t                metadataPtr[ (0x10) ];
} HIM_HWD_Context_t;
;


typedef struct HIM_HWD_Context_DCCM_S
{
   HIM_HWD_Context_t hwdCtxt;
   uint16_t          hwdUhramCtxtIndex;
   uint8_t           hwdRFU[6];
} HIM_HWD_Context_DCCM_t;

#line 532 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
typedef union HIM_SSE_IC_OI_u
{
   struct HIM_SSE_IC_OI_s
   {
      uint16_t opCode : 4;
      uint16_t index : 12;
   } bits;

   uint16_t all16;
} HIM_SSE_IC_OI_t;

typedef struct HIM_SSE_InputContext_s
{
   HIM_SSE_IC_OI_t   OI;
   uint8_t           userID;
   uint8_t           dbIdVld;
   uint8_t           dbId;
   uint16_t          groupID;
   uint32_t          length;
   uint64_t          flatLBA;
} HIM_SSE_InputContext_t;






uint32_t                  HAWA_HWD_GetContextIndex(HAWA_WriteTypes_t curWriteType, HAWA_ContextOperations_t contextOperation);
uint32_t                  HAWA_HWD_QueueEntriesAndInterruptEnable(HAWA_WriteTypes_t curWriteType);
HIM_SSE_OutputContext_t   HA_SSE_ExecuteCommand(HIM_SSE_InputContext_t* inputContextPtr);
HIM_HWD_Context_t*        HAWA_HWD_GetContextPtr(uint32_t hwdContextIndex);
uint32_t                HAWA_HWD_GetContextIndexList(HAWA_WriteTypes_t curWriteType, uint32_t* list);
BOOL32                    HAWA_IsForceFlushCompletedByReg(void);
BOOL32                    HAWA_IsHAWAFlushActiveAndNotCompleted(void);
uint32_t                  HA_GetDLMQ(void);
uint32_t                  HNVMe_GetHSQCMDCtrl(void);
void                     __attribute__((section("CODE_MEDIUM")))  HA_HaltAndRecycleCommand(uint32_t cmdIndex);
void                      HAWA_HWD_ReleaseContext(uint32_t hwdContextIndex);

BOOL                      HAWA_IsIdle(void);

#line 576 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
struct HIM_HAQ_CommandEntry_s;

void*                     HAQ_GetFifoEntryAddress(uint32_t queueID, HAQ_Dccm_t dccmNum, uint32_t cmdDccmIdx);
uint32_t                  HAQ_ReleaseFifoEntry(uint32_t queueID, HAQ_Dccm_t dccmNum);
uint32_t                  HAQ_NumberOFValidEntries(uint32_t queueID);
uint32_t                 __attribute__((section("CODE_MEDIUM")))  HAQ_GetClassType(uint32_t queueId);
BOOL                    HAQ_IsAccelerationEnabledForQueue(uint32_t queueID);
BOOL                    HAQ_IsFTLReadQueue(uint32_t queueId);
Status_t                 __attribute__((section("CODE_MEDIUM")))  HAQ_ChangeAccelerationForQueue(BOOL enable, uint32_t queue);
void                      HABM_WaitForIdle_FwChannel(uint32_t habmChannelNum);
Status_t                 __attribute__((section("CODE_MEDIUM")))  HAQ_RestoreIRQforQueue(uint32_t queue);
BOOL32                    HNVMe_HCMP_ITAG2_IsBitSet(uint32_t itag2Idx);
BOOL32                    HNVMe_HCMP_ITAG1_IsBitSet(uint32_t itag1Idx);

#line 592 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
uint32_t                  HAQ_GetNumCommandsHAWAQ(void);
void                    HWRE_ReleaseHwdIndex(uint32_t hwdContextId);

#line 608 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
__inline static  void HIM_DisableTopLevelInterrupts_HA ( uint32_t queueBitmap )
{

#line 631 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
}

#line 644 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
__inline static  uint32_t HA_CQM_FirmwarePop(uint32_t haCqmFwQueueNumber, uint32_t* queueSizePtr)
{
   HA3_CQM_Q_STATE_t    ha3CqmFwQueueState;
   HA3_CQM_Q_STATE_2_t  ha3CqmFwQueueState2;
   uint16_t             commandIndex;
   uint32_t             intPosture;

   intPosture =  DisableInt() ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(haCqmFwQueueNumber < HA_NUM_QUEUES), "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h" , 654 , "haCqmFwQueueNumber < HA_NUM_QUEUES");                         "BullseyeCoverage restore"; } ;

   do
   {

      ha3CqmFwQueueState.all32 =   ReadRegister( (unsigned long)( ( 0xf4008000  + 0x468)  + (haCqmFwQueueNumber * sizeof(HA3_CQM_Q_STATE_64_t))) ) ;
      ha3CqmFwQueueState2.all32 =  ReadRegister( (unsigned long)( ( 0xf4008000  + 0x4E8)  + (haCqmFwQueueNumber * sizeof(HA3_CQM_Q_STATE_2_64_t))) ) ;

      IMPLEMENT_POLLING_ACCELERATION ;
   } while ( (ha3CqmFwQueueState2.bits.qValid == QUEUE_VALID_EMPTY) &&
            (ha3CqmFwQueueState.bits.qSize != 0)                   &&
            (ha3CqmFwQueueState.bits.qPop == POP_IN_PROGRESS));


   if ((ha3CqmFwQueueState2.bits.qValid == QUEUE_VALID_READY) && (ha3CqmFwQueueState.bits.qSize != 0))
   {


      commandIndex = (uint16_t) ha3CqmFwQueueState.bits.qCiHead;
      *queueSizePtr = ha3CqmFwQueueState.bits.qSize;



      ha3CqmFwQueueState.bits.qPop = 1;


      ha3CqmFwQueueState.all32 &=  (0x40000000) ;
      WriteRegister( (unsigned long)( ( 0xf4008000  + 0x468)  + (haCqmFwQueueNumber * sizeof(HA3_CQM_Q_STATE_64_t))), (unsigned long)(ha3CqmFwQueueState.all32) ) ;
   }

   else
   {

      { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h" , 687 , "0");                         "BullseyeCoverage restore"; } ;

      commandIndex =  ( (0xFFFF) ) ;
      *queueSizePtr = 0;
   }

   RestoreInt(intPosture) ;

   ;
   ;
   ;
   ;
   ;
   ;


   return commandIndex;
}

#line 899 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
extern uint32_t gMp0DccmOutstandingIoCmdsAmount;

#line 925 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
__inline static  uint32_t FE_API_HWD_GetNewContextIndex(HAWA_WriteTypes_t writeType, HAWA_ContextOperations_t contextOperation)
{
   return HAWA_HWD_GetContextIndex(writeType, contextOperation);
}









__inline static  uint32_t FE_API_HWD_GetNewContextIndexList(HAWA_WriteTypes_t writeType, uint32_t* list)
{
   return HAWA_HWD_GetContextIndexList(writeType, list);
}










__inline static  uint32_t   FE_API_HWD_QueueEntriesAndInterruptEnable(HAWA_WriteTypes_t writeType)
{
   return HAWA_HWD_QueueEntriesAndInterruptEnable(writeType);
}

#line 1013 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
__inline static  HIM_HWD_Context_t*   FE_API_HWD_GetContextPtr(uint32_t hwdContextIndex)
{
  return HAWA_HWD_GetContextPtr(hwdContextIndex);
}

#line 1041 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
__inline static  BOOL32   FE_API_HAWA_IsHAWAFlushActiveAndNotCompleted(void)
{
   return HAWA_IsHAWAFlushActiveAndNotCompleted();
}

#line 1074 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/him_minidriver.h"
void         FE_API_HAWAQ_Dccm_ReleaseFifoEntry(HAWA_WriteTypes_t writeType);
BOOL32       FE_API_HAWAQ_IsStreamActive(HAWA_WriteTypes_t writeType);
BOOL32       FE_API_HAWAQ_IsHwIdle(void);
void         FE_API_HAWAQ_DccmIpcIsr(uint32_t feIpcHawaqInterrupts);
uint32_t     FE_API_HAWAQ_GetCounterOfDccmStream(HAWA_WriteTypes_t writeType);
void         FE_API_HWD_GetNewContextIndexDCCM(HAWA_WriteTypes_t writeType, uint32_t dccmFifoIdx, HIM_HWD_Context_t** pHwdCtxt, uint32_t* pHwdCtxtID);
BOOL32       FE_API_HAWAQ_WaitStreamIdle(HAWA_WriteTypes_t writeType);


void  FE_API_HWRE_ReleaseHwdContext(uint32_t hwdIndex);

#line 25 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/sys_customconfig.h"

#line 40 "d:/gitrepo/fpgcss-vega/source/infra/modules/cfgmanager/inc_public/sys_customconfig.h"
typedef struct SYS_Custom_Features_s
{
   uint64_t thermalSoftShutdownSupport                 :1;
   uint64_t ledSupport                                : 1;
   uint64_t reserved_2_63                              :62;
}SYS_Custom_Features_t;

#line 27 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"

#line 332 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
enum NVMe_FNV_STOP_REASON_State_e
{
    NVMe_FNV_STOP_REASON_FNV_NOT_RUNNING             = 0,
    NVMe_FNV_STOP_REASON_THERMAL_THROTTLE_CONDITION  = 1,
    NVMe_FNV_STOP_REASON_SANITIZE_RECIEVED           = 2,
    NVMe_FNV_STOP_REASON_FORMAT_RECIEVED             = 3,
    NVMe_FNV_STOP_REASON_DEVICE_SELF_TEST_RECIEVED   = 4,
    NVMe_FNV_STOP_REASON_SHUTDOWN_STARTED            = 5,
    NVMe_FNV_STOP_REASON_D3_STATE_STARTED            = 6,
    NVMe_FNV_STOP_REASON_SCTP_STOP                   = 7,
    NVMe_FNV_STOP_REASON_RESET_STARTED               = 8,
    NVMe_FNV_STOP_REASON_SECOND_FNV_RECIEVED         = 9,
    NVMe_FNV_STOP_REASON_PLP                         = 10,
};

typedef uint16_t NVMe_FNV_STOP_REASON_State_t;

enum HAQ_Class_Type_e
{
    CLASS_TYPE_0 = 0,
    CLASS_TYPE_1 = 1,
    CLASS_TYPE_2 = 2,
    CLASS_TYPE_3 = 3,
};




typedef enum NVMe_AdminCmdOpCodes_e
{
   DELETE_IO_SUBMISSION_QUEUE          = 0x00,
   CREATE_IO_SUBMISSION_QUEUE          = 0x01,
   GET_LOG_PAGE                        = 0x02,
   DELETE_IO_COMPLETION_QUEUE          = 0x04,
   CREATE_IO_COMPLETION_QUEUE          = 0x05,
   IDENTIFY                            = 0x06,
   ABORT                               = 0x08,
   SET_FEATURES                        = 0x09,
   GET_FEATURES                        = 0x0A,
   ASYNC_EVENT_REQUEST                 = 0x0C,
   NAMESPACE_MANAGEMENT                = 0x0D,
   FW_COMMIT                           = 0x10,
   FW_IMAGE_DOWNLOAD                   = 0x11,
   DEVICE_SELF_TEST                    = 0X14,
   NAMESPACE_ATTACHMENT                = 0x15,
   KEEP_ALIVE_CMD                      = 0x18,
   LOCKDOWN_CMD                        = 0x24,
   FORMAT_CMD                          = 0x80,
   SECURITY_SEND                       = 0x81,
   SECURITY_RECEIVE                    = 0x82,
   SANITIZE                            = 0x84,

   VS_CMD_GET_SET_CTLR_PM_CAPABILITY   = 0xC0,

   VS_CMD_GENERAL                      = 0xDF,
   VS_CMD_GET_LOG_PAGE_SHADOW          = 0XE2,
   DEVICE_SELF_TEST_MIRROR             = 0xE4,
   SCTP_WRITE                          = 0xE5,
   SCTP_READ                           = 0xE6,
   SET_FEATURES_MIRROR                 = 0xE9,
   GET_FEATURES_MIRROR                 = 0xEA,


   VS_CMD_UPDATE_IDLOG                 = 0xF1,
   VS_CMD_GET_DUI_LOG                  = 0xFA,

} NVMe_AdminCmdOpCodes_t;

typedef enum NVMe_NVMCmdOpCodes_e
{
   NVM_FLUSH               = 0x00,
   NVM_WRITE               = 0x01,
   NVM_READ                = 0x02,
   NVM_WRITE_UNCORRECTABLE = 0x04,
   NVM_COMPARE             = 0x05,
   NVM_WRITE_ZEROES        = 0x08,
   NVM_DATASET_MANAGEMENT  = 0x09,
   NVM_VERIFY              = 0X0C,
   NVM_FNV                 = 0x80,
} NVMe_NVMCmdOpCodes_t;

enum
{
   FE_EXP_HLBA = 1,
   FE_EXP_CRC,
   FE_EXP_WUC,
   FE_EXP_UECC,
   FE_EXP_CONTROL_READ_UECC,
   FE_EXP_TRANSLATED_TO_UECC_JBA,
   FE_EXP_PRP,
   FE_EXP_PRP_FETCH,
   FE_EXP_DMA_ERR,
   FE_EXP_DRAIN_MODE_AXI_ERR,
   FE_EXP_TRANS_ERR,
   FE_EXP_FW_COMPLETION,
   FE_EXP_HOSTLESS_UECC,
   FE_EXP_DRAIN_MODE_ERR,
   FE_EXP_ENC_DEC_ERR,
   FE_EXP_ANY_BYPASS_ERR
};
typedef uint32_t FE_ExceptionType_e;

enum
{
   FE_ERR_FE,
   FE_ERR_FTL,
   FE_ERR_PS,
   FE_ERR_SEC,
   FE_ERR_INFRA,
};
typedef uint32_t FE_Errors_IP_e;

enum
{
   SEND_TO_HOST,
   GET_FROM_HOST
};
typedef uint32_t  TransferDirection_e;

enum FE_SecurityCryptoOperation_e
{
   HSEC_ENCRYPT = 0,
   HSEC_DECRYPT,
   HSEC_BYPASS,
};
typedef uint32_t FE_SecurityCryptoOperation_t;

enum
{
   HAWA_FLUSH_NORMAL_MODE                    = 0x00,
   HAWA_FLUSH_FORCE_MODE                     = 0x01,
   HAWA_FLUSH_GRACEFUL_MODE                  = 0x02,
   HAWA_FLUSH_RESERVED                       = 0x03,
};
typedef uint32_t HAWA_FlushModes_t;

enum
{
   FE_HAWA_FLUSH_CHANGE_FE_VWC            = 0x00,
   FE_HAWA_FLUSH_CHANGE_FE_THERMAL        = 0x01,
   FE_HAWA_FLUSH_CHANGE_FTL_OVP           = 0x02,
   FE_HAWA_FLUSH_CHANGE_FTL_BMG           = 0x03,
   FE_HAWA_FLUSH_CHANGE_FTL_FLUSH         = 0x04,
   FE_HAWA_FLUSH_CHANGE_GRP_ID_WRAPAROUND = 0x05,

#line 481 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
};
typedef uint32_t FE_HawaChangeFlushModeModules_t;




enum
{
   HIM_NAMESPACE_TABLE_LBS_512   = 0,
   HIM_NAMESPACE_TABLE_LBS_4096  = 1,
   HIM_NAMESPACE_TABLE_LBS_8192  = 2,
   HIM_NAMESPACE_TABLE_LBS_16384 = 3,
   HIM_LBS_INVALID,
};
typedef uint32_t HIM_LogicalBlockSizes_t;

enum
{
   HIM_HABM_COUNTER_DU_READ_OFFSET = 1,
   HIM_HABM_COUNTER_DU_WRITE_OFFSET,
   HIM_HABM_COUNTER_HOST_READ_OFFSET,
   HIM_HABM_COUNTER_HOST_WRITE_OFFSET,
   HIM_HABM_COUNTER_INVALID_OFFSET,
};
typedef uint32_t HIM_HABM_CounterOffset_t;

enum
{
   HIM_HA_COUNTER_BUSY_OFFSET = 0,
   HIM_HA_COUNTER_WRITE_WORKLOAD_OFFSET,
   HIM_HA_COUNTER_READ_WORKLOAD_OFFSET,
   HIM_HA_COUNTER_INVALID_OFFSET,
};
typedef uint32_t HIM_HA_CounterOffset_t;

enum
{
   HIM_HABM_CHANNEL_BE_0 = 0,
   HIM_HABM_CHANNEL_BE_1 = 1,
   HIM_HABM_CHANNEL_BE_2 = 2,
   HIM_HABM_CHANNEL_BE_3 = 3,
   HABM_READ_ZEROS_CHANNEL                             = 0x04,
   HABM_SINGLE_READ_BUF_RLS_CHANNEL                    = 0x05,
   HABM_SINGLE_READ_NO_BUF_RLS_CHANNEL                 = 0x06,
   HABM_READ_BUF_RLS_CHANNEL                           = 0x07,
   HABM_HAWA_CHANNEL                                   = 0x08,
   HABM_READ_NO_BUF_RLS_CHANNEL                        = 0x09,
   HABM_4K_READ_CHANNEL                                = 0x0A,
   HABM_FW_CHANNEL                                     = 0x0D,

   HABM_NUM_CHANNELS                                   = 0x10,
   HIM_HABM_CHANNEL_INVALID                            = HABM_NUM_CHANNELS
};
typedef uint32_t HIM_HABM_ChannelID_t;

enum
{
   HIM_CC_MAX_XFER_SIZE_EXCEEDED = 0x1,
   HIM_CC_NSID_CHECK_FAILED      = 0x2,
   HIM_CC_PRP_ERR_IN_PSE         = 0x4,
};


enum HIM_CC_STE_Error_e
{
   HIM_CC_STE_CROSSING_ENTRIES_ERR   = 0x1,
   HIM_CC_STE_ENTRY_DETACHED_ERR     = 0x2,
   HIM_CC_STE_ENTRY_NOT_FOUND_ERR    = 0x4,
   HIM_CC_STE_SECURITY_ERR           = 0x8,
};

enum HIM_PSE_CreateQueueErrors_e
{
   HIM_PSE_CQ_QID_MORE_THAN_256 = 0x01,
   HIM_PSE_CQ_QID_IN_USE        = 0x02,
   HIM_PSE_CQ_MAX_SIZE_EXCEEDED = 0x04,
   HIM_PSE_CQ_NOT_CONTIGUOUS    = 0x08,
   HIM_PSE_CQ_PRP_OFFSET_NOT_0  = 0x10,
   HIM_PSE_CQ_SGL_NOT_ALLOWED   = 0x20,
};

enum HIM_PSE_PRP_Errors_e
{
   HIM_PSE_PRP1_DWORD_UNALIGNED =  0x01,
   HIM_PSE_PRP2_DWORD_UNALIGNED =  0x02,
   HIM_PSE_PRP_OFFSET_NON_ZERO  =  0x04,
};


enum HIM_PSE_ALL_CASES_Errors_e
{
   HIM_PSE_FUSE_CMD_ERROR                    = 0x40,
   HIM_PSE_PRINFO_INVALID_ERROR              = 0x80,
   HIM_PSE_UNRECOGNIZED_COMMAND_ERROR        = 0x100,
   HIM_PSE_BAD_COMMAND_SET_ERROR             = 0x200,
   HIM_PSE_BAD_COMMAND_EXTENSION_TYPE_ERROR  = 0x400,
};

enum HNVMe_EEC_Errors_e
{
   HNVMe_EEC_MAX_XFER_SIZE_EXCEEDED =  0x01,
   HNVMe_EEC_NSID_CHECK_FAILED      =  0x02,
};






enum HNVMe_EEC_ProtocolSpecificErrors_e
{
   HNVMe_EEC_PSE_PRP_ERRORS          =  0x00,
   HNVMe_EEC_PSE_SGL_ERRORS          =  0x01,
   HNVMe_EEC_PSE_CREATE_QUEUE_ERRORS =  0x02,
};

enum HIM_PSE_SGL_Errors_e
{
   HIM_PSE_SGL_WAS_USED_IN_CMD  = 0x01,
};

enum
{
   NVM_ITAG_CMD_TYPE_IO = 0,
   NVM_ITAG_CMD_TYPE_ADMIN,
   NVM_ITAG_CMD_TYPE_INVALID,
};
typedef uint32_t NVM_ItagCmdType_t;

enum
{
   HIM_FQR_FW_REQUEST            = 0x01,
   HIM_FQR_BYPASS_ST             = 0x02,
   HIM_FQR_BYPASS_SSE            = 0x04,
   HIM_FQR_BYPASS_SDM            = 0x08,
   HIM_FQR_QUEUE_TO_OUTPUT_QUEUE = 0x10,
};
typedef uint32_t HIM_CC_FwRequest_t;


enum
{
   FEATURE_SEL_CURRENT                  = 0x00,
   FEATURE_SEL_DEFAULT                  = 0x01,
   FEATURE_SEL_SAVED                    = 0x02,
   FEATURE_SEL_SUPPORTED_CAPABILITIES   = 0x03,
   FEATURE_SEL_RESERVED                 = 0x04,
};
typedef uint32_t FeatureSelect_t;


enum
{
   ASYNC_ERROR_DOORBELL_REG_INVALID,
   ASYNC_ERROR_DOORBELL_VAL_INVALID,
   ASYNC_ERROR_DIAG_FAILURE,
   ASYNC_ERROR_PERSISTENT,
   ASYNC_ERROR_TRANSIENT,
   ASYNC_ERROR_FW_IMAGE_LOAD_FAILED,
   ASYNC_SMART_SPARES,
   ASYNC_SMART_TEMPERATURE,
   ASYNC_SMART_RELIABILITY,
   ASYNC_SMART_READ_ONLY,
   ASYNC_NOTICE_FW_ACTIVATION_STARTING,
   ASYNC_NOTICE_NS_ATTRIBUTE_CHANGED,
   ASYNC_NVM_CMD_SANITIZE_OPERATION_COMPLETED,
   ASYNC_NOTICE_TELEMETRY_CONTROLLER_INITIATED,
   ASYNC_NVM_CMD_SANITIZE_OP_COMPL_UNEXPECTED_DEALLOCATION,
   ASYNC_EVENT_RESERVED = 0xFF,
};
typedef uint32_t AsyncEvent_t;



typedef enum FE_ResetType_e
{
   FE_RST_POWER_ON                           = 0,
   FE_RST_CONTROLLER_RESET                   = 1,
   FE_RST_NVME_SUBSYSTEM_RESET               = 2,
   FE_RST_PCIE_FLR_RESET                     = 3,
   FE_RST_PCIE_HOT_RESET                     = 4,
   FE_RST_PCIE_LINK_DOWN_RESET               = 5,
   FE_RST_PERST_ASSERT                       = 6,
   FE_RST_LINK_DOWN_L2_RESET                 = 7,
   FE_RST_CONTROLLER_ENABLED      = ( (0xFFFFFFFFUL)  - 1),
   FE_RST_CONTROLLER_READY_FOR_IO =  (0xFFFFFFFFUL) ,
}FE_ResetType_t;



enum
{
   SMART_SPARE_WARNING = 0,
   SMART_TEMPERATURE_WARNING,
   SMART_MEDIA_DEGRADED_WARNING,
   SMART_READ_ONLY_WARNING,
   SMART_VOLATILE_MEMORY_WARNING,
   SMART_PERCENTAGE_USED_WARNING,
};
typedef uint32_t WarningBit_t;

enum
{
   BIT_MAP_SET,
   BIT_MAP_CLEAR
};
typedef uint32_t BitMap_SetClear_t;

enum
{
   EVENT_ID_NO_DATA = 1,
   EVENT_ID_WITH_DATA = 2
};
typedef uint32_t HEB_FW_FrameCode_t;

enum
{
   HA_SDM_STREAM_DETECTION = 0,
   HA_SDM_STREAM_REMOVAL,
};
typedef uint32_t HA_SDM_StreamEvent_t;


enum NVMe_CommandType_e
{
   NVME_ADMINCOMMAND=0,
   NVME_IOCOMMAND
};

typedef uint8_t  NVMe_CommandType_t;

enum NVMe_QueueType_e
{
   COMPLETION_QUEUE_TYPE,
   SUBMISSION_QUEUE_TYPE,
};
typedef uint8_t  NVMe_QueueType_t;

enum FE_PMM_MUTEX_CTLRBUSYTIME_TRANSID_e
{
   FE_PMM_MUTEX_AON_GETCTLRBUSYTIME= 0x01,
   FE_PMM_MUTEX_MPU_GETCTLRBUSYTIME= 0x80,
};


enum FE_HA3_REQUEUE_TRANSID_e
{
   FE_MUTEX_HA3_REQUEUE_MP0 = 0x01,
   FE_MUTEX_HA3_REQUEUE_MP1 = 0x80,
};

enum FE_AXI_DRAIN_MODE_TRANSID_e
{
   FE_AXI_DRAIN_MODE_MP0 = 0x01,
   FE_AXI_DRAIN_MODE_PCU = 0x80,
};

enum FE_HSQM_GLOBAL_FETCH_TRANSID_e
{
   FE_HSQM_GLOBAL_FETCH_MP0 = 0x01,
   FE_HSQM_GLOBAL_FETCH_PCU = 0x80,
};

enum FE_GLOBAL_HMBC_DRAIN_TRANSID_e
{
    FE_GLOBAL_HMBC_DRAIN_MP0 = 0x01,
    FE_GLOBAL_HMBC_DRAIN_PCU = 0x80,
};

enum FE_GLOBAL_CC_TRANSID_e
{
   FE_GLOBAL_CC_MP0 = 0x01,
   FE_GLOBAL_CC_PCU = 0x80,
};

enum FE_HNVME_SW_RESET_TRANSID_e
{
   FE_HNVME_SW_RESET_MP0 = 0x01,
   FE_HNVME_SW_RESET_PCU = 0x80,
};

typedef enum FE_HAL_BlockConversion_e
{
   FE_HAL_CONVERT_BLOCK_START = 0,
   FE_HAL_CONVERT_BLOCK_END = 1
} FE_HAL_BlockConversion_t;

enum NVMe_FirmwareCommitActions_e
{
   FW_COMMIT_REPLACE_NO_ACTIVATION           = 0x00,
   FW_COMMIT_REPLACE_ACTIVATE_ON_NEXT_RESET  = 0x01,
   FW_COMMIT_ACTIVATE_ON_NEXT_RESET          = 0x02,
   FW_COMMIT_ACTIVATE_IMMEDIATELY            = 0x03,
   FW_COMMIT_INVALID_COMMIT_ACTION,
};

enum NVMe_FormatSecureEraseSettings_e
{
   NVM_FORMAT_SES_NO_SECURE_ERASE       = 0x00,
   NVM_FORMAT_SES_USER_DATA_ERASE       = 0x01,
   NVM_FORMAT_SES_CRYPTOGRAPHIC_ERASE   = 0x02,
   NVM_FORMAT_SES_FIRST_RESERVED,
};

enum FE_FTL_Format_Options_e
{
   FE_FTL_FORMAT_OPTION_NO_SECURE_ERASE             = 0,
   FE_FTL_FORMAT_OPTION_USER_DATA_ERASE             = 1,
   FE_FTL_FORMAT_OPTION_CRYPTOGRAPHIC_ERASE         = 2,
   FE_FTL_FORMAT_OPTION_CRYPTO_AND_PHYSICAL_ERASE   = 3,
};


enum FE_PMM_LPMEntryState_e
{
   FE_PMM_LPM_ENTRY_STARTED = 0x1,
   FE_PMM_LPM_ENTRY_COMPLETED,
   FE_PMM_LPM_ENTRY_ABORTED,
};

typedef uint32_t  FE_PMM_LPMEntryState_t;


enum syntheticDelayState_e
{
   FE_PMM_SYNTHETIC_DELAY_STOPPED = 0,
   FE_PMM_SYNTHETIC_DELAY_STARTED,
   FE_PMM_SYNTHETIC_DELAY_RUNNING,
};

typedef enum VendorSpecific_SecurityAuditLog_EventType_e
{
   VS_SEC_AUDIT_LOG_EVENT_FW_AUTHENTICATION_FAILURE = 0,
   VS_SEC_AUDIT_LOG_EVENT_AUTHORIZED_VS_COMMAND,
   VS_SEC_AUDIT_LOG_EVENT_UNAUTHORIZED_VS_COMMAND,
   VS_SEC_AUDIT_LOG_EVENT_SED_OVER_NON_SED_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_NON_SED_OVER_SED_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_NON_HP_OVER_HP_DOWNLOAD,
   VS_SEC_AUDIT_LOG_EVENT_SECURE_ERASE_FAILURE,
   VS_SEC_AUDIT_LOG_EVENT_SANITIZATION_FAILURE,

   VS_SEC_AUDIT_LOG_EVENTS_NUMBER
} VendorSpecific_SecurityAuditLog_EventType_t;


typedef enum FE_ThermalThrottle_Changed_e
{
   FE_THERMAL_THROTTLE_NONE,
   FE_THERMAL_THROTTLE_STARTED,
   FE_THERMAL_THROTTLE_LIGHT,
   FE_THERMAL_THROTTLE_HEAVY,
   FE_THERMAL_THROTTLE_EXTREAM,
   FE_THERMAL_THROTTLE_ENDED,
}FE_ThermalThrottle_Changed_t;


typedef enum FE_Thermal_Idle_e
{
   FE_THERMAL_IDLE_MSG_ENABLE = 0,
   FE_THERMAL_IDLE_MSG_DISABLE,
   FE_THERMAL_IDLE_MSG_HA_DLM_EMPTY,
   FE_THERMAL_MSG_START_PREVENTIVE_ACTIONS,
   FE_THERMAL_MSG_STOP_PREVENTIVE_ACTIONS,
   FE_THERMAL_MSG_ENABLE_ASPM,
   FE_THERMAL_MSG_PREV_ACTIONS_WAIT_FOR_HIM_IDLE,
   FE_THERMAL_MSG_PREV_ACTIONS_HANDLE_FORCE_FLUSH_COMP,
   FE_THERMAL_MSG_ABORT_PREVENTIVE_ACTIONS,
   FE_THERMAL_THROTTELING_CONDITION_CHANGED
}FE_Thermal_Idle_EventType_t;


enum FE_HWD_Change_Originator_e
{
   FE_HWD_CHANGE_ORIGINATOR_THERMAL,
   FE_HWD_CHANGE_ORIGINATOR_FTL_BMG,
   FE_HWD_CHANGE_ORIGINATOR_MAX
};

typedef uint8_t FE_HWD_Change_Originator_t;


typedef enum FE_HIM_CommandContext_Change_e
{
   FE_HIM_COMMAND_CONTEXT_LIMIT,
   FE_HIM_COMMAND_CONTEXT_RESTORE
}FE_HIM_CommandContext_Change_t;

typedef enum FE_Thermal_PreventiveActions_State_e
{
   FE_THERMAL_PREVENTIVE_ACTIONS_NONE = 0,
   FE_THERMAL_PREVENTIVE_ACTIONS_START_IN_PROGRESS,
   FE_THERMAL_PREVENTIVE_ACTIONS_DONE,
   FE_THERMAL_PREVENTIVE_ACTIONS_STOP_IN_PROGRESS,
   FE_THERMAL_PREVENTIVE_ACTIONS_ABORT_NEEDED,
   FE_THERMAL_PREVENTIVE_ACTIONS_ABORT_IN_PROGRESS,
}FE_Thermal_PreventiveActions_State_t;

typedef enum FE_Thermal_AvailableDebugCounters_e
{
   FE_THERMAL_PREVENTIVE_ACTIONS_START_COUNTER = 0,
   FE_THERMAL_PREVENTIVE_ACTIONS_STOP_COUNTER,
   FE_THERMAL_PREVENTIVE_ACTIONS_ABORT_COUNTER,
   FE_THERMAL_EXTREME_THROTTLING_ENTER_COUNTER,
   FE_THERMAL_EXTREME_THROTTLING_EXIT_COUNTER,
   FE_THERMAL_COUNTERS_NUM
} FE_Thermal_AvailableDebugCounters_t;



typedef enum FE_PEL_ThermalExcursionEvents_e
{
   TE_EVENT_WCTEMP_CROSSED          = 1,
   TE_EVENT_CCTEMP_CROSSED          = 2,
   TE_EVENT_TMT1_CROSSED            = 3,
   TE_EVENT_TMT2_CROSSED            = 4,
   TE_EVENT_VS_THERMAL_MGMT_START   = 5,
   TE_EVENT_TEMP_NORMAL             = 0x88,
   TE_EVENT_VS_THERMAL_MGMT_STOP    = 0x89,
   TE_EVENT_UNDER_TEMP              = 0xB0,
} FE_PEL_ThermalExcursionEvents_t;

#line 920 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef struct FE_BLR_FlagsRegion_s
{
   uint32_t    feBlr_SynCodeSize;
   uint32_t    feBlr_PCIeCfgSetSize;
   uint32_t    feBlr_NCRCfgSetSize;
   uint32_t    feBlr_DevInfoCfgSetSize;

   uint8_t     feBlr_rfu[64-sizeof(uint32_t)*4];
}FE_BLR_FlagsRegion_t;

#line 942 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef union CC_u
{
    struct CC_s
    {
        uint32_t en                     :1;
        uint32_t reserved_1_3           :3;
        uint32_t css                    :3;
        uint32_t mps                    :4;
        uint32_t ams                    :3;
        uint32_t shn                    :2;
        uint32_t ioSqEs                 :4;
        uint32_t ioCqEs                 :4;
        uint32_t crime                  :1;
        uint32_t reserved_25_31         :7;
    } bits;
    uint32_t all32;
} CC_t;

typedef union HIM_CC_DW0_u
{
   struct HIM_CC_DW0_s
   {
      uint32_t exceptionFlag     : 1;


      uint32_t hnvmeParsingErr   : 1;


      uint32_t busError          : 1;

      uint32_t transactionErr    : 1;

      uint32_t ms                : 1;


      uint32_t twoRanges         : 1;


      uint32_t streamStatus      : 2;




      uint32_t opCode            : 8;
      uint32_t fuaFlag           : 1;

      uint32_t sn                : 3;



      uint32_t hotRangeFlag      : 1;


      uint32_t subqp             : 2;
      uint32_t abort             : 1;



      uint32_t logicalBlockSize  : 2;
      uint32_t bptRequired       : 1;


      uint32_t overlapFlag       : 5;


   } bits;
   uint32_t all32;
}HIM_CC_DW0_t;

typedef union HIM_CC_DW1_u
{
   struct HIM_CC_DW1_s
   {
      uint32_t streamID        : 16;


      uint32_t sectionTableErr : 4;




      uint32_t psc             : 12;
   } bits;
   uint32_t all32;
}HIM_CC_DW1_t;

typedef union HIM_CC_DW3_u
{
   struct HIM_CC_DW3_s
   {
      uint32_t protocolSpecifcErr   : 12;
      uint32_t errExceptionCode     : 4;
      uint32_t sectionTableIndex    : 15;


      uint32_t reserved_31          : 1;
   } bits;
   uint32_t all32;
}HIM_CC_DW3_t;

typedef union HIM_CC_DW5_u
{
   struct HIM_CC_DW5_s
   {
      uint32_t hpm   : 16;

      uint32_t itag1 : 16;

   } bits;
   uint32_t all32;
}HIM_CC_DW5_t;

typedef union HIM_CC_DW7_STREAM_INFO_u
{
   struct HIM_CC_DW7_STREAM_INFO_s
   {
      uint16_t stid     : 8;
      uint16_t sseq     : 4;


      uint16_t sm       : 1;


      uint16_t hr       : 1;


      uint16_t dem      : 2;

   }bits;
   uint16_t all16;
}HIM_CC_DW7_STREAM_INFO_t, * pHIM_CC_DW7_STREAM_INFO_t;

typedef union HIM_CC_DW7_u
{
   struct HIM_CC_DW7_s
   {
      HIM_CC_DW7_STREAM_INFO_t stream_info;
      uint16_t                 ovp_idx;



   } stream_info_ovp_idx;
   uint32_t all32;
}HIM_CC_DW7_t;

typedef union HIM_CC_DW9_u
{
   struct HIM_CC_DW9_s
   {
      uint32_t upperFlatLBA   : 16;
      uint32_t glbl_ord_id    : 8;
      uint32_t mco            : 1;
      uint32_t vfid           : 7;
   } bits;
   uint32_t all32;
}HIM_CC_DW9_t;

typedef union HIM_CC_DW11_u
{
   struct HIM_CC_DW11_s
   {
      uint32_t acs_id      : 12;
      uint32_t reserved_1  : 4;
      uint32_t hw          : 8;

      uint32_t reserved_2 : 3;
      uint32_t fwQueueReq : 5;
   } bits;
   uint32_t all32;
}HIM_CC_DW11_t;

typedef union HIM_CC_DW14_u
{
   struct HIM_CC_DW14_s
   {
      uint32_t sec_index1 : 16;


      uint32_t sec_index2 : 16;


   } bits;
   uint32_t all32;
}HIM_CC_DW14_t;

typedef union HIM_CC_DW15_u
{
   struct HIM_CC_DW15_s
   {
      uint32_t reserved_1  : 12;
      uint32_t sec2_off    : 20;


   } bits;
   uint32_t all32;
}HIM_CC_DW15_t;

typedef union HIM_CC_DW24_u
{
   struct HIM_CC_DW24_s
   {
      uint32_t pptr_a_index   : 14;


      uint32_t reserved_1     : 2;
      uint32_t pptr_b_index   : 14;


      uint32_t lbs            : 2;
   } bits;
   uint32_t all32;
}HIM_CC_DW24_t;

typedef union HIM_CC_DW25_u
{
   struct HIM_CC_DW25_s
   {
      uint32_t nlb         : 16;


      uint32_t vfid        : 7;
      uint32_t reserved_1  : 9;
   } bits;
   uint32_t all32;
}HIM_CC_DW25_t;

typedef union HIM_CC_DW26_u
{
   struct HIM_CC_DW26_s
   {
      uint16_t  submissionQueueId;
      uint16_t  commandIdTag;
   } words;

   uint32_t all32;
} HIM_CC_DW26_t;


typedef union HIM_CC_DW27_u
{
   struct HIM_CC_DW27_s
   {
      uint32_t cqid     : 16;
      uint32_t sqid_ptr : 16;




   } bits;
   uint32_t all32;
}HIM_CC_DW27_t;




typedef struct HIM_CommandContext_s
{
   HIM_CC_DW0_t       dword0;
   HIM_CC_DW1_t       dword1;
   uint32_t           hia_specific;
   HIM_CC_DW3_t       dword3;
   uint32_t           deviceSideLen;






   HIM_CC_DW5_t       dword5;
   uint32_t           namespaceID;
   HIM_CC_DW7_t       dword7;
   uint32_t           lowerFlatLBA;
   HIM_CC_DW9_t       dword9;
   uint32_t           timestamp;
   HIM_CC_DW11_t      dword11;
   uint64_t           startingLBA;
   HIM_CC_DW14_t      dword14;
   HIM_CC_DW15_t      dword15;
   uint64_t           prp1;
   uint64_t           prp2;
   uint64_t           pptr_a;





   uint64_t           prpPointerBindex;


   HIM_CC_DW24_t      dword24;
   HIM_CC_DW25_t      dword25;
   HIM_CC_DW26_t      tag;

   HIM_CC_DW27_t      dword27;
}

#line 1240 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
HIM_CommandContext_t, *pHIM_CommandContext_t;


typedef struct HIM_CommandStructure_s
{
   uint32_t          hostCmd[16];
   uint16_t          itag2;

   uint16_t          reserved_1;
   uint32_t          flen;



}HIM_CommandStructure_t;


typedef struct FE_Context_In_AON_Struct_s
{
   uint32_t signatureStart;
   uint32_t numBytes;
   uint8_t  *objInstancesPtr;
   uint32_t *signatureEndPtr;
}FE_Context_In_AON_Struct_t;


typedef union NVMe_SecureEraseActionList_u
{
   struct NVMe_SecureEraseActionList_s
   {
      uint32_t deallocate     : 1;
      uint32_t physicalErase  : 1;
      uint32_t cryptoErase    : 1;
   } bits;
   uint32_t all32;
} NVMe_SecureEraseActionList_t;



typedef void (FE_CB_FctnWithStatusAndArg_t)(Status_t status, uint32_t token);
typedef void (FE_CallbackWithArg_t)(uint32_t arg);
typedef void (FE_CallbackNoArg_t)(void);

typedef struct
{
   FE_CallbackWithArg_t*  callBkFncPtr;
   uint32_t                callBkArg;
   Status_t                status;
} FE_CallbackWithStatusAndArg_t;

typedef void (FE_CallbackWithNoArg_t)(void);


typedef struct NVMe_GetLogRsBuffer_s
{
   uint32_t    bufferIndex[ (8) ];
   uint32_t*   dataBuffer[ (8) ];
   uint32_t*   headerBuffer[ (8) ];
} NVMe_GetLogRsBuffer_t;


typedef struct NVMe_TelemetryLogContext_s
{
   uint64_t              cmdOffset;
   uint64_t              pageOffset;
   uint32_t              xferLength;
   uint32_t              cmdIndex;
   uint32_t              numBuffAlloc;
   uint32_t*             ftlBufferPtr;
   NVMe_GetLogRsBuffer_t rsBuffer;
   uint32_t              pageType;
   BOOL                  generateLog;
   uint8_t               logPageID;
   BOOL                  isTelemetryInProgress;
} NVMe_TelemetryLogContext_t;


typedef union NVMe_ACSA_RPMBS_u
{
   struct NVMe_ACSA_RPMBS_s
   {
      uint32_t numRPMBTargets          : 3;
      uint32_t authenticationMethod    : 3;

      uint32_t reserved6_15            : 10;
      uint32_t totalSize               : 8;
      uint32_t accessSize              : 8;
   } bits;
   uint32_t all32;
}   NVMe_ACSA_RPMBS_t;


typedef struct VendorSpecific_SecurityAuditLog_Event_s
{
   uint64_t counter : 16;
   uint64_t lastEventPOH : 32;
   uint64_t reserved : 16;
} VendorSpecific_SecurityAuditLog_Event_t;



typedef struct VendorSpecific_SecurityAuditLog_s
{
   VendorSpecific_SecurityAuditLog_Event_t events[VS_SEC_AUDIT_LOG_EVENTS_NUMBER];
   uint16_t lifeTimeEventsNumBE;
   uint16_t lifeTimeEventsNumLE;
   uint32_t lastRecordedEventPOH;
   uint32_t hostTimestamp;
   uint32_t hostTimestampPOH;
   uint8_t  reserved2[432];
} VendorSpecific_SecurityAuditLogPage_t;

#line 1368 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef struct PCIe_CadenceRegisters_s
{
   uint32_t signature;
   uint32_t linkStatReg;
   uint32_t unCorrectableAERErrors;
   uint32_t correctableAERErrors;
   uint32_t creqRegisters[ (4) ][15];
   uint32_t deqRegisters[ (4) ][28];
   uint32_t cmn_plllc_status_a_preg;
   uint32_t cmn_plllc_status_c_preg;
   uint32_t cmn_ssm_state_preg;
   uint32_t PHY_PMA_CMN_CTRL;
   uint32_t PHY_PMA_ISO_PWRST_CTRL[ (4) ];
   uint32_t PHY_PIPE_ISO_RX_CTRL[ (4) ];
   uint32_t PHY_PIPE_ISO_RX_EQ_EVAL[ (4) ];
   uint32_t PHY_PMA_ISO_XCVR_CTRL[ (4) ];
   uint32_t PHY_PMA_ISO_RX_EQ_CTRL[ (4) ];
   uint32_t smpcal_calevncode_preg[ (4) ];
   uint32_t smpcal_caloddcode_preg[ (4) ];
   uint32_t cpical_status_preg[ (4) ];
   uint32_t sdcal_ctrl_preg[ (4) ];
   uint32_t G3_LINK_EQ;
   uint32_t PSM_STATE_L;
   uint32_t PSM_STATE_H;
}   PCIe_CadenceRegisters_t;

#line 1409 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef struct eyeSurfResponse_s
{
   struct eyeLane_s
   {
      struct eyeVoltage_s
      {
         struct eyeTime_s
         {


            char accumulator[8];
         } eyeX[ ((( ( 32)  - (-32)  + 1) / (2) ) + 1) ];
      } eyeY[ ((( ( 127)  - (-127)  + 1) / (2) ) + 1) ];
   } lane[ (4) ];
} eyeSurfResponse_t;

typedef struct RDC_PCIeDiagnosticOutput_s
{
   PCIe_CadenceRegisters_t cadenceRegisters;
   uint8_t                 padding1[512 - (sizeof(PCIe_CadenceRegisters_t)  % 512)];
   eyeSurfResponse_t       eyeSurfOutput;
   uint8_t                 padding2[512 - (sizeof(eyeSurfResponse_t) % 512)];
}  RDC_PCIeDiagnosticOutput_t;

Status_t PCIe_EyeSurf(uint8_t *telemetryBufferPointer, uint32_t maximumFetch, uint32_t offsetInDataSection);
Status_t RDC_PCIeDiagnosticRead(uint8_t *telemetryBufferPointer, uint32_t maximumFetch, uint32_t offsetInDataSection);



typedef union FE_RegsTableMetadata_u
{
   struct FE_RegsTableMetadata_s
   {
      uint32_t regTabOffsetStart :16;
      uint32_t regTabOffsetEnd   :16;
   } bits;
   uint32_t all32;
} FE_RegsTableMetadata_t;










typedef struct FE_HAL_HostByteTransfer_Params_s
{
   TransferDirection_e  xferDirection;
   uint32_t             xferSizeInBytes;
   uint64_t             prpEntry1;
   uint64_t             prpEntry2;
   uint32_t             deviceBufferAddress;
   HIM_CommandContext_t* cmdContextPtr;
} FE_HAL_HostByteTransfer_Params_t;

typedef struct FE_FTL_DeallocRange_s
{
   uint32_t fflba;
   uint32_t length;
} FE_FTL_DeallocRange_t;

#line 1486 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef struct HIM_HAQ_CommandEntry_s
{

   uint32_t          hostCmd[16];
   uint32_t      dword16;
   uint32_t      dword17;

   uint32_t          namespaceID;

   uint32_t          deviceSideLen;

   uint64_t          startingLBA;
   uint32_t      tag;

   uint32_t          lowerFlatLBA;

   uint16_t          upperFlatLBA;
   uint16_t          sectionTableIndex;

   uint16_t          securityTableIndex;
   uint16_t          physicalProperties;

   uint16_t          prevCmdIndex;
   uint16_t          nextCmdIndex;

   uint32_t          timestamp;

   uint32_t        overlapIndex;
   uint32_t        streamInfo;

   uint32_t       hwdInfo;
   uint32_t      dword30;

   uint16_t          cmdIndex;
   uint16_t          reserved_1;
}

#line 1525 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
HIM_HAQ_CommandEntry_t;



typedef struct HAQ_CommandEntryClass0_s
{

    uint32_t          hostCmd[16];

    HIM_CC_DW0_t       dword0;
    HIM_CC_DW1_t       dword1;
    uint32_t           hia_specific;
    HIM_CC_DW3_t       dword3;
    uint32_t           deviceSideLen;






    HIM_CC_DW5_t       dword5;
    uint32_t           namespaceID;
    HIM_CC_DW7_t       dword7;
    uint32_t           lowerFlatLBA;
    HIM_CC_DW9_t       dword9;
    uint32_t           timestamp;
    HIM_CC_DW11_t      dword11;
    uint64_t           startingLBA;
    HIM_CC_DW14_t      dword14;
    HIM_CC_DW15_t      dword15;

    uint16_t          itag2;
    uint16_t          itag1;
}

#line 1562 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
HAQ_CommandEntryClass0_t, *pHAQ_CommandEntryClass0_t;


typedef struct HAQ_CommandEntryClass1_s
{
    HIM_CC_DW0_t       dword0;
    HIM_CC_DW1_t       dword1;
    uint32_t           hia_specific;
    HIM_CC_DW3_t       dword3;
    uint32_t           deviceSideLen;






    HIM_CC_DW5_t       dword5;
    uint32_t           namespaceID;
    HIM_CC_DW7_t       dword7;
    uint32_t           lowerFlatLBA;
    HIM_CC_DW9_t       dword9;
    uint32_t           timestamp;
    HIM_CC_DW11_t      dword11;
    uint64_t           startingLBA;
    HIM_CC_DW14_t      dword14;
    HIM_CC_DW15_t      dword15;
    uint16_t          itag2;
    uint16_t          itag1;
}

#line 1594 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
HAQ_CommandEntryClass1_t;


typedef struct HAQ_CommandEntryClass2_s
{
   HIM_CommandStructure_t  commandStructure;
   HIM_CommandContext_t    commandContext;

   uint16_t          itag2;
   uint16_t          itag1;
}

#line 1608 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
HAQ_CommandEntryClass2_t, *pHAQ_CommandEntryClass2_t;


typedef union DlmEntry_u
{
    struct DlmEntry_s
    {
        uint64_t     prev : 10;
        uint64_t     next : 10;
        uint64_t     reserved : 44;
    } bits;
    uint64_t all64;
} DlmEntry_t;

#line 1661 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
typedef union HIM_ADP_TransferFlags_u
{
   struct HIM_ADP_TransferFlags_s
   {
      uint32_t bufferRelease           :1;
      uint32_t repeatBuffer            :1;
      uint32_t transferDirection       :1;
      uint32_t writeZeros              :1;
      uint32_t encryptData             :1;
      uint32_t securityIndex           :8;
      uint32_t waitForTransferComplete :1;
      uint32_t nonBlocking             :1;
      uint32_t useDPCA                 :1;
      uint32_t reserved                :16;
   } bits;

   uint32_t all32;

} HIM_ADP_TransferFlags_t;

typedef struct FE_HAL_DataTransferParams_s
{
   uint32_t                   cmdIndex;
   HIM_CommandContext_t*      cmdContextPtr;
   HIM_CommandStructure_t*    cmdStructurePtr;
   uint32_t                   habmChannelNum;
   uint32_t * *               dataIndexListPtr;
   uint32_t * *               dataBufferListPtr;
   uint32_t * *               metadataBufferListPtr;
   uint32_t                   cmdOffsetInBytes;
   uint32_t                   sectorOffset;
   uint32_t                   transferSizeInBytes;
   uint32_t                   bytesTransferred;
   uint32_t                   habmDataQOA;

   uint32_t                   habmDPCACounterID;

   HIM_ADP_TransferFlags_t    flags;
} FE_HAL_DataTransferParams_t;

typedef struct HIM_ADP_SecurityParams_s
{
   FE_SecurityCryptoOperation_t  securityDirection;
   uint32_t                      sourceDataBuffPtr;
   uint32_t                      destDataBuffPtr;
   uint32_t                      sizeInBytes;
   uint32_t                      sectorOffset;
   uint32_t                      securityPtr;
   uint64_t                      flatLBA;
} HIM_ADP_SecurityParams_t;

typedef union FE_CrossIP_Token_u
{
   struct FE_CrossIP_Token_s
   {
      uint32_t cmdIndex             : 10 ;
      uint32_t cmdSpecificTokenData :22;
   } bits;
   uint32_t all32;
} FE_CrossIP_Token_t;
;









typedef struct FE_ST_SecurityAttributes_s
{
   uint32_t readAllowed       :1;
   uint32_t writeAllowed      :1;
   uint32_t writeAllowedSecIP :1;
   uint32_t readZeroes        :1;




   uint32_t securityIndex     :8;
   uint32_t reserved          :5;
} FE_ST_SecurityAttributes_t;



typedef uint32_t  FE_ST_Handle_t;



typedef union smart_BadBlocksAttribute_u
{
   struct smart_BadBlocksAttribute_s
   {
      uint64_t rawCount        :48;
      uint64_t normalizedValue :16;
   } bits;
   uint64_t all64;
} smart_BadBlocksAttribute_t;

typedef struct smart_UsrDataEraseCntAttribute_u
{
   uint32_t max;
   uint32_t min;
} smart_UsrDataEraseCntAttribute_t;






typedef struct FE_FTL_SMARTSharedCounters_s
{
   uint128_t                        ugsdCount;
   uint128_t                        gsdCount;
   uint128_t                        nandBytesWritten;
   uint128_t                        SLCSectWrittenInK;


   uint128_t                        TLCSectWrittenInK;
   uint128_t                        physicalMediaRead;
   smart_BadBlocksAttribute_t       badBlocks;

   uint8_t                          freeBlocks;
   uint8_t                          SLCEndurancePercent;
   uint8_t                          reserved65;
   uint8_t                          reserved66;
   uint8_t                          resBlkPercWcc;
   uint8_t                          normalizedPEC;
   smart_UsrDataEraseCntAttribute_t usrDataEraseCnt;
   uint32_t                         tlcPECountMin;
   uint32_t                         tlcPECountMax;
   uint32_t                         tlcPECountAvg;
   uint32_t                         slcPECountMin;
   uint32_t                         slcPECountMax;
   uint32_t                         slcPECountAvg;
   uint64_t                         relocatedByReadScrub;
}

#line 1802 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
FE_FTL_SMARTSharedCounters_t;





typedef struct FE_FTL_XboxSpecificLogSharedCounters_s
{
   uint8_t     wearRangeDeltaTLC;
   uint8_t     wearRangeDeltaSLC;
   uint8_t     wearMostUsedTLC;
   uint8_t     wearMostUsedSLC;
   uint8_t     percentUsedTLC;
   uint8_t     percentUsedSLC;
}   FE_FTL_XboxSpecificLogSharedCounters_t;



typedef struct NVMe_DataSavedAON_s
{
   uint32_t  ASQS;
   uint32_t  ACQS;
   uint64_t  ASQ;
   uint64_t  ACQ;
}   NVMe_DataSavedAON_t;




typedef struct HIM_MemHdr_s
{
   FADI_ESL_Header_t  * cmdsHdrPtr;
   uint32_t             reserved_dword1;
   FADI_ESL_Header_t    cmdsHdr;
   uint32_t             reserved_dword2;
} HIM_MemHdr_t;



typedef struct HIM_CommandData_FA_s
{
   uint32_t             reserved_dword2;
   HIM_CommandContext_t HIM_CommandContextFA[ ( (512)  + (32) ) ];
} HIM_CommandData_FA_t;

typedef struct  FE_FFU_Compatibility_s
{
   uint32_t minor;
   uint32_t upgrade;
   uint32_t immed;
   uint32_t CommitId;
   uint32_t downgrade;
   uint32_t reserved[3];
} FE_FFU_Compatibility_t;

typedef union FE_ExceptionFlags_u
{
   struct FE_ExceptionFlags_s
   {
      uint16_t errorToBeReported : 1;
      uint16_t reserved          :15;
   } bits;
   uint16_t    all16;
} FE_ExceptionFlags_t;

typedef struct FE_ExceptionCmdsDB_s
{
   uint32_t    cmdIndex;
   uint32_t    numSectorsFailed;
   uint32_t    sectorOffset;
   uint32_t    ueccType;
   uint32_t    cmdSpecificError;
   uint16_t    statusField;
   FE_ExceptionFlags_t flags;
}   FE_ExceptionCmdsDB_t;




typedef struct FE_FADIRT_DataElements_s
{
   uint32_t    elementAddress;
}FE_FADIRT_DataElements_t;


typedef struct FE_RTFADI_Data_s
{
   uint32_t    regValues[ (20) ];
}  FE_RTFADI_Data_t;






extern uint32_t                     HA_CQM_GetNumEntriesInQueue(uint32_t haCmqFwQueueNumber);
extern uint32_t                    __attribute__((section("CODE_MEDIUM")))        HAWA_GetHAWAallocHwds(void);

#line 1918 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
uint32_t                     NAMESPACE_GetMaxNSID(void);
void                         NAMESPACE_SetMaxNSID(uint32_t namespaceId);

#line 2165 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
Status_t   FE_HAL_HostDataTransfer_FENonReadWrite(FE_HAL_DataTransferParams_t* dataTransferParams);

#line 2215 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
void FE_HAL_EnableHIMWritePath(void);

#line 2260 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
Status_t                   FE_HAL_HostByteTransfer(FE_HAL_HostByteTransfer_Params_t * hbtParams);
Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_ConfigureFE_HwEvents(BitMap_SetClear_t control, uint32_t eventsBitMap);







extern uint32_t            HAWA_Flush_Normal_Counter;
Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_ConfigureFE_HwEvents(BitMap_SetClear_t control, uint32_t eventsBitMap);

uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_ReturnCurrentFE_HwEvents(void);

HIM_CommandContext_t*        HNVMe_GetCommandContextPtr(uint32_t cmdIndex);

HIM_CommandStructure_t*      HNVMe_GetCommandStructurePtr(uint32_t itag1_index);
void                       PCIe_CFG_CAP_PatchMSIXTableSizeForROMMode(void);



HIM_HWD_Context_DCCM_t *    HAWAQ_GetElement(HAWA_WriteTypes_t streamId, uint32_t dccmFifoIdx, uint32_t* pHwdCtxtID);
uint32_t     HAWAQ_GetCounterOfDccmStream(HAWA_WriteTypes_t streamId);
BOOL32       HAWAQ_ReleaseFifoEntry(HAWA_WriteTypes_t streamId);
BOOL32       HAWAQ_IsStreamActive(HAWA_WriteTypes_t streamId);
BOOL32       HAWAQ_WaitStreamIdle(HAWA_WriteTypes_t streamId);
BOOL32  __attribute__((section("CODE_MEDIUM")))                       HAWAQ_IsHwIdle(void);
BOOL32  __attribute__((section("CODE_MEDIUM")))                      HAWAQ_IsSysIdle(void);


uint32_t                         FE_API_HWD_GetLastAllocatedIndex(HAWA_WriteTypes_t writeType);
void                               FE_API_HWD_WriteTypeForceFlush(HAWA_WriteTypes_t writeType);
uint32_t                       FE_API_HWD_GetNRBNumEntriesInQueue(HAWA_WriteTypes_t writeType);
BOOL32                         FE_API_HWD_IsPendingBufferInStream(HAWA_WriteTypes_t writeType);
uint32_t                              FE_HAL_HWD_GetHAWAallocHwds(void);
BOOL32                                      FE_API_HWD_IsHawaIdle(void);
Status_t                                 FE_API_HAWA_SetFlushMode(HAWA_FlushModes_t flushMode, FE_CallbackNoArg_t* callbackFnPtr, BOOL32 bClearOnReset, FE_HawaChangeFlushModeModules_t module);


Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_HAWA_SetNumHwdContexts(uint32_t newNumHwdContexts, FE_HWD_Change_Originator_t originator);

#line 2304 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
BOOL32           FE_API_IsHAWAReadyToBeFlushed(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_HAWA_CalculateNewHwdAmount(void);
void            __attribute__((section("CODE_MEDIUM")))  FE_API_SetThermalHwdAmount(uint32_t newThermalHwdAmount);
uint32_t        __attribute__((section("CODE_MEDIUM")))  FE_API_GetThermalHwdAmount(void);
uint32_t        __attribute__((section("CODE_MEDIUM")))  FE_API_GetFTLBmgHwdAmount(void);
void            __attribute__((section("CODE_MEDIUM")))  FE_API_HwdAmountGlobalsInit(void);

BOOL32                       FE_API_HWD_IsOpenBufferInStream(HAWA_WriteTypes_t writeType);
BOOL32                       FE_API_HWD_IsAllFMUs_Errors(HIM_HWD_Context_t* pHwdCtxt);
uint32_t                   FE_API_RS_GetRsDoneBaseAddress(void);

uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_HA_GetBusyCount(void);

HIM_SSE_OutputContext_t    FE_API_SSE_GetIndex(HA_SSE_UserIDs_t userID);

HIM_SSE_OutputContext_t      FE_HAL_SSE_SearchAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA, uint32_t length, uint32_t groupID, uint32_t index);
HIM_SSE_OutputContext_t      FE_HAL_SSE_SearchAllAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA, uint32_t length, uint32_t groupID, uint32_t index, uint32_t dbMask);
HIM_SSE_OutputContext_t    FE_HAL_SSE_Search(HA_SSE_UserIDs_t userID, uint64_t flatLBA, uint32_t length);


HIM_SSE_OutputContext_t      FE_API_SSE_GetIndexAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                     uint32_t length, uint32_t groupID);
HIM_SSE_OutputContext_t      FE_API_SSE_Remove(HA_SSE_UserIDs_t userID, uint32_t index);
HIM_SSE_OutputContext_t      FE_API_SSE_AllEntrySearch(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                     uint32_t length);
HIM_SSE_OutputContext_t      FE_API_SSE_AllEntrySearchAndAdd(HA_SSE_UserIDs_t userID, uint64_t flatLBA,
                                                           uint32_t length, uint32_t groupID);
uint32_t                     FE_API_SSE_GetFreeEntriesInUserID ( uint32_t userID );

Status_t                   FE_HAL_SimpleSecurityDataTransfer(HIM_ADP_SecurityParams_t * ADP_SecurityParams);
Status_t                     FE_HAL_SecurityDataTransfer(HIM_ADP_SecurityParams_t * ADP_SecurityParams);
void                        __attribute__((section("CODE_MEDIUM")))  FE_HAL_HA_STTS_Increment_RD_WR_WL(BOOL transferDirection);




void                        __attribute__((section("CODE_MEDIUM")))  FE_HAL_RequeueCommand(uint32_t cmdIndex, uint8_t fwqr, uint8_t queueNum);


uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetNumAutomatedIOsInSystem(void);

void                         FE_API_SendCompletion(Status_t status, uint32_t cmdIndex, FE_Errors_IP_e curIP);
void                       FE_API_SendCompletionByFTL(Status_t status, uint32_t cmdIndex);

uint32_t                     FE_API_GetNamespaceCount(void);
uint64_t                     FE_API_GetNumberBlocksInNamespace(uint32_t namespaceID);
uint32_t                     NAMESPACE_GetMaxDataTransferSize(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetNamespaceBlockSizeBytesLog2(uint32_t namespaceID);
uint32_t                     FE_API_GetFFLBAFromNamespaceLBA_4KB(uint8_t nsid, uint32_t lba_4K);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetFFLBAFromNamespaceLBA(uint32_t nsid, uint64_t lba);
uint64_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetFLBAFromNamespaceLBA(uint32_t nsid, uint64_t lba);
uint32_t                     FE_API_GetNumberValidNSID(void);
Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_IsCommandSetSupported(uint32_t csi);
uint32_t                     FE_API_GetCommandSizeInBytes(HIM_CommandContext_t * cmdContextPtr);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_CrossIP_Callback(Status_t status, uint32_t token);
void                         FE_API_SCTPCommandHandler(void);
uint64_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetFLBAFromCmdIndexOffset(uint32_t cmdIndex, uint32_t cmdOffset);
uint32_t                   FE_API_GetTargetGBW(void);
BOOL32                     FE_API_IsLBAValid(uint32_t nsid, uint64_t lba);

void                        __attribute__((section("CODE_MEDIUM")))               FE_HAL_SetHIMWritePathToReadOnly(void);
void                        __attribute__((section("CODE_MEDIUM")))   FE_HAL_ReadOnlyCompleteWritesMakeSTReadOnly(void);

#line 2371 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
void                FE_Thread(uint32_t dummy);
Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_Init(SysBootPhase_t bootPhase);
Status_t                   FE_Init_Cont(SysBootPhase_t bootPhase, SYS_InitTypes_t initType);
Status_t                   FE_InitPreRtos(void);
Status_t                   FE_InitPostRtos(void);
Status_t                   FE_ISR_Init(void);
void                       FE_ISR(void * dummy);

void                         FE_Main_HNVMe_Handle_Shutdown(void);
void                         FE_API_PMMCallMeWhenComplete(PMM_PowerState_t powerState, PMM_TransitionStep_t PMM_Step, Status_t statusCode);

uint32_t                     FE_API_GetMountState(void);
void                         FE_API_SetMountState(uint32_t mountState);

uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetSMARTSize(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetSMARTVersion(void);
void*                       __attribute__((section("CODE_MEDIUM")))  FE_API_GetDUWritten(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_SetDUWritten(uint64_t valueToSet);
Status_t                   FE_API_SetDUWrittenForExtUsers(uint32_t* pBuffer);
void*                      FE_API_GetDURead(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_SetHostWritten(uint64_t valueToSet);
void                         FE_API_GetAllSMARTCounters(uint32_t* smartBufferPtr, uint32_t* ftlBufferPtr);
void                         FE_API_PrepForControlSync(BOOL32 isFromDps32);
void                         FE_API_ControlSyncDone(void);
BOOL                            FE_API_ControlSyncIsActive(void);
void                         FE_API_TriggerAsyncEvent(uint32_t asyncEvent);
Status_t                     FE_API_FindAndInvalidateAER(uint32_t aerType, uint32_t logPageId);
Status_t                     FE_API_ResetAllSMARTCounters(BOOL32 isDiagCommand);
Status_t                     FE_API_InitFEResidents(BOOL32 isDiagCommand);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_SMARTGetPowerOnHours(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_SMARTIncrementThermalDebugCounters(FE_Thermal_AvailableDebugCounters_t counterToIncrement);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_SMARTGetThermalDebugCounter(FE_Thermal_AvailableDebugCounters_t requestedCounter);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_SMARTLogThermalDebugCounters(void);

void                        __attribute__((section("CODE_MEDIUM")))  FE_API_ClearWarningBit(uint32_t warningBit);
void                         FE_API_SetWarningBit(uint32_t warningBit);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_RegisterExceptionCmd(FE_ExceptionCmdsDB_t* exceptionEntryPtr);
Status_t                     FE_API_ProcessExceptions(void);
void                         FE_API_CheckPecTheshold(uint32_t normalizedPEC);
void                         FE_API_CheckSparesTheshold(uint32_t* psCalcSpareCounters);
BOOL32                       FE_API_IsSMARTTimerRunning(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsSMARTTimerSuspended(void);

void                        __attribute__((section("CODE_MEDIUM")))  FE_API_EnterReadOnlyMode(uint8_t moduleID, uint16_t reason);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_EnableFIPSErrorState(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsFIPSRO(void);

void                       FE_API_DST_TerminateForPSID(void);

Status_t                     FE_API_ST_SetNamespaceSecurityAttributes(uint32_t namespaceID, FE_ST_SecurityAttributes_t * attributesPtr);
Status_t                     FE_API_ST_SetSecurityRangeAttributes(uint32_t namespaceID, uint64_t startLBA, uint64_t endLBA,
                                                                FE_ST_SecurityAttributes_t * attributesPtr);
void                         FE_API_ST_SetSectionSecurityAttributes(FE_ST_Handle_t handle, FE_ST_SecurityAttributes_t *attributesPtr);
Status_t                     FE_API_ST_ResetSecurityRanges(void);
Status_t                     FE_API_ST_ReapplyUpdatedSecurity(void);

FE_ST_Handle_t               FE_API_ST_QuerySection(uint32_t namespaceID, uint64_t LBA);
FE_ST_Handle_t               FE_API_ST_GetNextSection(uint32_t namespaceID, FE_ST_Handle_t handle);
Status_t                     FE_API_ST_GetSectionSecurityAttributes(FE_ST_Handle_t handle, FE_ST_SecurityAttributes_t * attributesPtr);
Status_t                     FE_API_ST_GetSectionBoundary(FE_ST_Handle_t handle, uint64_t *startLBA, uint64_t *endLBA);
uint32_t                     FE_API_ST_GetFFLBAFromSection(FE_ST_Handle_t handle, uint64_t LBA, FE_HAL_BlockConversion_t withinBlockLocation);

void                         FE_API_SKT_Reset(void);
void                         FE_API_SKT_SetEntry(uint32_t entryIndex, uint8_t *pEncryptionKey, uint8_t *pTweakKey, uint8_t *pCSV,
                                               uint32_t encryptionMode, uint32_t keySize, uint32_t ivMode, uint8_t versionNDEK, uint8_t versionSDEK);
void                        __attribute__((section("CODE_SLOW")))  FE_API_SKT_WeaknessTest(uint8_t *pActiveDEKsBitmap, uint8_t *pWeaknessTestBitmap);
void                         FE_API_SKT_ChangeKeySplit(uint32_t entryIndex, const uint8_t *pCurrentEncryptionKeySplit, const uint8_t *pCurrentTweakKeySplit,
                                                     const uint8_t *pNewEncryptionKeySplit, const uint8_t *pNewTweakKeySplit, uint8_t versionNDEK);
uint16_t                     FE_API_SKT_GetKeyVersion(uint32_t entryIndex);
uint8_t *                   __attribute__((section("CODE_MEDIUM")))  FE_API_GetSerialNumber(uint32_t * bufLen);
Status_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetIEEEOrganizationUniqueIdentifier(uint8_t *pBuffer, uint32_t length);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_DisableBkOps(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_EnableBkOps(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_LTR_EnableBitChangeMessage(uint32_t param);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_LTR_Zero_Smart_Diag_CarryOverMs();
void *                      __attribute__((section("CODE_MEDIUM")))  FE_API_PrepareCmdsTable(void);

void                         FE_API_PLP_MessageHandler(uint32_t plp_msg_from_sys);
void                         FE_API_D3Hot_MessageHandler();
BOOL32                       FE_API_PLP_IsPLP_Idle(void);

void                        __attribute__((section("CODE_MEDIUM")))  FE_PMM_DelayLowPowerModeWait(uint32_t param);
void                        __attribute__((section("CODE_MEDIUM")))  FE_PMM_HMB_EnableDisableFinished(uint32_t param);
void                       FE_PMM_ReqInfraPrepareL12Finished(uint32_t param);
void                       FE_PMM_ExitL12PreparationsFinished(uint32_t param);
void                        __attribute__((section("CODE_MEDIUM")))  FE_PMM_FastBootAPSTWakeup(uint32_t param);

void                        __attribute__((section("CODE_MEDIUM")))  FE_PMM_PrepL12CheckCQ(uint32_t param);
void                        __attribute__((section("CODE_MEDIUM")))                     FE_API_HMB_DPS_Init(void);
void                         FE_API_PMMHIMIdleCheckTimerExpired(void);

void                       FE_API_PMM_PCIeL1IdleEventGenerateTO(void);

void                       FE_API_PMMWakeUpToCheckHIMIdleTimerExpired(void);
void                         FE_API_PMMBKOpsTimerExpired(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_TimerExpired(uint16_t TimerExpiredId,uint16_t timerSessionId , uint32_t controllerBusyCount);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_COMMIT_ACK(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_SecurityPSTCallback(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_DeviceSelfTestCallback(uint32_t token);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_FlushNonVolitaileCallback(uint32_t param);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_SanitizeCallback(void);

BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_HasHostUpdatedSQTailDB(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_IsDPSBkop(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_IsPrepareExitL12(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_IsNonOperBkop(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_LowPowerEntryLogging(FE_PMM_LPMEntryState_t state);
FE_CallbackWithArg_t       FE_SetTokenAndEventCallback;
void                         FE_API_SetControllerFatal(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetRegCCQueueEntrySize(BOOL32 isSQ);

BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLinkInL0PowerState();
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLinkInL12Idle(void);
BOOL32                     FE_API_IsPCIeLinkSubStateNotL1(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPERSTInterruptPending(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsLinkDownInterruptPending(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLinkInL12Entry(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLinkInL10SubState(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_HAL_IsPCIeInD3Hot(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLinkInL1PowerState(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsHIMReadyToEnterL1Substates(uint32_t);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GetPCIeLowPowerStatusReg(void);
BOOL                        __attribute__((section("CODE_MEDIUM")))  FE_API_IsPCIeLtssmL1(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_EnableExitL1AndL1sMP(BOOL32 enableDisable);
BOOL8                      FE_API_IsAON_D3hotSHN_FlagSet(void);
uint32_t                     FE_API_GetInjectedErrGrp(void);


void                         FE_Main_PCIe_Wrap_Handle_LinkDownEvent(uint32_t linkdowntype);
void                         FE_Main_PCIe_Wrap_Handle_UncoErrEvent(void);
void                         FE_Main_PCIe_Wrap_Handle_PerstEvent(void);
void                       FE_PCU_Set_LinkdownType(  uint32_t type);
void                         FE_API_SetSanitizeAbort(BOOL32 setReset);


void                       FE_PMM_EnableSubQDBUpdateIRQ(void);
uint32_t  __attribute__((section("CODE_MEDIUM")))           FE_API_GetActiveIdleTime(void);


uint32_t                     FE_API_XlateXferError(Status_t status);


void                         FE_API_ResetASIC( SoftRstSig_t  bootSignature);


BOOL                         FE_Check_FFU_Compatibilty(FE_FFU_Compatibility_t *  pNewVersionInfo,
                                                                                       FE_FFU_Compatibility_t *  pOldVersionInfo,
                                                                                       BOOL32                    isActivation,
                                                                                       uint8_t *                 pCommitAction);
uint32_t                   FE_API_GetIOCmdCount(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_DisableDeepPowerDownByFTL(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsDeepPowerDownDisabled(void);
void                        __attribute__((section("CODE_MEDIUM")))  FE_API_DisablePs4ByPorThreshold(void);
BOOL32                      __attribute__((section("CODE_MEDIUM")))  FE_API_IsPs4DisabledByPorThreshold(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GeteFuseRDLimitCounter(void);
uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_GeteFuseRDLimitCounterPS4(void);

uint32_t                    __attribute__((section("CODE_MEDIUM")))  FE_API_FADI_GetFERealTimeData(FE_RTFADI_Data_t* pRTFADI_Data);


void                        __attribute__((section("CODE_MEDIUM")))  NVMe_TelemetryCallback(Status_t status, uint32_t token);
void                         NVMe_Telemetry_SendControllerInitiatedAER(void);
Status_t                    __attribute__((section("CODE_SLOW")))  NVMe_Telemetry_FEGetSMARTCounters(NVMe_TelemetryLogContext_t* telemetryLogContextPtr);
void                       FE_API_SetFirmwareActivationCode(uint8_t fwActivationCode);
void                       FE_API_FTLLogMountCompleted(uint32_t prevPwrState);
void                       NVMe_PELog_LogUnsafeShutdownHWErrorEvent(uint128_t *ugsdCount);
Status_t                   NVMe_PELog_LogThermalExcursionEvent(uint8_t overTemp, uint8_t thresholdCrossing, BOOL32 missedEvents);
void                       FE_API_NVMe_PELog_SendSmartSnapshotMsg(void);
uint8_t                    FE_API_NVMe_PELog_GetTriggerSmartSnapshotLogFlag(void);
BOOL32                     NVMe_PELog_IsPersistentEventLogSupported(void);
BOOL32                     NVMe_PELog_IsPersistenEventIDSupported(uint8_t eventID);
void                         FE_API_HAQ_ChangeBW(HIM_CPU_ID_t cpuNum, uint32_t balaceWeight);

#line 2547 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
BOOL32   FE_PMM_L12_NotSupported(void);

Status_t                                FE_HAL_HostDataTransfer_FTL(FE_HAL_DataTransferParams_t * dataTransferParams);
Status_t                                FE_HAL_ADP_SingleDescDataTransfer(uint32_t     cmdIndex,
                                                                                                   uint32_t * * dataIndexListPtr,
                                                                                                   uint32_t * * metadataBufferListPtr,
                                                                                                   uint32_t * * dataBufferListPtr,
                                                                                                   uint32_t     transferSizeInBytes,
                                                                                                   uint32_t     cmdOffsetInBytes,
                                                                                                   uint32_t     habmDataQOA,
                                                                                                   uint32_t  habmDPCACounterID,
                                                                                                   uint32_t     habmChannelNum);

#line 2589 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
__inline static  uint32_t FE_API_HA_GetNewCommandIndex(uint32_t queueID, uint32_t* queueSizePtr)
{
   return HA_CQM_FirmwarePop(queueID, queueSizePtr);
}








__inline static  void FE_API_HA_QueueInterruptEnable(uint32_t queueId)
{


    if ( HAQ_IsAccelerationEnabledForQueue(queueId)  ||  HAQ_IsFTLReadQueue(queueId) )
   {
      MP_CQD_GeneralIntEnable( (HAQ_QUEUE_0_CNT)  + queueId); ;
   }
   else
   {

      { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h" , 2612 , "0");                         "BullseyeCoverage restore"; } ;
   }
}

#line 2630 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api.h"
Status_t   FE_API_SetDeviceUniqueInfo(void* pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_GetDeviceUniqueInfo(void * pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_SetDeviceModelIDsInfoCfg(void* pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_GetDeviceModelIDsInfoCfg(void * pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_SetDeviceUniqueInfoNew(void* pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_GetDeviceUniqueInfoNew(void * pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_SetDeviceModelIDsInfoCfgNew(void* pSourceBuffer, uint32_t numBytes);
Status_t   FE_API_GetDeviceModelIDsInfoCfgNew(void * pSourceBuffer, uint32_t numBytes);
void      __attribute__((section("CODE_SLOW")))  FE_API_GetDeviceSerialNumber(void *pSourceBuffer, uint32_t numBytes);

void FE_API_CopyDeviceUniqueInfoCfg(void* pDestBuffer);
void FE_API_CopyDeviceModelIDsInfoCfg(void* pDestBuffer);

uint32_t NVMe_SMART_GetPowerCycleCounter(void);

uint32_t NVMe_SMART_GetReadCounts(void);
uint32_t NVMe_SMART_GetWriteCounts(void);

SYS_Custom_Features_t *   FE_API_GetInfraCustomFeaturesPtr(void);


void FE_API_PCIe_LTSSMEventChange(void);



void    __attribute__((section("CODE_MEDIUM")))  FE_API_ThermalIdle_MessageHandler(uint32_t message);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_PerformFTLFlushIfNeeded(void);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_ChangeHwdContextAmount(uint32_t newHwdAmount);
BOOL32  __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_HIMIdleCheck(void);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_ChangeCommandContextAmount(FE_HIM_CommandContext_Change_t changeAction);
FE_Thermal_PreventiveActions_State_t  __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_GetPreventiveActionsState(void);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_SetPreventiveActionsState(FE_Thermal_PreventiveActions_State_t newPrevActionsState);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_SetAbortPreventiveActionsFlag(BOOL32 enableDisable);
BOOL32  __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_IsPreventiveActionsAbortNeeded(void);
void    __attribute__((section("CODE_MEDIUM")))  FE_API_Thermal_PreventiveActionsAbort_ImmediateActions(BOOL32 isHwdChangePhase);
void   FE_API_ThermalThrottleChange_MessageHandler(FE_ThermalThrottle_Changed_t param);

void   FE_API_FormatCallbackSecurity(Status_t status);

void  __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_MicroInitAfterTopReset(PMM_PowerState_t powerState);
void  __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_MicroInitAfterTopResetEnd(void);

BOOL32  __attribute__((section("CODE_MEDIUM")))  FE_API_CanStartPrepareL12(void);

void   FE_API_PCIe_LogLinkStatus(void);
void   FE_HAL_HA_SDM_ResetSDMDB(void);


uint32_t FE_PMM_WakeupByUART(void);

void FE_PMM_ForceWakeupFromIdle(void);

void NVMe_SMARTUpdateFECounters(void);



void   FE_API_SaveTablesToAON(uint32_t debugNumber);
void   FE_API_SecurityCallMeWhenComplete(void);
BOOL32  __attribute__((section("CODE_MEDIUM")))  FE_API_IsSecuritOrSectionTableInAON(void);





void  __attribute__((section("CODE_MEDIUM")))  FE_API_EnableHimL12Revert(void);
BOOL32  __attribute__((section("CODE_MEDIUM")))  FE_API_ExitActionSet(void);


BOOL  __attribute__((section("CODE_MEDIUM")))  FE_API_isTelemetryInProgress(void);
PMM_PowerState_t  __attribute__((section("CODE_MEDIUM")))  FE_PMM_GetAvailablePS(PMM_PowerState_t currentPS);
void  __attribute__((section("CODE_MEDIUM")))  FE_API_PMM_StopTimers(void);

extern uint32_t SYS_SRAM_Get_SB_Err_Cnt(void);
uint64_t   FE_API_GetFrontEndInfoExtSize();
uint64_t   FE_API_GetFrontEndInfoExtSize2();
Status_t   FE_API_DUI_GetFrontEndInfo_Ext(uint8_t *bufferPtr);
Status_t   FE_API_DUI_GetFrontEndInfo_Ext2(uint8_t *bufferPtr);
Status_t   FE_API_DUI_GetFrontEndInfo_Itags(uint8_t *bufferPtr);
uint64_t     FE_API_GetItagsSize();
void   NVMe_VendorSpecific_DUI_readRegisters(uint32_t counter, uint32_t * targetPtr, uint32_t * sourcePtr);
Status_t   FE_HAL_SendMultipleAdpDescriptorsCommon(
                                                                                 uint32_t     cmdIndex,
                                                                                 uint32_t * * dataIndexListPtr,
                                                                                 uint32_t * * metadataBufferListPtr,
                                                                                 uint32_t * * dataBufferListPtr,
                                                                                 uint32_t     transferSizeInBytes,
                                                                                 uint32_t     cmdOffsetInBytes,
                                                                                 uint32_t     habmDataQOA,
                                                                                 uint32_t     habmDPCACounterID,
                                                                                 uint32_t     sectorOffset,
                                                                                 uint32_t     habmChannelNum);

Status_t   FE_HAL_SendMultipleAdpDescriptorsZero(uint32_t cmdIndex, uint32_t  transferSizeInBytes, uint32_t cmdOffsetInBytes);

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 29 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_errorsubranges.h"
#line 17 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_errorsubranges.h"
typedef enum Status_T_PSRanges_e
{
   STATUS_NPDP_ERROR_BASE     = STATUS_PS_BASE + 0x00000100,
   STATUS_BBM_ERROR_BASE      = STATUS_PS_BASE + 0x00000200,
   STATUS_CVD_ERROR_BASE      = STATUS_PS_BASE + 0x00000300,
   STATUS_DGM_ERROR_BASE      = STATUS_PS_BASE + 0x00000400,
   STATUS_RS_ERROR_BASE       = STATUS_PS_BASE + 0x00000500,
   STATUS_MRPH_ERROR_BASE     = STATUS_PS_BASE + 0x00000600,
   STATUS_NPARAM_ERROR_BASE   = STATUS_PS_BASE + 0x00000700,
   STATUS_RSV_ERROR_BASE      = STATUS_PS_BASE + 0x00000800,
   STATUS_PS_DIAG_ERROR_BASE  = STATUS_PS_BASE + 0x00000900,
   STATUS_PS_RLC_BASE         = STATUS_PS_BASE + 0x00000A00,
}   Status_T_PSRanges_t;

#line 33 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"

#line 175 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef struct PSMetaDieInfo
{
   uint32_t          numOfXorZones;
   uint16_t          maxBlocksPerPlane;
   uint8_t           numMetadies;
   uint8_t           numMetadiesInJB;
   uint16_t          numMetablocksPerMetaDie[ (8)  *  ( 2 ) ];
}   PSMetaDieInfo_t;



typedef struct BadBlockEntry_Bits_s
{
   uint32_t block          : 13;
   uint32_t phyPl          : 2;
   uint32_t chip           : 1;
   uint32_t die            : 3;
   uint32_t channel        : 3;
   uint32_t badBlockType   : 4;

   uint32_t pad            : 6;

#line 200 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
}   BadBlockEntry_Bits_t;

typedef union BadBlockEntry_u
{
   uint32_t all32;
   BadBlockEntry_Bits_t bits;
}   BadBlockEntry_t;

typedef struct MBBT_s
{

#line 220 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
   uint32_t entryCount;
   uint16_t planeCount;
   uint16_t badBlockCounter[ ( ( 4 ) / ( 2 ) )  *  ( 2 ) ][ ( (1) ) ][ (8) ][ (4) ];
   BadBlockEntry_t badBlockEntry[1];
}   MBBT_t;


typedef struct Max_MBBT_s
{
   uint16_t entryCount;
   uint16_t planeCount;
   uint16_t badBlockCounter[ ( ( 4 ) / ( 2 ) )  *  ( 2 ) ][ ( (1) ) ][ (8) ][ (4) ];
   BadBlockEntry_t badBlockEntry[ ( ( ( ( 4 ) / ( 2 ) )  * ( 2 )  * ( (1) )  * (8)  * (4) )  * (512) ) ];
}   Max_MBBT_t;

enum BadBlockType_e
{
   FACTORY_BAD_BLOCK   = 0,
   FACTORY_DUMMY_BLOCK = 1,
   REPLACEMENT_BLOCK   = 2,
   IFS_BOOT_BLOCK      = 3,
   IFS_PARTITION_BLOCK = 4,
   IFS_BAD_BOOT_BLOCK  = 5,
   IFS_BAD_PTN_BLOCK   = 6,
   FA_BLOCK            = 7,
   FA_BAD_BLOCK        = 8,
   MST_BAD_BLOCK       = 9,
   IFS_BAD_BLOCK       = 10,
   BTGS_BLOCK          = 11,
   BTGS_TLC            = 12,
   SLC_RELINK_TO_BTGS  = 13,
}  ;
typedef uint8_t BadBlockType_t;




typedef struct PS_BBM_Decomm_Sync_Entry_s
{
   uint32_t LogTS;
   uint16_t metaDie;
   uint16_t metaBlock;
} PS_BBM_Decomm_Sync_Entry_t;

typedef struct PS_BBM_Decomm_Sync_List_s
{
   uint32_t                      numEntries;
   PS_BBM_Decomm_Sync_Entry_t    decommSyncData [ (10) ];
} PS_BBM_Decomm_Sync_List_t;


typedef enum PS_BBM_Status_Error_Description_e
{
   STATUS_BBM_BAD_BLOCK_LIMIT_REACHED                       = STATUS_BBM_ERROR_BASE,
   STATUS_BBM_BLOCK_ALLOCATION_ERROR                        = STATUS_BBM_ERROR_BASE + 0x1,
   STATUS_BBM_BLOCK_WASNT_FOUND                             = STATUS_BBM_ERROR_BASE + 0x2,
   STATUS_BBM_MBBT_EMPTY                                    = STATUS_BBM_ERROR_BASE + 0x3,
   STATUS_BBM_INIT_FAILED                                   = STATUS_BBM_ERROR_BASE + 0x4,
   STATUS_BBM_INCORRECT_PARAMETER                           = STATUS_BBM_ERROR_BASE + 0x5,
   STATUS_BBM_IFS_FLUSH_FAILED                              = STATUS_BBM_ERROR_BASE + 0x6,
   STATUS_BBM_IFS_READ_FAILED                               = STATUS_BBM_ERROR_BASE + 0x7,
   STATUS_BBM_DATA_VERIFY_FAILED                            = STATUS_BBM_ERROR_BASE + 0x8,
   STATUS_BBM_EXCEEDS_MAX_BAD_BLK_PER_PLANE                 = STATUS_BBM_ERROR_BASE + 0x9,
   STATUS_BBM_DECOMMISSION_FAIL                             = STATUS_BBM_ERROR_BASE + 0xA,
   STATUS_BBM_MISMATCH_RELINK_BLKS                          = STATUS_BBM_ERROR_BASE + 0xB,
   STATUS_BBM_MBBT_VERIFY_FAILED                            = STATUS_BBM_ERROR_BASE + 0xC,
   STATUS_BBM_NO_SPARED_BLOCK                               = STATUS_BBM_ERROR_BASE + 0xD,
   STATUS_BBM_EXHAUSTED_RELINK_BUDGET                       = STATUS_BBM_ERROR_BASE + 0xE,
   STATUS_BBM_INCONSISTENT_MBBT                             = STATUS_BBM_ERROR_BASE + 0xF,
   STATUS_BBM_DECOMMISSION_START                            = STATUS_BBM_ERROR_BASE + 0x10,
   STATUS_BBM_FTL_BLK_BUDGET_NOT_MET                        = STATUS_BBM_ERROR_BASE + 0x11,
   STATUS_BBM_CONFIG_ERROR                                  = STATUS_BBM_ERROR_BASE + 0x12,
   STATUS_BBM_ITR_BLOCK_SEARCH_DONE                         = STATUS_BBM_ERROR_BASE + 0x13,
   STATUS_BBM_BAD_BLOCK_LIMIT_PER_PLANE_REACHED             = STATUS_BBM_ERROR_BASE + 0x14,
   STATUS_BBM_INCONSISTENT_PARAMETER                        = STATUS_BBM_ERROR_BASE + 0x15,
   STATUS_BBM_NO_BLOCKS_FOR_ALLOCATION                      = STATUS_BBM_ERROR_BASE + 0x16,
   STATUS_BBM_TOO_MANY_BAD_BLOCKS                           = STATUS_BBM_ERROR_BASE + 0x17,
   STATUS_BBM_CONFIG_FILE_3_ERROR                           = STATUS_BBM_ERROR_BASE + 0x18,
   STATUS_BBM_GUARANTEED_GOODBLOCKS_UNAVAILABLE             = STATUS_BBM_ERROR_BASE + 0x19,
   STATUS_BBM_ITR_BLOCK_NOT_MATCHING_GBB_CRITERIA           = STATUS_BBM_ERROR_BASE + 0x20,
   STATUS_BBM_ITR_BLOCK_NOT_MATCHING_MST_CRITERIA           = STATUS_BBM_ERROR_BASE + 0x21,
   STATUS_BBM_ITR_BLOCK_NOT_MATCHING_GROWN_SPARE_CRITERIA   = STATUS_BBM_ERROR_BASE + 0x22,
} PS_BBM_Status_Error_Description_t;

typedef enum
{
   SMART_PS_CALC_COUNT_BASE = 0,
   SMART_TOTAL_PF_COUNT = SMART_PS_CALC_COUNT_BASE,
   SMART_TOTAL_EF_COUNT,
   SMART_TOTAL_GROWN_DEFECTS,
   SMART_TOTAL_RESERVED_BLK_COUNT,
   SMART_WORST_PLANE_PF_COUNT,
   SMART_WORST_PLANE_EF_COUNT,
   SMART_AVAILABLE_SPARES,
   SMART_TOTAL_GROWN_DEFECTS_COUNT,
   SMART_PS_CALC_COUNT_END
} PSCalculated_SmartCounters_e;





typedef enum
{
   PS_BBM_SPARE_BLOCK_STATUS_SPARE                 = 0,
   PS_BBM_SPARE_BLOCK_STATUS_RELINKED_NOT_UPDATED  = 1,
   PS_BBM_SPARE_BLOCK_STATUS_SPARE_BAD             = 2,
   PS_BBM_SPARE_BLOCK_STATUS_RELINKED              = 3,

} PS_BBM_SpareBlkStatus_e;


typedef enum PS_BBM_BadBlkErrType_TAG
{
   PS_BBM_BAD_BLOCK_ERROR_TYPE_REAL       = 0,
   PS_BBM_BAD_BLOCK_ERROR_TYPE_FAKE       = 1,
   PS_BBM_PROD_BAD_BLOCK_ERROR_TYPE_NAND  = 0,
   PS_BBM_PROD_BAD_BLOCK_ERROR_TYPE_MST   = 1,
}  PS_BBM_BadBlkErrType_e;


typedef enum PS_BBM_BadBlkErrCause_TAG
{
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_PROG    = 0,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_ERASE   = 1,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_READ    = 2,
   PS_BBM_BAD_BLOCK_ERROR_CAUSE_MBBT    = 3,
}  PS_BBM_BadBlkErrCause_e;


typedef enum
{
   PS_BBM_INIT_PRODUCTION  = 0,
   PS_BBM_INIT_FLASHWARE   = 1,
} PS_BBM_INIT_Type_e;


typedef enum
{
   PS_BBM_DATA_CONFIG               = 0,
   PS_BBM_DATA_RELINK_TABLE         = 1,
   PS_BBM_DATA_BBM_COUNTERS         = 2,
   PS_BBM_DATA_LAST_MB_IN_MD        = 3,
   PS_BBM_DATA_BLOCK_STATUS_BITMAP  = 4,

   PS_BBM_DATA_SEGMENTS_IN_FILE,
} PS_BBM_DataSegmentsInIFS_e;


typedef enum
{
   PS_BBM_FLUSH_BBM_FILE_BLOCKING      = 0x0A,
   PS_BBM_FLUSH_BBM_FILE_NONBLOCKING   = 0x0C,
} PS_BBM_File_Flush_Type_e;


typedef enum
{
   PS_BBM_DECOMM_STATE_IDLE            = 0,
   PS_BBM_DECOMM_STATE_DONE            = 0,
   PS_BBM_DECOMM_STATE_FTL_REQ_SENT    = 1,
   PS_BBM_DECOMM_STATE_FTL_RESP_HANDLE = 2,
   PS_BBM_DECOMM_STATE_SEC_ERASE       = 3,
} PS_BBM_Decomm_State_e;


typedef enum
{
   PS_BBM_EH_STATE_IDLE                   = 0,
   PS_BBM_EH_STATE_FILE_WRITE_COMPLETE    = 0,
   PS_BBM_EH_STATE_RELINK_REQ             = 1,
   PS_BBM_EH_STATE_DECOMM_REQ             = 2,
   PS_BBM_EH_STATE_DECOMM_RESP            = 3,
   PS_BBM_EH_STATE_RELINK_RESP            = 4,
   PS_BBM_EH_STATE_RELINK_UPDATE          = 5,
   PS_BBM_EH_STATE_FILE_WRITE_REQ         = 6,
   PS_BBM_EH_STATE_SEC_ERASE              = 7,
} PS_BBM_EH_State_e;


typedef enum
{
   PSUT_BBM_TRANSLATE_VBA_2_DEVBA   = 0,
   PSUT_BBM_DECOMM_START            = 1,
   PSUT_BBM_DECOMM_RESP             = 2,
   PSUT_BBM_IFS_SYNC                = 3,
} PS_BBM_UT_TestType_e;


typedef enum
{
   PS_BBM_REVIVE_DISABLED_TYPE      = 0,
   PS_BBM_REVIVE_EI_TYPE            = 1,
   PS_BBM_REVIVE_RECYCLE_TYPE       = 2,
} PS_BBM_REVIVE_Type_e;


typedef struct PS_BBM_Runtime_Device_Config_t
{
   uint8_t  diesPerCe;
   uint8_t  numPS;

   uint8_t  cePerFim;
   uint8_t  planesPerDie;

   uint16_t blocksPerPlane;

   uint16_t relinksPerPlane;

   uint8_t  diesPerFim;
   uint8_t  diesPerCe_Log2;

   uint8_t  numPS_Log2;
   uint8_t  cePerFim_Log2;

   uint8_t  planesPerDie_Log2;
   uint8_t  relinksPerPlane_Log2;

   uint16_t  padding;

}  PS_BBM_DevieConfig_t;



typedef struct PS_BBM_Runtime_Data_Header_t
{
   PS_BBM_DevieConfig_t bbmDevConfig;
   PS_BBM_Decomm_Sync_List_t decomSyncList;

   uint32_t fakeDecommProbability_InPS;

#line 453 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
   uint16_t bbmFileID;
   uint16_t bbmFileRev;
   uint16_t bbmProdVer;
   uint16_t bbmDevCfgVer;
   uint8_t  padding1[16];
}  PS_BBM_Data_Hdr_t;

#line 478 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef union PS_BBM_relinkTableRelinkBlk
{
   uint16_t all16;
   struct PS_BBM_relinkTableRelinkBlk_s
   {
      uint16_t blk           :12;
      uint16_t blkType       :2;
      uint16_t blockStatus   :2;
   } bits;
}  PS_BBM_relinkTableRelinkBlk_t;

typedef union PS_BBM_RelinkTableBadBlk
{
   uint16_t all16;
   struct PS_BBM_RelinkTableBadBlk_s
   {
      uint16_t  blk           :12;
      uint16_t  blkType       :1;
      uint16_t  errorType     :1;
      uint16_t  errorCause    :2;
   } bits;
}  PS_BBM_relinkTableBadBlk_t;

typedef struct PS_BBM_relinkTableEntry
{
   PS_BBM_relinkTableRelinkBlk_t relinkBlk;
   PS_BBM_relinkTableBadBlk_t    badBlk;
}  PS_BBM_relinkTableEntry_t;



typedef struct PS_BBM_SpareBlkCntEntry
{
   uint16_t  gen;
   uint16_t  slc;
   uint16_t  tlc;
} PS_BBM_SpareBlkCntEntry_t;

typedef struct PS_BBM_BadBlockTypeCountEntry
{
   uint16_t  UECCCnt;
   uint16_t  PFCnt;
   uint16_t  EFCnt;
}  PS_BBM_BadBlkTypeCntEntry_t;


typedef struct PS_BBM_EIBlockTypeCountEntry
{
   uint16_t  UECCCnt;
   uint16_t  PFCnt;
   uint16_t  EFCnt;
}  PS_BBM_EIBlkTypeCntEntry_t;


typedef struct PS_BBM_BlkCntArray
{
   uint16_t                      relinked;
   PS_BBM_SpareBlkCntEntry_t     spare;
   uint16_t                      good;
   uint16_t                      mbbtTblBad;
   PS_BBM_BadBlkTypeCntEntry_t   errTypeCnt;
   uint16_t                      mstBadBlkCntr;
   uint16_t                      lastRTBadBlkIndex;
   uint16_t                      decommSpares;

   PS_BBM_EIBlkTypeCntEntry_t    EIerrTypeCnt;
   uint8_t                       reserved[2];

#line 549 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
}  PS_BBM_BlkCntArray_t;

#line 578 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef uint8_t PS_BBM_BitMap_MetaBlock_Info_t;


typedef union PS_BBM_psCeDie
{
   uint8_t  all8;
   struct
   {
      uint8_t ps    :3;
      uint8_t ce    :2;
      uint8_t die   :3;
   } bits;
} PS_BBM_PsCeDie_t;


typedef union PS_BBM_md_mdInPs
{
   uint16_t  all16;
   struct
   {
      uint16_t md       :8;
      uint16_t mdInPs   :8;
   } bits;
} PS_BBM_MD_mdInPs_t;


typedef enum PS_BBM_FakeDecomType_e
{
   PS_BBM_FAKE_DECOM_TYPE_NONE = 0,
   PS_BBM_FAKE_DECOM_TYPE_EI,
   PS_BBM_FAKE_DECOM_TYPE_ERASE_NO_DECOM,
} PS_BBM_FakeDecomType_t;


typedef struct PS_BBM_Decommission_Control_Block
{
   uint8_t  state;
   uint8_t  blkType;
   uint8_t  metaDie;
   uint8_t  fakeDecomm;
   DeVBA_t  deVBA;

   uint32_t bbmFileWritePending;

} PS_BBM_Decomm_CB_t;


typedef struct PS_BBM_Weakest_Plane_Of_Metadie_s
{
   uint8_t  metaDie;
   uint8_t  phyPlOffset;
   uint16_t badBlkCount;
} PS_BBM_WeakestPlaneInfo_t;






extern PS_BBM_Data_Hdr_t         BBM_DataHdr;


extern uint32_t                  PS_BBM_EH_State;

#line 878 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef struct PS_BBM_FID_224_225_512GB_1Tb_s
{
    PS_BBM_Data_Hdr_t                       BBM_DataHdr;
    PS_BBM_relinkTableEntry_t               BBM_RelinkTble[ ( (1)  * ( ( 4 ) / ( 2 ) )  * (4) ) ][ (128) ];
    PS_BBM_BlkCntArray_t                    BBM_Counters[ ( (1)  * ( ( 4 ) / ( 2 ) )  * (4) ) ];
    uint16_t                                BBM_LastGoodMB[ ( ( (1) )  * ( 2 ) ) ];
    PS_BBM_BitMap_MetaBlock_Info_t          BBM_Bitmap[ ( (1) ) ][ (128) ];
} PS_BBM_FID_224_225_512GB_1Tb_t;










typedef struct PS_BBM_FID_224_1TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                   BBM_DataHdr;
   PS_BBM_relinkTableEntry_t           BBM_RelinkTble[ ( (2)  * ( ( 4 ) / ( 2 ) )  * (4) ) ][ (128) ];
   PS_BBM_BlkCntArray_t                BBM_Counters[ ( (2)  * ( ( 4 ) / ( 2 ) )  * (4) ) ];
   uint16_t                            BBM_LastGoodMB[ ( ( (2) )  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t      BBM_Bitmap[ ( (2) ) ][ ( ( (687) ) ) ];
}  PS_BBM_FID_224_1TB_1Tb_t;

#line 916 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef struct PS_BBM_FID_224_2TB_1Tb_s
{
   PS_BBM_Data_Hdr_t                   BBM_DataHdr;
   PS_BBM_relinkTableEntry_t           BBM_RelinkTble[ ( (4)  * ( ( 4 ) / ( 2 ) )  * (4) ) ][ (128) ];
   PS_BBM_BlkCntArray_t                BBM_Counters[ ( (4)  * ( ( 4 ) / ( 2 ) )  * (4) ) ];
   uint16_t                            BBM_LastGoodMB[ ( ( (4) )  * ( 2 ) ) ];
   PS_BBM_BitMap_MetaBlock_Info_t      BBM_Bitmap[ ( (4) ) ][ ( ( (687) ) ) ];
}  PS_BBM_FID_224_2TB_1Tb_t;

#line 948 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef union Max_PS_BBM_File_u
{

#line 973 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
   PS_BBM_FID_224_225_512GB_1Tb_t   bbmFile512GB_1Tb;


   PS_BBM_FID_224_1TB_1Tb_t         bbmFile1TB_1Tb;


   PS_BBM_FID_224_2TB_1Tb_t         bbmFile2TB_1Tb;

#line 986 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
} Max_PS_BBM_File_t;

#line 1093 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef struct PS_BBM_ARAM_Data_1TB_1Tb_s
{
   PS_BBM_Data_Hdr_t             BBM_DataHdr;
   PS_BBM_relinkTableEntry_t     BBM_RelinkTble[ ( (2) ) ][ ( ( ( 4 ) / ( 2 ) ) ) ][ (4) ][ (128) ];
   PS_BBM_BlkCntArray_t          BBM_Counters[ ( (2) ) ][ ( ( ( 4 ) / ( 2 ) ) ) ][ (4) ];
   uint16_t                      BBM_LastGoodMB[ ( ( (2) )  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_1TB_1Tb_t;



typedef struct PS_BBM_ARAM_Data_2TB_1Tb_s
{
   PS_BBM_Data_Hdr_t             BBM_DataHdr;
   PS_BBM_relinkTableEntry_t     BBM_RelinkTble[ ( (4) ) ][ ( ( ( 4 ) / ( 2 ) ) ) ][ (4) ][ (128) ];
   PS_BBM_BlkCntArray_t          BBM_Counters[ ( (4) ) ][ ( ( ( 4 ) / ( 2 ) ) ) ][ (4) ];
   uint16_t                      BBM_LastGoodMB[ ( ( (4) )  * ( 2 ) ) ];
} PS_BBM_ARAM_Data_2TB_1Tb_t;

#line 1126 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
typedef union PS_BBM_ARAM_Data_u
{

#line 1155 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
   PS_BBM_ARAM_Data_1TB_1Tb_t       bbmData_1TB_1Tb;



   PS_BBM_ARAM_Data_2TB_1Tb_t       bbmData_2TB_1Tb;

#line 1168 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
} PS_BBM_ARAM_Data_t;





void PS_SmartGetPSCounters(uint32_t *ftlSparesArray, uint16_t* pfsPerPlane, uint16_t* efsPerPlane, uint16_t* sparesPerPlane);
void PS_SetFakeDecommissionPeriod (uint32_t decommProbability);

#line 1191 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_Prod(MBBT_t *pMBBT);

#line 1206 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_Prod_Init(void);

#line 1222 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_FormatWithExternalFiles(uint8_t* pBuffer, uint32_t mbbtSize, uint32_t bbmFileSize);








Status_t PS_BBM_Prod_Get_MetaDieInfo (PSMetaDieInfo_t *pMetaDieInfo);







Status_t PS_BBM_Startup_Get_DecommSyncInfo (PS_BBM_Decomm_Sync_List_t *pDecommSyncList, uint32_t LogTS, uint32_t psNum);







Status_t PS_BBM_FlushBbmDataToFile(void);







Status_t  PS_BBM_VerifyDeviceConfig (uint8_t *pCfgDataBuff);

void PS_BBM_Diag_GetDefectCounts (PS_BBM_BadBlkTypeCntEntry_t* pDefectCounters);
void PS_BBM_Diag_GetDefectCount_Info (uint32_t ps);

#line 1304 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_bbm_api.h"
Status_t PS_BBM_Diag_TranslateFunc (VBA_t inputVBA, DeVBA_t *deVBA);

Status_t PS_BBM_MP_TranslateVBA2FA(uint32_t vba, DeVBA_t *deVBA0);

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"

#line 106 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"
typedef uint8_t EI_Percent_t;







typedef uint32_t EI_EPRCodeMapType_t;


typedef enum EI_NestedProgEraseCode_e
{
   EI_NESTED_PF_EF_FIRST_SPECIAL_VAL = (0x6000 <<  (16) ),

   EI_NESTED_EPWR_START              = (0x6000 <<  (16) ),
   EI_NESTED_EPWR_END                = (0x6FFF <<  (16)  | ((1<< (16) )-1)),

   EI_NESTED_PROG_LATCH              = (( ( (0xFFFFFFFFUL) )  >> 1) - 1),
   EI_NESTED_PROG_ERASE_CODE_ERASE   = ( ( (0xFFFFFFFFUL) )  >> 1),

   EI_NESTED_PROG_ERASE_FLAG_PA      = (1<<31),

   EI_NESTED_PROG_SUB_BLOCK          = (1<<30)
}   EI_NestedProgEraseCode_t;


typedef enum EI_ReadFailureLevel_e
{
   EI_READ_FAILURE_LEVEL_NONE                    = 0,
   EI_READ_FAILURE_LEVEL_FIRST_FAIL              = 1,
   EI_READ_FAILURE_LEVEL_SW_TH                   = EI_READ_FAILURE_LEVEL_FIRST_FAIL,
   EI_READ_FAILURE_LEVEL_BES5_SB0                = 2,
   EI_READ_FAILURE_LEVEL_BES5_SB1                = 3,
   EI_READ_FAILURE_LEVEL_BES7_SB2_NOLA           = 4,
   EI_READ_FAILURE_LEVEL_BES7_SB1                = 5,
   EI_READ_FAILURE_LEVEL_BES7_SB0                = 6,
   EI_READ_FAILURE_LEVEL_UECC                    = 7,
   EI_READ_FAILURE_LEVEL_LDPC_RAM_BIT_FLIP       = 8,
   EI_READ_FAILURE_LEVEL_BES7_SB2_LA             = 9,
   EI_READ_FAILURE_LEVEL_TOTAL                   = 10
}   EI_ReadFailureLevel_t;


typedef enum EI_ProgFailurePattern_e
{
   EI_PROG_FAILURE_PATTERN_1WL             = 0,
   EI_PROG_FAILURE_PATTERN_WL2WL           = 1,
   EI_PROG_FAILURE_PATTERN_LWL2LWL         = 2,
   EI_PROG_FAILURE_PATTERN_1WL_2PLANES     = 3,
   EI_PROG_FAILURE_PATTERN_2PLANES_WL2WL   = 4,
   EI_PROG_FAILURE_PATTERN_WL2WL_P2P       = 5,
   EI_PROG_FAILURE_PATTERN_WRITE_ABORT     = 6,
   EI_PROG_FAILURE_PATTERN_EPWR            = 7,
   EI_PROG_FAILURE_PATTERN_1LWL            = 8,

   EI_PROG_FAILURE_PATTERN_SKIP_PAR_PAGES  = 9,
   EI_PROG_FAILURE_PATTERN_EPWR_BES5       = 10,
   EI_PROG_FAILURE_PATTERN_EPWR_BES7       = 11,



   EI_PROG_FAILURE_PATTERN_BLU             = 12,
   EI_PROG_FAILURE_PATTERN_BLU_2PLANES     = 13,
   EI_PROG_FAILURE_PATTERN_BLU_P2P         = 14,
   EI_PROG_FAILURE_PATTERN_BLU_STRING      = 15,
   EI_PROG_FAILURE_PATTERN_SILENT_BLU_EPWR = 16,

   EI_PROG_FAILURE_PATTERN_TOTAL           = 17
}   EI_ProgFailurePattern_t;




typedef enum EI_EraseFailurePattern_e
{
   EI_ERASE_FAILURE_PATTERN_SIMPLE      = 0,
   EI_ERASE_FAILURE_PATTERN_WRITE_ABORT = 1,
   EI_ERASE_FAILURE_PATTERN_SGD_ONLY    = 2,
   EI_ERASE_FAILURE_PATTERN_SUSRES_PRER = 3,
   EI_ERASE_FAILURE_PATTERN_TOTAL
}   EI_EraseFailurePattern_t;

typedef enum EI_DstFailureType_e
{
   EI_DST_FAILURE_TYPE_NONE             = 0,
   EI_DST_FAILURE_TYPE_LDPC_TIMEOUT     = 1,
   EI_DST_FAILURE_TYPE_TOTAL            = 2
}   EI_DstFailureType_t;


typedef enum EI_State_e
{
   EI_STATE_FREE        = 0,
   EI_STATE_ONGOING     = 1,
   EI_STATE_FAILED      = 2,
   EI_STATE_PENDING_FTL = 3,
   EI_STATE_COMPLETED   = 4,
   EI_STATE_TOTAL       = 5
} EI_State_t;

typedef enum EI_InjEntryType_e
{
   EI_INJ_ENTRY_TYPE_PROG_ERASE = 0,
   EI_INJ_ENTRY_TYPE_READ       = 1,
   EI_INJ_ENTRY_TYPE_XOR_REC    = 2,
   EI_INJ_ENTRY_TYPE_DST        = 3,
   EI_INJ_ENTRY_TYPE_DRD        = 4,
   EI_INJ_ENTRY_TYPE_TOTAL      = 5
}EI_InjEntryType_t;





typedef struct EI_InjDescCommon_s
{
   uint16_t mpOperationId;
   uint8_t  state;
   uint8_t  enableElOnInjected;
   uint8_t  injEntryType;
   uint8_t  rfu[3];
   uint64_t lastAccessTime;
} EI_InjDescCommon_t;


typedef union EI_EPWRStringPlaneBitmap_s
{
   EI_EPRCodeMapType_t all;
   struct
   {
      EI_EPRCodeMapType_t strP0:3;
      EI_EPRCodeMapType_t strP0EpwrStatus:2;
      EI_EPRCodeMapType_t strP1:3;
      EI_EPRCodeMapType_t strP1EpwrStatus:2;
      EI_EPRCodeMapType_t strP2:3;
      EI_EPRCodeMapType_t strP2EpwrStatus:2;
      EI_EPRCodeMapType_t strP3:3;
      EI_EPRCodeMapType_t strP3EpwrStatus:2;
      EI_EPRCodeMapType_t EpwrWordLine:8;
      EI_EPRCodeMapType_t header:4;
   }bits;
}EI_EPWRStringPlaneBitmap_t;
typedef union EI_NestedEPWR_s
{
   EI_EPWRStringPlaneBitmap_t nestBitmap;
}EI_NestedEPWR_t;

enum EI_SGD_TYPE_e
{
   EI_SGD_TYPE_INACTIVE                      = (0),
   EI_SGD_TYPE_FORCE_SGD_DOWNSHIFT           = (1<<0),
   EI_SGD_TYPE_DETECT_DOWNSHIFT_FAIL         = (1<<1),
   EI_SGD_TYPE_SOFT_PROG_FAILURE             = (1<<2),
   EI_SGD_TYPE_EF_AFTER_SOFT_PROG_OR_OP      = (1<<3),
   EI_SGD_TYPE_OP_DOWNSHIFT                  = (1<<4),
   EI_SGD_TYPE_FORCE_SGD_UPSHIFT             = (1<<5),
   EI_SGD_TYPE_DETECT_UPSHIFT_FAIL           = (1<<6),
   EI_SGD_TYPE_EF_AFTER_UPSHIFT_FAIL         = (1<<7)
};

typedef struct
{
   uint8_t   numPreEraseSuspendRead;
   uint8_t   numPostEraseSuspendRead;
   uint8_t   forceSuspendEraseFail:1;
   uint8_t   disablePreEraseTimeLimit:1;
   uint8_t   disablePostEraseTimeLimit:1;
   uint8_t   reserved:5;
   uint8_t   REHTypeAtESR:7;
   uint8_t   REHonIsSuspend:1;
   uint8_t   ReadIndexAtESR;
}EI_SuspendOrPreErase_t;

typedef union EI_NestProgReadOrNestEraseSgd_s
{
   struct
   {
      uint16_t nestedReadPagesList     [ ( (4)  * (2) ) ][ (8) ];
      uint8_t  nestedReadBytemapsList  [ ( (4)  * (2) ) ][ (8) ][ (4) ];
      uint8_t  nestedReadListSize      [ ( (4)  * (2) ) ];
      uint8_t  nestedReadListCurr      [ ( (4)  * (2) ) ];
   }prog;

   struct
   {

      uint16_t  lowTailSgdDetectFailWLBitMap[ ( (4) ) ];
      uint32_t  lowTailSgdDetectFailStringInWLBitMap[ ( (4) ) ];
      uint8_t   lowTailSgdCorrectFailWL[ ( (4) ) ];
      uint8_t   lowTailSgdCorrectFailStringInWL[ ( (4) ) ];
      uint8_t   lowTailSgdOverProgramWL[ ( (4) ) ];
      uint8_t   lowTailSgdOverProgramStringInWL[ ( (4) ) ];

      uint8_t   upTailSgdDetectFailWL[ ( (4) ) ];
      uint8_t   upTailSgdDetectFailStringInWL[ ( (4) ) ];

      uint8_t   numOfNestedLowTailSgdDetectErrTotal [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdDetectErrCurr  [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdCorrectErrTotal[ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdCorrectErrCurr [ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdOverProgErrTotal[ ( (4) ) ];
      uint8_t   numOfNestedLowTailSgdOverProgErrCurr [ ( (4) ) ];
      uint8_t   numOfNestedUpTailSgdDetectErrTotal [ ( (4) ) ];
      uint8_t   numOfNestedUpTailSgdDetectErrCurr  [ ( (4) ) ];
      EI_SuspendOrPreErase_t suspendOrPreErase;
   }erase;
}EI_NestProgReadOrNestEraseSgd_t;

typedef struct EI_InjDescProgErase_s
{
   uint8_t  injBitmap;
   uint8_t  progInjPattern;
   uint8_t  isParityPage;

   uint8_t  NPDBitmap;
   uint8_t  sgdHeaderErase[ (4) ];
   EI_NestedEPWR_t  EPWRBitmap;






   EI_EPRCodeMapType_t nestedProgEraseList     [ ( (4)  * (2) ) ][ (4) ];
   uint8_t  nestedProgEraseListSize [ ( (4)  * (2) ) ];
   uint8_t  nestedProgEraseListCurr [ ( (4)  * (2) ) ];




   EI_NestProgReadOrNestEraseSgd_t  otherNest;

} EI_InjDescProgErase_t;

typedef struct EI_InjDescRead_s
{
   uint8_t  injBytemap[ (2) ][ ( ( (4)  * (4) ) ) ];

   uint8_t  triggerRlc;
   uint8_t  rfu[419];
} EI_InjDescRead_t;

typedef struct EI_InjXor_s
{

   uint8_t readInjBytemap[ ( (4) ) ];





   uint16_t offsetInBin;








   uint8_t binNumber;


   uint8_t secInjFlag;
}   EI_InjXor_t;

typedef struct EI_InjDescXor_s
{
   EI_InjXor_t    ei[ (8) ];






   uint32_t       size;
   uint8_t        rfu[80 - 4 - sizeof(EI_InjXor_t) *  (8) ];
}   EI_InjDescXor_t;

typedef struct EI_InjDescDst_s
{
   uint8_t  failureType[ ( ( ( ( 4 ) / ( 2 ) )  * (1)  * (8) ) ) ];
   uint8_t  rfu[80 -  ( ( ( ( 4 ) / ( 2 ) )  * (1)  * (8) ) ) ];
} EI_InjDescDst_t;

typedef struct EI_InjDescDrd_s
{
   uint16_t  opbBitmap;
   uint8_t   rfu[78];
} EI_InjDescDrd_t;

typedef union EI_InjDescSpecific_u
{
   EI_InjDescProgErase_t progErase;
   EI_InjDescRead_t      read;
   EI_InjDescXor_t       xor;
   EI_InjDescDst_t       dst;
   EI_InjDescDrd_t       drd;
} EI_InjDescSpecific_t;

typedef struct EI_InjectionDescriptor_u
{
   EI_InjDescCommon_t common;
   EI_InjDescSpecific_t injection;
} EI_InjectionDescriptor_t;

typedef struct EI_PlpModeParameters_s
{
   uint16_t                   plpFirstTriggerId;
   uint16_t                   plpSecondTriggerId;
   EI_Percent_t               plpChance;
   uint8_t                    isPlpActionDpa;
   uint8_t                    isPlpUsingWaitingLoop;
   uint8_t                    isPlpAllowedDuringMount;
   uint16_t                   plpMaxDelayInMilliSeconds;
   uint8_t                    isPfEfAllowedDuringPlp;
   uint8_t                    rfu[1];
}   EI_PlpModeParameters_t;









typedef struct EI_SharedGlobalParams_s
{
   uint32_t                   canaryValStart;
   uint32_t                   mbReviveEnablePs;
   uint32_t                   jbReviveEnablePs;
   uint32_t*                  pBaseRlcFflbaTbl;
   uint32_t*                  pBaseEiRlcHeadersTbl;

   EI_InjDescRead_t           readVectorForSuspendErase;
   uint8_t                    wasReadVectorUsedByPs;
   EI_Percent_t               chanceReadDuringSuspendErase;
   uint8_t                    rfu0[2];
   uint32_t                   internalPlpFlags;
   uint32_t                   psFlagIsActiveXorRecovery;
   EI_PlpModeParameters_t     sharedPlpModeParameters;

   uint16_t                   injectedPlpTriggerId;
   uint8_t                    forcePreErase : 1;
   uint8_t                    reserved : 7;
   uint8_t                    rfu;
   uint32_t                   canaryValEnd;
} EI_SharedGlobalParams_t;

typedef struct   EI_JBreviveSharedParams_s
{

      uint32_t                       jbRevRlcHdrTblPtrs[ ( 8  * 96) * 6 ];

      FMU_Metadata_t   jbRevRlcHdrTbl[ ( 8  * 96) * 6 ];
}EI_JBreviveSharedParams_t ;

#line 494 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"
typedef struct EI_InjectionSgdBitmap_s
{
   uint16_t  lowTailSgdEnableSlcWLBitmap;
   uint16_t  upTailSgdEnableSlcWLBitmap;
   uint16_t  lowTailSgdEnableTlcWLBitmap;
   uint16_t  upTailSgdEnableTlcWLBitmap;
}EI_InjectionSgdBitmap_t;

#line 509 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"
typedef struct EI_InjectionVector_s
{
   EI_InjectionDescriptor_t injDesc[ ( ( 2 ) ) ][ (16) ];

#line 519 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_ps_api.h"
}EI_InjectionVector_t;

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/../../ftl/inc_private/ftl_config_values.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/../../ftl/inc_private/ftl_config_values_bics8.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/moonshot_blockbudget.h"

#line 19 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/../../ftl/inc_private/ftl_config_values_bics8.h"

#line 21 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/../../ftl/inc_private/ftl_config_values.h"

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"

#line 106 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"
extern uint8_t gEI_ActiveFlow[ (10) ];




typedef enum EI_OpId_e
{

   EI_OP_ID_HOST             = 0,
   EI_OP_ID_RMW              = 1,
   EI_OP_ID_FUA              = 2,
   EI_OP_ID_DEALLOC          = 3,


   EI_OP_ID_LOG              = 4,
   EI_OP_ID_PRM              = 5,
   EI_OP_ID_MTM              = 6,
   EI_OP_ID_XOR              = 7,
   EI_OP_ID_XOR_ZONE_REBUILD = 8,
   EI_OP_ID_ACTIVE_RS        = 9,


   EI_OP_ID_FLGP             = 10,
   EI_OP_ID_SCAN_FWD         = 11,
   EI_OP_ID_READ_HEADERS     = 12,


   EI_OP_ID_RLC_HOST_VC      = 13,
   EI_OP_ID_RLC_HOST         = 14,
   EI_OP_ID_RLC_MTM          = 15,
   EI_OP_ID_RLC_XOR          = 16,
   EI_OP_ID_BRLC_HOST        = 17,
   EI_OP_ID_BRLC_RLC         = 18,
   EI_OP_ID_BRLC_MTM         = 19,
   EI_OP_ID_BRLC_XOR         = 20,


   EI_OP_ID_INFRA_IFS        = 21,
   EI_OP_ID_INFRA_FADI       = 22,
   EI_OP_ID_INFRA_BOOT       = 23,
   EI_OP_ID_INFRA_DIR        = 24,


   EI_OP_ID_HOSTLESS         = 25,




   EI_NUM_OF_OP_IDS          = 26 ,
   EI_OP_ID_INFRA_FIRST      = EI_OP_ID_INFRA_IFS,
   EI_OP_ID_INFRA_LAST       = EI_OP_ID_INFRA_DIR,
   EI_INVALID_OP             = 0xFF
}   EI_OpId_stub_t;
typedef uint32_t EI_OpId_t;


enum EI_IntOpId_e
{
   EI_INT_OP_ID_XOR_REC_FIRST = EI_NUM_OF_OP_IDS,
   EI_INT_OP_ID_XOR_REC_LOAD_PAGE = EI_INT_OP_ID_XOR_REC_FIRST,
   EI_INT_OP_ID_XOR_REC_START,
   EI_INT_OP_ID_XOR_REC_LAST = EI_INT_OP_ID_XOR_REC_START,
   EI_OP_ID_INFRA_ERASE,
   EI_OP_ID_INFRA_FADI_JTAG,

   EI_UNUSED_OP_ID,
   EI_TOTAL_NUM_OF_OP_IDS,
   EI_INVALID_OP_ID,

#line 177 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"
   EI_INT_OP_ID_XOR_REC_TOTAL = EI_INT_OP_ID_XOR_REC_LAST - EI_INT_OP_ID_XOR_REC_FIRST + 1,
};
typedef EI_OpId_t EI_IntOpId_t;


typedef enum EI_ConfType_e
{
   EI_CONF_TYPE_RANDOM,
   EI_CONF_TYPE_SINGLE,
   EI_CONF_TYPE_TOTAL,
}   EI_ConfType_stub_t;
typedef uint32_t EI_ConfType_t;

typedef enum EI_ReadFailureType_e
{
   EI_READ_SW_TH = 0,
   EI_READ_BES5_SB_0,
   EI_READ_BES5_SB_1,
   EI_READ_BES7_SB_2_NOLA,
   EI_READ_BES7_SB_1,
   EI_READ_BES7_SB_0,
   EI_READ_UECC_REC,
   EI_READ_UECC_UNREC,
   EI_READ_LDPC_RAM_BIT_FLIP,
   EI_READ_UECC_REC_BY_DRAM,
   EI_NUM_OF_READ_FAILURE_TYPES
}   EI_ReadFailureType_stub_t;
typedef uint32_t EI_ReadFailureType_t;

typedef enum EI_ProgFailureType_e
{
   EI_PROG_FAILURE_TYPE_1WL               = 0,
   EI_PROG_FAILURE_TYPE_WL2WL             = 1,
   EI_PROG_FAILURE_TYPE_LWL2LWL           = 2,
   EI_PROG_FAILURE_TYPE_1WL_2PLANES       = 3,
   EI_PROG_FAILURE_TYPE_2PLANES_WL2WL     = 4,
   EI_PROG_FAILURE_TYPE_WL2WL_P2P         = 5,
   EI_PROG_FAILURE_TYPE_WRITE_ABORT       = 6,
   EI_PROG_FAILURE_TYPE_EPWR              = 7,
   EI_PROG_FAILURE_TYPE_1LWL              = 8,

   EI_PROG_FAILURE_TYPE_SKIP_PAR_PAGES    = 9,
   EI_PROG_FAILURE_TYPE_EPWR_BES7         = 10,
   EI_PROG_FAILURE_TYPE_EPWR_BES5         = 11,
   EI_PROG_FAILURE_TYPE_BLU_FAILURES      = 12,

   EI_NUM_OF_PROG_FAILURE_TYPES,
}   EI_ProgFailureType_stub_t;
typedef uint32_t EI_ProgFailureType_t;

typedef enum EI_ProgBluFailureType_e
{
   EI_PROG_BLU_FAILURE_TYPE_BLU                       = 0,
   EI_PROG_BLU_FAILURE_TYPE_BLU_2PLANES               = 1,
   EI_PROG_BLU_FAILURE_TYPE_BLU_P2P                   = 2,
   EI_PROG_BLU_FAILURE_TYPE_BLU_STRING                = 3,
   EI_PROG_BLU_FAILURE_TYPE_SILENT_BLU_EPWR           = 4,

   EI_NUM_OF_PROG_BLU_FAILURE_TYPES,
}   EI_ProgBluFailureType_stub_t;
typedef uint32_t EI_ProgBluFailureType_t;


typedef enum EI_EraseFailureType_e
{
   EI_ERASE_SINGLE = 0,
   EI_ERASE_WRITE_ABORT,
   EI_ERASE_SGD,
   EI_ERASE_SR_PRER,
   EI_NUM_OF_ERASE_FAILURE_TYPES
}   EI_EraseFailureType_stub_t;
typedef uint32_t EI_EraseFailureType_t;

typedef enum EI_NestedProgFailureType_e
{
   EI_NESTED_PROG_INJ_ERASE = 0,
   EI_NESTED_PROG_INJ_PAGE_0,
   EI_NESTED_PROG_INJ_PAGE_1,
   EI_NESTED_PROG_INJ_PAGE_LAST,
   EI_NESTED_PROG_INJ_PAGE_PRE_LAST,
   EI_NESTED_PROG_INJ_PAGE_OTHER,
   EI_NESTED_PROG_INJ_LATCH,
   EI_NESTED_PROG_INJ_RAND_EPWR,

   EI_NUM_OF_NESTED_PROG_FAILURE_TYPES,
}   EI_NestedProgFailureType_stub_t;
typedef uint32_t EI_NestedProgFailureType_t;

typedef enum EI_NestedEraseFailureType_s
{
   EI_NESTED_ERASE_INJ_ERASE = 0,

   EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES,
}   EI_NestedEraseFailureType_stub_t;
typedef uint32_t EI_NestedEraseFailureType_t;

typedef enum EI_CfgDstFailureType_e
{
   EI_CFG_DST_FAILURE_TYPE_LDPC_TIMEOUT = 0,
   EI_NUM_OF_CFG_DST_FAILURE_TYPES
}   EI_CfgDstFailureType_t;

typedef enum EI_CfgSgdFailureType_e
{
   EI_CFG_SGD_FAILURE_TYPE_DETECT_DOWNSHIFT_FAIL = 0,
   EI_CFG_SGD_FAILURE_TYPE_SOFT_PROG_FAILURE,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_CORRECT_OK,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_CORRECT_FAIL,
   EI_CFG_SGD_FAILURE_TYPE_EF_BEFORE_SGD,
   EI_CFG_SGD_FAILURE_TYPE_OVER_PROG,
   EI_CFG_SGD_FAILURE_TYPE_DETECT_UPSHIFT_FAIL,
   EI_CFG_SGD_FAILURE_TYPE_EF_AFTER_UPSHIFT_FAIL,
   EI_NUM_OF_CFG_SGD_FAILURE_TYPES
}   EI_CfgSgdFailureType_t;

typedef enum EI_FlashAccessType_e
{
   EI_FLASH_READ = 0,
   EI_FLASH_PROG,

   EI_NUM_OF_OP_TBL_ACCESS_TYPES,

   EI_FLASH_ERASE = EI_NUM_OF_OP_TBL_ACCESS_TYPES,
   EI_NUM_OF_STANDARD_FLASH_ACCESS_TYPES,

   EI_FLASH_XOR_REC = EI_NUM_OF_STANDARD_FLASH_ACCESS_TYPES,
   EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS,

   EI_FLASH_DST = EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS,
   EI_FLASH_DRD,

   EI_NUM_OF_FLASH_ACCESS_TYPES,

   EI_ILLEGAL_FLASH_ACCESS_TYPE,
}   EI_FlashAccessType_stub_t;
typedef uint8_t EI_FlashAccessType_t;

typedef enum EI_OperationToInject_e
{
   EI_INJ_OP_READ = 0,
   EI_INJ_OP_PROG,
   EI_INJ_OP_ERASE,

   EI_INJ_OP_XOR_LOAD,
   EI_INJ_OP_XOR_REBUILD,

   EI_INJ_OP_XOR_REC_LOAD,
   EI_INJ_OP_XOR_REC_UNROLL_PS0,
   EI_INJ_OP_XOR_REC_UNROLL_PS1,

   EI_INJ_OP_DST,
   EI_INJ_OP_DRD,
   EI_INJ_OP_XOR_STORE,

   EI_NUM_OF_INJ_OP_TYPES,
   EI_ILLEGAL_INJ_OP_TYPE
}   EI_OperationToInject_stub_t;
typedef uint8_t EI_OpToInject_t;

typedef enum EI_SingleInjAddrType_e
{
   EI_ADDR_TYPE_VBA = 0,
   EI_ADDR_TYPE_DEVBA,
   EI_ADDR_TYPE_LBA,
   EI_ADDR_TYPE_OPID,

   EI_NUM_OF_ADDR_TYPES,
}   EI_SingleInjAddrType_stub_t;
typedef uint8_t EI_SingleInjAddrType_t;

typedef enum EI_PageFailurePlacement_e
{
   EI_PLACEMENT_PAGE_0,
   EI_PLACEMENT_PAGE_1,
   EI_PLACEMENT_PAGE_LAST,
   EI_PLACEMENT_PAGE_PRE_LAST,
   EI_PLACEMENT_PAGE_OTHER,

   EI_PLACEMENT_PAGE_TOTAL,
   EI_PLACEMENT_PAGE_ILLEGAL

}   EI_PageFailurePlacement_stub_t;
typedef uint32_t EI_PageFailurePlacement_t;

typedef enum EI_ZoneState_e
{
   EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK,
   EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK,
   EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK,
   EI_ZONE_STATE_TOTAL,
   EI_ZONE_STATE_ILLEGAL,
   EI_ZONE_STATE_WORKAROUND_RLC_HOST,
}   EI_ZoneState_stub_t;
typedef uint32_t EI_ZoneState_t;

typedef enum EI_NestedFailueChances_e
{
   EI_NESTED_PF_EF_DURING_PF,
   EI_NESTED_READ_DURING_PF,
   EI_NESTED_TOTAL,
}   EI_NestedFailueChances_stub_t;
typedef uint32_t EI_NestedFailueChances_t;

typedef enum EI_BlockType_e
{
   EI_BLOCK_TYPE_SLC = 0,
   EI_BLOCK_TYPE_MLC,
   EI_BLOCK_TYPE_HYBRID,
   EI_BLOCK_TYPE_IRJB,

   EI_NUM_OF_BLOCK_TYPES
}   EI_BlockType_stub_t;
typedef uint32_t EI_BlockType_t;

typedef enum EI_OperationalState_e
{
   EI_OPERATIONAL_STATE_SPECIAL = 0,
   EI_OPERATIONAL_STATE_MOUNT,
   EI_OPERATIONAL_STATE_MOUNT_DPS,
   EI_OPERATIONAL_STATE_NORMAL,
   EI_OPERATIONAL_STATE_TOTAL,
} EI_OperationalState_stub_t;
typedef uint8_t EI_OperationalState_t;

typedef enum EI_SpecialOpst_e
{
   EI_SPECIAL_OPST_FNVM_OBM_CLOSE_OPNBLKS = 0x1,
   EI_SPECIAL_OPST_FNVM_OTHER_CASES       = 0x2,
   EI_SPECIAL_OPST_BKOPS                  = 0x4,
   EI_SPECIAL_OPST_PLP                    = 0x8,


   EI_SPECIAL_OPST_ALL                    = 0xFF,
} EI_SpecialOpst_stub_t;
typedef uint8_t EI_SpecialOpst_t;

typedef enum EI_LogCopyLocation_e
{
   EI_LOG_COPY_0_BEGINNING = 0,
   EI_LOG_COPY_0_MIDDLE,
   EI_LOG_COPY_0_ENDING,
   EI_LOG_COPY_1_BEGINNING,
   EI_LOG_COPY_1_MIDDLE,
   EI_LOG_COPY_1_ENDING,
   EI_LOG_COPY_LOCATION_TOTAL,
} EI_LogCopyLocation_stub_t;
typedef uint8_t EI_LogCopyLocation_t;

typedef enum
{
   EI_LOG_WRITE_REASON_FIRST_MOUNT = 0,
   EI_LOG_WRITE_REASON_MOUNT_GSD_DONE,
   EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE,
   EI_LOG_WRITE_REASON_GSD,
   EI_LOG_WRITE_REASON_BLOCK_ALLOCATED,
   EI_LOG_WRITE_REASON_FLASH_FILL,
   EI_LOG_WRITE_REASON_PWS,
   EI_LOG_WRITE_REASON_FNVM,
   EI_LOG_WRITE_REASON_DECOMMISSIONED,
   EI_LOG_WRITE_REASON_FE_SMART,
   EI_LOG_WRITE_REASON_INFRA_SMART,
   EI_LOG_WRITE_REASON_FTL_SMART,
   EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE,
   EI_LOG_WRITE_REASON_BRLC_COMPLETE,
   EI_LOG_WRITE_REASON_FMBL_NOT_FULL,
   EI_LOG_WRITE_REASON_READONLY,
   EI_LOG_WRITE_REASON_TOTAL,
} EI_LogWriteReason_stub_t;
typedef uint8_t EI_LogWriteReason_t;

typedef enum EI_XorLoadType_e
{
   EI_XOR_LOAD_TYPE_XRAM = 0,
   EI_XOR_LOAD_TYPE_DRAM,
   EI_XOR_LOAD_TYPE_TOTAL,
} EI_XorLoadType_stub_t;
typedef uint8_t EI_XorLoadType_t;

typedef enum EI_RebuildTarget_e
{
   EI_REBUILD_TARGET_XRAM = 0,
   EI_REBUILD_TARGET_DRAM,
   EI_REBUILD_TARGET_TOTAL,
} EI_RebuildTarget_stub_t;
typedef uint8_t EI_RebuildTarget_t;

typedef enum EI_RebuildReason_e
{
   EI_REBUILD_REASON_UGSD = 0,
   EI_REBUILD_REASON_LOAD_FAILURE,
   EI_REBUILD_REASON_TOTAL,
} EI_RebuildReason_stub_t;
typedef uint8_t EI_RebuildReason_t;

typedef enum EI_RlcType_e
{
   EI_RLC_TYPE_OTHER = 0,
   EI_RLC_TYPE_STATIC,
   EI_RLC_TYPE_TOTAL,
} EI_RlcType_stub_t;
typedef uint8_t EI_RlcType_t;

typedef enum EI_RlcOperation_e
{
   EI_RLC_OPERATION_BOTH = 0,
   EI_RLC_OPERATION_NORMAL_ONLY,
   EI_RLC_OPERATION_INTERLEAVED_ONLY,
   EI_RLC_OPERATION_TOTAL,
} EI_RlcOperation_stub_t;
typedef uint8_t EI_RlcOperation_t;

typedef enum EI_FadiType_e
{
   EI_FADI_TYPE_OTHER = 0,
   EI_FADI_TYPE_JTAG,
   EI_FADI_TYPE_TOTAL,
} EI_FadiType_stub_t;
typedef uint8_t EI_FadiType_t;

typedef enum EI_HostlessType_e
{
   EI_HOSTLESS_TYPE_OTHER = 0,
   EI_HOSTLESS_TYPE_RPMB,
   EI_HOSTLESS_TYPE_BOOTPARTITION,
   EI_HOSTLESS_TYPE_TOTAL,
} EI_HostlessType_stub_t;
typedef uint8_t EI_HostlessType_t;

enum EI_eraseType_e
{
   EI_ERASE_TYPE_NORMAL,
   EI_ERASE_TYPE_FNVM,
   EI_ERASE_TYPE_PRE_ERASE,
   EI_ERASE_TYPE_RE_ERASE,
   EI_ERASE_TYPE_COUNT,
   EI_ERASE_TYPE_INVALID = 0xFF
};
typedef uint8_t EI_eraseType_t;






typedef struct EI_SingleReadConfigParams_s
{
   EI_ReadFailureLevel_t   failureType;
   uint8_t                 triggerRlc;
   uint8_t                 rfu1[3];
   uint8_t                 failurePerFmuMap[ ( (4)  * (4) ) ];
   uint8_t                 rfu[ (80)  - 24];
}   EI_SingleReadConfigParams_t;

typedef struct EI_SingleProgConfigParams_s
{
   EI_ProgFailurePattern_t failureType;

   uint16_t nestedInjReadPagesList[ (8) ];
   uint8_t  nestedInjReadByteMapsList[ (8) ][ (4) ];

   EI_EPRCodeMapType_t nestedInjProgEraseList[ (4) ];
   uint8_t  nestedListProgEraseSize;
   uint8_t  nestedListReadSize;

   uint8_t  doInjectMultiplane;
   uint8_t  isParityPage;
   EI_EPRCodeMapType_t EPWRbitmap;
   uint8_t  XORStoreMetaPgOffs;

   uint8_t  rfu[ (80)  - 77];
}   EI_SingleProgConfigParams_t;

typedef struct EI_SingleSgdBitmapParams_s
{
   uint32_t  lowTailSgdDetectFailStringInWLBitmap;

   uint16_t  lowTailSgdDetectFailWLBitmap;
   uint8_t   lowTailSgdCorrectFailWL;
   uint8_t   lowTailSgdCorrectFailStringInWL;

   uint8_t   lowTailSgdOverProgramWL;
   uint8_t   lowTailSgdOverProgramStringInWL;
   uint8_t   upTailSgdDetectFailWL;
   uint8_t   upTailSgdDetectFailStringInWL;
}EI_SingleSgdBitmapParam_t;

typedef struct EI_SingleEraseConfigParams_s
{
   EI_EraseFailurePattern_t   failureType;
   uint8_t                    numNestedEraseInjections;
   uint8_t                    doInjectMultiplane;
   uint8_t                    doPowerAbortOnLastNestedInjection;
   uint8_t                    sgdHeaderErase[ (4) ];
   uint8_t                    forcePreErase;
   uint16_t                   lowTailSgdDetectWLBitmap;
   uint16_t                   upTailSgdDetectWLBitmap;
   EI_SingleSgdBitmapParam_t  sgdEIBitmap[ (4) ];
   uint8_t                    NPDBitmap;

   uint8_t                    numPreEraseSuspendRead;
   uint8_t                    numPostEraseSuspendRead;
   uint8_t                    forceSuspendEraseFail:1;
   uint8_t                    disablePreEraseTimeLimit:1;
   uint8_t                    disablePostEraseTimeLimit:1;
   uint8_t                    reserved:5;

   uint8_t                    REHTypeAtESR:7;
   uint8_t                    REHonIsSuspend:1;
   uint8_t                    ReadIndexAtESR;
   uint8_t                    rfu1[10];

#line 590 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"
}   EI_SingleEraseConfigParams_t;


typedef struct EI_RestrictionsConfig_s
{
   uint32_t cooldownTime;
   uint32_t consecutiveGap;
   uint8_t  fullCS;
   uint8_t  multyDiesPfEnable;
   uint8_t  avoidRoOnMtmUecc;
   uint8_t  multiPlanePfDisable;
   uint8_t  maxNumberOfNestedRecoverableReadsDuringPf;
   uint8_t  rfu [3];
}   EI_RestrictionsConfig_t;


typedef struct EI_GeneralConfig_s
{
   EI_ConfType_t confType;
   uint32_t      randomSeed;
   uint8_t       errLogEnable;
   uint8_t       mbReviveEnableFull;
   uint8_t       jbReviveEnable;
   uint8_t       doSurvivePowerCycles;
   uint16_t      drdOpbBitmap;
   uint8_t       mbReviveDisableFtl;
   uint8_t       planeAffinityMask[ (2) ][ (8) ];








   uint8_t       specialOpstBitmap;
}   EI_GeneralConfig_t;






typedef union EI_OpidSpecificChancesTable_u
{
   uint8_t                      flat[ (3 * (8) ) ];

   struct
   {
      EI_Percent_t              locations[EI_LOG_COPY_LOCATION_TOTAL];
      EI_Percent_t              reasons[EI_LOG_WRITE_REASON_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_LOG_COPY_LOCATION_TOTAL - EI_LOG_WRITE_REASON_TOTAL];
   } logChances;

   struct
   {
      EI_Percent_t              xorLoadTypes[EI_XOR_LOAD_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_XOR_LOAD_TYPE_TOTAL];
   } xorChances;

   struct
   {
      EI_Percent_t              rebuildTargets[EI_REBUILD_TARGET_TOTAL];
      EI_Percent_t              rfu0[ (8)  - EI_REBUILD_TARGET_TOTAL];
      EI_Percent_t              rebuildReasons[EI_REBUILD_REASON_TOTAL];
      EI_Percent_t              rfu1[ (3 * (8) )  -  (8)  - EI_REBUILD_REASON_TOTAL];
   } rebuildChances;

   struct
   {
      EI_Percent_t              rlcTypes[EI_RLC_TYPE_TOTAL];
      EI_Percent_t              rlcOperation;
      EI_Percent_t              rfu[ (3 * (8) )  - EI_RLC_TYPE_TOTAL - sizeof(EI_Percent_t)];
   } rlcChances;

   struct
   {
      EI_Percent_t              fadiTypes[EI_FADI_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_FADI_TYPE_TOTAL];
   } fadiChances;

   struct
   {
      EI_Percent_t              hostlessTypes[EI_HOSTLESS_TYPE_TOTAL];
      EI_Percent_t              rfu[ (3 * (8) )  - EI_HOSTLESS_TYPE_TOTAL];
   } hostlessChances;

} EI_OpidSpecificChancesTable_t;

typedef union EI_SingleConfigParams_u
{
   EI_SingleReadConfigParams_t  read;
   EI_SingleProgConfigParams_t  prog;
   EI_SingleEraseConfigParams_t erase;
   EI_InjDescXor_t              xor_rec;
   EI_InjDescDst_t              dst;
   EI_InjDescDrd_t              drd;
   uint8_t                      bytes[ (80) ];
}   EI_SingleConfigParams_t;





typedef struct EI_OpTableEntry_s
{
   uint8_t                       valid;
   uint8_t                       isParticipantInBurst;
   EI_Percent_t                  chanceToInitiateBurstOnRead;
   EI_Percent_t                  chanceToInitiateBurstOnProg;
   EI_Percent_t                  operationalStateChances  [EI_OPERATIONAL_STATE_TOTAL];
   EI_Percent_t                  opTypeFailureChances     [ (8) ];
   EI_Percent_t                  blockTypeFailureChances  [ (8) ];
   EI_Percent_t                  pagePlacementChances     [ (8) ];
   EI_Percent_t                  zoneStateChances         [ (8) ];
   EI_OpidSpecificChancesTable_t opidSpecificChances;
   EI_Percent_t                  nestedFailuresChances    [ (8) ];
}   EI_OpTableEntry_t;

typedef struct EI_ChancesTable_s
{
   EI_Percent_t              failChanceOriginalRead   [ (16) ];
   EI_Percent_t              failChanceXorRecRead     [ (16) ];
   EI_Percent_t              failChancePfRecRead      [ (16) ];
   EI_Percent_t              failChanceOriginalProg   [ (16) ];
   EI_Percent_t              failChanceNestedProg     [ (16) ];
   EI_Percent_t              failChanceOriginalErase  [ (16) ];
   EI_Percent_t              failChanceNestedErase    [ (16) ];
   EI_Percent_t              failChanceDst            [ (16) ];
   EI_Percent_t              failChanceSgd            [ (16) ];
   EI_Percent_t              failChanceProgBlu        [ (16) ];
   EI_Percent_t              rfuTbl3                  [ (16) ];
   EI_Percent_t              rfuTbl4                  [ (16) ];
   EI_Percent_t              rfuTbl5                  [ (16) ];
   EI_Percent_t              rfuTbl6                  [ (16) ];
   EI_Percent_t              rfuTbl7                  [ (16) ];
   EI_Percent_t              rfuTbl8                  [ (16) ];
}   EI_ChancesTable_t;

typedef struct EI_AllOpsFailureChances_s
{
   EI_Percent_t              chanceEraseFailure;
   EI_Percent_t              chanceXorRecDuringPfRecFailure;
   EI_Percent_t              chanceNestedEraseFailureDuringEraseFailure;
   EI_Percent_t              chancePsDecommissionRequests;
   EI_Percent_t              chanceProgParityPage;
   EI_Percent_t              chanceDstFailure;
   EI_Percent_t              chanceUnrecXorRecRead;
   EI_Percent_t              chanceToTriggerRlcAfterReadInj;
   EI_Percent_t              chanceNestedWriteAbort;
   EI_Percent_t              chanceNestedEraseAbort;
   EI_Percent_t              chanceEraseFailureDuringFnvm;
   EI_Percent_t              chanceDrd;
   EI_Percent_t              chanceSgdDownShift;
   EI_Percent_t              chanceSgdUpShift;
   EI_Percent_t              chanceReadDuringSuspendErase;
   EI_Percent_t              chanceEraseFailureFadiJtag;
}   EI_AllOpsFailureChances_t;

typedef struct EI_BurstModeParameters_s
{
   uint32_t                  cooldownTimeBurst;
   uint32_t                  consecutiveGapBurst;
   uint8_t                   maxInjectionsPerBurst;
   uint8_t                   minInjectionsPerBurst;
   uint8_t                   isBackToBack;
   uint8_t                   chanceToInitiateBurstOnErase;
   uint8_t                   chanceEraseFailureDuringBurst;
   uint8_t                   isSolePfDuringBurst;
   uint8_t                   rfu[2];
}   EI_BurstModeParameters_t;

typedef struct EI_EraseChances_s
{
   EI_Percent_t eraseFailureChances[EI_ERASE_TYPE_COUNT];
   uint8_t rfu[4];
   EI_Percent_t blockTypeFailureChances[ (8) ];
}   EI_EraseChances_t;

typedef struct EI_ConfigArraysExtenstion_s
{
   uint8_t                   rfuBuff[24];
   EI_PlpModeParameters_t    plpModeParameters;
   EI_Percent_t              chanceCapTestFailure;
   EI_Percent_t              chancePlpProcessFailure;
   EI_EraseChances_t         eraseChances;
   uint8_t                   eiEnConfigFlowID[ (10) ];
   uint8_t                   rfuBuffer[226-  (10) ];
}   EI_ConfigArraysExtenstion_t;


typedef struct EI_SingleInjTableEntry_s
{
   uint64_t                  addr;
   uint8_t                   addrType;
   uint8_t                   nsId;
   uint8_t                   opToInject;
   uint8_t                   isValid;
   uint8_t                   nthOpCounter;
   uint8_t                   rfu[3];

   EI_SingleConfigParams_t   injParams;
}   EI_SingleInjTableEntry_t;


typedef struct EI_MetaDieDecommissionTable_s
{
   uint32_t                   currentTableSize;
   uint16_t                   metaBlockTable[ (( (466+1) ) + ( (4) )) ];
}   EI_MetaDieDecommissionTable_t;

typedef struct EI_revive_s
{
   EI_MetaDieDecommissionTable_t  metaDieDecommissionTable[ ( (8)  * ( 4 )  / (2) ) ];

}   EI_Revive_t;







typedef struct EI_Config_s
{

   uint32_t                      canaryValStart;
   uint32_t                      version;
   uint8_t                       rfu0 [8];


   EI_GeneralConfig_t            generalConfig;


   EI_RestrictionsConfig_t       restrictions;
   EI_AllOpsFailureChances_t     allOpsChance;
   EI_ChancesTable_t             chances;
   EI_OpTableEntry_t             operations[ (40) ];


   EI_SingleInjTableEntry_t      singleInjections[ (6) ];


   EI_BurstModeParameters_t      burstMode;
   EI_ConfigArraysExtenstion_t   configArraysExtenstion;




   uint8_t                       rfu1[3];
   uint8_t                       isConfigValid;
   uint32_t                      canaryValEnd;
}   EI_Config_t;




typedef enum
{
   EI_DEFAULT_FLOW_COMPATEBILITY = 0,
   EI_RMW_START_HANDLE,


   EI_FLOW_LAST =  8  *  (10)

} EI_Config_flowId_e;

uint8_t EI_IS_FLOW_CONFIG(EI_Config_t* config);
uint8_t EI_IS_FLOW_ACTIVE();

#line 872 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"
void     EI_ConfFixBackwardCompatibility(EI_Config_t* config);
Status_t EI_ConfigInputValidation(const EI_Config_t *config);
void     EI_ValidateConfigStructureOffsets(void);
BOOL32   EI_Config_IsReadfailurePerFmuMapConfigure(const uint8_t* pFReadFailurePerFmuMap);

Status_t EI_GetOpSpecRestrictions(const uint32_t opId, BOOL32 *slcOnly, BOOL32 *readOnly, BOOL32 *progOnly, BOOL32 *openZoneOnly);

#line 881 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_config.h"
void EI_ConfDisableP2PPatternInjections(EI_Config_t* pRawConf);

#line 36 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter_ftl.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"

#line 350 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"
 extern BOOL32 Was_BackendWarningOnce_called;

#line 362 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"
typedef struct TAG_S_FM_STATISTICS_ENTRY
{
   unsigned int count;
   unsigned int breakOn;
}S_FM_STATISTICS_ENTRY;

typedef struct TAG_S_FM_STATISTICS_ENTRY_64Bit
{
   unsigned long long int count;
   unsigned long long int breakOn;
}S_FM_STATISTICS_ENTRY_64bit;

typedef struct TAG_S_FM_STATISTICS
{

   S_FM_STATISTICS_ENTRY writeLog;
   S_FM_STATISTICS_ENTRY fml;
   S_FM_STATISTICS_ENTRY hostWrite;
   S_FM_STATISTICS_ENTRY hostRead;
   S_FM_STATISTICS_ENTRY hostDealloc;
   S_FM_STATISTICS_ENTRY fmQDispatch;
   S_FM_STATISTICS_ENTRY powerCycle;
   S_FM_STATISTICS_ENTRY powerCycleNormal;
   S_FM_STATISTICS_ENTRY powerCycleUGSD;
   S_FM_STATISTICS_ENTRY backOps;
   S_FM_STATISTICS_ENTRY lowResources;
   S_FM_STATISTICS_ENTRY mailboxHandler;


   S_FM_STATISTICS_ENTRY slcRlc;
   S_FM_STATISTICS_ENTRY mlcRlc;
   S_FM_STATISTICS_ENTRY IRLCStartCnt;
   S_FM_STATISTICS_ENTRY IRLCInterruptCnt;
   S_FM_STATISTICS_ENTRY IRLCCompleteCnt;
   S_FM_STATISTICS_ENTRY rlcEmergencyCnt;
   S_FM_STATISTICS_ENTRY staticMlcRlc;
   S_FM_STATISTICS_ENTRY staticSlcRlc;
   S_FM_STATISTICS_ENTRY staticRlcForced[2];
   S_FM_STATISTICS_ENTRY rsRlc;
   S_FM_STATISTICS_ENTRY blindRlc;
   S_FM_STATISTICS_ENTRY FnvmRlc;
   S_FM_STATISTICS_ENTRY FnvmRlcMlcBlks;
   S_FM_STATISTICS_ENTRY FnvmRlcSlcBlks;
   S_FM_STATISTICS_ENTRY rjbRlc;
   S_FM_STATISTICS_ENTRY rlcSourceBlksReleased;
   S_FM_STATISTICS_ENTRY rlcInvalidBlksReleased;
   S_FM_STATISTICS_ENTRY AutoFreeMlcBlksDuringRlc;
   S_FM_STATISTICS_ENTRY AutoFreeMlcBlks;
   S_FM_STATISTICS_ENTRY AutoFreeSlcBlks;
   S_FM_STATISTICS_ENTRY rlcFlashTranslates;
   S_FM_STATISTICS_ENTRY slcMinBlockPec;
   S_FM_STATISTICS_ENTRY slcMaxBlockPec;
   S_FM_STATISTICS_ENTRY mlcMinBlockPec;
   S_FM_STATISTICS_ENTRY mlcMaxBlockPec;
   S_FM_STATISTICS_ENTRY rlcScanfwdCnt[2];
   S_FM_STATISTICS_ENTRY rlcSrcNormalCnt[2];
   S_FM_STATISTICS_ENTRY rlcSrcResumeCnt[2];
   S_FM_STATISTICS_ENTRY rlcScanfwdSkippedCnt[2];


   S_FM_STATISTICS_ENTRY mrmWaExceptions;
   S_FM_STATISTICS_ENTRY mrmEaExceptions;


   S_FM_STATISTICS_ENTRY mtmStaticForceCount;
   S_FM_STATISTICS_ENTRY mtmStaticBamReads;


   S_FM_STATISTICS_ENTRY xormNopSwapReqs;
   S_FM_STATISTICS_ENTRY xormSwapReqs;
   S_FM_STATISTICS_ENTRY xormSwapQueuedReqs;
   S_FM_STATISTICS_ENTRY xormSwapDroppedReqs;
   S_FM_STATISTICS_ENTRY xormRSQReqs;
   S_FM_STATISTICS_ENTRY xormBRLCInitiated;
   S_FM_STATISTICS_ENTRY xormLoadFailures;
   S_FM_STATISTICS_ENTRY xormCompactionsRequested;
   S_FM_STATISTICS_ENTRY xormNonemptyCompactionsRequested;


   S_FM_STATISTICS_ENTRY controlWritesCnt;
   S_FM_STATISTICS_ENTRY controlWritesLogCnt;
   S_FM_STATISTICS_ENTRY controlReadCnt;
   S_FM_STATISTICS_ENTRY controlSyncCnt;
   S_FM_STATISTICS_ENTRY PsrHostWriteCnt;
   S_FM_STATISTICS_ENTRY blockEraseCnt;
   S_FM_STATISTICS_ENTRY consolidationCnt;
   S_FM_STATISTICS_ENTRY consolidationSyncVCCnt[3];
   S_FM_STATISTICS_ENTRY rlaReadCnt;
   S_FM_STATISTICS_ENTRY bmlJBAllocSLC;
   S_FM_STATISTICS_ENTRY bmlJBAllocMLC;
   S_FM_STATISTICS_ENTRY fmuWrittenPerBlockType[10];
   S_FM_STATISTICS_ENTRY PsrHostReadFmus;
   S_FM_STATISTICS_ENTRY satTranslateByCUQ;
   S_FM_STATISTICS_ENTRY satTranslateByCAT;
   S_FM_STATISTICS_ENTRY satTranslateByULYR;
   S_FM_STATISTICS_ENTRY satTranslateByTempCAT;
   S_FM_STATISTICS_ENTRY satTranslateByTempCATAvoidMerge;
   S_FM_STATISTICS_ENTRY satTranslateByErasedBM;
   S_FM_STATISTICS_ENTRY satTranslateByErasedPart;
   S_FM_STATISTICS_ENTRY satTranslateByTempHMB;
   S_FM_STATISTICS_ENTRY catHMBWriteByDMA;
   S_FM_STATISTICS_ENTRY catHMBReadFromBufferCL;
   S_FM_STATISTICS_ENTRY catHMBReadByDMA;
   S_FM_STATISTICS_ENTRY catHMBCompletion;
   S_FM_STATISTICS_ENTRY catHMBSetConfig;
   S_FM_STATISTICS_ENTRY catHMBReadError;
   S_FM_STATISTICS_ENTRY catHMBWriteError;
   S_FM_STATISTICS_ENTRY catHMBRandomEviction;
   S_FM_STATISTICS_ENTRY catHMBPromoteFromHMB;
   S_FM_STATISTICS_ENTRY catHMBPromotionError;
   S_FM_STATISTICS_ENTRY catHMBPromotionSkipMerge;

   S_FM_STATISTICS_ENTRY xorHMBWriteToHMB;
   S_FM_STATISTICS_ENTRY xorHMBReadFromHMB;
   S_FM_STATISTICS_ENTRY xorHMBSetConfig;
   S_FM_STATISTICS_ENTRY xorHMBReadError;
   S_FM_STATISTICS_ENTRY xorHMBWriteError;
   S_FM_STATISTICS_ENTRY xorHMBCompletion;

   S_FM_STATISTICS_ENTRY satCUQEnterLRM;
   S_FM_STATISTICS_ENTRY satCUQExitLRM;
   S_FM_STATISTICS_ENTRY satCUQUpdateCnt;

   S_FM_STATISTICS_ENTRY mntUgsd;
   S_FM_STATISTICS_ENTRY_64bit sectorsWritten;


   S_FM_STATISTICS_ENTRY hpmGetPrediction;
   S_FM_STATISTICS_ENTRY hpmEnterBmgHpmProfile;
   S_FM_STATISTICS_ENTRY hpmOverlapHit;
   S_FM_STATISTICS_ENTRY hpmTriggerPrm;
   S_FM_STATISTICS_ENTRY hpmTriggerEvictStream;


   S_FM_STATISTICS_ENTRY lrmRestrictions[10];
   S_FM_STATISTICS_ENTRY lrmRlcReadQueue;


   S_FM_STATISTICS_ENTRY eiTotalReads;
   S_FM_STATISTICS_ENTRY eiTotalProgs;
   S_FM_STATISTICS_ENTRY eiTotalErases;
   S_FM_STATISTICS_ENTRY eiTotalXORs;
   S_FM_STATISTICS_ENTRY eiLogReads;
   S_FM_STATISTICS_ENTRY eiLogProgs;
   S_FM_STATISTICS_ENTRY eiMtmReads;
   S_FM_STATISTICS_ENTRY eiMtmProgs;
   S_FM_STATISTICS_ENTRY eiXorProgs;
   S_FM_STATISTICS_ENTRY eiRlcMtmProgs;
   S_FM_STATISTICS_ENTRY eiRlcXorProgs;
   S_FM_STATISTICS_ENTRY eiBrlcXorProgs;
   S_FM_STATISTICS_ENTRY eiBrlcHostProgs;
   S_FM_STATISTICS_ENTRY eiHostlessReads;
   S_FM_STATISTICS_ENTRY eiParityProgs;


   S_FM_STATISTICS_ENTRY waCounter;
   S_FM_STATISTICS_ENTRY waOpbId[9 ];
   S_FM_STATISTICS_ENTRY ugsdOpbId_notWa[9 ];
   S_FM_STATISTICS_ENTRY logWaByReason[20];
   S_FM_STATISTICS_ENTRY WAParityCounter;
   S_FM_STATISTICS_ENTRY mntUgsdBegin;
   S_FM_STATISTICS_ENTRY mntUgsdB2Bbrlc;


   S_FM_STATISTICS_ENTRY bloomFilterHit;
   S_FM_STATISTICS_ENTRY bloomFilterMiss;
   S_FM_STATISTICS_ENTRY bloomFilterforceScan;
   S_FM_STATISTICS_ENTRY satTranslateByULYRNotFound;

#line 536 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"
   S_FM_STATISTICS_ENTRY flush_NV_numGetNumBlocksLeftInPtnCalls[2 ];
   S_FM_STATISTICS_ENTRY flush_NV_numGetNumBlocksLeftInPtnIters[2 ];


   S_FM_STATISTICS_ENTRY BMG_SwitchProfileRequest;
   S_FM_STATISTICS_ENTRY BMG_SwitchProfileFinished;


   S_FM_STATISTICS_ENTRY rrSlcEnduranceReason;


   S_FM_STATISTICS_ENTRY hybridSlcAllowed;
   S_FM_STATISTICS_ENTRY bmlJBAllocHybrid;
   S_FM_STATISTICS_ENTRY hybridAllocPause;
   S_FM_STATISTICS_ENTRY hybridAllocResume;
   S_FM_STATISTICS_ENTRY hybridAllocDisabled;
   S_FM_STATISTICS_ENTRY hybridAllocEnabled;


   S_FM_STATISTICS_ENTRY rcHitCount;
   S_FM_STATISTICS_ENTRY rcMissCount;
   S_FM_STATISTICS_ENTRY rcDeactivate;

   S_FM_STATISTICS_ENTRY readHandlerLoopSize[8];
   S_FM_STATISTICS_ENTRY fastReadHandlerLoopSize[2][8];
   S_FM_STATISTICS_ENTRY HRF_requeueMessage;
   S_FM_STATISTICS_ENTRY HRF_sendPsRequestPerPsQueue[2][2];
   S_FM_STATISTICS_ENTRY enterPsQueueLRM;
   S_FM_STATISTICS_ENTRY exitPsQueueLRM;
   S_FM_STATISTICS_ENTRY HRF_translationFromHmb[2];
   S_FM_STATISTICS_ENTRY HRF_mp0HandleRequeue;
   S_FM_STATISTICS_ENTRY HRF_mp1pause;
   S_FM_STATISTICS_ENTRY HRF_mp1resume;

   S_FM_STATISTICS_ENTRY HWDwriteDccmPeekAhead[3];
   S_FM_STATISTICS_ENTRY catHMBWriteToBufferCL;


}  S_FM_STATISTICS;


typedef uint8_t* puint8_t;
typedef uint32_t* puint32_t;




extern S_FM_STATISTICS G_fm;
extern unsigned long int G_logLastCsReason;

#line 595 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"
typedef struct TAG_S_U64
{

   unsigned int lowBits;


   unsigned int highBits;

}S_U64, *S_U64_PTR;

#line 25 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter_ftl.h"

#line 21 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"

#line 79 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
typedef enum
{



   WP_FIRST_MOUNT_START=1,
   WP_FIRST_MOUNT_END,

   WP_MNT_STATE_START,
   WP_MNT_STATE_HANDLE_LOG,
   WP_MNT_STATE_READONLY,
   WP_MNT_STATE_NOTIFY_PS,
   WP_MNT_STATE_MOUNT_BML,
   WP_MNT_STATE_SEND_DEVICE_HEALTH,
   WP_MNT_STATE_CHECK_GSD_FLAG,
   WP_MNT_STATE_GSD_MOUNT_OBM,
   WP_MNT_STATE_GSD_MOUNT_MTM,
   WP_MNT_STATE_GSD_MOUNT_SAT,
   WP_MNT_STATE_GSD_MOUNT_MVP,
   WP_MNT_STATE_GSD_MOUNT_RSQ,
   WP_MNT_STATE_GSD_MOUNT_RS,
   WP_MNT_STATE_DR_CHECK_REQ,
   WP_MNT_STATE_ENABLE_READ,
   WP_MNT_STATE_OPBS_REBUILD_XOR_PAR,
   WP_MNT_STATE_OPBS_BRLC,
   WP_MNT_STATE_MOUNT_HWD,
   WP_MNT_STATE_CONTROL_SYNC,
   WP_MNT_STATE_UGSD_BML_RECOVERY,
   WP_MNT_STATE_UGSD_OBM_RECOVERY,
   WP_MNT_STATE_UGSD_EXTRACT_METADATA,
   WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD,
   WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP,
   WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY,
   WP_MNT_STATE_UGSD_MOUNT_MVP,
   WP_MNT_STATE_UGSD_MOUNT_RSQ,
   WP_MNT_STATE_UGSD_MOUNT_RS,
   WP_MNT_STATE_MOUNT_COMPLETE,
   WP_MNT_HANDLE_DRD_RESPONSE,
   WP_MNT_HANDLE_FLGP_RESPONSE,
   WP_MNT_HANDLE_DRD_REQUEST,
   WP_MNT_STATE_GSD_MOUNT_FNVM,
   WP_MNT_STATE_MOUNT_XORM,
   WP_MNT_STATE_MOUNT_RLC,
   WP_MNT_HBSF_HOST_RECOVERY,
   WP_MNT_HBSF_HOST_RECOVERY_DONE,
   WP_MNT_PERFORM_BRLC,
   WP_MNT_ALIGN_HOST_BLOCKS_FER,
   WP_MNT_STATE_MOUNT_SMART,
   WP_MNT_HANDLE_FLGP_RESP_WA_LGW,
   WP_MNT_HANDLE_FLGP_RESP_WA_FER,
   WP_MNT_HANDLE_FLGP_RESP_WA_DIFF,
   WP_MNT_UGSD_HAS_WA,
   WP_MNT_HANDLE_FLGP_RESP_END,
   WP_MNT_COMBINE_FLGP_RES,
   WP_MNT_ALGN_FLGP_LGW_TO_LOG,
   WP_MNT_DALOC_SENT_RD,
   WP_MNT_DALOC_READ_DONE,
   WP_MNT_UGSD_HOST_RD_RES,
   WP_MNT_HOST_RECOVERY_FLAGS,
   WA_MNT_UGSD_MARK_4_LATER,
   WP_MNT_MOUNT_START,
   WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE,
   WP_MNT_SET_LAST_VALID_JBA,
   WP_MNT_CALCULATE_LGW_JBA,
   WP_MNT_EXTRACT_FFLBA,
   WP_MNT_INIT_HEADER_PTRS_LIST,
   WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK,
   WP_MNT_HOST_RECOVERY_READ_AFTER_LGW,
   WP_MNT_HOST_RECOVERY_READ_START,
   WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB,
   WP_MNT_HOST_RECOVERY_READ_STATUS,
   WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START,
   WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS,
   WP_MNT_HOST_RECOVERY_PROCESS_START,
   WP_MNT_UGSD_CHECK_CS_NEEDED,
   WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID,
   WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK,
   WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE,
   WP_MNT_HOST_RECOVERY_HANDLER_START,
   WP_MNT_HOST_RECOVERY_HANDLER_PROCESS,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS,
   WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2,
   WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED,
   WP_MNT_HOST_RECOVERY_HANDLE_DALOC,
   WP_MNT_HOST_RECOVERY_DALOC_CALLBACK,
   WP_MNT_HOST_RECOVERY_START,
   WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG,
   WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED,
   WP_MNT_VALIDATE_B2B_DATA,
   WP_MNT_INVALIDATE_LATE_B2B_DATA,
   WP_MNT_INVALIDATE_NOW_B2B_DATA,
   WP_MNT_DELAY_INVALIDATE_B2B_DATA,
   WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE,
   WP_MNT_USE_B2B_DATA,
   WP_MNT_STATE_MOUNT_SYNC_ALL_VC,
   WP_MNT_NAND_DEFECT,
   WP_MNT_MBM_META_DATA_READ_FROM_LIST,
   WP_MNT_MBM_META_DATA_READ_FROM_HEAP,
   WP_MNT_UGSD_PAGE0_READ_RESPONSE,
   WP_MNT_MBM_META_DATA_REC,
   WP_MNT_MBM_META_DATA_NO_NEW_REC,
   WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP,



   WP_HOST_WRITE_COMPLETE,
   WP_HOST_READ_COMPLETE,






   WP_SAT_START_CONSOLIDATION,
   WP_SAT_ENDED_CONSOLIDATION,
   WP_SAT_CONSOLIDATION_ADDING_MSET,
   WP_SAT_CONSOLIDATION_REUSING_MSET,
   WP_SAT_CONSOLIDATION_SENT_ALL_READS,
   WP_SAT_CONSOLIDATION_START_COPY_BACK,
   WP_CAT_ADDED_MSET,
   WP_CAT_REMOVED_MSET,
   WP_SAT_WRITE_ENTRY,
   WP_SAT_UPDATE_VC,
   WP_SAT_SEND_CONTROL_READ,
   WP_SAT_PARTIAL_RESET_COMPLETE,
   WP_SAT_CANCELED_CONSOLIDATION,
   WP_SAT_STARTED_DEALLOCATE,
   WP_SAT_UECC_ON_CONTROL_READ,
   WP_SAT_UNITTEST_CALLBACK,
   WP_CAT_SLOT_DETACHED,
   WP_CAT_SLOT_ATTACHED,
   WP_SATRRACKING_JB_ALLOC,
   WP_SAT_TRANSLATE_AFTER_CALLBACK,
   WP_DST_VC_CHECK_FINISHED,
   WP_SAT_CONSOLIDATION_BEFORE_ACQUIRE_LOCK,
   WP_SAT_CONSOLIDATION_SYNC_LOCK_NOT_ACQUIRED,
   WP_SAT_CONSOLIDATION_COUNT_PENDING_FINISHED,
   WP_SAT_PREPARE_TRANSLATION_TEMPCAT,
   WP_SAT_PREPARE_CONSOLIDATION_AFTER_MSETS_CHOSEN,
   WP_SAT_CONSOLIDATION_PREPARE_START,
   WP_SAT_CAT_SLOT_LOCKED_AND_NOT_VALID,
   WP_SAT_INTERNAL_DRAMLESS_MERGE_MSET_CALLBACK_FINISH,

   WP_CATHMB_DEMOTION_STARTED,
   WP_CATHMB_DEMOTION_COMPLETED,
   WP_CATHMB_DEMOTION_ABORTED,
   WP_CATHMB_DEMOTION_ERROR,
   WP_CATHMB_MSET_EVICTED,
   WP_CATHMB_MSET_INVALIDATE,
   WP_CATHMB_LOCK_SLOT,
   WP_CATHMB_UNLOCK_SLOT,
   WP_CATHMB_READ_SENT,
   WP_CATHMB_LOAD_BUFFER_CL,
   WP_CATHMB_READ_BUFFER_CL,
   WP_CATHMB_WRITE_BUFFER_CL,
   WP_CATHMB_SCHEDULE_DEMOTION,
   WP_CATHMB_PROMOTION_STARTED,
   WP_CATHMB_PROMOTION_ENDED,
   WP_CATHMB_HANDLE_COMPLETION,

   WP_SAT_BF_UPDATE,
   WP_ULAYER_TRANSLATE_NOT_FOUND,
   WP_ULAYER_TRANSLATE_BF_FOUND,
   WP_ULAYER_TRANSLATE_FOUND,

   WP_ZCAT_COMPRESS,
   WP_ZCAT_TRANSLATE,
   WP_ZCAT_ALLOC,
   WP_ZCAT_ABORT,
   WP_ZCAT_EVICT,

   WP_LOG_READ_LOG_COPIES,
   WP_LOG_DECIDE_ACTIVE_COPY,
   WP_LOG_READ_ACTIVE_LOG,
   WP_LOG_CONTROL_SYNC_REQUESTED,
   WP_LOG_CONTROL_SYNC_IN_PROCESS,
   WP_LOG_CHECK_FOR_UECC,
   WP_LOG_GO_BACK_ONE_COPY,
   WP_LOG_GO_BACK_ONE_ENTRY,
   WP_LOG_GO_BACK_ONE_BLOCK,
   WP_LOG_REPLACE_BLOCK,
   WP_LOG_ALLOC_NEW,
   WP_LOG_SUSPECT_WA_OR_RECOVERED,
   WP_LOG_MOUNT_COMPLETE,
   WP_LOG_WRITING_LOG_BLOCK,
   WP_LOG_JUMBO_BLOCK_WL,

   WP_BKOPS_STARTED,
   WP_BKOPS_COMPLETED,
   WP_BKOPS_HANDLER_PROCESS_SAT,
   WP_BKOPS_HANDLER_SAT_BF,
   WP_BKOPS_LOAD_MSET_HANDLER_BF_RECONSTRUCT,
   WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS,
   WP_BKOPS_RELOCATION_COMPLETE,
   WP_BKOPS_SAT_HANDLER_END,
   WP_BKOPS_LOAD_MSETS_HANDLER_START,
   WP_BKOPS_LOAD_MSETS_HANDLER_END,
   WP_BKOPS_RS_HANDLER_START,
   WP_BKOPS_RS_HANDLER_END,
   WP_BKOPS_MTM_HANDLER_START,
   WP_BKOPS_MTM_HANDLER_END,
   WP_BKOPS_MAIN_LOOP_HANDLER_START,
   WP_BKOPS_MAIN_LOOP_HANDLER_END,
   WP_BKOPS_RELOCATION_HANDLER_START,
   WP_BKOPS_RELOCATION_HANDLER_END,

   WP_MTM_WINFW_TEST,
   WP_MTM_ALLOCATE_BLOCK,
   WP_MTM_CLOSE_BLOCK,
   WP_MTM_RELEASE_BLOCK,
   WP_MTM_STARTED_GC,
   WP_MTM_GC_COMPLETE,
   WP_MTM_WRITE_PART,
   WP_MTM_VC_UPDATE,
   WP_MTM_CHECK_BLOCK_STUCK_START,
   WP_MTM_CHECK_BLOCK_STUCK_FINISH,
   WP_MTM_PROCESS_GC,
   WP_FTL_MTM_JB_VBA,
   WP_TEST_TIMEOUT_REACHED,

WP_PSR_SET_OPEN_BLOCK,
WP_PSR_RD_RMW_VBA,
WP_PSR_ERASE_META_BLOCK,
WP_PSR_FLASHFILL_META_BLOCK,


WP_MTM_SEND_REQ_WRITE,
WP_MTM_WRITE_DONE,
WP_MTM_START_RELOCATION,
WP_MTM_IN_CRITICAL_STATE,

WP_MVP_FREE_CYCLE,
WP_MVP_START_RELOCATION,
WP_MVP_PARTITION_FREE_SPACE,
WP_MVP_INIT,
WP_MVP_RELOCATION_COMPLETE,
WP_MVP_CALC_FREE_SPACE,
WP_MVP_SWAP_START,
WP_MVP_CAL_SCALE_QUOTA,
WP_MVP_EMERGENCY_GC,
WP_MVP_EMERGENCY_GC2,
WP_MVP_SBR_RLC_START,
WP_MVP_WAITING_BMG,
WP_MVP_SET_QUOTA_IRLC,
WP_MVP_HOST_QUOTA_CONSUME,
WP_MVP_HOST_QUOTA_CONSUME_I,
WP_MVP_GC_QUOTA_CONSUME1,
WP_MVP_GC_QUOTA_CONSUME2,
WP_MVP_GC_QUOTA_CONSUME_I,
WP_MVP_NEED_STOP_RLC_1,
WP_MVP_NEED_STOP_RLC_2,
WP_MVP_STOP_DONE_RLC,
WP_MVP_IRLC_TRIGGER,
WP_MVP_IRLC_SWITCH,
WP_MVP_IRLC_TERMINATE,


WP_FML_LOW_RESOURCES_START,
WP_FML_LOW_RESOURCES_END,
WP_FML_PS_Q_LOW_RESOURCE_START,
WP_FML_PS_Q_LOW_RESOURCE_END,
WP_FMG_CHECK_UA_T4_MINIMUM,


WP_FTL_BML_JUMBOBLOCK_ALLOCATED,
WP_FTL_MBM_METABLOCK_RELEASED,
WP_FTL_MBM_METABLOCK_REVIVE,
WP_FTL_MBM_CS_DONE_LIST_NOT_FULL,
WP_FTL_MBM_METABLOCK_ERASED,
WP_FTL_MBM_METABLOCK_FLASH_FILLED,
WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY,
WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML,
WP_FTL_MBM_MAX_PEC_ERROR_LOG_REPORT,
WP_FTL_MBM_INC_ENTRY_PEC,
WP_FTL_MBM_REFILL_RESERVED,


D_MODEL_FTL_HWD_ROUTING_RULES,
D_MODEL_FTL_HWD_TLCBUFED_BKOPS,
D_MODEL_FTL_RR_ENDURANCE_BALANCING,
D_MODEL_FTL_HWD_PADDING,
D_MODEL_FTL_HWD_START_WRITE,
D_MODEL_FTL_HWD_RMW,
D_MODEL_FTL_HWD_RMW_DONE,
D_MODEL_FTL_HWD_FUA,
D_MODEL_FTL_HWD_FUA_DONE,
D_MODEL_FTL_HWD_STREAM_STATUS,
WP_FTL_HWD_WRITE_JB_VBA,
WP_FTL_HWD_WRITE_PARITY_BIT,


D_MODEL_FTL_HRF_STREAM_STATUS,
WP_FTL_HRF_UECC_HANDLING,
WP_FTL_MP1_ENABLE,
WP_FTL_MP1_DISABLE,


WP_FTL_RC_FFLBA,
WP_FTL_RC_HIT,
WP_FTL_RC_MISS,
WP_FTL_RC_DEACTIVATE,


WP_FTL_OVP_START_SYNC,
WP_FTL_OVP_OREAD_FULL_START,
WP_FTL_OVP_PROCESS_ENTRY,
WP_FTL_OVP_FEADMIN_PROCESS_ENTRY,
WP_FTL_OVP_FEADMIN_BLOCKED,
WP_FTL_OVP_FEADMIN_CALLBACK,
WP_FTL_OVP_START_STREAM_WRITE_SYNC,
WP_FTL_OVP_STREAM_EMPTY,
WP_FTL_OVP_START_STREAM_RMW_SYNC,
WP_FTL_OVP_START_STREAM_TLC_SYNC,
WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST,


WP_FTL_RLC_RLC_START,
WP_FTL_RLC_SCAN_FWD,
WP_FTL_RLC_SOURCE_BLOCK_SELECTED,
WP_FTL_RLC_SOURCE_BLOCK_RESELECTED,
WP_FTL_RLC_SOURCE_BLOCK_RELEASED,
WP_FTL_RLC_TARGET_BLOCK_SELECTED,
WP_FTL_RLC_BLOCK_RELEASED,
WP_FTL_RLC_COPY_FMUS,
WP_FTL_RLC_FLASH_TRANSLATE,
WP_FTL_RLC_TARGET_BLOCK_FULL,
WP_FTL_RLC_AUTO_FREE_JB_RELEASED,
WP_FTL_RLC_START_FNVM,
WP_FTL_RLC_END_FNVM,
WP_FTL_RLC_CYCLE_TERMINATE,
WP_FTL_RLC_RLC_COMPLETE,
WP_FTL_RLC_READ_LRM_ENTER,
WP_FTL_RLC_READ_LRM_EXIT,
WP_FTL_RLC_JB_REL_LRM_ENTER,
WP_FTL_RLC_JB_REL_LRM_EXIT,
WP_FTL_RLC_WRITE_JB_VBA,

WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK,
WP_FTL_RLC_RESUME_USE_SAVED_INFO,
WP_FTL_RLC_RESUME_CLEAR_INFO,
WP_FTL_RLC_RESUME_CHANGE_JB,
WP_FTL_RLC_RESUME_SAVE_CS,


WP_FTL_RLC_START_BRLC,
WP_FTL_RLC_ALLOC_BRLC_BLOCK,
WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE,
WP_FTL_RLC_END_BRLC,
WP_FTL_RLC_SCAN_COMPLETE,


WP_FTL_OBM_JUMBO_BLOCK_ALLOC,
WP_FTL_OBM_JUMBO_BLOCK_FMU_INC,
WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED,
WP_FTL_OBM_JUMBO_BLOCK_CLOSED,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL,
WP_FTL_OBM_JUMBO_BLOCK_WL,
WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD,
WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD,
WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK,
WP_FTL_OBM_JUMBO_BLOCK_REUSE,
WP_FTL_OBM_ALLOC_BLOCK,
WP_FTL_OBM_ALLOC_BLOCK_FINISHED,


   WP_FTL_RLA_REGISTER_OVERLAP,

   WP_FTL_RLA_INIT,
   WP_FTL_RLA_ABORT_ALL,
   WP_FTL_RLA_READ_RACE,

   WP_FTL_RLA_RELEASE_STREAM,
   WP_FTL_RLA_TRANSLATION_FAILURE,


   WP_FTL_RLA_COMPLEMENTARY_READ,


   WP_FTL_RLA_CHECK_AND_READ_ALL,

   WP_FTL_RLA_READ_OVERLAP_FROM_FE,

   WP_FTL_RLA_READ_AHEAD_EVENT,
   WP_FTL_RLA_TRANSLATE_TRAP,
   WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED,
   WP_FTL_RLA_BUFF_IN_PS_NOT_FREED,
   WP_FTL_RLA_ASYNC_TRANSFER_DONE,
   WP_FTL_RLA_ALLOCATE_STREAM,
   WP_FTL_RLA_ALLOCATE_BUFFERS,
   WP_FTL_RLA_SEND_HIM_RESPONSE,
   WP_FTL_RLA_RESTART,
   WP_FTL_RLA_BL_ALLOC_SUCCESS,
   WP_FTL_RLA_BL_START_INT,
   WP_FTL_RLA_CALC_GBI_WINDOW,
   WP_FTL_RLA_MPD_START_RLA,
   WP_FTL_RLA_MPD_STOP_RLA,
   WP_FTL_RLA_READ_ERROR_HANDLING,
   WP_FTL_RLA_ENQUEUE_HOST_CMD,
   WP_FTL_PRM_COMPLEMENTARY_READ,
   WP_FTL_PRM_STREAM_LRU_UPDATE,
   WP_FTL_PRM_SSE_ADD,
   WP_FTL_PRM_SSE_REMOVE,
   WP_FTL_PRM_SSE_REMOVE_ALL,
   WP_FTL_PRM_READ_FROM_PRM_BUFFER,
   WP_FTL_PRM_READ_SEND_TO_PS,


   WP_FTL_HPM_PREDICT_READ_AHEAD,
   WP_FTL_HPM_DETECT_OVERLAP_WITH_HPM_PREDICTION,


   WP_FTL_HPM_HASH_UPDATE,
   WP_FTL_HPM_PREDICTION,


   WP_FTL_QS_ABORT_WRITE,


   WP_FTL_DALOC_PROCESS_ENTRY,


   WP_FTL_DHM_SEND_MAX_PEC_TO_PS,


   WP_FTL_FNVM_HOST_CMD_PARAM,
   WP_FTL_FNVM_UGSD_RECOVERY_PARAM,
   WP_FNVM_WINFW_TEST,


   WP_FTL_XOR_BARRIER_DONE,
   WP_FTL_XOR_STORE_PARITY_REQ,
   WP_FTL_XOR_LOAD_PARITY_REQ,
   WP_FTL_XOR_REBUILD_PARITY_REQ,
   WP_FTL_XOR_REBUILD_PARITY_COMPLETE,
   WP_FTL_XOR_COMPACTION_START,
   WP_FTL_XOR_COMPACTION_JWL0_WRITE,
   WP_FTL_XOR_COMPACTION_END,
   WP_FTL_XOR_JB_VBA,
   WP_FTL_XOR_PARITY_LOC,
   WP_FTL_XOR_STORE_HMB_RESULT,
   WP_FTL_XOR_LOAD_HMB_RESULT,
   WP_FTL_XOR_ZONE_END_REQ,
   WP_FTL_XORM_STATE_CHANGE,
   WP_FTL_XOR_COMPACTION_NOT_NEEDED,
   WP_FTL_XOR_COMPACTION_FINISHED,
   WP_FTL_XORMDR_STATE_CHANGE,
   WP_FTL_XOR_XBID_SWITCH_MODE,
   WP_FTL_XOR_SWAP_ONLY_MODE,


   WP_FTL_READONLY_TRIGGER,
   WP_FTL_READONLY_HANDLER_START,
   WP_FTL_READONLY_HANDLER_COMPLETED,


   WP_FTL_RS_SEND_ACTIVE_RS_REQ,
   WP_FTL_RS_SET_NEW_SCANNED_BLOCK,
   WP_FTL_RS_SCAN_NEXT_JWL,
   WP_FTL_RS_FINISHED_ENTIRE_SCAN,
   WP_FTL_RS_SCAN_TOO_LONG,
   WP_FTL_RS_PROCESS_SCAN,
   WP_FTL_RS_MODE_SET,
   WP_FTL_RS_ENABLE_FG_SCAN,
   WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE,
   WP_FTL_RS_READONLY_DISABLE_RS,



   WP_FTL_RSQ_NEW_RLC_REQ,
   WP_FTL_RSQ_RLC_REQ_REMOVED,
   WP_FTL_RSQ_LRM,
   WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS,


   WP_FTL_SHD_START_SHUTDOWN,
   WP_FTL_SHD_STATE_SHD_COMPLETE,
   WP_FTL_SHD_COUNT_INC,


   WP_FTL_PWS_STATE_EXIT_COMPLETE,
   WP_FTL_PWS_DPS3_NOT_SUPPORTED,


   WP_FTL_BMG_PROFILE_SWITCH_REQ,
   WP_FTL_BMG_PROFILE_SWITCH_DISCARD_REQ,
   WP_FTL_BMG_PROFILE_SWITCH_START_PROCESS,
   WP_FTL_BMG_STARTED_SWITCH_REQ,
   WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE,
   WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE_CB_CHECK,


   WP_FTL_BMG_PUSH_PENDING_REQ,
   WP_FTL_BMG_POP_PENDING_REQ,
   WP_FTL_BMG_COPY_ZCAT,


   WP_FTL_PEM_PRE_ERASE_START,
   WP_FTL_PEM_PRE_ERASE_BLOCK,
   WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK,
   WP_FTL_PEM_RETARGET_ERASE,
   WP_FTL_FBM_PRE_ERASE_MB,


   WP_FTL_STATS,


   WP_FTL_HSLC_PAUSE,
   WP_FTL_HSLC_RESUME,
   WP_FTL_HSLC_DISABLE,
   WP_FTL_HSLC_ENABLE,
   WP_FTL_HSLC_ALLOWED_WHEN_HOST_MORE_TBW,
   WP_FTL_HSLC_ENABLE_BY_HOST,




   WP_FE_COMPARE_START,
   WP_FE_COMPARE_END,

   WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED,
   WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED,
   WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH,

   WP_FE_PMM_RESET,
   WP_FE_PMM_TO_OP,
   WP_FE_PMM_NOIO_TIMEOUT,
   WP_FE_PMM_IO_DOORBELL,
   WP_FE_PMM_ADMIN_DOORBELL,
   WP_FE_PMM_STAGING_LPS,
   WP_FE_PMM_SEND_MSG_TO_INFRA,




   WP_PS_UT_FIRST_MOUNT_START,
   WP_PS_UT_ENTER_SLC_EWR,
   WP_PS_UT_EXIT_SLC_EWR,
   WP_PS_UT_ENTER_INFRA_SLC_EWR,
   WP_PS_UT_EXIT_INFRA_SLC_EWR,
   WP_PS_UT_ENTER_TLC_EWR,
   WP_PS_UT_EXIT_TLC_EWR,
   WP_PS_UT_ENTER_RESET,
   WP_PS_UT_EXIT_RESET,
   WP_PS_UT_ENTER_SLC_CACHED_EWR,
   WP_PS_UT_EXIT_SLC_CACHED_EWR,
   WP_PS_UT_ENTER_SWAP,


   WP_PS_HEALTH_UPDATE_PEC,


   WP_PS_CVD_MB_CLOSURE,
   WP_PS_CVD_BER_LATT,
   WP_PS_CVD_BER_DEF,
   WP_PS_CVD_BER_COMP,
   WP_PS_CVD_BER_OPT,
   WP_PS_CVD_BES5,
   WP_PS_CVD_BES7,
   WP_PS_CVD_MB_ASSIGN,
   WP_PS_CVD_ALLOCATE_NEW,
   WP_PS_CVD_MB_UNASSIGN,
   WP_PS_CVD_PTTU_START,
   WP_PS_CVD_PTTU_END,
   WP_PS_CVD_READ_PARAMS,
   WP_PS_BER_READ_PARAMS_WL0_COMP,
   WP_PS_CVD_READ_PARAMS_TABLES,
   WP_PS_CVD_READ_PARAM_TT,
   WP_PS_CVD_MB_RELEASE,
   WP_PS_CVD_MB_CACHE_RELEASE,
   WP_PS_CVD_CACHE_ENTRY_RELEASE,
   WP_PS_CVD_ADD_TO_CACHE,
   WP_PS_CVD_CACHE_ENTRY_HEAD,
   WP_PS_CVD_BER_SEND,
   WP_PS_CVD_BER_SEND_WITHOUT_THR,
   WP_PS_CVD_BES_SEND,
   WP_PS_CVD_BES_RES,
   WP_PS_CVD_BES_RLC,
   WP_PS_CVD_BER_OPT_RLC,
   WP_PS_CVD_TT_ALLOC,
   WP_PS_CVD_DEALLOCATE,
   WP_PS_CVD_TTU_START,
   WP_PS_CVD_TTU_BER_VER0,
   WP_PS_CVD_TTU_BES_START,
   WP_PS_CVD_TTU_BES5,
   WP_PS_CVD_TTU_BES7,
   WP_PS_CVD_TTU_BER_OPT,
   WP_PS_CVD_TTU_RLC_VERS,
   WP_PS_CVD_TTU_RLC_VER0,
   WP_PS_CVD_MB_TTU_UPDATED,
   WP_PS_CVD_XTEMP_ALL_LATT_INVALIDATION,
   WP_PS_CVD_TICK_CNT,
   WP_PS_CVD_COMPACTION_START,
   WP_PS_CVD_COMPACTION_TT1,
   WP_PS_CVD_COMPACTION_TT2,
   WP_PS_CVD_COMPACTION_END,
   WP_PS_CVD_DRD_BER,
   WP_PS_CVD_DRI,
   WP_PS_CVD_ADD_TASK,
   WP_PS_CVD_ACTIVATE_TASK,
   WP_PS_CVD_COMPLETE_TASK,
   WP_PS_CVD_BARRIER_STATE,
   WP_PS_CVD_INVALIDATE_LATT,
   WP_PS_CVD_MORPH_SECT_UPDATE,
   WP_PS_CVD_IS_HBER,
   WP_PS_CVD_SET_BKOPS,
   WP_PS_CVD_PERIODIC_EVENT_NOTIFY,
   WP_PS_CVD_TCO_CMD33,
   WP_PS_CVD_APPLY_WL_COMP,
   WP_PS_CVD_REH_BES_LA_CMD26,
   WP_PS_CVD_APPLY_WL_DECOMPENSATION,


   WP_PS_RFM_STATE_CHANGE,
   WP_PS_RFM_REFRESH_OP_DISPATCH,
   WP_PS_RFM_ISOLATE_OP_DISPATCH,
   WP_PS_RFM_REFRESH_OP_COMPLETE,
   WP_PS_RFM_ISOLATE_OP_COMPLETE,
   WP_PS_RFM_INIT_COMPLETE,
   WP_PS_RFM_REFRESH_TRIGGER,


   WP_PS_RS_RANDOM_SCAN_START,
   WP_PS_RS_RANDOM_SCAN_END,
   WP_PS_RS_ACTIVE_SCAN_START,
   WP_PS_RS_ACTIVE_SCAN_END,
   WP_PS_RS_HIGH_BER_EVENT,
   WP_PS_RS_BLOCK_SENT_TO_RLC,
   WP_PS_RS_ADD_BLOCK_TO_RSCQ,
   WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ,
   WP_PS_RS_PROCESS_BLOCK_FROM_REH,
   WP_PS_RS_READ_BER_REQUEST,
   WP_PS_RS_READ_BER_RESPONSE,
   WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID,
   WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST,
   WP_PS_RS_COUNTERS,
   WP_PS_RS_STORED_TO_LOG,
   WP_PS_RS_RESTORED,
   WP_PS_RS_BLOCK_ADD_RLC_HIST,


   WP_PS_REH_START,
   WP_PS_REH_REREAD_WITH_CF,
   WP_PS_REH_BES5,
   WP_PS_REH_BES7,
   WP_PS_REH_SB0,
   WP_PS_REH_SB1,
   WP_PS_REH_SB2,
   WP_PS_REH_SB2_DLA,
   WP_PS_REH_XOR_START,
   WP_PS_REH_XOR_PAUSE,
   WP_PS_REH_RESULT,
   WP_PS_REH_LDPC_ISR,
   WP_PS_REH_NO_FIRST_REREAD,
   WP_PS_REH_MARK_UECC,
   WP_PS_REH_INDICATE_HEADER_BIT_SET,
   WP_PS_REH_FMU_MARK_UECC,
   WP_PS_REH_NON_CACHE_MODE,
   WP_PS_REH_READ_FAIL_SHIFTS,
   WP_PS_REH_READ_RETRY_SHIFTS,
   WP_PS_REH_SBR_CMD_C2,
   WP_REH_CVD_DUMP_TRIGGER,
   WP_PS_REH_DMC_RES,
   WP_PS_REH_ECC_DUMP_TRIGGER,

   WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0,
   WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1,
   WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES,
   WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0,
   WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1,
   WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES,
   WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0,
   WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1,
   WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES,
   WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0,
   WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1,
   WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES,
   WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0,
   WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1,
   WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES,
   WP_PS_PF_16_UECC_COPY_READ,
   WP_PS_PF_17_XOR_FAIL_COPY_READ,
   WP_PS_PF_18_XOR_DONE_COPY_READ,
   WP_PS_PF_19_NESTED,
   WP_PS_PF_20_INDICATE_GBB_AND_RELINK,
   WP_PS_PF_23_CHECK_STATUS,
   WP_PS_PF_24_COPY_SOURCE_BLK_INFO,
   WP_PS_PF_25_COPY_DESTINATION_BLK_INFO,

   WP_PS_EF_01_START,
   WP_PS_EF_02_CHECK_STATUS,
   WP_PS_EF_03_SET_FAILED_PLANE,
   WP_PS_EF_04_RESET_DIE,
   WP_PS_EF_05_RELINK_BLOCK,
   WP_PS_EF_06_ERASE_BLOCK,
   WP_PS_EF_07_UPDATE_GBBT,
   WP_PS_EF_08_CLEANUP,
   WP_PS_EF_09_NESTED_ERASE,


   WP_PS_EPWR_BER_COMPLETE,
   WP_PS_EPWR_BES_COMPLETE,
   WP_PS_EPWR_RELOCATION,
   WP_PS_EPWR_RELINK_FAILURE,
   WP_PS_EPWR_ADD_TO_GBB_LIST,
   WP_PS_EPWR_FMU_TO_DO,
   WP_PS_EPWR_BER_REQ,


   WP_PS_DGM_ADDR_BEFORE_SUSPEND,
   WP_PS_DGM_SUSPEND_BY_PROG_OR_READ,
   WP_PS_DGM_ADDR_AFTER_SUSPEND,
   WP_PS_DGM_FAST_READ_DISABLE_ON_PEC,
   WP_PS_DGM_FAST_READ_DISABLE_ON_UECC,
   WP_PS_DGM_PHYSICAL_READ,
   WP_PS_DGM_FIRST_READ,
   WP_PS_DGM_READ,
   WP_PS_DGM_READ_SHIFT,
   WP_PS_DGM_ISOLATE_LATCH,
   WP_PS_DGM_FAST_READ_CMD,
   WP_PS_DGM_FTL_BWL_READ,
   WP_PS_DGM_INFRA_BWL_READ,
   WP_PS_DGM_BES,
   WP_PS_DGM_BES_CALC_NEW_SHIFT,
   WP_PS_DGM_BES_NEW_SHIFTS,
   WP_PS_DGM_CHANGE_C6_PREREAD,
   WP_PS_DGM_CHANGE_PREPROG,
   WP_PS_DGM_TLC_ERASE,
   WP_PS_DGM_AIPR_SET_FEATURE,
   WP_PS_DGM_BER_SHIFT,




   WP_PS_DGM_CACHE_READ,
   WP_PS_DGM_CACHE_READ_END,
   WP_PS_DGM_CACHE_WRITE,
   WP_PS_DGM_BES_TEST_READ_CMD,
   WP_PS_DGM_SUSPEND_ERASE,
   WP_PS_DGM_SUSPEND_ERASE_STATE,
   WP_PS_DGM_SUSPEND_ERASE_READ,
   WP_PS_DGM_READ_TRANSFER,
   WP_PS_DGM_READ_SENSE,

   WP_PS_VALIDATE_CMD_FF,
   WP_PS_VALIDATE_CMD_FB,


   WP_PS_FLGP_MARK_START,
   WP_PS_FLGP_FTL_MSG,
   WP_PS_FLGP_FOUND_NER,
   WP_PS_FLGP_FOUND_NP1,
   WP_PS_FLGP_FOUND_LMW,
   WP_PS_FLGP_FOUND_LGW,
   WP_PS_FLGP_FOUND_TER,
   WP_PS_FLGP_FOUND_FER,
   WP_PS_FLGP_NER_BINARY_DMC_RESULT,
   WP_PS_FLGP_LGW_BACKWARD_BER_RESULT,
   WP_PS_FLGP_TER_FORWARD_DMC_RESULT,
   WP_PS_FLGP_SEND_FTL_FINAL_RESULTS,
   WP_PS_FLGP_SEND_DMC_REQ,
   WP_PS_FLGP_SEND_BER_REQ,
   WP_PS_FLGP_SEND_DMC_REQ_FAIL,
   WP_PS_FLGP_SEND_BER_REQ_FAIL,
   WP_PS_FLGP_SLC_TLC_VBA,
   WP_PS_FLGP_TLC_SLC_VBA,
   WP_PS_FLGP_VBA_FIRST_FMU,
   WP_PS_FLGP_VBA_LAST_FMU,
   WP_PS_FLGP_MIDDLE_WL_VBA,
   WP_PS_FLGP_NEXT_WL_VBA,
   WP_PS_FLGP_PREV_WL_VBA,
   WP_PS_FLGP_NEXT_FMU_VBA,
   WP_PS_FLGP_PREV_FMU_VBA,
   WP_PS_FLGP_LGW_MB_RESULT,
   WP_PS_FLGP_LGW_PS_RESULT,
   WP_PS_FLGP_FER_MB_RESULT,
   WP_PS_FLGP_FER_PS_RESULT,
   WP_PS_FLGP_MORPHEUS_PARAM,
   WP_PS_FLGP_TED_ZONE_IDX,
   WP_PS_FLGP_EPWR_WL_FOUND,
   WP_PS_FLGP_NER_DMC_THRESHOLDS,
   WP_PS_FLGP_TER_DMC_THRESHOLDS,
   WP_PS_FLGP_LGW_BER_THRESHOLDS,
   WP_PS_FLGP_READ_BER_REQUEST,
   WP_PS_FLGP_READ_BER_RESPONSE,
   WP_PS_FLGP_READ_BER_DIE_RESULT,
   WP_PS_FLGP_BES5,
   WP_PS_FLGP_BES7,
   WP_PS_FLGP_MARK_END,


   WP_PS_OTG_SEED_SD,
   WP_PS_OTG_SEED_SR,
   WP_PS_OTG_SEED,
   WP_PS_OTG_SIPR_SENSE,
   WP_PS_OTG_SUBMIT,


   WP_PS_ADM_SET_OPEN_BLOCK,


   WP_PS_XOR_ZONE_END,
   WP_PS_XOR_WRITE_PAR_PAGES_DONE,
   WP_PS_XOR_STORE_PAR_REQ,
   WP_PS_XOR_LOAD_PAR_REQ,
   WP_PS_XOR_REBUILD_PAR_START,
   WP_PS_XOR_REBUILD_PAR_END,
   WP_PS_XOR_REBUILD_PAR_NEW_ZONE,
   WP_PS_XOR_RECOVERY_START,
   WP_PS_XOR_RECOVERY_END,
   WP_PS_XOR_ISSUE_CF,
   WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC,
   WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC,
   WP_PS_XOR_RECOVERY_WUC_DETECTED,
   WP_PS_XOR_RECOVERY_UNROLLING_VBA,
   WP_PS_XOR_WRITE_PAR_PAGES_START,
   WP_PS_XOR_SKIP_WRITE_PAR_PAGES,
   WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION,
   WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE,
   WP_PS_XOR_IS_XOR_SUPPORTED,


   WP_PS_THM_TEMP_TICK_REQ_RECEIVED,
   WP_PS_THM_TEMP_INT_REQS,
   WP_PS_THM_FAKE_INFRA_TEMP,
   WP_PS_THM_INFRA_MEASURED_TEMP,
   WP_PS_THM_DIAG_MEASURED_TEMP,
   WP_PS_THM_TEMP_REQ_START,
   WP_PS_THM_TEMP_REQ_COMPLETED,


   WP_PMM_ENTER_NONOP_POWER_STATE,
   WP_PMM_EXIT_NONOP_POWER_STATE,
   WP_PMM_POWER_OFF,


   WP_PS_UEBM_UECC_STRIKE,
   WP_PS_UEBM_RETIRE_BLK,
   WP_PS_UEBM_UECC_ADD_BLKFOUND,
   WP_PS_UEBM_UECC_ADD_FLIPFLOPSET,
   WP_PS_UEBM_UECC_ADD_NEWENTRY,
   WP_PS_UEBM_UECC_ADD_LISTFULL,
   WP_PS_UEBM_UECC_ADD_ERROR,
   WP_PS_UEBM_UECC_REMOVE_FOUNDBLK,
   WP_PS_UEBM_UECC_REMOVE_ERROR,
   WP_PS_UEBM_UECC_FLIPFLOP_RESET,
   WP_PS_UEBM_UECC_FLIPFLOP_ERROR,
   WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT,
   WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE,
   WP_PS_UEBM_UECC_FSWRITE_INPROGRESS,
   WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD,
   WP_PS_UEBM_UECC_FSWRITE_STARTED,
   WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL,
   WP_PS_UEBM_RETIRE_FOUND,
   WP_PS_UEBM_RETIRE_ERROR,
   WP_PS_UEBM_ERASEEH_FOUNDINLIST,
   WP_PS_UEBM_ERASEEH_THRESHOLDREACHED,
   WP_PS_UEBM_ERASEEH_REMOVEFROMLIST,
   WP_PS_UEBM_ERASEEH_ERROR,


   WP_PS_NPARAM_GET_PARAM_EH,
   WP_PS_NPARAM_HEALTH_MSG_ACCEPTED,
   WP_PS_NPARAM_INTERNAL_REQS,
   WP_PS_DGM_SET_PARAM,
   WP_PS_DGM_SET_FEATURE,
   WP_PS_OTG_SET_FEATURE,


   WP_PS_BBM_PH_BLOCK_RELINK,
   WP_PS_BBM_RELINK_DATA_UPDATED,
   WP_PS_BBM_RELINK_DATA_FLUSH_START,
   WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED,
   WP_PS_BBM_DECOMM_START,
   WP_PS_BBM_DECOMM_COMPLETED,
   WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED,
   WP_PS_BBM_TRANSLATE_RELINKED_BLK,
   WP_PS_BTGS_CRITERIA_1,
   WP_PS_BTGS_CRITERIA_2,
   WP_PS_BTGS_USERROM_READ_FAIL,
   WP_PS_BTGS_WL_STRING_UROM_LOOP,
   WP_PS_BTGS_DATA_DATABAR_MATCH,
   WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK,
   WP_PS_BBM_PROD_MBBT_BOOT_BLOCK,
   WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK,
   WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA,


   WP_PS_SE_START_GBB,
   WP_PS_SE_START_SPARE,
   WP_PS_SE_GET_FLASH_PARAM,
   WP_PS_SE_SET_FLASH_PARAM,
   WP_PS_SE_EXECUTE_SECURE_ERASE,
   WP_PS_SE_FINISHED_REQUEST,
   WP_PS_SE_RECEIVED_BARRIER,
   WP_PS_SE_USE_PREALLOCATED_REQUEST,
   WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS,


   WP_PS_MRPH_USERROM_READ_START,
   WP_PS_MRPH_WL_STRING_UROM_LOOP,
   WP_PS_MRPH_NPDP_USERROM_READ_FAIL,
   WP_PS_MRPH_USERROM_READ_FAIL,
   WP_PS_MRPH_USERROM_READ_END,
   WP_PS_MRPH_WL_STRING_LOOP_FMU,
   WP_PS_MRPH_UROM_LOOP_FMU,
   WP_PS_MRPH_FMU_LOOP_FMU,
   WP_PS_MRPH_FMU_LOOP_COPY,


   WP_PS_IFT_START,
   WP_PS_IFT_END,
   WP_PS_IFT_TEMP_TRIGGER,
   WP_PS_IFT_TEMP_LAST_IFT_UPDATED,
   WP_PS_IFT_ASIC_ZQC_START,
   WP_PS_IFT_ASIC_ZQC_DONE,
   WP_PS_IFT_ASIC_ZQC_USE_TABLE_RESULTS,
   WP_PS_IFT_ASIC_ZQC_SKIP,
   WP_PS_IFT_NAND_ZQC_START,
   WP_PS_IFT_NAND_ZQC_DONE,
   WP_PS_IFT_NAND_ZQC_SKIP,
   WP_PS_IFT_SET_TOGGLE_MODE,
   WP_PS_IFT_DCC_START,
   WP_PS_IFT_DCC_DONE,
   WP_PS_IFT_DCC_SKIP,
   WP_PS_IFT_DIE_RESET,

   WP_PS_IFT_RT_INIT_ALL_DELAYS_TO_0,
   WP_PS_IFT_RT_START,
   WP_PS_IFT_RT_END,
   WP_PS_IFT_RT_USE_TABLE_RESULTS,
   WP_PS_IFT_RT_SKIP,
   WP_PS_IFT_RT_CHANGE_TO_TM1200,
   WP_PS_IFT_RT_RETURN_TO_TM1600,

   WP_PS_IFT_RT_FIRST_READ,
   WP_PS_IFT_RT_STEP_1_CASE_1,
   WP_PS_IFT_RT_STEP_1_CASE_2,
   WP_PS_IFT_RT_RDQS_LEFT_EDGE,
   WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE,
   WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE_JUMP_CASE_1,
   WP_PS_IFT_RT_STEP_2,
   WP_PS_IFT_RT_RFD_LEFT_EDGE,
   WP_PS_IFT_RT_STEP_3,
   WP_PS_IFT_RT_RDQS_RIGHT_EDGE,

   WP_PS_IFT_WT_INIT_ALL_DELAYS_TO_0,
   WP_PS_IFT_WT_START,
   WP_PS_IFT_WT_END,
   WP_PS_IFT_WT_USE_TABLE_RESULTS,
   WP_PS_IFT_WT_SKIP,

   WP_PS_IFT_WT_FIRST_READ,
   WP_PS_IFT_WT_STEP_1_CASE_1,
   WP_PS_IFT_WT_STEP_1_CASE_2,
   WP_PS_IFT_WT_WDQS_LEFT_EDGE,
   WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE,
   WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE_JUMP_CASE_1,
   WP_PS_IFT_WT_STEP_2,
   WP_PS_IFT_WT_WFD_LEFT_EDGE,
   WP_PS_IFT_WT_STEP_3,
   WP_PS_IFT_WT_WDQS_RIGHT_EDGE,


   WP_PS_IFT_UPDATE_OPT_TABLE,


   WP_PS_DGM_DMC_CH,


   WP_PS_RPZ_START,
   WP_PS_RPZ_P0_RESULT_FF,
   WP_PS_RPZ_P0_RESULT_UECC,
   WP_PS_RPZ_P1_RESULT_UECC,
   WP_PS_RPZ_P2_RESULT_UECC,
   WP_PS_RPZ_P3_RESULT_UECC,
   WP_PS_RPZ_P0_RESULT_OK,
   WP_PS_RPZ_P1_RESULT_OK,
   WP_PS_RPZ_P2_RESULT_OK,
   WP_PS_RPZ_P3_RESULT_OK,
   WP_PS_RPZ_P0_RESULT_SLC_ERASE,
   WP_PS_RPZ_P1_RESULT_SLC_ERASE,
   WP_PS_RPZ_P2_RESULT_SLC_ERASE,
   WP_PS_RPZ_P3_RESULT_SLC_ERASE,


   WP_PS_SFA_D5_AVOID,
   WP_PS_SFA_5D_AVOID,
   WP_PS_SFA_RESET,
   WP_PS_DO_SF_WITH_READ,


   WP_PS_SENSE_AHEAD,






   WP_INFRA_IFS_IN_WRITE_FILE,
   WP_INFRA_IFS_IN_COMPACTION,
   WP_INFRA_IFS_IN_COMPAC_START,
   WP_INFRA_IFS_IN_COMPAC_END,
   WP_INFRA_IFS_IN_BOOTPAGE_UPDATE,
   WP_INFRA_READ_IFS_BOOT_LAST_PAGE,
   WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED,
   WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS,
   WP_INFRA_IFS_CODE_LAST_PAGE,
   WP_INFRA_IFS_IN_HIGH_BER,
   WP_INFRA_IFS_BLOCK_RELOC_ALLOCATE,
   WP_INFRA_IFS_BLOCK_RELOC_START,
   WP_INFRA_IFS_BLOCK_IN_RELOC,
   WP_INFRA_IFS_BLOCK_RELOC_END,
   WP_INFRA_IFS_FFU_IN_DL_WRITE,
   WP_INFRA_IFS_FFU_IN_COMMIT_START,

   WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE,
   WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG,
   WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS,
   WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE,
   WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET,
   WP_FADI_DATA_DUMP_MESSAGE_SENT,
   WP_INFRA_FADI_DATA_WRITE_END,
   WP_INFRA_FADI_DATA_WRITE_FAILED,
   WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK,
   WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY,
   WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL,
   WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED,
   WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU,
   WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS,
   WP_INFRA_FADI_DUMP_MANAGER_INIT,
   WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD,

   WP_INFRA_FADI_BLOCKS_REGION,
   WP_INFRA_READ_REGION_LAST_PAGE,
   WP_INFRA_WRITE_REGION_LAST_PAGE,

#line 1129 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
   WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE,
   WP_INFRA_TM_IDLE_TIME,
   WP_INFRA_TM_ACTIVE_TIME,
   WP_INFRA_TM_UPDATED_THERMAL_THROTTLING,
   WP_INFRA_TM_CALCULATE_COMPOSITE_TEMP,
   WP_INFRA_BLOCK_ISOLATION,
   WP_INFRA_TM_SEND_TEMPERATURE,
   WP_PS_THM_INFRA_FAKE_TEMPCODE,

#line 1148 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
   WP_SEC_NEW_COMMAND_STARTED,
   WP_SEC_COMMAND_FINISHED,
   WP_SEC_TCG_SESSION_STARTED,
   WP_SEC_TCG_SESSION_ABORTED,
   WP_SEC_RESET_HANDLING,
   WP_SEC_FS_READ,
   WP_SEC_FS_WRITE,
   WP_SEC_FS_COMMIT_TRANSACTION,
   WP_SEC_FS_REVERT_TRANSACTION,
   WP_SEC_FS_CLEANUP,
   WP_SEC_FTL_HOSTLESS_READ,
   WP_SEC_FTL_WRITE_BUFFER,
   WP_SEC_FTL_DEALLOCATE,
   WP_SEC_FTL_FORMAT_NVM,
   WP_SEC_FE_TRANSFER_REQUEST,
   WP_SEC_FE_TRANSFER_RESPONSE,
   WP_SEC_HMB_ENABLED,
   WP_SEC_HMB_NOTIFIED,
   WP_RPMB_WRITE_COUNTER,
   WP_RPMB_WRITE_STATUS,
   WP_RPMB_UGSD_RECOVERED,
   WP_RPMB_UGSD_LOST,




   WP_EI_UECC_OCCURRED,
   WP_EI_RLC_UECC_SCAN,
   WP_EI_RLC_UECC_TRANSLATION,
   WP_EI_UECC_HOSTLESS_READ,
   WP_EI_UECC_INJECT_UECC_TO_HEADER,
   WP_EI_UECC_RMW,
   WP_EI_MB_REVIVE,
   WP_EI_JB_REVIVE,
   WP_EI_INJECTION,




   WP_NPDP_DCVD_ROM,
   WP_NPDP_DISABLE_C6_PREREAD,
   WP_NPDP_ENABLE_C6_PREREAD,




   WP_FWR_CS_IS_ACTIVE,
   WP_FWR_CMD_COMPLETION,
   WP_FWR_ASYNC_REPORT_EVENT_TO_HOST,
   WP_FWR_CS_NOTIFY_CS_COMPLETED,
   WP_FWR_CS_NOTIFY_USERS,
   WP_FWR_DATA_TRANSFER,
   WP_FWR_DATA_TRANSFER_ZEROS,
   WP_FWR_FLUSH_FE_END,
   WP_FWR_FLUSH_FE_START,
   WP_FWR_FLUSH_FTL,
   WP_FWR_FORMAT_AFTER_ABORT_REQUEST,
   WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK,
   WP_FWR_FORMAT_AFTER_FTL,
   WP_FWR_FORMAT_BEFORE_ABORT_REQUEST,
   WP_FWR_FORMAT_BEFORE_FTL,
   WP_FWR_FORMAT_ENHANCED_CASE1,
   WP_FWR_FORMAT_ENHANCED_CASE2,
   WP_FWR_FORMAT_UPDATE_LOG_BLOCKS,
   WP_FWR_GETLOG_COMMAND,
   WP_FWR_GETLOG_SMART,
   WP_FWR_IDENTIFY_COMMAND,
   WP_FWR_IO_COMMANDS_EXEPTION_Q,
   WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS,
   WP_FWR_LOG_CS_SEND_BARRIER,
   WP_FWR_LOG_MANAGE,
   WP_FWR_LOG_PENDING_CS_START,
   WP_FWR_MNT_BML_RECOVERY,
   WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL,
   WP_FWR_PS_BRM_HANDLE_BARRIER_REQ,
   WP_FWR_PS_BRM_IS_CS,
   WP_FWR_PS_DGM_HANDLE_BARRIER,
   WP_FWR_PS_MQD_HANDLE_BARRIER_REQ,
   WP_FWR_PS_OTG_RELEASE_ON_COMPLETION,
   WP_FWR_READ_ARRIVED_TO_FTL,

   WP_FWR_RESET_DETAILES,
   WP_FWR_SAT_CONSOLIDATION_ACTIVE,
   WP_FWR_SET_FEATURES_COMMAND,
   WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL,
   WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL,
   WP_FWR_SET_PMM_ALL_READY,
   WP_FWR_SET_PMM_BEFORE_INFRA,
   WP_FWR_SET_PMM_FE_ACK,
   WP_FWR_SET_PMM_FTL_ACK,
   WP_FWR_SET_PMM_IFS_ACK,
   WP_FWR_SET_PMM_IN_FTL,
   WP_FWR_SET_PMM_IN_IFS,
   WP_FWR_SET_PMM_IN_PS,
   WP_FWR_RESET_ACTIVE,
   WP_FWR_SET_PMM_IN_SECURITY,
   WP_FWR_SET_PMM_PS_ACK,
   WP_FWR_SET_PMM_SECURITY_ACK,
   WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL,
   WP_FWR_DEALLOC_IN_FE,
   WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK,
   WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC,
   WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE,
   WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE,
   WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE,

   WP_FWR_COMPARE_VALIDATION_STAGE,
   WP_FWR_COMPARE_END,
   WP_FWR_COMPARE_READ_FROM_FLASH_STAGE,
   WP_FWR_COMPARE_READ_4K_STAGE,

   WP_FWR_WRITE_IN_FTL_GENERAL,
   WP_FWR_WRITE_IN_FTL_RMW_STAGE,
   WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE,

   WP_FWR_WUC_FE,
   WP_FWR_WUC_FTL,
   WP_FWR_WUC_CALL_FROM_FTL_STAGE,
   WP_FWR_WRITE_ZEROS_VALIDATION_FE,
   WP_FWR_WRITE_ZEROS_DIVISION,
   WP_FWR_WRITE_ZEROS_READ,
   WP_FWR_WRITE_ZEROS_READ_4K,
   WP_FWR_HWD_FULL_ERROR,

   WP_FWR_WRITE_RPMB,

   WP_FWR_DOWNLOAD_FFU_MAIN_LOOP,
   WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END,
   WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS,
   WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP,

   WP_FWR_MOUNT_START,
   WP_FWR_GSD_MOUNT_START,
   WP_FWR_UGSD_MOUNT_START,
   WP_FWR_MOUNT_BEFORE_ENABLE_WR,
   WP_FWR_AFTER_MOUNT_COMPLITION,

   WP_FWR_SHUTDOWN_STATE_START,
   WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR,
   WP_FWR_SHUTDOWN_STATE_REQ_CS,
   WP_FWR_RESET,
   WP_FWR_BML_RELEASE_BLOCK,
   WP_FWR_FE_HANDLER_FORMAT_NVME,
   WP_FWR_FE_NVME_FORMAT_CB,
   WP_FWR_FE_NVME_NCR_CHST_UPDATE,
   WP_FWR_FTL_CMD_FNVM_FORMAT_START,
   WP_FWR_FTL_CMD_FNVM_FORMAT_END,
   WP_FWR_FE_FORMAT_PROCESS_END,
   WP_FWR_LOG_FIRST_MOUNT,

   WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC,
   WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC,
   WP_FWR_LOG_WRITING_LOG_BLOCK,
   WP_FWR_PS_XOR_STORE_PAR_REQ,
   WP_FWR_XORM_COMPACTION_START,
   WP_FWR_XROM_COMPACTION_IN_PROCESS,
   WP_FWR_XORM_COMPACTION_END,
   WP_FWR_MVP_PARTITION_FREE_SPACE,
   WP_FWR_LOG_WRITE_LOG_COPY,
   WP_FWR_LOG_DEBUG_ALLOC,
   WP_FWR_FTL_SECURITY_MEM_ALLOC,
   WP_FWR_FTL_SECURITY_MEM_RELEASE,

   WP_FWR_RLC_BRLC_COPY_STEP,
   WP_FWR_FTL_RSQ_RLC_REQ_REMOVED,
   WP_FWR_LOG_WRITE_REQ,
   WP_PSR_CONTROL_READ_VBA,
   WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK,
   WP_FWR_INFRA_IFS_STATUS_ERROR,
   WP_FWR_INFRA_IFS_STATUS_WRITE,
   WP_FWR_FNVM_ABORT_ONGOING_FORMAT,
   WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS,
   WP_FWR_INFRA_FFU_WRITE_PARAMETERS,
   WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS,
   WP_FWR_MNT_JMB_SWAP_MB,
   WP_FWR_INFRA_READ_SCRUB_START,


   WP_FE_PMM_IDLETIMER_EXPIRED,

   WP_FWR_PMM_STARTPST_DISABLE_TIMER,
   WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA,
   WP_FWR_PMM_INFRA_ISSUEPST,
   WP_FWR_PMM_ISSUEPST_NO_PREV_REQ,
   WP_FWR_PMM_ISSUEPST_TERMAL,
   WP_FWR_PMM_ISSUEPST_THROTTLING,
   WP_FWR_PMM_ISSUEPST_FE_PARAM,
   WP_FWR_PMM_EXECUTEPST_FTL,
   WP_FWR_PMM_EXECUTEPST_SEC,
   WP_FWR_PMM_EXECUTEPST_PS,
   WP_FWR_PMM_EXECUTEPST_PCU,
   WP_FWR_PMM_EXECUTEPST_AON,
   WP_FWR_PMM_AON_ENTER_LOW_POWER,
   WP_FWR_PS_EH_COPY_HANDLER,
   WP_FWR_PS_EH_ERROR_LOG_FLUSH,
   WP_FWR_PS_EH_PF_EF_ISR,
   WP_FWR_PS_DGM_GSD_HALT,
   WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION,
   WP_FWR_PMM_INFRA_ISSUEPST_END,
   WP_FWR_PMM_ABORT_END,
   WP_FWR_PMM_END,
   WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO,


   WP_FWR_PS_WRITE_SLC_RND_USER_DATA,
   WP_FWR_PS_WRITE_TLC_RND_USER_DATA,
   WP_FWR_PS_WRITE_CONTROL_DATA,
   WP_FWR_PS_WRITE_FS_DATA,
   WP_FWR_PS_ERASE_SLC_RND_USER_DATA,
   WP_FWR_PS_ERASE_TLC_RND_USER_DATA,
   WP_FWR_PS_ERASE_FS_DATA,
   WP_FWR_PS_READ_SLC_RND_USER_DATA,
   WP_FWR_PS_READ_TLC_RND_USER_DATA,
   WP_FWR_PS_READ_CONTROL_DATA,
   WP_FWR_PS_READ_FS_DATA,


   WP_FWR_PS_EH_READ_RETRY_CFH,
   WP_FWR_PS_BES5_PARAMS,
   WP_FWR_PS_BES7_PARAMS,
   WP_FWR_PS_ERASE_RETIRED_BLOCK,
   WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE,
   WP_FWR_PS_EH_END,
   WP_FWR_PS_EH_READ_RETRY_SB1,
   WP_FWR_PS_EH_READ_RETRY_SB2,
   WP_FWR_PS_EH_RF_ISR,


   WP_SGD_DETECTION_START,
   WP_SGD_DETECTION_END,
   WP_SGD_DETECTION_FAIL,
   WP_SGD_CORRECTION_START,
   WP_SGD_CORRECTION_END,
   WP_SGD_CORRECTION_FAIL,

   WP_HMB_UT_ALL_FINISHED,
   WP_CAT_HMB_IS_FULL,

   WP_MNT_MBM_META_DATA_PHY_BLOCK,
       WP_MNT_MBM_RETURN_FROM_READ,
   WP_MNT_MBM_BOUNDERY_COND_LONG_PARITY,
   WP_MNT_MBM_UGSD_NEW_MB,
   WP_MNT_STATE_MOUNT_BKOPS,
   WP_MNT_STATE_MOUNT_INIT_MNT_CB,
   WP_MNT_HOST_FLGP_BITMAP_FMU,


   WP_THERMAL_HWD_AMOUNT_CHANGED,
   WP_THERMAL_HIM_CONTEXT_AMOUNT_CHANGED,
   WP_THERMAL_PREV_ACT_STATE_CHANGE,

   WP_QUITPROG_DATA,




   WP_PS_DGM_1P0V,
   WP_PS_DGM_1P0V_COUNTERS,
   WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE,
   WP_PS_DGM_1P0V_CMD,
   WP_PS_DGM_AVPGM_SET_FEATURE,

   WP_SAT_TRANSLATE_RESULT,
   WP_SAT_ULAYER_REBUILD_COMPLETE,



   WP_FNV_CMD_START,
   WP_FNV_RLC_TYPE_SELECTED,
   WP_FNV_CMD_JB_PICKED,
   WP_FNV_CMD_SRC_RELEASED,
   WP_FNV_CMD_COMPLETED,




   WP_ARD_COMPUTE_RATIO,
   WP_ARD_BITMAP_UPDATE,
   WP_ARD_CHECK_POINT,


   WP_PROTECTED_TRY_TO_CREATE,
   WP_PROTECTED_MSET_CREATE,
   WP_PROTECTED_MSET_FLUSH_BEGIN,
   WP_PROTECTED_MSET_FLUSH_COMPLETED,


   WP_PS_DGM_VPGMU,
   WP_PS_DGM_ERASE,
   WP_PS_EF_10_ELC_LOOP_COUNTER,

   WP_PS_EF_11_NPD_START,
   WP_PS_EF_12_NPD_CHECK,
   WP_PS_EF_13_NPD_CHECK_DONE,
   WP_PS_FTL_PHY_ERASE_REQ_BLOCK,
   WP_PS_DGM_1P0V_SET_FEATURE,
   WP_PS_MRPH_MT_VERSION,
   WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE,


   WP_ROM_CVD_READ_COARSE,
   WP_ROM_CVD_READ_FINE,
   WP_ROM_NPDP_READ,
   WP_INFRA_ROM_PATH_EVENT,



   MAX_WAYPOINT = 0x7FFFFFFF,
} WaypointEventKey_e;

#line 1469 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
__inline static  void RegisterAllWaypoints(void)
{



   RegisterWaypoint(WP_FIRST_MOUNT_START, "WP_FIRST_MOUNT_START") ;
   RegisterWaypoint(WP_FIRST_MOUNT_END, "WP_FIRST_MOUNT_END") ;

   RegisterWaypoint(WP_MNT_STATE_START, "WP_MNT_STATE_START") ;
   RegisterWaypoint(WP_MNT_STATE_HANDLE_LOG, "WP_MNT_STATE_HANDLE_LOG") ;
   RegisterWaypoint(WP_MNT_STATE_READONLY, "WP_MNT_STATE_READONLY") ;
   RegisterWaypoint(WP_MNT_STATE_NOTIFY_PS, "WP_MNT_STATE_NOTIFY_PS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_BML, "WP_MNT_STATE_MOUNT_BML") ;
   RegisterWaypoint(WP_MNT_STATE_SEND_DEVICE_HEALTH, "WP_MNT_STATE_SEND_DEVICE_HEALTH") ;
   RegisterWaypoint(WP_MNT_STATE_CHECK_GSD_FLAG, "WP_MNT_STATE_CHECK_GSD_FLAG") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_OBM, "WP_MNT_STATE_GSD_MOUNT_OBM") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_MTM, "WP_MNT_STATE_GSD_MOUNT_MTM") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_SAT, "WP_MNT_STATE_GSD_MOUNT_SAT") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_MVP, "WP_MNT_STATE_GSD_MOUNT_MVP") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_RSQ, "WP_MNT_STATE_GSD_MOUNT_RSQ") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_RS, "WP_MNT_STATE_GSD_MOUNT_RS") ;
   RegisterWaypoint(WP_MNT_STATE_DR_CHECK_REQ, "WP_MNT_STATE_DR_CHECK_REQ") ;
   RegisterWaypoint(WP_MNT_STATE_ENABLE_READ, "WP_MNT_STATE_ENABLE_READ") ;
   RegisterWaypoint(WP_MNT_STATE_OPBS_REBUILD_XOR_PAR, "WP_MNT_STATE_OPBS_REBUILD_XOR_PAR") ;
   RegisterWaypoint(WP_MNT_STATE_OPBS_BRLC, "WP_MNT_STATE_OPBS_BRLC") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_HWD, "WP_MNT_STATE_MOUNT_HWD") ;
   RegisterWaypoint(WP_MNT_STATE_CONTROL_SYNC, "WP_MNT_STATE_CONTROL_SYNC") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_BML_RECOVERY, "WP_MNT_STATE_UGSD_BML_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_OBM_RECOVERY, "WP_MNT_STATE_UGSD_OBM_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_EXTRACT_METADATA, "WP_MNT_STATE_UGSD_EXTRACT_METADATA") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP, "WP_MNT_STATE_UGSD_XOR_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_XOR_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP, "WP_MNT_STATE_UGSD_MTM_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_MTM_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD, "WP_MNT_STATE_UGSD_SAT_MOUNT_UGSD") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP, "WP_MNT_STATE_UGSD_HOST_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP, "WP_MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP, "WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY, "WP_MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_MVP, "WP_MNT_STATE_UGSD_MOUNT_MVP") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_RSQ, "WP_MNT_STATE_UGSD_MOUNT_RSQ") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOUNT_RS, "WP_MNT_STATE_UGSD_MOUNT_RS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_COMPLETE, "WP_MNT_STATE_MOUNT_COMPLETE") ;
   RegisterWaypoint(WP_MNT_HANDLE_DRD_RESPONSE, "WP_MNT_HANDLE_DRD_RESPONSE") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESPONSE, "WP_MNT_HANDLE_FLGP_RESPONSE") ;
   RegisterWaypoint(WP_MNT_HANDLE_DRD_REQUEST, "WP_MNT_HANDLE_DRD_REQUEST") ;
   RegisterWaypoint(WP_MNT_STATE_GSD_MOUNT_FNVM, "WP_MNT_STATE_GSD_MOUNT_FNVM") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_XORM, "WP_MNT_STATE_MOUNT_XORM") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_RLC, "WP_MNT_STATE_MOUNT_RLC") ;
   RegisterWaypoint(WP_MNT_HBSF_HOST_RECOVERY, "WP_MNT_HBSF_HOST_RECOVERY") ;
   RegisterWaypoint(WP_MNT_HBSF_HOST_RECOVERY_DONE, "WP_MNT_HBSF_HOST_RECOVERY_DONE") ;
   RegisterWaypoint(WP_MNT_PERFORM_BRLC, "WP_MNT_PERFORM_BRLC") ;
   RegisterWaypoint(WP_MNT_ALIGN_HOST_BLOCKS_FER, "WP_MNT_ALIGN_HOST_BLOCKS_FER") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_SMART, "WP_MNT_STATE_MOUNT_SMART") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_LGW, "WP_MNT_HANDLE_FLGP_RESP_WA_LGW") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_FER, "WP_MNT_HANDLE_FLGP_RESP_WA_FER") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_WA_DIFF, "WP_MNT_HANDLE_FLGP_RESP_WA_DIFF") ;
   RegisterWaypoint(WP_MNT_UGSD_HAS_WA, "WP_MNT_UGSD_HAS_WA") ;
   RegisterWaypoint(WP_MNT_HANDLE_FLGP_RESP_END, "WP_MNT_HANDLE_FLGP_RESP_END") ;
   RegisterWaypoint(WP_MNT_COMBINE_FLGP_RES, "WP_MNT_COMBINE_FLGP_RES") ;
   RegisterWaypoint(WP_MNT_ALGN_FLGP_LGW_TO_LOG, "WP_MNT_ALGN_FLGP_LGW_TO_LOG") ;
   RegisterWaypoint(WP_MNT_DALOC_SENT_RD, "WP_MNT_DALOC_SENT_RD") ;
   RegisterWaypoint(WP_MNT_DALOC_READ_DONE, "WP_MNT_DALOC_READ_DONE") ;
   RegisterWaypoint(WP_MNT_UGSD_HOST_RD_RES, "WP_MNT_UGSD_HOST_RD_RES") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_FLAGS, "WP_MNT_HOST_RECOVERY_FLAGS") ;
   RegisterWaypoint(WA_MNT_UGSD_MARK_4_LATER, "WA_MNT_UGSD_MARK_4_LATER") ;
   RegisterWaypoint(WP_MNT_MOUNT_START, "WP_MNT_MOUNT_START") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE, "WP_MNT_STATE_UGSD_HOST_BLOCK_RECOVERY_PAUSE") ;
   RegisterWaypoint(WP_MNT_SET_LAST_VALID_JBA, "WP_MNT_SET_LAST_VALID_JBA") ;
   RegisterWaypoint(WP_MNT_CALCULATE_LGW_JBA, "WP_MNT_CALCULATE_LGW_JBA") ;
   RegisterWaypoint(WP_MNT_EXTRACT_FFLBA, "WP_MNT_EXTRACT_FFLBA") ;
   RegisterWaypoint(WP_MNT_INIT_HEADER_PTRS_LIST, "WP_MNT_INIT_HEADER_PTRS_LIST") ;
   RegisterWaypoint(WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK, "WP_MNT_INIT_HEADER_PTRS_LIST_BLOCK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_AFTER_LGW, "WP_MNT_HOST_RECOVERY_READ_AFTER_LGW") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_START, "WP_MNT_HOST_RECOVERY_READ_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB, "WP_MNT_HOST_RECOVERY_READ_REALLOCATED_JB") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_READ_STATUS, "WP_MNT_HOST_RECOVERY_READ_STATUS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START, "WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS, "WP_MNT_HOST_RECOVERY_HANDLE_READ_RESULT_STATUS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_START, "WP_MNT_HOST_RECOVERY_PROCESS_START") ;
   RegisterWaypoint(WP_MNT_UGSD_CHECK_CS_NEEDED, "WP_MNT_UGSD_CHECK_CS_NEEDED") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID, "WP_MNT_HOST_RECOVERY_PROCESS_HANDLE_INVALID") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK, "WP_MNT_HOST_RECOVERY_PROCESS_DALOC_BREAK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE, "WP_MNT_HOST_RECOVERY_PROCESS_CAN_PROCESS_STATE") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_START, "WP_MNT_HOST_RECOVERY_HANDLER_START") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_PROCESS, "WP_MNT_HOST_RECOVERY_HANDLER_PROCESS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE1") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PROCESS") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2, "WP_MNT_HOST_RECOVERY_HANDLER_STATE_TO_PAUSE2") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED, "WP_MNT_HOST_RECOVERY_HANDLER_SCHEDULED") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_HANDLE_DALOC, "WP_MNT_HOST_RECOVERY_HANDLE_DALOC") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_DALOC_CALLBACK, "WP_MNT_HOST_RECOVERY_DALOC_CALLBACK") ;
   RegisterWaypoint(WP_MNT_HOST_RECOVERY_START, "WP_MNT_HOST_RECOVERY_START") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG, "WP_MNT_STATE_UGSD_MOD_MOUNT_READ_LOG") ;
   RegisterWaypoint(WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED, "WP_MNT_STATE_SF_HOST_CTXT_IS_ALREADY_SCHEDULED") ;
   RegisterWaypoint(WP_MNT_VALIDATE_B2B_DATA, "WP_MNT_VALIDATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_INVALIDATE_LATE_B2B_DATA, "WP_MNT_INVALIDATE_LATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_INVALIDATE_NOW_B2B_DATA, "WP_MNT_INVALIDATE_NOW_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_DELAY_INVALIDATE_B2B_DATA, "WP_MNT_DELAY_INVALIDATE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE, "WP_MNT_STATE_UGSD_RLC_BLOCK_RECOVERY_PAUSE") ;
   RegisterWaypoint(WP_MNT_USE_B2B_DATA, "WP_MNT_USE_B2B_DATA") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_SYNC_ALL_VC, "WP_MNT_STATE_MOUNT_SYNC_ALL_VC") ;
   RegisterWaypoint(WP_MNT_NAND_DEFECT, "WP_MNT_NAND_DEFECT") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_READ_FROM_LIST, "WP_MNT_MBM_META_DATA_READ_FROM_LIST") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_READ_FROM_HEAP, "WP_MNT_MBM_META_DATA_READ_FROM_HEAP") ;
   RegisterWaypoint(WP_MNT_UGSD_PAGE0_READ_RESPONSE, "WP_MNT_UGSD_PAGE0_READ_RESPONSE") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_REC, "WP_MNT_MBM_META_DATA_REC") ;
   RegisterWaypoint(WP_MNT_MBM_META_DATA_NO_NEW_REC, "WP_MNT_MBM_META_DATA_NO_NEW_REC") ;
   RegisterWaypoint(WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP, "WP_MNT_UGSD_MNT_FIELDS_PAGE0_RESP") ;



   RegisterWaypoint(WP_HOST_WRITE_COMPLETE, "WP_HOST_WRITE_COMPLETE") ;
   RegisterWaypoint(WP_HOST_READ_COMPLETE, "WP_HOST_READ_COMPLETE") ;
   RegisterWaypoint(WP_SAT_START_CONSOLIDATION, "WP_SAT_START_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_ENDED_CONSOLIDATION, "WP_SAT_ENDED_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_ADDING_MSET, "WP_SAT_CONSOLIDATION_ADDING_MSET") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_REUSING_MSET, "WP_SAT_CONSOLIDATION_REUSING_MSET") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_SENT_ALL_READS, "WP_SAT_CONSOLIDATION_SENT_ALL_READS") ;
   RegisterWaypoint(WP_SAT_CONSOLIDATION_START_COPY_BACK, "WP_SAT_CONSOLIDATION_START_COPY_BACK") ;
   RegisterWaypoint(WP_CAT_ADDED_MSET, "WP_CAT_ADDED_MSET") ;
   RegisterWaypoint(WP_CAT_REMOVED_MSET, "WP_CAT_REMOVED_MSET") ;
   RegisterWaypoint(WP_SAT_WRITE_ENTRY, "WP_SAT_WRITE_ENTRY") ;
   RegisterWaypoint(WP_SAT_UPDATE_VC, "WP_SAT_UPDATE_VC") ;
   RegisterWaypoint(WP_SAT_SEND_CONTROL_READ, "WP_SAT_SEND_CONTROL_READ") ;
   RegisterWaypoint(WP_SAT_PARTIAL_RESET_COMPLETE, "WP_SAT_PARTIAL_RESET_COMPLETE") ;
   RegisterWaypoint(WP_SAT_CANCELED_CONSOLIDATION, "WP_SAT_CANCELED_CONSOLIDATION") ;
   RegisterWaypoint(WP_SAT_STARTED_DEALLOCATE, "WP_SAT_STARTED_DEALLOCATE") ;
   RegisterWaypoint(WP_SAT_UECC_ON_CONTROL_READ, "WP_SAT_UECC_ON_CONTROL_READ") ;
   RegisterWaypoint(WP_SAT_UNITTEST_CALLBACK, "WP_SAT_UNITTEST_CALLBACK") ;
   RegisterWaypoint(WP_SAT_INTERNAL_DRAMLESS_MERGE_MSET_CALLBACK_FINISH, "WP_SAT_INTERNAL_DRAMLESS_MERGE_MSET_CALLBACK_FINISH") ;
   RegisterWaypoint(WP_CAT_SLOT_DETACHED, "WP_CAT_SLOT_DETACHED") ;
   RegisterWaypoint(WP_CAT_SLOT_ATTACHED, "WP_CAT_SLOT_ATTACHED") ;
   RegisterWaypoint(WP_SATRRACKING_JB_ALLOC, "WP_SATRRACKING_JB_ALLOC") ;
   RegisterWaypoint(WP_SAT_TRANSLATE_AFTER_CALLBACK, "WP_SAT_TRANSLATE_AFTER_CALLBACK") ;
   RegisterWaypoint(WP_CATHMB_DEMOTION_STARTED, "WP_CATHMB_DEMOTION_STARTED") ;
   RegisterWaypoint(WP_CATHMB_DEMOTION_COMPLETED, "WP_CATHMB_DEMOTION_COMPLETED") ;
   RegisterWaypoint(WP_CATHMB_DEMOTION_ERROR, "WP_CATHMB_DEMOTION_ERROR") ;
   RegisterWaypoint(WP_CATHMB_DEMOTION_ABORTED, "WP_CATHMB_DEMOTION_ABORTED") ;
   RegisterWaypoint(WP_CATHMB_MSET_EVICTED, "WP_CATHMB_MSET_EVICTED") ;
   RegisterWaypoint(WP_CATHMB_MSET_INVALIDATE, "WP_CATHMB_MSET_INVALIDATE") ;
   RegisterWaypoint(WP_CATHMB_LOCK_SLOT, "WP_CATHMB_LOCK_SLOT") ;
   RegisterWaypoint(WP_CATHMB_UNLOCK_SLOT, "WP_CATHMB_UNLOCK_SLOT") ;
   RegisterWaypoint(WP_CATHMB_READ_SENT, "WP_CATHMB_READ_SENT") ;
   RegisterWaypoint(WP_CATHMB_LOAD_BUFFER_CL, "WP_CATHMB_LOAD_BUFFER_CL") ;
   RegisterWaypoint(WP_CATHMB_READ_BUFFER_CL, "WP_CATHMB_READ_BUFFER_CL") ;
   RegisterWaypoint(WP_CATHMB_WRITE_BUFFER_CL, "WP_CATHMB_WRITE_BUFFER_CL") ;
   RegisterWaypoint(WP_CATHMB_SCHEDULE_DEMOTION, "WP_CATHMB_SCHEDULE_DEMOTION") ;
   RegisterWaypoint(WP_CATHMB_PROMOTION_STARTED, "WP_CATHMB_PROMOTION_STARTED") ;
   RegisterWaypoint(WP_CATHMB_PROMOTION_ENDED, "WP_CATHMB_PROMOTION_ENDED") ;
   RegisterWaypoint(WP_CATHMB_HANDLE_COMPLETION, "WP_CATHMB_HANDLE_COMPLETION") ;
   RegisterWaypoint(WP_HMB_UT_ALL_FINISHED, "WP_HMB_UT_ALL_FINISHED") ;
   RegisterWaypoint(WP_ZCAT_COMPRESS, "WP_ZCAT_COMPRESS") ;
   RegisterWaypoint(WP_ZCAT_TRANSLATE, "WP_ZCAT_TRANSLATE") ;
   RegisterWaypoint(WP_ZCAT_ALLOC, "WP_ZCAT_ALLOC") ;
   RegisterWaypoint(WP_DST_VC_CHECK_FINISHED, "WP_DST_VC_CHECK_FINISHED") ;
   RegisterWaypoint(WP_LOG_READ_LOG_COPIES, "WP_LOG_READ_LOG_COPIES") ;
   RegisterWaypoint(WP_LOG_DECIDE_ACTIVE_COPY, "WP_LOG_DECIDE_ACTIVE_COPY") ;
   RegisterWaypoint(WP_LOG_READ_ACTIVE_LOG, "WP_LOG_READ_ACTIVE_LOG") ;
   RegisterWaypoint(WP_LOG_CONTROL_SYNC_REQUESTED, "WP_LOG_CONTROL_SYNC_REQUESTED") ;
   RegisterWaypoint(WP_LOG_CONTROL_SYNC_IN_PROCESS, "WP_LOG_CONTROL_SYNC_IN_PROCESS") ;
   RegisterWaypoint(WP_LOG_CHECK_FOR_UECC, "WP_LOG_CHECK_FOR_UECC") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_COPY, "WP_LOG_GO_BACK_ONE_COPY") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_ENTRY, "WP_LOG_GO_BACK_ONE_ENTRY") ;
   RegisterWaypoint(WP_LOG_GO_BACK_ONE_BLOCK, "WP_LOG_GO_BACK_ONE_BLOCK") ;
   RegisterWaypoint(WP_LOG_REPLACE_BLOCK, "WP_LOG_REPLACE_BLOCK") ;
   RegisterWaypoint(WP_LOG_ALLOC_NEW, "WP_LOG_ALLOC_NEW") ;
   RegisterWaypoint(WP_LOG_SUSPECT_WA_OR_RECOVERED, "WP_LOG_SUSPECT_WA_OR_RECOVERED") ;
   RegisterWaypoint(WP_LOG_MOUNT_COMPLETE, "WP_LOG_MOUNT_COMPLETE") ;
   RegisterWaypoint(WP_LOG_WRITING_LOG_BLOCK, "WP_LOG_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_LOG_JUMBO_BLOCK_WL, "WP_LOG_JUMBO_BLOCK_WL") ;

   RegisterWaypoint(WP_BKOPS_STARTED, "WP_BKOPS_STARTED") ;
   RegisterWaypoint(WP_BKOPS_COMPLETED, "WP_BKOPS_COMPLETED") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_PROCESS_SAT, "WP_BKOPS_HANDLER_PROCESS_SAT") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_SAT_BF, "WP_BKOPS_HANDLER_SAT_BF") ;
   RegisterWaypoint(WP_BKOPS_LOAD_MSET_HANDLER_BF_RECONSTRUCT, "WP_BKOPS_LOAD_MSET_HANDLER_BF_RECONSTRUCT") ;
   RegisterWaypoint(WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS, "WP_BKOPS_HANDLER_READONLY_DISABLE_BKOPS") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_COMPLETE, "WP_BKOPS_RELOCATION_COMPLETE") ;
   RegisterWaypoint(WP_BKOPS_SAT_HANDLER_END, "WP_BKOPS_SAT_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_COMPLETE, "WP_BKOPS_RELOCATION_COMPLETE") ;
   RegisterWaypoint(WP_BKOPS_LOAD_MSETS_HANDLER_START, "WP_BKOPS_LOAD_MSETS_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_LOAD_MSETS_HANDLER_END, "WP_BKOPS_LOAD_MSETS_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_RS_HANDLER_START, "WP_BKOPS_RS_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_RS_HANDLER_END, "WP_BKOPS_RS_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_MTM_HANDLER_START, "WP_BKOPS_MTM_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_MTM_HANDLER_END, "WP_BKOPS_MTM_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_MAIN_LOOP_HANDLER_START, "WP_BKOPS_MAIN_LOOP_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_MAIN_LOOP_HANDLER_END, "WP_BKOPS_MAIN_LOOP_HANDLER_END") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_HANDLER_START, "WP_BKOPS_RELOCATION_HANDLER_START") ;
   RegisterWaypoint(WP_BKOPS_RELOCATION_HANDLER_END, "WP_BKOPS_RELOCATION_HANDLER_END") ;

   RegisterWaypoint(WP_MTM_WINFW_TEST, "WP_MTM_WINFW_TEST") ;
   RegisterWaypoint(WP_MTM_ALLOCATE_BLOCK, "WP_MTM_ALLOCATE_BLOCK") ;
   RegisterWaypoint(WP_MTM_CLOSE_BLOCK, "WP_MTM_CLOSE_BLOCK") ;
   RegisterWaypoint(WP_MTM_RELEASE_BLOCK, "WP_MTM_RELEASE_BLOCK") ;
   RegisterWaypoint(WP_MTM_STARTED_GC, "WP_MTM_STARTED_GC") ;
   RegisterWaypoint(WP_MTM_GC_COMPLETE, "WP_MTM_GC_COMPLETE") ;
   RegisterWaypoint(WP_MTM_WRITE_PART, "WP_MTM_WRITE_PART") ;
   RegisterWaypoint(WP_MTM_VC_UPDATE, "WP_MTM_VC_UPDATE") ;
   RegisterWaypoint(WP_MTM_CHECK_BLOCK_STUCK_START, "WP_MTM_CHECK_BLOCK_STUCK_START") ;
   RegisterWaypoint(WP_MTM_CHECK_BLOCK_STUCK_FINISH, "WP_MTM_CHECK_BLOCK_STUCK_FINISH") ;
   RegisterWaypoint(WP_MTM_PROCESS_GC, "WP_MTM_PROCESS_GC") ;
   RegisterWaypoint(WP_FTL_MTM_JB_VBA, "WP_FTL_MTM_JB_VBA") ;
   RegisterWaypoint(WP_MTM_IN_CRITICAL_STATE, "WP_MTM_IN_CRITICAL_STATE") ;

   RegisterWaypoint(WP_PSR_SET_OPEN_BLOCK, "WP_PSR_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_PSR_RD_RMW_VBA, "WP_PSR_RD_RMW_VBA") ;
   RegisterWaypoint(WP_PSR_ERASE_META_BLOCK, "WP_PSR_ERASE_META_BLOCK") ;
   RegisterWaypoint(WP_PSR_FLASHFILL_META_BLOCK, "WP_PSR_FLASHFILL_META_BLOCK") ;






   RegisterWaypoint(WP_FTL_STATS, "WP_FTL_STATS") ;





   RegisterWaypoint(WP_FE_COMPARE_START, "WP_FE_COMPARE_START") ;
   RegisterWaypoint(WP_FE_COMPARE_END, "WP_FE_COMPARE_END") ;
   RegisterWaypoint(WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED, "WP_FE_PMM_IDLE_TIMER_FOR_FWT_FLUSH_EXPIRED") ;
   RegisterWaypoint(WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED, "WP_FE_PMM_NON_OPERATIONAL_APST_TIMER_EXPIRED") ;
   RegisterWaypoint(WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH, "WP_FE_PMM_TIMER_STARTED_FOR_FWT_FLUSH") ;

   RegisterWaypoint(WP_FE_PMM_RESET, "WP_FE_PMM_RESET") ;
   RegisterWaypoint(WP_FE_PMM_TO_OP, "WP_FE_PMM_TO_OP") ;
   RegisterWaypoint(WP_FE_PMM_NOIO_TIMEOUT, "WP_FE_PMM_NOIO_TIMEOUT") ;
   RegisterWaypoint(WP_FE_PMM_IO_DOORBELL, "WP_FE_PMM_IO_DOORBELL") ;
   RegisterWaypoint(WP_FE_PMM_ADMIN_DOORBELL, "WP_FE_PMM_ADMIN_DOORBELL") ;
   RegisterWaypoint(WP_FE_PMM_STAGING_LPS, "WP_FE_PMM_STAGING_LPS") ;
   RegisterWaypoint(WP_FE_PMM_SEND_MSG_TO_INFRA, "WP_FE_PMM_SEND_MSG_TO_INFRA") ;


   RegisterWaypoint(WP_FTL_BMG_PROFILE_SWITCH_REQ, "WP_FTL_BMG_PROFILE_SWITCH_REQ") ;
   RegisterWaypoint(WP_FTL_BMG_PROFILE_SWITCH_DISCARD_REQ, "WP_FTL_BMG_PROFILE_SWITCH_DISCARD_REQ") ;
   RegisterWaypoint(WP_FTL_BMG_PROFILE_SWITCH_START_PROCESS, "WP_FTL_BMG_PROFILE_SWITCH_START_PROCESS") ;
   RegisterWaypoint(WP_FTL_BMG_STARTED_SWITCH_REQ, "WP_FTL_BMG_STARTED_SWITCH_REQ") ;
   RegisterWaypoint(WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE, "WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE") ;
   RegisterWaypoint(WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE_CB_CHECK, "WP_FTL_BMG_FINISHED_SWITCH_TO_PROFILE_CB_CHECK") ;
   RegisterWaypoint(WP_FTL_BMG_PUSH_PENDING_REQ, "WP_FTL_BMG_PUSH_PENDING_REQ") ;
   RegisterWaypoint(WP_FTL_BMG_POP_PENDING_REQ, "WP_FTL_BMG_POP_PENDING_REQ") ;
   RegisterWaypoint(WP_FTL_BMG_COPY_ZCAT, "WP_FTL_BMG_COPY_ZCAT") ;


   RegisterWaypoint(WP_FTL_PEM_PRE_ERASE_BLOCK, "WP_FTL_PEM_PRE_ERASE_BLOCK") ;
   RegisterWaypoint(WP_FTL_PEM_PRE_ERASE_START, "WP_FTL_PEM_PRE_ERASE_START") ;
   RegisterWaypoint(WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK, "WP_FTL_PEM_PRE_UGSD_ERASE_BLOCK") ;
   RegisterWaypoint(WP_FTL_PEM_RETARGET_ERASE, "WP_FTL_PEM_RETARGET_ERASE") ;
   RegisterWaypoint(WP_PS_DGM_CHANGE_PREPROG, "WP_PS_DGM_CHANGE_PREPROG") ;
   RegisterWaypoint(WP_PS_DGM_TLC_ERASE, "WP_PS_DGM_TLC_ERASE") ;

   RegisterWaypoint(WP_MVP_FREE_CYCLE, "WP_MVP_FREE_CYCLE") ;
   RegisterWaypoint(WP_MVP_START_RELOCATION, "WP_MVP_START_RELOCATION") ;
   RegisterWaypoint(WP_MVP_PARTITION_FREE_SPACE, "WP_MVP_PARTITION_FREE_SPACE") ;
   RegisterWaypoint(WP_MVP_INIT, "WP_MVP_INIT") ;
   RegisterWaypoint(WP_MVP_RELOCATION_COMPLETE, "WP_MVP_RELOCATION_COMPLETE") ;
   RegisterWaypoint(WP_MVP_CALC_FREE_SPACE, "WP_MVP_CALC_FREE_SPACE") ;
   RegisterWaypoint(WP_MVP_CAL_SCALE_QUOTA, "WP_MVP_CAL_SCALE_QUOTA") ;
   RegisterWaypoint(WP_MVP_EMERGENCY_GC, "WP_MVP_EMERGENCY_GC") ;
   RegisterWaypoint(WP_MVP_EMERGENCY_GC2, "WP_MVP_EMERGENCY_GC2") ;
   RegisterWaypoint(WP_MVP_SBR_RLC_START, "WP_MVP_SBR_RLC_START") ;
   RegisterWaypoint(WP_MVP_SWAP_START, "WP_MVP_SWAP_START") ;
   RegisterWaypoint(WP_MVP_WAITING_BMG, "WP_MVP_WAITING_BMG") ;
   RegisterWaypoint(WP_MVP_SET_QUOTA_IRLC, "WP_MVP_SET_QUOTA_IRLC") ;
   RegisterWaypoint(WP_MVP_HOST_QUOTA_CONSUME, "WP_MVP_HOST_QUOTA_CONSUME") ;
   RegisterWaypoint(WP_MVP_HOST_QUOTA_CONSUME_I, "WP_MVP_HOST_QUOTA_CONSUME_I") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME1, "WP_MVP_GC_QUOTA_CONSUME1") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME2, "WP_MVP_GC_QUOTA_CONSUME2") ;
   RegisterWaypoint(WP_MVP_GC_QUOTA_CONSUME_I, "WP_MVP_GC_QUOTA_CONSUME_I") ;
   RegisterWaypoint(WP_MVP_NEED_STOP_RLC_1, "WP_MVP_NEED_STOP_RLC_1") ;
   RegisterWaypoint(WP_MVP_NEED_STOP_RLC_2, "WP_MVP_NEED_STOP_RLC_2") ;
   RegisterWaypoint(WP_MVP_STOP_DONE_RLC, "WP_MVP_STOP_DONE_RLC") ;
   RegisterWaypoint(WP_MVP_IRLC_TRIGGER, "WP_MVP_IRLC_TRIGGER") ;
   RegisterWaypoint(WP_MVP_IRLC_SWITCH, "WP_MVP_IRLC_SWITCH") ;
   RegisterWaypoint(WP_MVP_IRLC_TERMINATE, "WP_MVP_IRLC_TERMINATE") ;


   RegisterWaypoint(WP_FML_LOW_RESOURCES_START, "WP_FML_LOW_RESOURCES_START") ;
   RegisterWaypoint(WP_FML_LOW_RESOURCES_END, "WP_FML_LOW_RESOURCES_END") ;
   RegisterWaypoint(WP_FML_PS_Q_LOW_RESOURCE_START, "WP_FML_PS_Q_LOW_RESOURCE_START") ;
   RegisterWaypoint(WP_FML_PS_Q_LOW_RESOURCE_END, "WP_FML_PS_Q_LOW_RESOURCE_END") ;
   RegisterWaypoint(WP_FMG_CHECK_UA_T4_MINIMUM, "WP_FMG_CHECK_UA_T4_MINIMUM") ;


   RegisterWaypoint(WP_MTM_SEND_REQ_WRITE, "WP_MTM_SEND_REQ_WRITE") ;
   RegisterWaypoint(WP_MTM_WRITE_DONE, "WP_MTM_WRITE_DONE") ;
   RegisterWaypoint(WP_MTM_START_RELOCATION, "WP_MTM_START_RELOCATION") ;


   RegisterWaypoint(WP_FTL_BML_JUMBOBLOCK_ALLOCATED, "WP_FTL_BML_JUMBOBLOCK_ALLOCATED") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_RELEASED, "WP_FTL_MBM_METABLOCK_RELEASED") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_REVIVE, "WP_FTL_MBM_METABLOCK_REVIVE") ;
   RegisterWaypoint(WP_FTL_MBM_CS_DONE_LIST_NOT_FULL, "WP_FTL_MBM_CS_DONE_LIST_NOT_FULL") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_ERASED, "WP_FTL_MBM_METABLOCK_ERASED") ;
   RegisterWaypoint(WP_FTL_MBM_METABLOCK_FLASH_FILLED, "WP_FTL_MBM_METABLOCK_FLASH_FILLED") ;
   RegisterWaypoint(WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY, "WP_FTL_MBM_FMBL_UGSD_BML_RECOVERY") ;
   RegisterWaypoint(WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML, "WP_FTL_MBM_FMBL_UGSD_CS_AFTER_BML") ;
   RegisterWaypoint(WP_FTL_MBM_MAX_PEC_ERROR_LOG_REPORT, "WP_FTL_MBM_MAX_PEC_ERROR_LOG_REPORT") ;
   RegisterWaypoint(WP_FTL_MBM_INC_ENTRY_PEC, "WP_FTL_MBM_INC_ENTRY_PEC") ;
   RegisterWaypoint(WP_FTL_MBM_REFILL_RESERVED, "WP_FTL_MBM_REFILL_RESERVED") ;


   RegisterWaypoint(D_MODEL_FTL_HWD_ROUTING_RULES, "D_MODEL_FTL_HWD_ROUTING_RULES") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_TLCBUFED_BKOPS, "D_MODEL_FTL_HWD_TLCBUFED_BKOPS") ;
   RegisterWaypoint(D_MODEL_FTL_RR_ENDURANCE_BALANCING, "D_MODEL_FTL_RR_ENDURANCE_BALANCING") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_PADDING, "D_MODEL_FTL_HWD_PADDING") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_START_WRITE, "D_MODEL_FTL_HWD_START_WRITE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_RMW, "D_MODEL_FTL_HWD_RMW") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_RMW_DONE, "D_MODEL_FTL_HWD_RMW_DONE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_FUA, "D_MODEL_FTL_HWD_FUA") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_FUA_DONE, "D_MODEL_FTL_HWD_FUA_DONE") ;
   RegisterWaypoint(D_MODEL_FTL_HWD_STREAM_STATUS, "D_MODEL_FTL_HWD_STREAM_STATUS") ;
   RegisterWaypoint(WP_FTL_HWD_WRITE_JB_VBA, "WP_FTL_HWD_WRITE_JB_VBA") ;
   RegisterWaypoint(WP_FTL_HWD_WRITE_PARITY_BIT, "WP_FTL_HWD_WRITE_PARITY_BIT") ;


   RegisterWaypoint(D_MODEL_FTL_HRF_STREAM_STATUS, "D_MODEL_FTL_HRF_STREAM_STATUS") ;
   RegisterWaypoint(WP_FTL_HRF_UECC_HANDLING, "WP_FTL_HRF_UECC_HANDLING") ;
   RegisterWaypoint(WP_FTL_MP1_DISABLE, "WP_FTL_MP1_DISABLE") ;
   RegisterWaypoint(WP_FTL_MP1_ENABLE, "WP_FTL_MP1_ENABLE") ;


   RegisterWaypoint(WP_FTL_RC_FFLBA, "WP_FTL_RC_FFLBA") ;
   RegisterWaypoint(WP_FTL_RC_HIT, "WP_FTL_RC_HIT") ;
   RegisterWaypoint(WP_FTL_RC_MISS, "WP_FTL_RC_MISS") ;
   RegisterWaypoint(WP_FTL_RC_DEACTIVATE, "WP_FTL_RC_DEACTIVATE") ;


   RegisterWaypoint(WP_FTL_OVP_START_SYNC, "WP_FTL_OVP_START_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_OREAD_FULL_START, "WP_FTL_OVP_OREAD_FULL_START") ;
   RegisterWaypoint(WP_FTL_OVP_PROCESS_ENTRY, "WP_FTL_OVP_PROCESS_ENTRY") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_PROCESS_ENTRY, "WP_FTL_OVP_FEADMIN_PROCESS_ENTRY") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_BLOCKED, "WP_FTL_OVP_FEADMIN_BLOCKED") ;
   RegisterWaypoint(WP_FTL_OVP_FEADMIN_CALLBACK, "WP_FTL_OVP_FEADMIN_CALLBACK") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_WRITE_SYNC, "WP_FTL_OVP_START_STREAM_WRITE_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_STREAM_EMPTY, "WP_FTL_OVP_STREAM_EMPTY") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_RMW_SYNC, "WP_FTL_OVP_START_STREAM_RMW_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_START_STREAM_TLC_SYNC, "WP_FTL_OVP_START_STREAM_TLC_SYNC") ;
   RegisterWaypoint(WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST, "WP_FTL_OVP_SET_RESTRICTION_REASON_MISC_HOST") ;


   RegisterWaypoint(WP_FTL_RLC_RLC_START, "WP_FTL_RLC_RLC_START") ;
   RegisterWaypoint(WP_FTL_RLC_SCAN_FWD, "WP_FTL_RLC_SCAN_FWD") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_SELECTED, "WP_FTL_RLC_SOURCE_BLOCK_SELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_RESELECTED, "WP_FTL_RLC_SOURCE_BLOCK_RESELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_SOURCE_BLOCK_RELEASED, "WP_FTL_RLC_SOURCE_BLOCK_RELEASED") ;
   RegisterWaypoint(WP_FTL_RLC_TARGET_BLOCK_SELECTED, "WP_FTL_RLC_TARGET_BLOCK_SELECTED") ;
   RegisterWaypoint(WP_FTL_RLC_BLOCK_RELEASED, "WP_FTL_RLC_BLOCK_RELEASED") ;
   RegisterWaypoint(WP_FTL_RLC_COPY_FMUS, "WP_FTL_RLC_COPY_FMUS") ;
   RegisterWaypoint(WP_FTL_RLC_FLASH_TRANSLATE, "WP_FTL_RLC_FLASH_TRANSLATE") ;
   RegisterWaypoint(WP_FTL_RLC_TARGET_BLOCK_FULL, "WP_FTL_RLC_TARGET_BLOCK_FULL") ;
   RegisterWaypoint(WP_FTL_RLC_AUTO_FREE_JB_RELEASED, "WP_FTL_RLC_AUTO_FREE_JB_RELEASED") ;
   RegisterWaypoint(WP_FTL_RLC_START_FNVM, "WP_FTL_RLC_START_FNVM") ;
   RegisterWaypoint(WP_FTL_RLC_END_FNVM, "WP_FTL_RLC_END_FNVM") ;
   RegisterWaypoint(WP_FTL_RLC_CYCLE_TERMINATE, "WP_FTL_RLC_CYCLE_TERMINATE") ;
   RegisterWaypoint(WP_FTL_RLC_RLC_COMPLETE, "WP_FTL_RLC_RLC_COMPLETE") ;
   RegisterWaypoint(WP_FTL_RLC_READ_LRM_ENTER, "WP_FTL_RLC_READ_LRM_ENTER") ;
   RegisterWaypoint(WP_FTL_RLC_READ_LRM_EXIT, "WP_FTL_RLC_READ_LRM_EXIT") ;
   RegisterWaypoint(WP_FTL_RLC_JB_REL_LRM_ENTER, "WP_FTL_RLC_JB_REL_LRM_ENTER") ;
   RegisterWaypoint(WP_FTL_RLC_JB_REL_LRM_EXIT, "WP_FTL_RLC_JB_REL_LRM_EXIT") ;
   RegisterWaypoint(WP_FTL_RLC_WRITE_JB_VBA, "WP_FTL_RLC_WRITE_JB_VBA") ;

   RegisterWaypoint(WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK, "WP_FTL_RLC_UPDATE_COPY_FMUINBLOCK") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_USE_SAVED_INFO, "WP_FTL_RLC_RESUME_USE_SAVED_INFO") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_CLEAR_INFO, "WP_FTL_RLC_RESUME_CLEAR_INFO") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_CHANGE_JB, "WP_FTL_RLC_RESUME_CHANGE_JB") ;
   RegisterWaypoint(WP_FTL_RLC_RESUME_SAVE_CS, "WP_FTL_RLC_RESUME_SAVE_CS") ;

   RegisterWaypoint(WP_FTL_RLC_START_BRLC, "WP_FTL_RLC_START_BRLC") ;
   RegisterWaypoint(WP_FTL_RLC_ALLOC_BRLC_BLOCK, "WP_FTL_RLC_ALLOC_BRLC_BLOCK") ;
   RegisterWaypoint(WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE, "WP_FTL_RLC_ALLOC_BRLC_BLOCK_FAILURE") ;
   RegisterWaypoint(WP_FTL_RLC_END_BRLC, "WP_FTL_RLC_END_BRLC") ;
   RegisterWaypoint(WP_FTL_RLC_SCAN_COMPLETE, "WP_FTL_RLC_SCAN_COMPLETE") ;


   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_FMU_INC, "WP_FTL_OBM_JUMBO_BLOCK_FMU_INC") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED, "WP_FTL_OBM_JUMBO_BLOCK_LOGICALLY_CLOSED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_CLOSED, "WP_FTL_OBM_JUMBO_BLOCK_CLOSED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_SET") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEARED") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_LRM_CLEAR_FAIL") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_WL, "WP_FTL_OBM_JUMBO_BLOCK_WL") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD, "WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_UGSD") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD, "WP_FTL_OBM_JUMBO_BLOCK_SET_OPEN_BLOCK_GSD") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK, "WP_FTL_OBM_JUMBO_BLOCK_ALLOC_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_FTL_OBM_JUMBO_BLOCK_REUSE, "WP_FTL_OBM_JUMBO_BLOCK_REUSE") ;
   RegisterWaypoint(WP_FTL_OBM_ALLOC_BLOCK, "WP_FTL_OBM_ALLOC_BLOCK") ;
   RegisterWaypoint(WP_FTL_OBM_ALLOC_BLOCK_FINISHED, "WP_FTL_OBM_ALLOC_BLOCK_FINISHED") ;


   RegisterWaypoint(WP_FTL_RLA_REGISTER_OVERLAP, "WP_FTL_RLA_REGISTER_OVERLAP") ;
   RegisterWaypoint(WP_FTL_RLA_INIT, "WP_FTL_RLA_INIT") ;
   RegisterWaypoint(WP_FTL_RLA_ABORT_ALL, "WP_FTL_RLA_ABORT_ALL") ;
   RegisterWaypoint(WP_FTL_RLA_READ_RACE, "WP_FTL_RLA_READ_RACE") ;
   RegisterWaypoint(WP_FTL_RLA_RELEASE_STREAM, "WP_FTL_RLA_RELEASE_STREAM") ;
   RegisterWaypoint(WP_FTL_RLA_TRANSLATION_FAILURE, "WP_FTL_RLA_TRANSLATION_FAILURE") ;
   RegisterWaypoint(WP_FTL_RLA_COMPLEMENTARY_READ, "WP_FTL_RLA_COMPLEMENTARY_READ") ;
   RegisterWaypoint(WP_FTL_RLA_CHECK_AND_READ_ALL, "WP_FTL_RLA_CHECK_AND_READ_ALL") ;
   RegisterWaypoint(WP_FTL_RLA_READ_OVERLAP_FROM_FE, "WP_FTL_RLA_READ_OVERLAP_FROM_FE") ;
   RegisterWaypoint(WP_FTL_RLA_READ_AHEAD_EVENT, "WP_FTL_RLA_READ_AHEAD_EVENT") ;
   RegisterWaypoint(WP_FTL_RLA_TRANSLATE_TRAP, "WP_FTL_RLA_TRANSLATE_TRAP") ;
   RegisterWaypoint(WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED, "WP_FTL_RLA_PS_COMPL_CONTEXT_CALLED") ;
   RegisterWaypoint(WP_FTL_RLA_BUFF_IN_PS_NOT_FREED, "WP_FTL_RLA_BUFF_IN_PS_NOT_FREED") ;
   RegisterWaypoint(WP_FTL_RLA_ASYNC_TRANSFER_DONE, "WP_FTL_RLA_ASYNC_TRANSFER_DONE") ;
   RegisterWaypoint(WP_FTL_RLA_ALLOCATE_STREAM, "WP_FTL_RLA_ALLOCATE_STREAM") ;
   RegisterWaypoint(WP_FTL_RLA_ALLOCATE_BUFFERS, "WP_FTL_RLA_ALLOCATE_BUFFERS") ;
   RegisterWaypoint(WP_FTL_RLA_SEND_HIM_RESPONSE, "WP_FTL_RLA_SEND_HIM_RESPONSE") ;
   RegisterWaypoint(WP_FTL_RLA_RESTART, "WP_FTL_RLA_RESTART") ;
   RegisterWaypoint(WP_FTL_RLA_BL_ALLOC_SUCCESS, "WP_FTL_RLA_BL_ALLOC_SUCCESS") ;
   RegisterWaypoint(WP_FTL_RLA_BL_START_INT, "WP_FTL_RLA_BL_START_INT") ;
   RegisterWaypoint(WP_FTL_RLA_READ_ERROR_HANDLING, "WP_FTL_RLA_READ_ERROR_HANDLING") ;
   RegisterWaypoint(WP_FTL_RLA_ENQUEUE_HOST_CMD, "WP_FTL_RLA_ENQUEUE_HOST_CMD") ;
   RegisterWaypoint(WP_FTL_PRM_COMPLEMENTARY_READ, "WP_FTL_PRM_COMPLEMENTARY_READ") ;
   RegisterWaypoint(WP_FTL_PRM_STREAM_LRU_UPDATE, "WP_FTL_PRM_STREAM_LRU_UPDATE") ;
   RegisterWaypoint(WP_FTL_PRM_SSE_ADD, "WP_FTL_PRM_SSE_ADD") ;
   RegisterWaypoint(WP_FTL_PRM_SSE_REMOVE, "WP_FTL_PRM_SSE_REMOVE") ;
   RegisterWaypoint(WP_FTL_PRM_SSE_REMOVE_ALL, "WP_FTL_PRM_SSE_REMOVE_ALL") ;
   RegisterWaypoint(WP_FTL_PRM_READ_FROM_PRM_BUFFER, "WP_FTL_PRM_READ_FROM_PRM_BUFFER") ;
   RegisterWaypoint(WP_FTL_PRM_READ_SEND_TO_PS, "WP_FTL_PRM_READ_SEND_TO_PS") ;




   RegisterWaypoint(WP_FTL_HPM_PREDICT_READ_AHEAD, "WP_FTL_HPM_PREDICT_READ_AHEAD") ;
   RegisterWaypoint(WP_FTL_HPM_DETECT_OVERLAP_WITH_HPM_PREDICTION, "WP_FTL_HPM_DETECT_OVERLAP_WITH_HPM_PREDICTION") ;

   RegisterWaypoint(WP_FTL_HPM_HASH_UPDATE, "WP_FTL_HPM_HASH_UPDATE") ;
   RegisterWaypoint(WP_FTL_HPM_PREDICTION, "WP_FTL_HPM_PREDICTION") ;


   RegisterWaypoint(WP_FTL_QS_ABORT_WRITE, "WP_FTL_QS_ABORT_WRITE") ;


   RegisterWaypoint(WP_FTL_DALOC_PROCESS_ENTRY, "WP_FTL_DALOC_PROCESS_ENTRY") ;


   RegisterWaypoint(WP_FTL_DHM_SEND_MAX_PEC_TO_PS, "WP_FTL_DHM_SEND_MAX_PEC_TO_PS") ;


   RegisterWaypoint(WP_FTL_FNVM_HOST_CMD_PARAM, "WP_FTL_FNVM_HOST_CMD_PARAM") ;
   RegisterWaypoint(WP_FNVM_WINFW_TEST, "WP_FNVM_WINFW_TEST") ;


   RegisterWaypoint(WP_FTL_XOR_BARRIER_DONE, "WP_FTL_XOR_BARRIER_DONE") ;
   RegisterWaypoint(WP_FTL_XOR_STORE_PARITY_REQ, "WP_FTL_XOR_STORE_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_LOAD_PARITY_REQ, "WP_FTL_XOR_LOAD_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_REBUILD_PARITY_REQ, "WP_FTL_XOR_REBUILD_PARITY_REQ") ;
   RegisterWaypoint(WP_FTL_XOR_REBUILD_PARITY_COMPLETE, "WP_FTL_XOR_REBUILD_PARITY_COMPLETE") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_START, "WP_FTL_XOR_COMPACTION_START") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_JWL0_WRITE, "WP_FTL_XOR_COMPACTION_JWL0_WRITE") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_END, "WP_FTL_XOR_COMPACTION_END") ;
   RegisterWaypoint(WP_FTL_XOR_JB_VBA, "WP_FTL_XOR_JB_VBA") ;
   RegisterWaypoint(WP_FTL_XOR_PARITY_LOC, "WP_FTL_XOR_PARITY_LOC") ;
   RegisterWaypoint(WP_FTL_XOR_STORE_HMB_RESULT, "WP_FTL_XOR_STORE_HMB_RESULT") ;
   RegisterWaypoint(WP_FTL_XOR_LOAD_HMB_RESULT, "WP_FTL_XOR_LOAD_HMB_RESULT") ;
   RegisterWaypoint(WP_FTL_XOR_ZONE_END_REQ, "WP_FTL_XOR_ZONE_END_REQ") ;
   RegisterWaypoint(WP_FTL_XORM_STATE_CHANGE, "WP_FTL_XORM_STATE_CHANGE") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_NOT_NEEDED, "WP_FTL_XOR_COMPACTION_NOT_NEEDED") ;
   RegisterWaypoint(WP_FTL_XOR_COMPACTION_FINISHED, "WP_FTL_XOR_COMPACTION_FINISHED") ;
   RegisterWaypoint(WP_FTL_XORMDR_STATE_CHANGE, "WP_FTL_XORMDR_STATE_CHANGE") ;
   RegisterWaypoint(WP_FTL_XOR_XBID_SWITCH_MODE, "WP_FTL_XOR_XBID_SWITCH_MODE") ;
   RegisterWaypoint(WP_FTL_XOR_SWAP_ONLY_MODE, "WP_FTL_XOR_SWAP_ONLY_MODE") ;


   RegisterWaypoint(WP_FTL_READONLY_TRIGGER, "WP_FTL_READONLY_TRIGGER") ;
   RegisterWaypoint(WP_FTL_READONLY_HANDLER_START, "WP_FTL_READONLY_HANDLER_START") ;
   RegisterWaypoint(WP_FTL_READONLY_HANDLER_COMPLETED, "WP_FTL_READONLY_HANDLER_COMPLETED") ;


   RegisterWaypoint(WP_FTL_RS_SEND_ACTIVE_RS_REQ, "WP_FTL_RS_SEND_ACTIVE_RS_REQ") ;
   RegisterWaypoint(WP_FTL_RS_SET_NEW_SCANNED_BLOCK, "WP_FTL_RS_SET_NEW_SCANNED_BLOCK") ;
   RegisterWaypoint(WP_FTL_RS_SCAN_NEXT_JWL, "WP_FTL_RS_SCAN_NEXT_JWL") ;
   RegisterWaypoint(WP_FTL_RS_FINISHED_ENTIRE_SCAN, "WP_FTL_RS_FINISHED_ENTIRE_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_SCAN_TOO_LONG, "WP_FTL_RS_SCAN_TOO_LONG") ;
   RegisterWaypoint(WP_FTL_RS_PROCESS_SCAN, "WP_FTL_RS_PROCESS_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_MODE_SET, "WP_FTL_RS_MODE_SET") ;
   RegisterWaypoint(WP_FTL_RS_ENABLE_FG_SCAN, "WP_FTL_RS_ENABLE_FG_SCAN") ;
   RegisterWaypoint(WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE, "WP_FTL_RS_SCANNED_BLOCK_CHANGED_STATE") ;
   RegisterWaypoint(WP_FTL_RS_READONLY_DISABLE_RS, "WP_FTL_RS_READONLY_DISABLE_RS") ;


   RegisterWaypoint(WP_FTL_RSQ_NEW_RLC_REQ, "WP_FTL_RSQ_NEW_RLC_REQ") ;
   RegisterWaypoint(WP_FTL_RSQ_RLC_REQ_REMOVED, "WP_FTL_RSQ_RLC_REQ_REMOVED") ;
   RegisterWaypoint(WP_FTL_RSQ_LRM, "WP_FTL_RSQ_LRM") ;
   RegisterWaypoint(WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS, "WP_FTL_RSQ_DISCARD_PENDING_REQS_ON_PWS") ;


   RegisterWaypoint(WP_FTL_SHD_START_SHUTDOWN, "WP_FTL_SHD_START_SHUTDOWN") ;
   RegisterWaypoint(WP_FTL_SHD_STATE_SHD_COMPLETE, "WP_FTL_SHD_STATE_SHD_COMPLETE") ;
   RegisterWaypoint(WP_FTL_SHD_COUNT_INC, "WP_FTL_SHD_COUNT_INC") ;


   RegisterWaypoint(WP_FTL_PWS_DPS3_NOT_SUPPORTED, "WP_FTL_PWS_DPS3_NOT_SUPPORTED") ;


   RegisterWaypoint(WP_SAT_BF_UPDATE, "WP_SAT_BF_UPDATE") ;
   RegisterWaypoint(WP_ULAYER_TRANSLATE_BF_FOUND, "WP_ULAYER_TRANSLATE_BF_FOUND") ;
   RegisterWaypoint(WP_ULAYER_TRANSLATE_FOUND, "WP_ULAYER_TRANSLATE_FOUND") ;
   RegisterWaypoint(WP_ULAYER_TRANSLATE_NOT_FOUND, "WP_ULAYER_TRANSLATE_NOT_FOUND") ;


   RegisterWaypoint(WP_FTL_HSLC_PAUSE, "WP_FTL_HSLC_PAUSE") ;
   RegisterWaypoint(WP_FTL_HSLC_RESUME, "WP_FTL_HSLC_RESUME") ;
   RegisterWaypoint(WP_FTL_HSLC_DISABLE, "WP_FTL_HSLC_DISABLE") ;
   RegisterWaypoint(WP_FTL_HSLC_ENABLE, "WP_FTL_HSLC_ENABLE") ;
   RegisterWaypoint(WP_FTL_HSLC_ALLOWED_WHEN_HOST_MORE_TBW, "WP_FTL_HSLC_ALLOWED_WHEN_HOST_MORE_TBW") ;
   RegisterWaypoint(WP_FTL_HSLC_ENABLE_BY_HOST, "WP_FTL_HSLC_ENABLE_BY_HOST") ;





   RegisterWaypoint(WP_PS_UT_FIRST_MOUNT_START, "WP_PS_UT_FIRST_MOUNT_START") ;
   RegisterWaypoint(WP_PS_UT_ENTER_SLC_EWR, "WP_PS_UT_ENTER_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_SLC_EWR, "WP_PS_UT_EXIT_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_INFRA_SLC_EWR, "WP_PS_UT_ENTER_INFRA_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_INFRA_SLC_EWR, "WP_PS_UT_EXIT_INFRA_SLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_TLC_EWR, "WP_PS_UT_ENTER_TLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_EXIT_TLC_EWR, "WP_PS_UT_EXIT_TLC_EWR") ;
   RegisterWaypoint(WP_PS_UT_ENTER_RESET, "WP_PS_UT_ENTER_RESET") ;
   RegisterWaypoint(WP_PS_UT_EXIT_RESET, "WP_PS_UT_EXIT_RESET") ;
   RegisterWaypoint(WP_PS_UT_ENTER_SWAP, "WP_PS_UT_ENTER_SWAP") ;


   RegisterWaypoint(WP_PS_HEALTH_UPDATE_PEC, "WP_PS_HEALTH_UPDATE_PEC") ;


   RegisterWaypoint(WP_PS_CVD_MB_CLOSURE, "WP_PS_CVD_MB_CLOSURE") ;
   RegisterWaypoint(WP_PS_CVD_BER_LATT, "WP_PS_CVD_BER_LATT") ;
   RegisterWaypoint(WP_PS_CVD_BER_DEF, "WP_PS_CVD_BER_DEF") ;
   RegisterWaypoint(WP_PS_CVD_BER_COMP, "WP_PS_CVD_BER_COMP") ;
   RegisterWaypoint(WP_PS_CVD_BER_OPT, "WP_PS_CVD_BER_OPT") ;
   RegisterWaypoint(WP_PS_CVD_BES5, "WP_PS_CVD_BES5") ;
   RegisterWaypoint(WP_PS_CVD_BES7, "WP_PS_CVD_BES7") ;
   RegisterWaypoint(WP_PS_CVD_MB_ASSIGN, "WP_PS_CVD_MB_ASSIGN") ;
   RegisterWaypoint(WP_PS_CVD_ALLOCATE_NEW, "WP_PS_CVD_ALLOCATE_NEW") ;
   RegisterWaypoint(WP_PS_CVD_MB_UNASSIGN, "WP_PS_CVD_MB_UNASSIGN") ;
   RegisterWaypoint(WP_PS_CVD_PTTU_START, "WP_PS_CVD_PTTU_START") ;
   RegisterWaypoint(WP_PS_CVD_PTTU_END, "WP_PS_CVD_PTTU_END") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAMS, "WP_PS_CVD_READ_PARAMS") ;
   RegisterWaypoint(WP_PS_BER_READ_PARAMS_WL0_COMP, "WP_PS_BER_READ_PARAMS_WL0_COMP") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAMS_TABLES, "WP_PS_CVD_READ_PARAMS_TABLES") ;
   RegisterWaypoint(WP_PS_CVD_READ_PARAM_TT, "WP_PS_CVD_READ_PARAM_TT") ;
   RegisterWaypoint(WP_PS_CVD_MB_RELEASE, "WP_PS_CVD_MB_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_MB_CACHE_RELEASE, "WP_PS_CVD_MB_CACHE_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_CACHE_ENTRY_RELEASE, "WP_PS_CVD_CACHE_ENTRY_RELEASE") ;
   RegisterWaypoint(WP_PS_CVD_ADD_TO_CACHE, "WP_PS_CVD_ADD_TO_CACHE") ;
   RegisterWaypoint(WP_PS_CVD_CACHE_ENTRY_HEAD, "WP_PS_CVD_CACHE_ENTRY_HEAD") ;
   RegisterWaypoint(WP_PS_CVD_BER_SEND, "WP_PS_CVD_BER_SEND") ;
   RegisterWaypoint(WP_PS_CVD_BER_SEND_WITHOUT_THR, "WP_PS_CVD_BER_SEND_WITHOUT_THR") ;
   RegisterWaypoint(WP_PS_CVD_BES_SEND, "WP_PS_CVD_BES_SEND") ;
   RegisterWaypoint(WP_PS_CVD_BES_RES, "WP_PS_CVD_BES_RES") ;
   RegisterWaypoint(WP_PS_CVD_BES_RLC, "WP_PS_CVD_BES_RLC") ;
   RegisterWaypoint(WP_PS_CVD_BER_OPT_RLC, "WP_PS_CVD_BER_OPT_RLC") ;
   RegisterWaypoint(WP_PS_CVD_TT_ALLOC, "WP_PS_CVD_TT_ALLOC") ;
   RegisterWaypoint(WP_PS_CVD_DEALLOCATE, "WP_PS_CVD_DEALLOCATE") ;
   RegisterWaypoint(WP_PS_CVD_TTU_START, "WP_PS_CVD_TTU_START") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BER_VER0, "WP_PS_CVD_TTU_BER_VER0") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES_START, "WP_PS_CVD_TTU_BES_START") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES5, "WP_PS_CVD_TTU_BES5") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BES7, "WP_PS_CVD_TTU_BES7") ;
   RegisterWaypoint(WP_PS_CVD_TTU_BER_OPT, "WP_PS_CVD_TTU_BER_OPT") ;
   RegisterWaypoint(WP_PS_CVD_TTU_RLC_VERS, "WP_PS_CVD_TTU_RLC_VERS") ;
   RegisterWaypoint(WP_PS_CVD_TTU_RLC_VER0, "WP_PS_CVD_TTU_RLC_VER0") ;
   RegisterWaypoint(WP_PS_CVD_MB_TTU_UPDATED, "WP_PS_CVD_MB_TTU_UPDATED") ;
   RegisterWaypoint(WP_PS_CVD_XTEMP_ALL_LATT_INVALIDATION, "WP_PS_CVD_XTEMP_ALL_LATT_INVALIDATION") ;
   RegisterWaypoint(WP_PS_CVD_TICK_CNT, "WP_PS_CVD_TICK_CNT") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_START, "WP_PS_CVD_COMPACTION_START") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_TT1, "WP_PS_CVD_COMPACTION_TT1") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_TT2, "WP_PS_CVD_COMPACTION_TT2") ;
   RegisterWaypoint(WP_PS_CVD_COMPACTION_END, "WP_PS_CVD_COMPACTION_END") ;
   RegisterWaypoint(WP_PS_CVD_DRD_BER, "WP_PS_CVD_DRD_BER") ;
   RegisterWaypoint(WP_PS_CVD_DRI, "WP_PS_CVD_DRI") ;
   RegisterWaypoint(WP_PS_CVD_ADD_TASK, "WP_PS_CVD_ADD_TASK") ;
   RegisterWaypoint(WP_PS_CVD_ACTIVATE_TASK, "WP_PS_CVD_ACTIVATE_TASK") ;
   RegisterWaypoint(WP_PS_CVD_COMPLETE_TASK, "WP_PS_CVD_COMPLETE_TASK") ;
   RegisterWaypoint(WP_PS_CVD_BARRIER_STATE, "WP_PS_CVD_BARRIER_STATE") ;
   RegisterWaypoint(WP_PS_CVD_INVALIDATE_LATT, "WP_PS_CVD_INVALIDATE_LATT") ;
   RegisterWaypoint(WP_PS_CVD_MORPH_SECT_UPDATE, "WP_PS_CVD_MORPH_SECT_UPDATE") ;
   RegisterWaypoint(WP_PS_CVD_IS_HBER, "WP_PS_CVD_IS_HBER") ;
   RegisterWaypoint(WP_PS_CVD_SET_BKOPS, "WP_PS_CVD_SET_BKOPS") ;
   RegisterWaypoint(WP_PS_CVD_PERIODIC_EVENT_NOTIFY, "WP_PS_CVD_PERIODIC_EVENT_NOTIFY") ;
   RegisterWaypoint(WP_PS_CVD_TCO_CMD33, "WP_PS_CVD_TCO_CMD33") ;
   RegisterWaypoint(WP_PS_CVD_APPLY_WL_COMP, "WP_PS_CVD_APPLY_WL_COMP") ;
   RegisterWaypoint(WP_PS_CVD_REH_BES_LA_CMD26, "WP_PS_CVD_REH_BES_LA_CMD26") ;
   RegisterWaypoint(WP_PS_CVD_APPLY_WL_DECOMPENSATION, "WP_PS_CVD_APPLY_WL_DECOMPENSATION") ;


   RegisterWaypoint(WP_PS_RFM_STATE_CHANGE, "WP_PS_RFM_STATE_CHANGE") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_OP_DISPATCH, "WP_PS_RFM_REFRESH_OP_DISPATCH") ;
   RegisterWaypoint(WP_PS_RFM_ISOLATE_OP_DISPATCH, "WP_PS_RFM_ISOLATE_OP_DISPATCH") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_OP_COMPLETE, "WP_PS_RFM_REFRESH_OP_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_ISOLATE_OP_COMPLETE, "WP_PS_RFM_ISOLATE_OP_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_INIT_COMPLETE, "WP_PS_RFM_INIT_COMPLETE") ;
   RegisterWaypoint(WP_PS_RFM_REFRESH_TRIGGER, "WP_PS_RFM_REFRESH_TRIGGER") ;


   RegisterWaypoint(WP_PS_RS_RANDOM_SCAN_START, "WP_PS_RS_RANDOM_SCAN_START") ;
   RegisterWaypoint(WP_PS_RS_RANDOM_SCAN_END, "WP_PS_RS_RANDOM_SCAN_END") ;
   RegisterWaypoint(WP_PS_RS_ACTIVE_SCAN_START, "WP_PS_RS_ACTIVE_SCAN_START") ;
   RegisterWaypoint(WP_PS_RS_ACTIVE_SCAN_END, "WP_PS_RS_ACTIVE_SCAN_END") ;
   RegisterWaypoint(WP_PS_RS_HIGH_BER_EVENT, "WP_PS_RS_HIGH_BER_EVENT") ;
   RegisterWaypoint(WP_PS_RS_BLOCK_SENT_TO_RLC, "WP_PS_RS_BLOCK_SENT_TO_RLC") ;
   RegisterWaypoint(WP_PS_RS_ADD_BLOCK_TO_RSCQ, "WP_PS_RS_ADD_BLOCK_TO_RSCQ") ;
   RegisterWaypoint(WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ, "WP_PS_RS_REMOVE_BLOCK_FROM_RSCQ") ;
   RegisterWaypoint(WP_PS_RS_PROCESS_BLOCK_FROM_REH, "WP_PS_RS_PROCESS_BLOCK_FROM_REH") ;
   RegisterWaypoint(WP_PS_RS_READ_BER_REQUEST, "WP_PS_RS_READ_BER_REQUEST") ;
   RegisterWaypoint(WP_PS_RS_READ_BER_RESPONSE, "WP_PS_RS_READ_BER_RESPONSE") ;
   RegisterWaypoint(WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID, "WP_PS_RS_SKIP_SCAN_BLK_NOT_VALID") ;
   RegisterWaypoint(WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST, "WP_PS_RS_ATTEMPT_ADD_TO_RSCQ_LIST") ;
   RegisterWaypoint(WP_PS_RS_COUNTERS, "WP_PS_RS_COUNTERS") ;
   RegisterWaypoint(WP_PS_RS_STORED_TO_LOG, "WP_PS_RS_STORED_TO_LOG") ;
   RegisterWaypoint(WP_PS_RS_RESTORED, "WP_PS_RS_RESTORED") ;
   RegisterWaypoint(WP_PS_RS_BLOCK_ADD_RLC_HIST, "WP_PS_RS_BLOCK_ADD_RLC_HIST") ;


   RegisterWaypoint(WP_PS_REH_START, "WP_PS_REH_START") ;
   RegisterWaypoint(WP_PS_REH_REREAD_WITH_CF, "WP_PS_REH_REREAD_WITH_CF") ;
   RegisterWaypoint(WP_PS_REH_BES5, "WP_PS_REH_BES5") ;
   RegisterWaypoint(WP_PS_REH_BES7, "WP_PS_REH_BES7") ;
   RegisterWaypoint(WP_PS_REH_SB0, "WP_PS_REH_SB0") ;
   RegisterWaypoint(WP_PS_REH_SB1, "WP_PS_REH_SB1") ;
   RegisterWaypoint(WP_PS_REH_SB2, "WP_PS_REH_SB2") ;
   RegisterWaypoint(WP_PS_REH_SB2_DLA, "WP_PS_REH_SB2_DLA") ;
   RegisterWaypoint(WP_PS_REH_XOR_START, "WP_PS_REH_XOR_START") ;
   RegisterWaypoint(WP_PS_REH_XOR_PAUSE, "WP_PS_REH_XOR_PAUSE") ;
   RegisterWaypoint(WP_PS_REH_RESULT, "WP_PS_REH_RESULT") ;
   RegisterWaypoint(WP_PS_REH_LDPC_ISR, "WP_PS_REH_LDPC_ISR") ;
   RegisterWaypoint(WP_PS_REH_NO_FIRST_REREAD, "WP_PS_REH_NO_FIRST_REREAD") ;
   RegisterWaypoint(WP_PS_REH_MARK_UECC, "WP_PS_REH_MARK_UECC") ;
   RegisterWaypoint(WP_PS_REH_INDICATE_HEADER_BIT_SET, "WP_PS_REH_INDICATE_HEADER_BIT_SET") ;
   RegisterWaypoint(WP_PS_REH_FMU_MARK_UECC, "WP_PS_REH_FMU_MARK_UECC") ;
   RegisterWaypoint(WP_PS_REH_NON_CACHE_MODE, "WP_PS_REH_NON_CACHE_MODE") ;
   RegisterWaypoint(WP_PS_REH_READ_FAIL_SHIFTS, "WP_PS_REH_READ_FAIL_SHIFTS") ;
   RegisterWaypoint(WP_PS_REH_READ_RETRY_SHIFTS, "WP_PS_REH_READ_RETRY_SHIFTS") ;
   RegisterWaypoint(WP_PS_REH_SBR_CMD_C2, "WP_PS_REH_SBR_CMD_C2") ;
   RegisterWaypoint(WP_REH_CVD_DUMP_TRIGGER, "WP_REH_CVD_DUMP_TRIGGER") ;
   RegisterWaypoint(WP_PS_REH_DMC_RES, "WP_PS_REH_DMC_RES") ;
   RegisterWaypoint(WP_PS_REH_ECC_DUMP_TRIGGER, "WP_PS_REH_ECC_DUMP_TRIGGER") ;

   RegisterWaypoint(WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0, "WP_PS_PF_01_TLC_FAIL_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1, "WP_PS_PF_02_TLC_FAIL_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES, "WP_PS_PF_03_TLC_FAIL_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0, "WP_PS_PF_04_TLC_FAIL_LWLN_1_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1, "WP_PS_PF_05_TLC_FAIL_LWLN_1_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES, "WP_PS_PF_06_TLC_FAIL_LWLN_1_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0, "WP_PS_PF_07_SLC_FAIL_LWLN_1_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1, "WP_PS_PF_08_SLC_FAIL_LWLN_1_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES, "WP_PS_PF_09_SLC_FAIL_LWLN_1_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0, "WP_PS_PF_10_SLC_FAIL_CM15_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1, "WP_PS_PF_11_SLC_FAIL_CM15_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES, "WP_PS_PF_12_SLC_FAIL_CM15_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0, "WP_PS_PF_13_SLC_FAIL_CM10_LWLN_PLANE_0") ;
   RegisterWaypoint(WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1, "WP_PS_PF_14_SLC_FAIL_CM10_LWLN_PLANE_1") ;
   RegisterWaypoint(WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES, "WP_PS_PF_15_SLC_FAIL_CM10_LWLN_ALL_PLANES") ;
   RegisterWaypoint(WP_PS_PF_16_UECC_COPY_READ, "WP_PS_PF_16_UECC_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_17_XOR_FAIL_COPY_READ, "WP_PS_PF_17_XOR_FAIL_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_18_XOR_DONE_COPY_READ, "WP_PS_PF_18_XOR_DONE_COPY_READ") ;
   RegisterWaypoint(WP_PS_PF_19_NESTED, "WP_PS_PF_19_NESTED") ;
   RegisterWaypoint(WP_PS_PF_20_INDICATE_GBB_AND_RELINK, "WP_PS_PF_20_INDICATE_GBB_AND_RELINK") ;
   RegisterWaypoint(WP_PS_PF_23_CHECK_STATUS, "WP_PS_PF_23_CHECK_STATUS") ;
   RegisterWaypoint(WP_PS_PF_24_COPY_SOURCE_BLK_INFO, "WP_PS_PF_24_COPY_SOURCE_BLK_INFO") ;
   RegisterWaypoint(WP_PS_PF_25_COPY_DESTINATION_BLK_INFO, "WP_PS_PF_25_COPY_DESTINATION_BLK_INFO") ;

   RegisterWaypoint(WP_PS_EF_01_START, "WP_PS_EF_01_START") ;
   RegisterWaypoint(WP_PS_EF_02_CHECK_STATUS, "WP_PS_EF_02_CHECK_STATUS") ;
   RegisterWaypoint(WP_PS_EF_03_SET_FAILED_PLANE, "WP_PS_EF_03_SET_FAILED_PLANE") ;
   RegisterWaypoint(WP_PS_EF_04_RESET_DIE, "WP_PS_EF_04_RESET_DIE") ;
   RegisterWaypoint(WP_PS_EF_05_RELINK_BLOCK, "WP_PS_EF_05_RELINK_BLOCK") ;
   RegisterWaypoint(WP_PS_EF_06_ERASE_BLOCK, "WP_PS_EF_06_ERASE_BLOCK") ;
   RegisterWaypoint(WP_PS_EF_07_UPDATE_GBBT, "WP_PS_EF_07_UPDATE_GBBT") ;
   RegisterWaypoint(WP_PS_EF_08_CLEANUP, "WP_PS_EF_08_CLEANUP") ;
   RegisterWaypoint(WP_PS_EF_09_NESTED_ERASE, "WP_PS_EF_09_NESTED_ERASE") ;


   RegisterWaypoint(WP_PS_EPWR_BER_COMPLETE, "WP_PS_EPWR_BER_COMPLETE") ;
   RegisterWaypoint(WP_PS_EPWR_BES_COMPLETE, "WP_PS_EPWR_BES_COMPLETE") ;
   RegisterWaypoint(WP_PS_EPWR_RELOCATION, "WP_PS_EPWR_RELOCATION") ;
   RegisterWaypoint(WP_PS_EPWR_RELINK_FAILURE, "WP_PS_EPWR_RELINK_FAILURE") ;
   RegisterWaypoint(WP_PS_EPWR_ADD_TO_GBB_LIST, "WP_PS_EPWR_ADD_TO_GBB_LIST") ;
   RegisterWaypoint(WP_PS_EPWR_FMU_TO_DO, "WP_PS_EPWR_FMU_TO_DO") ;
   RegisterWaypoint(WP_PS_EPWR_BER_REQ, "WP_PS_EPWR_BER_REQ") ;


   RegisterWaypoint(WP_PS_DGM_ADDR_BEFORE_SUSPEND, "WP_PS_DGM_ADDR_BEFORE_SUSPEND") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_BY_PROG_OR_READ, "WP_PS_DGM_SUSPEND_BY_PROG_OR_READ") ;
   RegisterWaypoint(WP_PS_DGM_ADDR_AFTER_SUSPEND, "WP_PS_DGM_ADDR_AFTER_SUSPEND") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_DISABLE_ON_PEC, "WP_PS_DGM_FAST_READ_DISABLE_ON_PEC") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_DISABLE_ON_UECC, "WP_PS_DGM_FAST_READ_DISABLE_ON_UECC") ;
   RegisterWaypoint(WP_PS_DGM_ISOLATE_LATCH, "WP_PS_DGM_ISOLATE_LATCH") ;
   RegisterWaypoint(WP_PS_DGM_FAST_READ_CMD, "WP_PS_DGM_FAST_READ_CMD") ;
   RegisterWaypoint(WP_PS_DGM_FTL_BWL_READ, "WP_PS_DGM_FTL_BWL_READ") ;
   RegisterWaypoint(WP_PS_DGM_INFRA_BWL_READ, "WP_PS_DGM_INFRA_BWL_READ") ;

   RegisterWaypoint(WP_PS_DGM_PHYSICAL_READ, "WP_PS_DGM_PHYSICAL_READ") ;
   RegisterWaypoint(WP_PS_DGM_FIRST_READ, "WP_PS_DGM_FIRST_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ, "WP_PS_DGM_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ_SHIFT, "WP_PS_DGM_READ_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_BES, "WP_PS_DGM_BES") ;
   RegisterWaypoint(WP_PS_DGM_BES_CALC_NEW_SHIFT, "WP_PS_DGM_BES_CALC_NEW_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_BES_NEW_SHIFTS, "WP_PS_DGM_BES_NEW_SHIFTS") ;
   RegisterWaypoint(WP_PS_DGM_BES_TEST_READ_CMD, "WP_PS_DGM_BES_TEST_READ_CMD") ;
   RegisterWaypoint(WP_PS_DGM_CHANGE_C6_PREREAD, "WP_PS_DGM_CHANGE_C6_PREREAD") ;

   RegisterWaypoint(WP_PS_DGM_AIPR_SET_FEATURE, "WP_PS_DGM_AIPR_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_DGM_BER_SHIFT, "WP_PS_DGM_BER_SHIFT") ;
   RegisterWaypoint(WP_PS_DGM_CACHE_READ, "WP_PS_DGM_CACHE_READ") ;
   RegisterWaypoint(WP_PS_DGM_CACHE_READ_END, "WP_PS_DGM_CACHE_READ_END") ;
   RegisterWaypoint(WP_PS_DGM_CACHE_WRITE, "WP_PS_DGM_CACHE_WRITE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE, "WP_PS_DGM_SUSPEND_ERASE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE_STATE, "WP_PS_DGM_SUSPEND_ERASE_STATE") ;
   RegisterWaypoint(WP_PS_DGM_SUSPEND_ERASE_READ, "WP_PS_DGM_SUSPEND_ERASE_READ") ;
   RegisterWaypoint(WP_PS_DGM_READ_TRANSFER, "WP_PS_DGM_READ_TRANSFER") ;
   RegisterWaypoint(WP_PS_DGM_READ_SENSE, "WP_PS_DGM_READ_SENSE") ;

   RegisterWaypoint(WP_PS_VALIDATE_CMD_FF, "WP_PS_VALIDATE_CMD_FF") ;
   RegisterWaypoint(WP_PS_VALIDATE_CMD_FB, "WP_PS_VALIDATE_CMD_FB") ;


   RegisterWaypoint(WP_PS_FLGP_MARK_START, "WP_PS_FLGP_MARK_START") ;
   RegisterWaypoint(WP_PS_FLGP_FTL_MSG, "WP_PS_FLGP_FTL_MSG") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_NER, "WP_PS_FLGP_FOUND_NER") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_LMW, "WP_PS_FLGP_FOUND_LMW") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_LGW, "WP_PS_FLGP_FOUND_LGW") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_TER, "WP_PS_FLGP_FOUND_TER") ;
   RegisterWaypoint(WP_PS_FLGP_FOUND_FER, "WP_PS_FLGP_FOUND_FER") ;
   RegisterWaypoint(WP_PS_FLGP_NER_BINARY_DMC_RESULT, "WP_PS_FLGP_NER_BINARY_DMC_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_LGW_BACKWARD_BER_RESULT, "WP_PS_FLGP_LGW_BACKWARD_BER_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_TER_FORWARD_DMC_RESULT, "WP_PS_FLGP_TER_FORWARD_DMC_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_SEND_FTL_FINAL_RESULTS, "WP_PS_FLGP_SEND_FTL_FINAL_RESULTS") ;
   RegisterWaypoint(WP_PS_FLGP_MORPHEUS_PARAM, "WP_PS_FLGP_MORPHEUS_PARAM") ;
   RegisterWaypoint(WP_PS_FLGP_TED_ZONE_IDX, "WP_PS_FLGP_TED_ZONE_IDX") ;
   RegisterWaypoint(WP_PS_FLGP_EPWR_WL_FOUND, "WP_PS_FLGP_EPWR_WL_FOUND") ;
   RegisterWaypoint(WP_PS_FLGP_NER_DMC_THRESHOLDS, "WP_PS_FLGP_NER_DMC_THRESHOLDS") ;
   RegisterWaypoint(WP_PS_FLGP_TER_DMC_THRESHOLDS, "WP_PS_FLGP_TER_DMC_THRESHOLDS") ;
   RegisterWaypoint(WP_PS_FLGP_LGW_BER_THRESHOLDS, "WP_PS_FLGP_LGW_BER_THRESHOLDS") ;
   RegisterWaypoint(WP_PS_FLGP_READ_BER_REQUEST, "WP_PS_FLGP_READ_BER_REQUEST") ;
   RegisterWaypoint(WP_PS_FLGP_READ_BER_RESPONSE, "WP_PS_FLGP_READ_BER_RESPONSE") ;
   RegisterWaypoint(WP_PS_FLGP_READ_BER_DIE_RESULT, "WP_PS_FLGP_READ_BER_DIE_RESULT") ;
   RegisterWaypoint(WP_PS_FLGP_BES5, "WP_PS_FLGP_BES5") ;
   RegisterWaypoint(WP_PS_FLGP_BES7, "WP_PS_FLGP_BES7") ;
   RegisterWaypoint(WP_PS_FLGP_MARK_END, "WP_PS_FLGP_MARK_END") ;


   RegisterWaypoint(WP_PS_OTG_SEED_SD, "WP_PS_OTG_SEED_SD") ;
   RegisterWaypoint(WP_PS_OTG_SEED_SR, "WP_PS_OTG_SEED_SR") ;
   RegisterWaypoint(WP_PS_OTG_SEED, "WP_PS_OTG_SEED") ;
   RegisterWaypoint(WP_PS_OTG_SIPR_SENSE, "WP_PS_OTG_SIPR_SENSE") ;
   RegisterWaypoint(WP_PS_OTG_SUBMIT, "WP_PS_OTG_SUBMIT") ;


   RegisterWaypoint(WP_PS_ADM_SET_OPEN_BLOCK, "WP_PS_ADM_SET_OPEN_BLOCK") ;


   RegisterWaypoint(WP_PS_THM_TEMP_TICK_REQ_RECEIVED, "WP_PS_THM_TEMP_TICK_REQ_RECEIVED") ;
   RegisterWaypoint(WP_PS_THM_TEMP_INT_REQS, "WP_PS_THM_TEMP_INT_REQS") ;
   RegisterWaypoint(WP_PS_THM_FAKE_INFRA_TEMP, "WP_PS_THM_FAKE_INFRA_TEMP") ;
   RegisterWaypoint(WP_PS_THM_INFRA_MEASURED_TEMP, "WP_PS_THM_INFRA_MEASURED_TEMP") ;
   RegisterWaypoint(WP_PS_THM_DIAG_MEASURED_TEMP, "WP_PS_THM_DIAG_MEASURED_TEMP") ;
   RegisterWaypoint(WP_PS_THM_TEMP_REQ_START, "WP_PS_THM_TEMP_REQ_START") ;
   RegisterWaypoint(WP_PS_THM_TEMP_REQ_COMPLETED, "WP_PS_THM_TEMP_REQ_COMPLETED") ;


   RegisterWaypoint(WP_PS_ADM_SET_OPEN_BLOCK, "WP_PS_ADM_SET_OPEN_BLOCK") ;
   RegisterWaypoint(WP_PS_XOR_ZONE_END, "WP_PS_XOR_ZONE_END") ;

   RegisterWaypoint(WP_PS_XOR_WRITE_PAR_PAGES_DONE, "WP_PS_XOR_WRITE_PAR_PAGES_DONE") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_START, "WP_PS_XOR_RECOVERY_START") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_END, "WP_PS_XOR_RECOVERY_END") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC, "WP_PS_XOR_RECOVERY_PARITY_PAGE_UECC") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC, "WP_PS_XOR_RECOVERY_UNROLL_PAGE_UECC") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_WUC_DETECTED, "WP_PS_XOR_RECOVERY_WUC_DETECTED") ;
   RegisterWaypoint(WP_PS_XOR_RECOVERY_UNROLLING_VBA, "WP_PS_XOR_RECOVERY_UNROLLING_VBA") ;
   RegisterWaypoint(WP_PS_XOR_STORE_PAR_REQ, "WP_PS_XOR_STORE_PAR_REQ") ;
   RegisterWaypoint(WP_PS_XOR_LOAD_PAR_REQ, "WP_PS_XOR_LOAD_PAR_REQ") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_START, "WP_PS_XOR_REBUILD_PAR_START") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_END, "WP_PS_XOR_REBUILD_PAR_END") ;
   RegisterWaypoint(WP_PS_XOR_REBUILD_PAR_NEW_ZONE, "WP_PS_XOR_REBUILD_PAR_NEW_ZONE") ;
   RegisterWaypoint(WP_PS_XOR_ISSUE_CF, "WP_PS_XOR_ISSUE_CF") ;
   RegisterWaypoint(WP_PS_XOR_WRITE_PAR_PAGES_START, "WP_PS_XOR_WRITE_PAR_PAGES_START") ;
   RegisterWaypoint(WP_PS_XOR_SKIP_WRITE_PAR_PAGES, "WP_PS_XOR_SKIP_WRITE_PAR_PAGES") ;
   RegisterWaypoint(WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION, "WP_PS_XOR_ALL_DIE_READCACHE_TERMINATION") ;
   RegisterWaypoint(WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE, "WP_PS_XOR_ALL_DIE_NOT_IN_READCACHE_MODE") ;
   RegisterWaypoint(WP_PS_XOR_IS_XOR_SUPPORTED, "WP_PS_XOR_IS_XOR_SUPPORTED") ;


   RegisterWaypoint(WP_PMM_ENTER_NONOP_POWER_STATE, "WP_PMM_ENTER_NONOP_POWER_STATE") ;
   RegisterWaypoint(WP_PMM_EXIT_NONOP_POWER_STATE, "WP_PMM_EXIT_NONOP_POWER_STATE") ;
   RegisterWaypoint(WP_PMM_POWER_OFF, "WP_PMM_POWER_OFF") ;



   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE, "WP_PS_UEBM_UECC_STRIKE") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_BLK, "WP_PS_UEBM_RETIRE_BLK") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_BLKFOUND, "WP_PS_UEBM_UECC_ADD_BLKFOUND") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_FLIPFLOPSET, "WP_PS_UEBM_UECC_ADD_FLIPFLOPSET") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_NEWENTRY, "WP_PS_UEBM_UECC_ADD_NEWENTRY") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_LISTFULL, "WP_PS_UEBM_UECC_ADD_LISTFULL") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_ADD_ERROR, "WP_PS_UEBM_UECC_ADD_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_REMOVE_FOUNDBLK, "WP_PS_UEBM_UECC_REMOVE_FOUNDBLK") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_REMOVE_ERROR, "WP_PS_UEBM_UECC_REMOVE_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FLIPFLOP_RESET, "WP_PS_UEBM_UECC_FLIPFLOP_RESET") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FLIPFLOP_ERROR, "WP_PS_UEBM_UECC_FLIPFLOP_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT, "WP_PS_UEBM_UECC_STRIKE_THRESHOLD_HIT") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE, "WP_PS_UEBM_UECC_STRIKE_THRESHOLD_FALSE") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_INPROGRESS, "WP_PS_UEBM_UECC_FSWRITE_INPROGRESS") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD, "WP_PS_UEBM_UECC_FSWRITE_SECCOPYNOTGOOD") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_STARTED, "WP_PS_UEBM_UECC_FSWRITE_STARTED") ;
   RegisterWaypoint(WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL, "WP_PS_UEBM_UECC_FSWRITE_INFRAQFULL") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_FOUND, "WP_PS_UEBM_RETIRE_FOUND") ;
   RegisterWaypoint(WP_PS_UEBM_RETIRE_ERROR, "WP_PS_UEBM_RETIRE_ERROR") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_FOUNDINLIST, "WP_PS_UEBM_ERASEEH_FOUNDINLIST") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_THRESHOLDREACHED, "WP_PS_UEBM_ERASEEH_THRESHOLDREACHED") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_REMOVEFROMLIST, "WP_PS_UEBM_ERASEEH_REMOVEFROMLIST") ;
   RegisterWaypoint(WP_PS_UEBM_ERASEEH_ERROR, "WP_PS_UEBM_ERASEEH_ERROR") ;

   RegisterWaypoint(WP_PS_NPARAM_GET_PARAM_EH, "WP_PS_NPARAM_GET_PARAM_EH") ;
   RegisterWaypoint(WP_PS_NPARAM_HEALTH_MSG_ACCEPTED, "WP_PS_NPARAM_HEALTH_MSG_ACCEPTED") ;
   RegisterWaypoint(WP_PS_NPARAM_INTERNAL_REQS, "WP_PS_NPARAM_INTERNAL_REQS") ;
   RegisterWaypoint(WP_PS_DGM_SET_PARAM, "WP_PS_DGM_SET_PARAM") ;
   RegisterWaypoint(WP_PS_DGM_SET_FEATURE, "WP_PS_DGM_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_OTG_SET_FEATURE, "WP_PS_OTG_SET_FEATURE") ;


   RegisterWaypoint(WP_PS_BBM_PH_BLOCK_RELINK, "WP_PS_BBM_PH_BLOCK_RELINK") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_UPDATED, "WP_PS_BBM_RELINK_DATA_UPDATED") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_START, "WP_PS_BBM_RELINK_DATA_FLUSH_START") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED, "WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED") ;
   RegisterWaypoint(WP_PS_BBM_DECOMM_START, "WP_PS_BBM_DECOMM_START") ;
   RegisterWaypoint(WP_PS_BBM_DECOMM_COMPLETED, "WP_PS_BBM_DECOMM_COMPLETED") ;
   RegisterWaypoint(WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED, "WP_PS_BBM_RELINK_DATA_FLUSH_COMPLETED_QUEUES_NOT_OPENED") ;
   RegisterWaypoint(WP_PS_BBM_TRANSLATE_RELINKED_BLK, "WP_PS_BBM_TRANSLATE_RELINKED_BLK") ;
   RegisterWaypoint(WP_PS_BTGS_CRITERIA_1, "WP_PS_BTGS_CRITERIA_1") ;
   RegisterWaypoint(WP_PS_BTGS_CRITERIA_2, "WP_PS_BTGS_CRITERIA_2") ;
   RegisterWaypoint(WP_PS_BTGS_USERROM_READ_FAIL, "WP_PS_BTGS_USERROM_READ_FAIL") ;
   RegisterWaypoint(WP_PS_BTGS_WL_STRING_UROM_LOOP, "WP_PS_BTGS_WL_STRING_UROM_LOOP") ;
   RegisterWaypoint(WP_PS_BTGS_DATA_DATABAR_MATCH, "WP_PS_BTGS_DATA_DATABAR_MATCH") ;
   RegisterWaypoint(WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK, "WP_PS_BBM_PROD_MBBT_FACTORY_BAD_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_MBBT_BOOT_BLOCK, "WP_PS_BBM_PROD_MBBT_BOOT_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK, "WP_PS_BBM_PROD_GGB_REPLACEMENT_BLOCK") ;
   RegisterWaypoint(WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA, "WP_PS_BBM_PROD_INCONSISTENT_ROMFUSE_DATA") ;


   RegisterWaypoint(WP_PS_SE_START_GBB, "WP_PS_SE_START_GBB") ;
   RegisterWaypoint(WP_PS_SE_START_SPARE, "WP_PS_SE_START_SPARE") ;
   RegisterWaypoint(WP_PS_SE_GET_FLASH_PARAM, "WP_PS_SE_GET_FLASH_PARAM") ;
   RegisterWaypoint(WP_PS_SE_SET_FLASH_PARAM, "WP_PS_SE_SET_FLASH_PARAM") ;
   RegisterWaypoint(WP_PS_SE_EXECUTE_SECURE_ERASE, "WP_PS_SE_EXECUTE_SECURE_ERASE") ;
   RegisterWaypoint(WP_PS_SE_FINISHED_REQUEST, "WP_PS_SE_FINISHED_REQUEST") ;
   RegisterWaypoint(WP_PS_SE_RECEIVED_BARRIER, "WP_PS_SE_RECEIVED_BARRIER") ;
   RegisterWaypoint(WP_PS_SE_USE_PREALLOCATED_REQUEST, "WP_PS_SE_USE_PREALLOCATED_REQUEST") ;
   RegisterWaypoint(WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS, "WP_PS_SE_RAN_OUT_OF_ALL_REQUESTS") ;


   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_START, "WP_PS_MRPH_USERROM_READ_START") ;
   RegisterWaypoint(WP_PS_MRPH_WL_STRING_UROM_LOOP, "WP_PS_MRPH_WL_STRING_UROM_LOOP") ;
   RegisterWaypoint(WP_PS_MRPH_NPDP_USERROM_READ_FAIL, "WP_PS_MRPH_NPDP_USERROM_READ_FAIL") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_FAIL, "WP_PS_MRPH_USERROM_READ_FAIL") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_READ_END, "WP_PS_MRPH_USERROM_READ_END") ;
   RegisterWaypoint(WP_PS_MRPH_WL_STRING_LOOP_FMU, "WP_PS_MRPH_WL_STRING_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_UROM_LOOP_FMU, "WP_PS_MRPH_UROM_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_FMU_LOOP_FMU, "WP_PS_MRPH_FMU_LOOP_FMU") ;
   RegisterWaypoint(WP_PS_MRPH_FMU_LOOP_COPY, "WP_PS_MRPH_FMU_LOOP_COPY") ;


   RegisterWaypoint(WP_PS_IFT_START, "WP_PS_IFT_START") ;
   RegisterWaypoint(WP_PS_IFT_END, "WP_PS_IFT_END") ;
   RegisterWaypoint(WP_PS_IFT_TEMP_TRIGGER, "WP_PS_IFT_TEMP_TRIGGER") ;
   RegisterWaypoint(WP_PS_IFT_TEMP_LAST_IFT_UPDATED, "WP_PS_IFT_TEMP_LAST_IFT_UPDATED") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_START, "WP_PS_IFT_ASIC_ZQC_START") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_DONE, "WP_PS_IFT_ASIC_ZQC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_USE_TABLE_RESULTS, "WP_PS_IFT_ASIC_ZQC_USE_TABLE_RESULTS") ;
   RegisterWaypoint(WP_PS_IFT_ASIC_ZQC_SKIP, "WP_PS_IFT_ASIC_ZQC_SKIP") ;
   RegisterWaypoint(WP_PS_IFT_NAND_ZQC_START, "WP_PS_IFT_NAND_ZQC_START") ;
   RegisterWaypoint(WP_PS_IFT_NAND_ZQC_DONE, "WP_PS_IFT_NAND_ZQC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_NAND_ZQC_SKIP, "WP_PS_IFT_NAND_ZQC_SKIP") ;

   RegisterWaypoint(WP_PS_IFT_SET_TOGGLE_MODE, "WP_PS_IFT_SET_TOGGLE_MODE") ;
   RegisterWaypoint(WP_PS_IFT_DCC_START, "WP_PS_IFT_DCC_START") ;
   RegisterWaypoint(WP_PS_IFT_DCC_DONE, "WP_PS_IFT_DCC_DONE") ;
   RegisterWaypoint(WP_PS_IFT_DCC_SKIP, "WP_PS_IFT_DCC_SKIP") ;
   RegisterWaypoint(WP_PS_IFT_DIE_RESET, "WP_PS_IFT_DIE_RESET") ;

   RegisterWaypoint(WP_PS_IFT_RT_INIT_ALL_DELAYS_TO_0, "WP_PS_IFT_RT_INIT_ALL_DELAYS_TO_0") ;
   RegisterWaypoint(WP_PS_IFT_RT_START, "WP_PS_IFT_RT_START") ;
   RegisterWaypoint(WP_PS_IFT_RT_END, "WP_PS_IFT_RT_END") ;
   RegisterWaypoint(WP_PS_IFT_RT_USE_TABLE_RESULTS, "WP_PS_IFT_RT_USE_TABLE_RESULTS") ;
   RegisterWaypoint(WP_PS_IFT_RT_SKIP, "WP_PS_IFT_RT_SKIP") ;
   RegisterWaypoint(WP_PS_IFT_RT_CHANGE_TO_TM1200, "WP_PS_IFT_RT_CHANGE_TO_TM1200") ;
   RegisterWaypoint(WP_PS_IFT_RT_RETURN_TO_TM1600, "WP_PS_IFT_RT_RETURN_TO_TM1600") ;

   RegisterWaypoint(WP_PS_IFT_RT_FIRST_READ, "WP_PS_IFT_RT_FIRST_READ") ;
   RegisterWaypoint(WP_PS_IFT_RT_STEP_1_CASE_1, "WP_PS_IFT_RT_STEP_1_CASE_1") ;
   RegisterWaypoint(WP_PS_IFT_RT_STEP_1_CASE_2, "WP_PS_IFT_RT_STEP_1_CASE_2") ;
   RegisterWaypoint(WP_PS_IFT_RT_RDQS_LEFT_EDGE, "WP_PS_IFT_RT_RDQS_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE, "WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE_JUMP_CASE_1, "WP_PS_IFT_RT_ALL_RFD_LEFT_EDGE_JUMP_CASE_1") ;
   RegisterWaypoint(WP_PS_IFT_RT_STEP_2, "WP_PS_IFT_RT_STEP_2") ;
   RegisterWaypoint(WP_PS_IFT_RT_RFD_LEFT_EDGE, "WP_PS_IFT_RT_RFD_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_RT_STEP_3, "WP_PS_IFT_RT_STEP_3") ;
   RegisterWaypoint(WP_PS_IFT_RT_RDQS_RIGHT_EDGE, "WP_PS_IFT_RT_RDQS_RIGHT_EDGE") ;

   RegisterWaypoint(WP_PS_IFT_WT_INIT_ALL_DELAYS_TO_0, "WP_PS_IFT_WT_INIT_ALL_DELAYS_TO_0") ;
   RegisterWaypoint(WP_PS_IFT_WT_START, "WP_PS_IFT_WT_START") ;
   RegisterWaypoint(WP_PS_IFT_WT_END, "WP_PS_IFT_WT_END") ;
   RegisterWaypoint(WP_PS_IFT_WT_USE_TABLE_RESULTS, "WP_PS_IFT_WT_USE_TABLE_RESULTS") ;
   RegisterWaypoint(WP_PS_IFT_WT_SKIP, "WP_PS_IFT_WT_SKIP") ;

   RegisterWaypoint(WP_PS_IFT_WT_FIRST_READ, "WP_PS_IFT_WT_FIRST_READ") ;
   RegisterWaypoint(WP_PS_IFT_WT_STEP_1_CASE_1, "WP_PS_IFT_WT_STEP_1_CASE_1") ;
   RegisterWaypoint(WP_PS_IFT_WT_STEP_1_CASE_2, "WP_PS_IFT_WT_STEP_1_CASE_2") ;
   RegisterWaypoint(WP_PS_IFT_WT_WDQS_LEFT_EDGE, "WP_PS_IFT_WT_WDQS_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE, "WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE_JUMP_CASE_1, "WP_PS_IFT_WT_ALL_WFD_LEFT_EDGE_JUMP_CASE_1") ;
   RegisterWaypoint(WP_PS_IFT_WT_STEP_2, "WP_PS_IFT_WT_STEP_2") ;
   RegisterWaypoint(WP_PS_IFT_WT_WFD_LEFT_EDGE, "WP_PS_IFT_WT_WFD_LEFT_EDGE") ;
   RegisterWaypoint(WP_PS_IFT_WT_STEP_3, "WP_PS_IFT_WT_STEP_3") ;
   RegisterWaypoint(WP_PS_IFT_WT_WDQS_RIGHT_EDGE, "WP_PS_IFT_WT_WDQS_RIGHT_EDGE") ;


   RegisterWaypoint(WP_PS_IFT_UPDATE_OPT_TABLE, "WP_PS_IFT_UPDATE_OPT_TABLE") ;


   RegisterWaypoint(WP_PS_DGM_DMC_CH, "WP_PS_DGM_DMC_CH") ;


   RegisterWaypoint(WP_PS_RPZ_START, "WP_PS_RPZ_START") ;
   RegisterWaypoint(WP_PS_RPZ_P0_RESULT_FF, "WP_PS_RPZ_P0_RESULT_FF") ;
   RegisterWaypoint(WP_PS_RPZ_P0_RESULT_UECC, "WP_PS_RPZ_P0_RESULT_UECC") ;
   RegisterWaypoint(WP_PS_RPZ_P1_RESULT_UECC, "WP_PS_RPZ_P1_RESULT_UECC") ;
   RegisterWaypoint(WP_PS_RPZ_P2_RESULT_UECC, "WP_PS_RPZ_P2_RESULT_UECC") ;
   RegisterWaypoint(WP_PS_RPZ_P3_RESULT_UECC, "WP_PS_RPZ_P3_RESULT_UECC") ;
   RegisterWaypoint(WP_PS_RPZ_P0_RESULT_OK, "WP_PS_RPZ_P0_RESULT_OK") ;
   RegisterWaypoint(WP_PS_RPZ_P1_RESULT_OK, "WP_PS_RPZ_P1_RESULT_OK") ;
   RegisterWaypoint(WP_PS_RPZ_P2_RESULT_OK, "WP_PS_RPZ_P2_RESULT_OK") ;
   RegisterWaypoint(WP_PS_RPZ_P3_RESULT_OK, "WP_PS_RPZ_P3_RESULT_OK") ;
   RegisterWaypoint(WP_PS_RPZ_P0_RESULT_SLC_ERASE, "WP_PS_RPZ_P0_RESULT_SLC_ERASE") ;
   RegisterWaypoint(WP_PS_RPZ_P1_RESULT_SLC_ERASE, "WP_PS_RPZ_P1_RESULT_SLC_ERASE") ;
   RegisterWaypoint(WP_PS_RPZ_P2_RESULT_SLC_ERASE, "WP_PS_RPZ_P2_RESULT_SLC_ERASE") ;
   RegisterWaypoint(WP_PS_RPZ_P3_RESULT_SLC_ERASE, "WP_PS_RPZ_P3_RESULT_SLC_ERASE") ;


   RegisterWaypoint(WP_PS_SFA_D5_AVOID, "WP_PS_SFA_D5_AVOID") ;
   RegisterWaypoint(WP_PS_SFA_5D_AVOID, "WP_PS_SFA_5D_AVOID") ;
   RegisterWaypoint(WP_PS_SFA_RESET, "WP_PS_SFA_RESET") ;
   RegisterWaypoint(WP_PS_DO_SF_WITH_READ, "WP_PS_DO_SF_WITH_READ") ;


   RegisterWaypoint(WP_PS_SENSE_AHEAD, "WP_PS_SENSE_AHEAD") ;


   RegisterWaypoint(WP_INFRA_IFS_IN_WRITE_FILE, "WP_INFRA_IFS_IN_WRITE_FILE") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPACTION, "WP_INFRA_IFS_IN_COMPACTION") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_BOOTPAGE_UPDATE, "WP_INFRA_IFS_IN_BOOTPAGE_UPDATE") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_LAST_PAGE, "WP_INFRA_READ_IFS_BOOT_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED, "WP_INFRA_READ_IFS_BOOT_LAST_PAGE_BS_ERASED") ;
   RegisterWaypoint(WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS, "WP_INFRA_READ_IFS_BOOT_READ_PREV_SUCCESS") ;
   RegisterWaypoint(WP_INFRA_IFS_CODE_LAST_PAGE, "WP_INFRA_IFS_CODE_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_HIGH_BER, "WP_INFRA_IFS_IN_HIGH_BER") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPAC_START, "WP_INFRA_IFS_IN_COMPAC_START") ;
   RegisterWaypoint(WP_INFRA_IFS_IN_COMPAC_END, "WP_INFRA_IFS_IN_COMPAC_END") ;

   RegisterWaypoint(WP_INFRA_IFS_BLOCK_RELOC_ALLOCATE, "WP_INFRA_IFS_BLOCK_RELOC_ALLOCATE") ;
   RegisterWaypoint(WP_INFRA_IFS_BLOCK_RELOC_START, "WP_INFRA_IFS_BLOCK_RELOC_START") ;
   RegisterWaypoint(WP_INFRA_IFS_BLOCK_IN_RELOC, "WP_INFRA_IFS_BLOCK_IN_RELOC") ;
   RegisterWaypoint(WP_INFRA_IFS_BLOCK_RELOC_END, "WP_INFRA_IFS_BLOCK_RELOC_END") ;

   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_DL_WRITE, "WP_INFRA_IFS_FFU_IN_DL_WRITE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_START, "WP_INFRA_IFS_FFU_IN_COMMIT_START") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE, "WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_WRITE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG, "WP_INFRA_IFS_FFU_IN_COMMIT_FLUF_SIG") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS, "WP_INFRA_IFS_FFU_IN_COMMIT_WR2FS") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE, "WP_INFRA_IFS_FFU_IN_COMMIT_B4_ACTIVATE") ;
   RegisterWaypoint(WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET, "WP_INFRA_IFS_FFU_IN_COMMIT_ACT_B4_RESET") ;

   RegisterWaypoint(WP_FADI_DATA_DUMP_MESSAGE_SENT, "WP_FADI_DATA_DUMP_MESSAGE_SENT") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_WRITE_END, "WP_INFRA_FADI_DATA_WRITE_END") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_WRITE_FAILED, "WP_INFRA_FADI_DATA_WRITE_FAILED") ;
   RegisterWaypoint(WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK, "WP_INFRA_FADI_DATA_ERASE_NEW_BLOCK") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY, "WP_INFRA_FADI_ERRORLOG_REPLACED_ENTRY") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL, "WP_INFRA_FADI_ERRORLOG_QUOTA_FOR_SEVERITY_FULL") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED, "WP_INFRA_FADI_ERRORLOG_BUFFERS_FULL_NEW_ENTRY_DROPPED") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU, "WP_INFRA_FADI_DUMP_MANAGER_SEARCHING_NEXT_FMU") ;
   RegisterWaypoint(WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS, "WP_INFRA_FADI_ERRORLOG_REQUEST_DETAILS") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_INIT, "WP_INFRA_FADI_DUMP_MANAGER_INIT") ;
   RegisterWaypoint(WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD, "WP_INFRA_FADI_DUMP_MANAGER_RECOVERED_UGSD") ;

   RegisterWaypoint(WP_INFRA_FADI_BLOCKS_REGION, "WP_INFRA_FADI_BLOCKS_REGION") ;
   RegisterWaypoint(WP_INFRA_READ_REGION_LAST_PAGE, "WP_INFRA_READ_REGION_LAST_PAGE") ;
   RegisterWaypoint(WP_INFRA_WRITE_REGION_LAST_PAGE, "WP_INFRA_WRITE_REGION_LAST_PAGE") ;

#line 2471 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
   RegisterWaypoint(WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE, "WP_INFRA_TM_UPDATE_NAND_SAMPLE_RATE") ;
   RegisterWaypoint(WP_INFRA_TM_IDLE_TIME, "WP_INFRA_TM_IDLE_TIME") ;
   RegisterWaypoint(WP_INFRA_TM_ACTIVE_TIME, "WP_INFRA_TM_ACTIVE_TIME") ;
   RegisterWaypoint(WP_INFRA_TM_UPDATED_THERMAL_THROTTLING, "WP_INFRA_TM_UPDATED_THERMAL_THROTTLING") ;
   RegisterWaypoint(WP_INFRA_TM_CALCULATE_COMPOSITE_TEMP, "WP_INFRA_TM_CALCULATE_COMPOSITE_TEMP") ;
   RegisterWaypoint(WP_INFRA_BLOCK_ISOLATION, "WP_INFRA_BLOCK_ISOLATION") ;
   RegisterWaypoint(WP_INFRA_TM_SEND_TEMPERATURE, "WP_INFRA_TM_SEND_TEMPERATURE") ;
   RegisterWaypoint(WP_PS_THM_INFRA_FAKE_TEMPCODE, "WP_PS_THM_INFRA_FAKE_TEMPCODE") ;

#line 2487 "d:/gitrepo/fpgcss-vega/source/infra/inc_public/sys_waypoint.h"
   RegisterWaypoint(WP_SEC_NEW_COMMAND_STARTED, "WP_SEC_NEW_COMMAND_STARTED") ;
   RegisterWaypoint(WP_SEC_COMMAND_FINISHED, "WP_SEC_COMMAND_FINISHED") ;
   RegisterWaypoint(WP_SEC_TCG_SESSION_STARTED, "WP_SEC_TCG_SESSION_STARTED") ;
   RegisterWaypoint(WP_SEC_TCG_SESSION_ABORTED, "WP_SEC_TCG_SESSION_ABORTED") ;
   RegisterWaypoint(WP_SEC_RESET_HANDLING, "WP_SEC_RESET_HANDLING") ;
   RegisterWaypoint(WP_SEC_FS_READ, "WP_SEC_FS_READ") ;
   RegisterWaypoint(WP_SEC_FS_WRITE, "WP_SEC_FS_WRITE") ;
   RegisterWaypoint(WP_SEC_FS_COMMIT_TRANSACTION, "WP_SEC_FS_COMMIT_TRANSACTION") ;
   RegisterWaypoint(WP_SEC_FS_REVERT_TRANSACTION, "WP_SEC_FS_REVERT_TRANSACTION") ;
   RegisterWaypoint(WP_SEC_FS_CLEANUP, "WP_SEC_FS_CLEANUP") ;
   RegisterWaypoint(WP_SEC_FTL_HOSTLESS_READ, "WP_SEC_FTL_HOSTLESS_READ") ;
   RegisterWaypoint(WP_SEC_FTL_WRITE_BUFFER, "WP_SEC_FTL_WRITE_BUFFER") ;
   RegisterWaypoint(WP_SEC_FTL_DEALLOCATE, "WP_SEC_FTL_DEALLOCATE") ;
   RegisterWaypoint(WP_SEC_FTL_FORMAT_NVM, "WP_SEC_FTL_FORMAT_NVM") ;
   RegisterWaypoint(WP_SEC_FE_TRANSFER_REQUEST, "WP_SEC_FE_TRANSFER_REQUEST") ;
   RegisterWaypoint(WP_SEC_FE_TRANSFER_RESPONSE, "WP_SEC_FE_TRANSFER_RESPONSE") ;
   RegisterWaypoint(WP_SEC_HMB_ENABLED, "WP_SEC_HMB_ENABLED") ;
   RegisterWaypoint(WP_SEC_HMB_NOTIFIED, "WP_SEC_HMB_NOTIFIED") ;
   RegisterWaypoint(WP_RPMB_WRITE_COUNTER, "WP_RPMB_WRITE_COUNTER") ;
   RegisterWaypoint(WP_RPMB_WRITE_STATUS, "WP_RPMB_WRITE_STATUS") ;
   RegisterWaypoint(WP_RPMB_UGSD_RECOVERED, "WP_RPMB_UGSD_RECOVERED") ;
   RegisterWaypoint(WP_RPMB_UGSD_LOST, "WP_RPMB_UGSD_LOST") ;


   RegisterWaypoint(WP_EI_UECC_OCCURRED, "WP_EI_UECC_OCCURRED") ;
   RegisterWaypoint(WP_EI_RLC_UECC_SCAN, "WP_EI_RLC_UECC_SCAN") ;
   RegisterWaypoint(WP_EI_RLC_UECC_TRANSLATION, "WP_EI_RLC_UECC_TRANSLATION") ;
   RegisterWaypoint(WP_EI_UECC_HOSTLESS_READ, "WP_EI_UECC_HOSTLESS_READ") ;
   RegisterWaypoint(WP_EI_UECC_INJECT_UECC_TO_HEADER, "WP_EI_UECC_INJECT_UECC_TO_HEADER") ;
   RegisterWaypoint(WP_EI_UECC_RMW, "WP_EI_UECC_RMW") ;
   RegisterWaypoint(WP_EI_MB_REVIVE, "WP_EI_MB_REVIVE") ;
   RegisterWaypoint(WP_EI_JB_REVIVE, "WP_EI_JB_REVIVE") ;
   RegisterWaypoint(WP_EI_INJECTION, "WP_EI_INJECTION") ;

   RegisterWaypoint(WP_NPDP_DCVD_ROM, "WP_NPDP_DCVD_ROM") ;
   RegisterWaypoint(WP_NPDP_DISABLE_C6_PREREAD, "WP_NPDP_DISABLE_C6_PREREAD") ;
   RegisterWaypoint(WP_NPDP_ENABLE_C6_PREREAD, "WP_NPDP_ENABLE_C6_PREREAD") ;


   RegisterWaypoint(WP_FWR_CMD_COMPLETION, "WP_FWR_CMD_COMPLETION") ;
   RegisterWaypoint(WP_FWR_ASYNC_REPORT_EVENT_TO_HOST, "WP_FWR_ASYNC_REPORT_EVENT_TO_HOST") ;
   RegisterWaypoint(WP_FWR_CS_NOTIFY_CS_COMPLETED, "WP_FWR_CS_NOTIFY_CS_COMPLETED") ;
   RegisterWaypoint(WP_FWR_CS_IS_ACTIVE, "WP_FWR_CS_IS_ACTIVE") ;
   RegisterWaypoint(WP_FWR_CS_NOTIFY_USERS, "WP_FWR_CS_NOTIFY_USERS") ;
   RegisterWaypoint(WP_FWR_IDENTIFY_COMMAND, "WP_FWR_IDENTIFY_COMMAND") ;
   RegisterWaypoint(WP_FWR_FLUSH_FE_END, "WP_FWR_FLUSH_FE_END") ;
   RegisterWaypoint(WP_FWR_FLUSH_FE_START, "WP_FWR_FLUSH_FE_START") ;
   RegisterWaypoint(WP_FWR_FLUSH_FTL, "WP_FWR_FLUSH_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_ABORT_REQUEST, "WP_FWR_FORMAT_AFTER_ABORT_REQUEST") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK, "WP_FWR_FORMAT_AFTER_ALOCATION_BLOCK") ;
   RegisterWaypoint(WP_FWR_FORMAT_AFTER_FTL, "WP_FWR_FORMAT_AFTER_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_BEFORE_ABORT_REQUEST, "WP_FWR_FORMAT_BEFORE_ABORT_REQUEST") ;
   RegisterWaypoint(WP_FWR_FORMAT_BEFORE_FTL, "WP_FWR_FORMAT_BEFORE_FTL") ;
   RegisterWaypoint(WP_FWR_FORMAT_ENHANCED_CASE1, "WP_FWR_FORMAT_ENHANCED_CASE1") ;
   RegisterWaypoint(WP_FWR_FORMAT_ENHANCED_CASE2, "WP_FWR_FORMAT_ENHANCED_CASE2") ;
   RegisterWaypoint(WP_FWR_FORMAT_UPDATE_LOG_BLOCKS, "WP_FWR_FORMAT_UPDATE_LOG_BLOCKS") ;
   RegisterWaypoint(WP_FWR_GETLOG_COMMAND, "WP_FWR_GETLOG_COMMAND") ;
   RegisterWaypoint(WP_FWR_DATA_TRANSFER, "WP_FWR_DATA_TRANSFER") ;

   RegisterWaypoint(WP_FWR_IO_COMMANDS_EXEPTION_Q, "WP_FWR_IO_COMMANDS_EXEPTION_Q") ;
   RegisterWaypoint(WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS, "WP_FWR_LOG_CONTROL_SYNC_IN_PROCESS") ;
   RegisterWaypoint(WP_FWR_LOG_CS_SEND_BARRIER, "WP_FWR_LOG_CS_SEND_BARRIER") ;
   RegisterWaypoint(WP_FWR_LOG_MANAGE, "WP_FWR_LOG_MANAGE") ;
   RegisterWaypoint(WP_FWR_LOG_PENDING_CS_START, "WP_FWR_LOG_PENDING_CS_START") ;
   RegisterWaypoint(WP_FWR_MNT_BML_RECOVERY, "WP_FWR_MNT_BML_RECOVERY") ;
   RegisterWaypoint(WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL, "WP_FWR_PS_BRM_BARRIER_COMPLETION_FTL") ;
   RegisterWaypoint(WP_FWR_PS_BRM_HANDLE_BARRIER_REQ, "WP_FWR_PS_BRM_HANDLE_BARRIER_REQ") ;
   RegisterWaypoint(WP_FWR_PS_BRM_IS_CS, "WP_FWR_PS_BRM_IS_CS") ;
   RegisterWaypoint(WP_FWR_PS_DGM_HANDLE_BARRIER, "WP_FWR_PS_DGM_HANDLE_BARRIER") ;
   RegisterWaypoint(WP_FWR_PS_MQD_HANDLE_BARRIER_REQ, "WP_FWR_PS_MQD_HANDLE_BARRIER_REQ") ;
   RegisterWaypoint(WP_FWR_PS_OTG_RELEASE_ON_COMPLETION, "WP_FWR_PS_OTG_RELEASE_ON_COMPLETION") ;
   RegisterWaypoint(WP_FWR_READ_ARRIVED_TO_FTL, "WP_FWR_READ_ARRIVED_TO_FTL") ;
   RegisterWaypoint(WP_FWR_RESET_DETAILES, "WP_FWR_RESET_DETAILES") ;
   RegisterWaypoint(WP_FWR_GETLOG_SMART, "WP_FWR_GETLOG_SMART") ;
   RegisterWaypoint(WP_FWR_SAT_CONSOLIDATION_ACTIVE, "WP_FWR_SAT_CONSOLIDATION_ACTIVE") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_COMMAND, "WP_FWR_SET_FEATURES_COMMAND") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL, "WP_FWR_SET_FEATURES_DIS_VWC_AFTER_FTL") ;
   RegisterWaypoint(WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL, "WP_FWR_SET_FEATURES_DIS_VWC_BEFORE_FTL") ;
   RegisterWaypoint(WP_FWR_SET_PMM_ALL_READY, "WP_FWR_SET_PMM_ALL_READY") ;
   RegisterWaypoint(WP_FWR_SET_PMM_BEFORE_INFRA, "WP_FWR_SET_PMM_BEFORE_INFRA") ;
   RegisterWaypoint(WP_FWR_SET_PMM_FE_ACK, "WP_FWR_SET_PMM_FE_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_FTL_ACK, "WP_FWR_SET_PMM_FTL_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IFS_ACK, "WP_FWR_SET_PMM_IFS_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_FTL, "WP_FWR_SET_PMM_IN_FTL") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_IFS, "WP_FWR_SET_PMM_IN_IFS") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_PS, "WP_FWR_SET_PMM_IN_PS") ;
   RegisterWaypoint(WP_FWR_RESET_ACTIVE, "WP_FWR_RESET_ACTIVE") ;
   RegisterWaypoint(WP_FWR_SET_PMM_IN_SECURITY, "WP_FWR_SET_PMM_IN_SECURITY") ;
   RegisterWaypoint(WP_FWR_SET_PMM_PS_ACK, "WP_FWR_SET_PMM_PS_ACK") ;
   RegisterWaypoint(WP_FWR_SET_PMM_SECURITY_ACK, "WP_FWR_SET_PMM_SECURITY_ACK") ;
   RegisterWaypoint(WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL, "WP_FWR_DEALLOC_BEFORE_COMPLITION_IN_FTL") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FE, "WP_FWR_DEALLOC_IN_FE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK, "WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC_WITH_BREAK") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC, "WP_FWR_DEALLOC_IN_FTL_SAT_DEALLOC") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE, "WP_FWR_DEALLOC_IN_FTL_WZ_DEALLOCATE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE, "WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE_DONE") ;
   RegisterWaypoint(WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE, "WP_FWR_DEALLOC_IN_READ_MODIFY_WRITE") ;
   RegisterWaypoint(WP_FWR_COMPARE_VALIDATION_STAGE, "WP_FWR_COMPARE_VALIDATION_STAGE") ;
   RegisterWaypoint(WP_FWR_COMPARE_END, "WP_FWR_COMPARE_END") ;
   RegisterWaypoint(WP_FWR_COMPARE_READ_FROM_FLASH_STAGE, "WP_FWR_COMPARE_READ_FROM_FLASH_STAGE") ;
   RegisterWaypoint(WP_FWR_COMPARE_READ_4K_STAGE, "WP_FWR_COMPARE_READ_4K_STAGE") ;

   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_GENERAL, "WP_FWR_WRITE_IN_FTL_GENERAL") ;
   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_RMW_STAGE, "WP_FWR_WRITE_IN_FTL_RMW_STAGE") ;
   RegisterWaypoint(WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE, "WP_FWR_WRITE_IN_FTL_CONTROL_SYNC_STAGE") ;

   RegisterWaypoint(WP_FWR_WUC_FE, "WP_FWR_WUC_FE") ;
   RegisterWaypoint(WP_FWR_WUC_FTL, "WP_FWR_WUC_FTL") ;
   RegisterWaypoint(WP_FWR_WUC_CALL_FROM_FTL_STAGE, "WP_FWR_WUC_CALL_FROM_FTL_STAGE") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_VALIDATION_FE, "WP_FWR_WRITE_ZEROS_VALIDATION_FE") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_DIVISION, "WP_FWR_WRITE_ZEROS_DIVISION") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_READ, "WP_FWR_WRITE_ZEROS_READ") ;
   RegisterWaypoint(WP_FWR_WRITE_ZEROS_READ_4K, "WP_FWR_WRITE_ZEROS_READ_4K") ;
   RegisterWaypoint(WP_FWR_HWD_FULL_ERROR, "WP_FWR_HWD_FULL_ERROR") ;

   RegisterWaypoint(WP_FWR_WRITE_RPMB, "WP_FWR_WRITE_RPMB") ;

   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_MAIN_LOOP, "WP_FWR_DOWNLOAD_FFU_MAIN_LOOP") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END, "WP_FWR_DOWNLOAD_FFU_MAIN_LOOP_END") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS, "WP_FWR_DOWNLOAD_FFU_ALLOCATE_BUFFERS") ;
   RegisterWaypoint(WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP, "WP_FWR_DOWNLOAD_FFU_BEFORE_CLEANUP") ;

   RegisterWaypoint(WP_FWR_MOUNT_START, "WP_FWR_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_GSD_MOUNT_START, "WP_FWR_GSD_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_UGSD_MOUNT_START, "WP_FWR_UGSD_MOUNT_START") ;
   RegisterWaypoint(WP_FWR_MOUNT_BEFORE_ENABLE_WR, "WP_FWR_MOUNT_BEFORE_ENABLE_WR") ;
   RegisterWaypoint(WP_FWR_AFTER_MOUNT_COMPLITION, "WP_FWR_AFTER_MOUNT_COMPLITION") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_START, "WP_FWR_SHUTDOWN_STATE_START") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR, "WP_FWR_SHUTDOWN_STATE_STORE_XOR_PAR") ;
   RegisterWaypoint(WP_FWR_SHUTDOWN_STATE_REQ_CS, "WP_FWR_SHUTDOWN_STATE_REQ_CS") ;

   RegisterWaypoint(WP_FWR_RESET, "WP_FWR_RESET") ;
   RegisterWaypoint(WP_FWR_BML_RELEASE_BLOCK, "WP_FWR_BML_RELEASE_BLOCK") ;
   RegisterWaypoint(WP_FWR_FE_HANDLER_FORMAT_NVME, "WP_FWR_FE_HANDLER_FORMAT_NVME") ;
   RegisterWaypoint(WP_FWR_FE_NVME_FORMAT_CB, "WP_FWR_FE_NVME_FORMAT_CB") ;
   RegisterWaypoint(WP_FWR_FE_NVME_NCR_CHST_UPDATE, "WP_FWR_FE_NVME_NCR_CHST_UPDATE") ;
   RegisterWaypoint(WP_FWR_FTL_CMD_FNVM_FORMAT_START, "WP_FWR_FTL_CMD_FNVM_FORMAT_START") ;
   RegisterWaypoint(WP_FWR_FTL_CMD_FNVM_FORMAT_END, "WP_FWR_FTL_CMD_FNVM_FORMAT_END") ;

   RegisterWaypoint(WP_FWR_FE_FORMAT_PROCESS_END, "WP_FWR_FE_FORMAT_PROCESS_END") ;

   RegisterWaypoint(WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC, "WP_FWR_FTL_OBM_JUMBO_BLOCK_FMU_INC") ;
   RegisterWaypoint(WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC, "WP_FWR_FTL_OBM_JUMBO_BLOCK_ALLOC") ;
   RegisterWaypoint(WP_FWR_LOG_WRITING_LOG_BLOCK, "WP_FWR_LOG_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_FWR_PS_XOR_STORE_PAR_REQ, "WP_FWR_PS_XOR_STORE_PAR_REQ") ;
   RegisterWaypoint(WP_FWR_XORM_COMPACTION_START, "WP_FWR_XORM_COMPACTION_START") ;
   RegisterWaypoint(WP_FWR_XROM_COMPACTION_IN_PROCESS, "WP_FWR_XROM_COMPACTION_IN_PROCESS") ;
   RegisterWaypoint(WP_FWR_XORM_COMPACTION_END, "WP_FWR_XORM_COMPACTION_END") ;
   RegisterWaypoint(WP_FWR_MVP_PARTITION_FREE_SPACE, "WP_FWR_MVP_PARTITION_FREE_SPACE") ;
   RegisterWaypoint(WP_FWR_LOG_FIRST_MOUNT, "WP_FWR_LOG_FIRST_MOUNT") ;
   RegisterWaypoint(WP_FWR_LOG_WRITE_LOG_COPY, "WP_FWR_LOG_WRITE_LOG_COPY") ;
   RegisterWaypoint(WP_FWR_LOG_DEBUG_ALLOC, "WP_FWR_LOG_DEBUG_ALLOC") ;
   RegisterWaypoint(WP_FWR_FTL_SECURITY_MEM_ALLOC, "WP_FWR_FTL_SECURITY_MEM_ALLOC") ;
   RegisterWaypoint(WP_FWR_FTL_SECURITY_MEM_RELEASE, "WP_FWR_FTL_SECURITY_MEM_RELEASE") ;

   RegisterWaypoint(WP_FWR_RLC_BRLC_COPY_STEP, "WP_FWR_RLC_BRLC_COPY_STEP") ;
   RegisterWaypoint(WP_FWR_FTL_RSQ_RLC_REQ_REMOVED, "WP_FWR_FTL_RSQ_RLC_REQ_REMOVED") ;
   RegisterWaypoint(WP_FWR_LOG_WRITE_REQ, "WP_FWR_LOG_WRITE_REQ") ;
   RegisterWaypoint(WP_PSR_CONTROL_READ_VBA, "WP_PSR_CONTROL_READ_VBA") ;
   RegisterWaypoint(WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK, "WP_FWR_LOG_FINISHED_WRITING_LOG_BLOCK") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_STATUS_ERROR, "WP_FWR_INFRA_IFS_STATUS_ERROR") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_STATUS_WRITE, "WP_FWR_INFRA_IFS_STATUS_WRITE") ;
   RegisterWaypoint(WP_FWR_FNVM_ABORT_ONGOING_FORMAT, "WP_FWR_FNVM_ABORT_ONGOING_FORMAT") ;
   RegisterWaypoint(WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS, "WP_FWR_INFRA_IFS_IN_WRITE_FILE_STATUS") ;
   RegisterWaypoint(WP_FWR_INFRA_FFU_WRITE_PARAMETERS, "WP_FWR_INFRA_FFU_WRITE_PARAMETERS") ;
   RegisterWaypoint(WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS, "WP_FWR_INFRA_GET_NEXT_BLOCK_PRAMNETERS") ;
   RegisterWaypoint(WP_FWR_MNT_JMB_SWAP_MB, "WP_FWR_MNT_JMB_SWAP_MB") ;
   RegisterWaypoint(WP_FWR_INFRA_READ_SCRUB_START, "WP_FWR_INFRA_READ_SCRUB_START") ;


   RegisterWaypoint(WP_THERMAL_HWD_AMOUNT_CHANGED, "WP_THERMAL_HWD_AMOUNT_CHANGED") ;
   RegisterWaypoint(WP_THERMAL_HIM_CONTEXT_AMOUNT_CHANGED, "WP_THERMAL_HIM_CONTEXT_AMOUNT_CHANGED") ;
   RegisterWaypoint(WP_THERMAL_PREV_ACT_STATE_CHANGE, "WP_THERMAL_PREV_ACT_STATE_CHANGE") ;


   RegisterWaypoint(WP_FWR_PMM_STARTPST_DISABLE_TIMER, "WP_FWR_PMM_STARTPST_DISABLE_TIMER") ;
   RegisterWaypoint(WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA, "WP_FWR_PMM_STARTPST_SEND_MSG_TO_INFRA") ;
   RegisterWaypoint(WP_FWR_PMM_INFRA_ISSUEPST, "WP_FWR_PMM_INFRA_ISSUEPST") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_NO_PREV_REQ, "WP_FWR_PMM_ISSUEPST_NO_PREV_REQ") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_TERMAL, "WP_FWR_PMM_ISSUEPST_TERMAL") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_THROTTLING, "WP_FWR_PMM_ISSUEPST_THROTTLING") ;
   RegisterWaypoint(WP_FWR_PMM_ISSUEPST_FE_PARAM, "WP_FWR_PMM_ISSUEPST_FE_PARAM") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_FTL, "WP_FWR_PMM_EXECUTEPST_FTL") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_SEC, "WP_FWR_PMM_EXECUTEPST_SEC") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_PS, "WP_FWR_PMM_EXECUTEPST_PS") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_PCU, "WP_FWR_PMM_EXECUTEPST_PCU") ;
   RegisterWaypoint(WP_FWR_PMM_EXECUTEPST_AON, "WP_FWR_PMM_EXECUTEPST_AON") ;
   RegisterWaypoint(WP_FWR_PMM_AON_ENTER_LOW_POWER, "WP_FWR_PMM_AON_ENTER_LOW_POWER") ;
   RegisterWaypoint(WP_FWR_PMM_INFRA_ISSUEPST_END, "WP_FWR_PMM_INFRA_ISSUEPST_END") ;
   RegisterWaypoint(WP_FWR_PMM_END, "WP_FWR_PMM_END") ;
   RegisterWaypoint(WP_FWR_PS_EH_COPY_HANDLER, "WP_FWR_PS_EH_COPY_HANDLER") ;
   RegisterWaypoint(WP_FWR_PS_EH_ERROR_LOG_FLUSH, "WP_FWR_PS_EH_ERROR_LOG_FLUSH") ;
   RegisterWaypoint(WP_FWR_PS_EH_PF_EF_ISR, "WP_FWR_PS_EH_PF_EF_ISR") ;
   RegisterWaypoint(WP_FWR_PS_DGM_GSD_HALT, "WP_FWR_PS_DGM_GSD_HALT") ;
   RegisterWaypoint(WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION, "WP_FWR_IFS_AFTER_UPDATE_BBT_BEFORE_COMPLETION") ;
   RegisterWaypoint(WP_FWR_PMM_ABORT_END, "WP_FWR_PMM_ABORT_END") ;
   RegisterWaypoint(WP_FWR_PMM_END, "WP_FWR_PMM_END") ;
   RegisterWaypoint(WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO, "WP_FWR_PMM_REJECT_POWER_STATE_NON_ZERO_IO") ;

   RegisterWaypoint(WP_FWR_PS_WRITE_SLC_RND_USER_DATA, "WP_FWR_PS_WRITE_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_TLC_RND_USER_DATA, "WP_FWR_PS_WRITE_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_CONTROL_DATA, "WP_FWR_PS_WRITE_CONTROL_DATA") ;
   RegisterWaypoint(WP_FWR_PS_WRITE_FS_DATA, "WP_FWR_PS_WRITE_FS_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_SLC_RND_USER_DATA, "WP_FWR_PS_ERASE_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_TLC_RND_USER_DATA, "WP_FWR_PS_ERASE_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_FS_DATA, "WP_FWR_PS_ERASE_FS_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_SLC_RND_USER_DATA, "WP_FWR_PS_READ_SLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_TLC_RND_USER_DATA, "WP_FWR_PS_READ_TLC_RND_USER_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_CONTROL_DATA, "WP_FWR_PS_READ_CONTROL_DATA") ;
   RegisterWaypoint(WP_FWR_PS_READ_FS_DATA, "WP_FWR_PS_READ_FS_DATA") ;

   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_CFH, "WP_FWR_PS_EH_READ_RETRY_CFH") ;
   RegisterWaypoint(WP_FWR_PS_BES5_PARAMS, "WP_FWR_PS_BES5_PARAMS") ;
   RegisterWaypoint(WP_FWR_PS_BES7_PARAMS, "WP_FWR_PS_BES7_PARAMS") ;
   RegisterWaypoint(WP_FWR_PS_ERASE_RETIRED_BLOCK, "WP_FWR_PS_ERASE_RETIRED_BLOCK") ;
   RegisterWaypoint(WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE, "WP_FWR_PS_HANDLE_XOR_RECOVERY_COMPLETE") ;
   RegisterWaypoint(WP_FWR_PS_EH_END, "WP_FWR_PS_EH_END") ;
   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_SB1, "WP_FWR_PS_EH_READ_RETRY_SB1") ;
   RegisterWaypoint(WP_FWR_PS_EH_READ_RETRY_SB2, "WP_FWR_PS_EH_READ_RETRY_SB2") ;
   RegisterWaypoint(WP_FWR_PS_EH_RF_ISR, "WP_FWR_PS_EH_RF_ISR") ;

   RegisterWaypoint(WP_SGD_DETECTION_START, "WP_SGD_DETECTION_START") ;
   RegisterWaypoint(WP_SGD_DETECTION_END, "WP_SGD_DETECTION_END") ;
   RegisterWaypoint(WP_SGD_DETECTION_FAIL, "WP_SGD_DETECTION_FAIL") ;
   RegisterWaypoint(WP_SGD_CORRECTION_START, "WP_SGD_CORRECTION_START") ;
   RegisterWaypoint(WP_SGD_CORRECTION_END, "WP_SGD_CORRECTION_END") ;
   RegisterWaypoint(WP_SGD_CORRECTION_FAIL, "WP_SGD_CORRECTION_FAIL") ;

   RegisterWaypoint(WP_MNT_MBM_META_DATA_PHY_BLOCK, "WP_MNT_MBM_META_DATA_PHY_BLOCK") ;
   RegisterWaypoint(WP_MNT_MBM_RETURN_FROM_READ, "WP_MNT_MBM_RETURN_FROM_READ") ;
   RegisterWaypoint(WP_MNT_MBM_BOUNDERY_COND_LONG_PARITY, "WP_MNT_MBM_BOUNDERY_COND_LONG_PARITY") ;
   RegisterWaypoint(WP_MNT_MBM_UGSD_NEW_MB, "WP_MNT_MBM_UGSD_NEW_MB") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_BKOPS, "WP_MNT_STATE_MOUNT_BKOPS") ;
   RegisterWaypoint(WP_MNT_STATE_MOUNT_INIT_MNT_CB, "WP_MNT_STATE_MOUNT_INIT_MNT_CB") ;
   RegisterWaypoint(WP_MNT_HOST_FLGP_BITMAP_FMU, "WP_MNT_HOST_FLGP_BITMAP_FMU") ;

   RegisterWaypoint(WP_QUITPROG_DATA, "WP_QUITPROG_DATA") ;




   RegisterWaypoint(WP_PS_DGM_1P0V, "WP_PS_DGM_1P0V") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_COUNTERS, "WP_PS_DGM_1P0V_COUNTERS") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE, "WP_PS_DGM_1P0V_LOGIC_TABLE_COVERAGE") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_CMD, "WP_PS_DGM_1P0V_CMD") ;
   RegisterWaypoint(WP_PS_DGM_AVPGM_SET_FEATURE, "WP_PS_DGM_AVPGM_SET_FEATURE") ;

   RegisterWaypoint(WP_SAT_TRANSLATE_RESULT, "WP_SAT_TRANSLATE_RESULT") ;
   RegisterWaypoint(WP_SAT_ULAYER_REBUILD_COMPLETE, "WP_SAT_ULAYER_REBUILD_COMPLETE") ;


   RegisterWaypoint(WP_FNV_CMD_START, "WP_FNV_CMD_START") ;
   RegisterWaypoint(WP_FNV_RLC_TYPE_SELECTED, "WP_FNV_RLC_TYPE_SELECTED") ;
   RegisterWaypoint(WP_FNV_CMD_JB_PICKED, "WP_FNV_CMD_JB_PICKED") ;
   RegisterWaypoint(WP_FNV_CMD_SRC_RELEASED, "WP_FNV_CMD_SRC_RELEASED") ;
   RegisterWaypoint(WP_FNV_CMD_COMPLETED, "WP_FNV_CMD_COMPLETED") ;



   RegisterWaypoint(WP_ARD_COMPUTE_RATIO, "WP_ARD_COMPUTE_RATIO") ;
   RegisterWaypoint(WP_ARD_BITMAP_UPDATE, "WP_ARD_BITMAP_UPDATE") ;
   RegisterWaypoint(WP_ARD_CHECK_POINT, "WP_ARD_CHECK_POINT") ;



   RegisterWaypoint(WP_PROTECTED_TRY_TO_CREATE, "WP_PROTECTED_TRY_TO_CREATE") ;
   RegisterWaypoint(WP_PROTECTED_MSET_CREATE, "WP_PROTECTED_MSET_CREATE") ;
   RegisterWaypoint(WP_PROTECTED_MSET_FLUSH_BEGIN, "WP_PROTECTED_MSET_FLUSH_BEGIN") ;
   RegisterWaypoint(WP_PROTECTED_MSET_FLUSH_COMPLETED, "WP_PROTECTED_MSET_FLUSH_COMPLETED") ;


   RegisterWaypoint(WP_PS_DGM_ERASE, "WP_PS_DGM_ERASE") ;
   RegisterWaypoint(WP_PS_DGM_VPGMU, "WP_PS_DGM_VPGMU") ;
   RegisterWaypoint(WP_PS_EF_10_ELC_LOOP_COUNTER, "WP_PS_EF_10_ELC_LOOP_COUNTER") ;
   RegisterWaypoint(WP_PS_EF_11_NPD_START, "WP_PS_EF_11_NPD_START") ;
   RegisterWaypoint(WP_PS_EF_12_NPD_CHECK, "WP_PS_EF_12_NPD_CHECK") ;
   RegisterWaypoint(WP_PS_EF_13_NPD_CHECK_DONE, "WP_PS_EF_13_NPD_CHECK_DONE") ;
   RegisterWaypoint(WP_PS_FTL_PHY_ERASE_REQ_BLOCK, "WP_PS_FTL_PHY_ERASE_REQ_BLOCK") ;
   RegisterWaypoint(WP_PS_DGM_1P0V_SET_FEATURE, "WP_PS_DGM_1P0V_SET_FEATURE") ;
   RegisterWaypoint(WP_PS_MRPH_MT_VERSION, "WP_PS_MRPH_MT_VERSION") ;
   RegisterWaypoint(WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE, "WP_PS_MRPH_USERROM_OR_ACTIVE_PACKAGE") ;


   RegisterWaypoint(WP_ROM_CVD_READ_COARSE, "WP_ROM_CVD_READ_COARSE") ;
   RegisterWaypoint(WP_ROM_CVD_READ_FINE, "WP_ROM_CVD_READ_FINE") ;
   RegisterWaypoint(WP_ROM_NPDP_READ, "WP_ROM_NPDP_READ") ;
   RegisterWaypoint(WP_INFRA_ROM_PATH_EVENT, "WP_INFRA_ROM_PATH_EVENT") ;

}

#line 23 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_dbgutils.h"

#line 107 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_dbgutils.h"
typedef struct FML_DbgUtilsResourcesUse_s
{
   uint32_t handlerId;
   uint64_t startTime;
   uint64_t endTime;
   uint64_t totalTime;
   uint32_t cuqCnt;
   uint32_t pendingCompletions[ (2) ];
   uint32_t ctxtAllocs;
   uint32_t uaAllocs     [ (6) ];
   uint32_t blockAllocs  [ (2) ];
   uint32_t blockReleases[ (2) ];
   uint32_t psOperations [ (2) ][ (6) ];
} FML_DbgUtilsResourcesUse_t;

typedef struct FML_DbgUtilsResourcesUseCb_s
{
   FML_DbgUtilsResourcesUse_t currUse;
   FML_DbgUtilsResourcesUse_t maxUse;
   FML_DbgUtilsResourcesUse_t maxHandlerId;
   FML_DbgUtilsResourcesUse_t threshUse;
} FML_DbgUtilsResourcesUseCb_t;


typedef struct FML_DbgUtilsCb_s
{
   FML_DbgUtilsResourcesUseCb_t resUseCb;
} FML_DbgUtilsCb_t;




extern FML_DbgUtilsCb_t FML_DbgUtilsCb;









void FML_DbgUtilsInit(void);






void FML_DbgUtilsMeasureFlowStart(uint32_t handlerId);






void FML_DbgUtilsMeasureFlowEnd(void);

void FTL_GetStats(void);

#line 24 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/rtos/inc_public/rtos_eventflagdefines.h"

#line 27 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_handlers_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_handlers_api_mp0.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_defines.h"

#line 42 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_defines.h"
enum FQD_MAILBOX_MPType_e
{
   MP_MAILBOX_PS0 = 0,

   MP_MAILBOX_PS1,

   MP_MAILBOX_DPCA,
   MP_MAILBOX_NUM_TOTAL,
};
typedef uint32_t FQD_MAILBOX_MPType_t;

#line 23 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_handlers_api_mp0.h"










typedef enum
{
   FML_HID_PS_ADMIN_URGENT_0,
   FML_HID_PS_ADMIN_URGENT_1,
   FML_HID_CAT_HMB_COMP,
   FML_HID_FMG_EXCLUSIVE,

   FML_HID_XOR_HMB_COMP,
   FML_HID_PS_COMP_0,
   FML_HID_PS_COMP_1,
   FML_HID_DPCA_COMP,
   FML_HID_PS_ADMIN_NORMAL_0,

   FML_HID_PS_ADMIN_NORMAL_1,
   FML_HID_FMG_MANAGEMENT,
   FML_HID_FMG_WRITE,
   FML_HID_FE_ADMIN,

   FML_HID_HOST_READ,
   FML_HID_FMG_PENDING_FOR_CL_LOAD,
   FML_HID_HOST_4K_ALIGN_READ,
   FML_HID_HOST_MP1_REQUEUE,
   FML_HID_HOST_READ_OVP,
   FML_HID_HOST_WRITE_W_BALANCING,

   FML_HID_HOST_WRITE_W_BALANCING_RW = FML_HID_HOST_WRITE_W_BALANCING,
   FML_HID_HOST_WRITE_W_BALANCING_SW,
   FML_HID_HOST_WRITE_W_BALANCING_OVP,
   FML_HID_FMG_BKOPS,

   FML_HID_MP1_ACK_Q,

   FML_HID_IDLE,
   FML_HID_NUM,
   FML_HID_URGENT,
   FML_HID_ILLEGAL,
}FML_HanderId;

#line 23 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_handlers_api.h"

#line 67 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_handlers_api.h"
BOOL32 FML_isHandlerActive(FML_HanderId queueId);

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/cathmb_api.h"

#line 58 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/cathmb_api.h"
void CATHMB_HMBBufferLoad(uint32_t fflba, uint32_t CLBuffId);
void CATHMB_UT_CLHandler();
void CATHMB_checkValidityHmbSlot(uint32_t mSetId);


uint32_t CATHmb_getBaseAddress();
uint32_t CATHMB_GetRunLen(uint32_t fflba, uint32_t* transJba, uint32_t* length_p, uint32_t maxNumStaticBuffer, uint32_t startBuffer);
void CATHmb_IncrementReadCLStats();
void CATHmb_IncrementWriteCLStats();
void CATHmb_IncrementWriteDMAStats();
void CATHmb_IncrementReadDMAStats();

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"

#line 27 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
uint32_t GetLog2RoundDown(uint32_t Value);
uint32_t XorArray32(uint32_t* pData, uint32_t DataBitSize);





int32_t NORM( int32_t x );
int16_t NORMW( int16_t x );
int32_t FFS( int32_t x );
int32_t FLS( int32_t x );

#line 84 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
__inline static  uint32_t GetLog2(uint32_t value)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(value != 0), "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h" , 86 , "value != 0");                         "BullseyeCoverage restore"; } ;

   if (value <= 0x80000000)
   {
      if (value == 0)
      {

         return  (0xFFFFFFFFUL) ;
      }
      else
      {

         return ((uint32_t)31 - NORM((int32_t)(value - 1)));
      }
   }



   return 32;
}









__inline static  uint32_t SumBits(uint32_t a)
{
   a = (a & 0x55555555) + ((a >> 1) & 0x55555555);
   a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
   a = (a & 0x0F0F0F0F) + ((a >> 4) & 0x0F0F0F0F);
   a = (a & 0x00FF00FF) + ((a >> 8) & 0x00FF00FF);
   a = (a & 0x0000FFFF) + ((a >> 16) & 0x0000FFFF);
   return a;
}









__inline static  uint32_t Xor32(uint32_t Data)
{
   uint32_t xor_result;


   xor_result = (Data & 0xFFFF) ^ (Data >> 16);
   xor_result = (xor_result & 0xFF) ^ (xor_result >> 8);
   xor_result = (xor_result & 0xF) ^ (xor_result >> 4);
   xor_result = (xor_result & 0x3) ^ (xor_result >> 2);
   xor_result = (xor_result & 0x1) ^ (xor_result >> 1);


   return xor_result;
}

#line 158 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
__inline static  uint32_t parityBits(uint32_t a)
{
   uint32_t lenA = 32;
   while (lenA >>= 1)
   {
      a ^= (a >> lenA);
   }
   return a & 0x1;
}

#line 178 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
__inline static  uint32_t GetBitLocation(uint32_t a)
{
   uint32_t n = 1;
   if (a == 0)
   {
      return  (0xFFFFFFFFUL) ;
   }
   if (!(a & 0x0000FFFF))
   {
      n += 16; a >>= 16;
   }
   if (!(a & 0x000000FF))
   {
      n += 8; a >>= 8;
   }
   if (!(a & 0x0000000F))
   {
      n += 4; a >>= 4;
   }
   if (!(a & 0x00000003))
   {
      n += 2; a >>= 2;
   }
   return n - (a & 0x1);
}

#line 214 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
__inline static  uint8_t crc8(uint8_t *pBuffer, uint32_t len)
{
   uint8_t crc = 0xFF;
   uint32_t i;
   while (len--)
   {
      crc ^= *pBuffer++;
      for (i = 8; i != 0; i--)
      {
         crc = (uint8_t)((crc & 0x80) ? (crc << 1) ^ 0x31 : crc << 1);
      }
   }

   return crc;
}

#line 240 "d:/gitrepo/fpgcss-vega/source/infra/modules/math/inc_public/sys_mathlib.h"
__inline static  uint16_t crc16(uint16_t *pBuffer, uint32_t len)
{
   uint16_t crc = 0x0000;
   uint32_t i;
   while (len--)
   {
      crc ^= *pBuffer++;
      for (i = 16; i != 0; i--)
      {
         crc = (uint16_t)((crc & 0x8000) ? (crc << 1) ^ 0x8005 : crc << 1);
      }
   }

   return crc;
}










__inline static  void addTo128BitField(uint128_t* struct128, uint64_t addedValue)
{
   struct128->uint64[0] = struct128->uint64[0] + addedValue;

   if (struct128->uint64[0] < addedValue)
   {
      struct128->uint64[1]++;
   }
}










__inline static  void subtractFrom128BitField(uint128_t* struct128, uint64_t subtractedValue)
{
   struct128->uint64[0] = struct128->uint64[0] - subtractedValue;

   if (struct128->uint64[0] > subtractedValue)
   {
      struct128->uint64[1]--;
   }
}









__inline static  void zeroOut128BitField(uint128_t* struct128)
{
   struct128->uint64[0] = 0;
   struct128->uint64[1] = 0;
}









uint32_t SYS_StringHash(const char *str);

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_mp0.h"

#line 71 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml_mp0.h"
void  FML_Init_II(void);

void FML_initZeroBuffer(void);

#line 35 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"

#line 39 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
typedef struct __S_FML_HAS_WORK S_FML_HAS_WORK;

#line 183 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
__inline static  BOOL32 FML_IsInFTL(void)
{
   RTOS_ThreadInfo_t  threadInfo = RTOS_GetThreadInfo();

   return (threadInfo.threadType == THREAD_ID_RAM_FTL);
}

#line 226 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
typedef enum
{
   FML_RESTRICT_1ST,
   FML_RESTRICT_FMG = FML_RESTRICT_1ST,
   FML_RESTRICT_PS_Q,
   FML_RESTRICT_JB_ALLOC,
   FML_RESTRICT_ULAYER,
   FML_RESTRICT_BRLC,
   FML_RESTRICT_WRITE_QUOTA,
   FML_RESTRICT_LRM_BOUNDERY = FML_RESTRICT_WRITE_QUOTA,
   FML_RESTRICT_INTERNAL_WRITE_QUOTA,
   FML_RESTRICT_WRITE_SYNC,
   FML_RESTRICT_RMW_BY_FE,
   FML_RESTRICT_HWD_GRP_ID,
   FML_RESTRICT_OVP_SYNCH,
   FML_RESTRICT_OVP_RMW,
   FML_RESTRICT_WRITE_ON_RMW,
   FML_RESTRICT_DEALLOC_ON_RMW,
   FML_RESTRICT_LIMITED_BKOPS,
   FML_RESTRICT_RS_DB_FULL,
   FML_RESTRICT_RS_PEM_ACTIVE,
   FML_RESTRICT_MOUNT_NO_RD_WR,
   FML_RESTRICT_MOUNT_NO_WR,
   FML_RESTRICT_IDALIZING_FTL,
   FML_RESTRICT_RO_MODE,
   FML_RESTRICT_FNVM,
   FML_RESTRICT_BRLC_NO_RD,
   FML_RESTRICT_MOUNT_NO_FE_Q,
   FML_RESTRICT_RS_DISABLED,
   FML_RESTRICT_READ_OVP,
   FML_RESTRICT_READ_OVP_RLA,
   FML_RESTRICT_XOR_REBUILD_ON_RESET,
   FML_RESTRICT_XOR_SWAP_Q,
   FML_RESTRICT_XBID_MODE_SWITCH,
   FML_RESTRICT_XOR_HMB_SWITCH,
   FML_RESTRICT_XOR_HMB_SWITCH_START,
   FML_RESTRICT_DEBUG,
   FML_RESTRICT_FBCC_DIAG,


   FML_RESTRICT_NUM,
}FML_ResRestrictions;





typedef struct __S_FML_RESTRICT
{
   uint64_t FML_RESTRICT_FMG : 1;
   uint64_t FML_RESTRICT_PS_Q : 1;
   uint64_t FML_RESTRICT_JB_ALLOC : 1;
   uint64_t FML_RESTRICT_ULAYER : 1;
   uint64_t FML_RESTRICT_BRLC : 1;
   uint64_t FML_RESTRICT_WRITE_QUOTA : 1;
   uint64_t FML_RESTRICT_INTERNAL_WRITE_QUOTA : 1;
   uint64_t FML_RESTRICT_WRITE_SYNC : 1;
   uint64_t FML_RESTRICT_RMW_BY_FE : 1;
   uint64_t FML_RESTRICT_HWD_GRP_ID : 1;
   uint64_t FML_RESTRICT_OVP_SYNCH : 1;
   uint64_t FML_RESTRICT_OVP_RMW : 1;
   uint64_t FML_RESTRICT_WRITE_ON_RMW : 1;
   uint64_t FML_RESTRICT_DEALLOC_ON_RMW : 1;
   uint64_t FML_RESTRICT_LIMITED_BKOPS : 1;
   uint64_t FML_RESTRICT_RS_DB_FULL : 1;
   uint64_t FML_RESTRICT_RS_PEM_ACTIVE : 1;
   uint64_t FML_RESTRICT_MOUNT_NO_RD_WR : 1;
   uint64_t FML_RESTRICT_MOUNT_NO_WR : 1;
   uint64_t FML_RESTRICT_IDALIZING_FTL : 1;
   uint64_t FML_RESTRICT_RO_MODE : 1;
   uint64_t FML_RESTRICT_FNVM : 1;
   uint64_t FML_RESTRICT_BRLC_NO_RD : 1;
   uint64_t FML_RESTRICT_MOUNT_NO_FE_Q : 1;
   uint64_t FML_RESTRICT_RS_DISABLED : 1;
   uint64_t FML_RESTRICT_READ_OVP : 1;
   uint64_t FML_RESTRICT_READ_OVP_RLA : 1;
   uint64_t FML_RESTRICT_XOR_REBUILD_ON_RESET : 1;
   uint64_t FML_RESTRICT_XOR_SWAP_Q : 1;
   uint64_t FML_RESTRICT_XBID_MODE_SWITCH : 1;
   uint64_t FML_RESTRICT_XOR_HMB_SWITCH : 1;
   uint64_t FML_RESTRICT_XOR_HMB_SWITCH_START : 1;
   uint64_t FML_RESTRICT_DEBUG : 1;
   uint64_t FML_RESTRICT_FBCC_DIAG : 1;

} S_FML_RESTRICT;

enum FML_GoIdleState_s
{
    FML_GO_IDLE_STATE_IDLE,
    FML_GO_IDLE_STATE_EMPTY_HA_FIFO_AND_FLUSH_HAWA,
    FML_GO_IDLE_STATE_WAIT_OVP,
    FML_GO_IDLE_STATE_WAIT_IDLE,
    FML_GO_IDLE_STATE_WAIT_BARRIER,
    FML_GO_IDLE_STATE_POST_IDLE,
    FML_GO_IDLE_STATE_CALLBACK,
    FML_GO_IDLE_STATE_MAX,
};

typedef uint32_t FML_GoIdleState_t;

typedef enum
{
   HPM_WORK,
   ZCAT_WORK
}FML_ScheduleIdleOperation_t;




typedef void (*fmlHander)(void);
typedef void (*fmlIdleHandler)(uint32_t);

typedef struct FML_Handler_s
{
   uint64_t hasWorkMask;
   fmlHander func;
   uint32_t handlerNum;

#line 346 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
} FML_Handler_t;




typedef struct FML_Cb_s
{
   uint32_t numberOfQs;

   FML_Handler_t handlers[ (64) ];
   uint8_t myRRpoints[ (64) ];
   uint8_t currentRRpoints[ (64) ];

   FML_Handler_t *handler;

   uint16_t       idleizationCtxt;
   uint16_t       padding;
   FML_GoIdleState_t idleizationState;
   fmlIdleHandler idleReqCallback;
   uint32_t       idleReqCallbackParam;

   uint32_t hostQueues;

   uint64_t hasWRRmask;





   uint64_t currRestrictorsCombination;


    uint64_t currActiveHandlersBitmap;


   uint32_t activeHandlersBitmapsPerRestrictor[FML_RESTRICT_NUM];

   uint32_t maskOnFullResources;

   S_FML_HAS_WORK * dbgHasWorkBits;
   S_FML_HAS_WORK * dbgActiveHandlerBits;
   S_FML_RESTRICT * dbgFmlRestrictorsBits;

   uint32_t FTL_ThreadID;

   FML_ScheduleIdleOperation_t futureOperationDuringIdle;

} FML_Cb_t;






typedef struct FML_RTFADI_Data_s
{
   uint32_t workRegister;
   uint64_t currRestrictorsCombination;
   uint8_t idleizationState;
   uint8_t rfu[3];
   uint32_t toatlDurationMsPerRestriction[FML_RESTRICT_NUM];
}  FML_RTFADI_Data_t;








extern FML_Cb_t FML_CB;







void FML_Set_HostQueuesBeforeIdle(uint32_t * hostQueues);


uint32_t   FML_GetRTFADIStatistics(FML_RTFADI_Data_t * pFMLRTFADI);

#line 439 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
void  __attribute__((section("TRW")))  FML_Init (void);










void  __attribute__((section("TRW")))  FML_i_InitLrm(void);

BOOL32 FML_shouldNotifyMP1(FML_ResRestrictions res);

#line 467 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
void   FML_Execute(void);

#line 480 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
void   FML_FADIStatsSetRestriction(FML_ResRestrictions res);

void   FML_ReturnToGoIdleFromTLCFlushBuffers(void);








void    FML_DiagSetFtlWorkingMode(uint8_t mode);

#line 508 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
__inline static  BOOL32 FML_IsPendingForIdle(void)
{
   return (FML_CB.idleizationState >= FML_GO_IDLE_STATE_WAIT_OVP);
}

#line 526 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
__inline static  void FML_Register(FML_HanderId handlerId, const FML_Handler_t * handlerCfg, uint8_t RRweight)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)handlerId < (64)), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h" , 528 , "(uint32_t)handlerId < (64)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(handlerCfg), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h" , 529 , "handlerCfg");                         "BullseyeCoverage restore"; } ;

   LivetMemcpy (&FML_CB.handlers[handlerId], handlerCfg, sizeof(FML_Handler_t));
   FML_CB.myRRpoints[handlerId] = RRweight;
}

#line 547 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
void   FML_SetResRestriction(FML_ResRestrictions res);

#line 561 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
void   FML_ClearRestrictionInternal(FML_ResRestrictions res);

__inline static  BOOL32 FML_NoRestrictionSet(void)
{
   return FML_CB.currRestrictorsCombination == 0;
}

#line 578 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
BOOL32   FML_IsFmlIdleAndNoPsCompl(void);

#line 591 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
BOOL32   FML_IsFtlIdleAndNoPsCompl(void);

#line 603 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
BOOL32   FML_IsFullyIdle(void);










void   FML_DeactivateAndIdle(fmlIdleHandler func, uint32_t param, BOOL32 deactivateBeforeIdle);










void   FML_Activate(BOOL32 Activate);

void   FML_FEAdminQLogState(void);

#line 641 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
__inline static  void FML_ClearResRestriction(FML_ResRestrictions res)
{
   if ( (uint64_t)((FML_CB.currRestrictorsCombination) & ( (1ULL << (res)) ))  !=  (0) )
   {
      FML_ClearRestrictionInternal(res);
   }
}










__inline static  BOOL32 FML_IsLowResRestriction(FML_ResRestrictions res)
{
   return ( (uint64_t)((FML_CB.currRestrictorsCombination) & ( (1ULL << (res)) )) )!=0;
}









__inline static  void FML_SetNextActiveQueue(void)
{

   uint32_t nextQueueIdx = (uint32_t)FFS((int32_t)( ( ReadRegister64( (unsigned long)( ( 0xf83a0000  + (0x0230) ) ) )  & FML_CB.currActiveHandlersBitmap)  & FML_CB.hasWRRmask));
   { "BullseyeCoverage save off";                          _AssertImpl((int)(nextQueueIdx != (64) - 1), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h" , 675 , "nextQueueIdx != (64) - 1");                         "BullseyeCoverage restore"; } ;


   FML_CB.handler = &(FML_CB.handlers[nextQueueIdx]);
}

#line 693 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fml.h"
__inline static  void FML_IncementCounter(uint32_t handlerNum)
{
   FML_CB.currentRRpoints[handlerNum]++;

   if (FML_CB.currentRRpoints[handlerNum] > FML_CB.myRRpoints[handlerNum])
   {
       (FML_CB.hasWRRmask) &= (uint64_t)(~( (1ULL << (handlerNum)) )) ;
   }
}

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"

#line 166 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
typedef enum FMG_CtxtLoc_s
{
   FMG_CTXT_LOC_FREE,
   FMG_CTXT_LOC_FLOW,
   FMG_CTXT_LOC_PENDING_QUEUE,
   FMG_CTXT_LOC_READY_QUEUE,
   FMG_CTXT_LOC_PS,
   FMG_CTXT_LOC_DPCA,
   FMG_CTXT_LOC_WAIT_FOR_TIMER,
   FMG_CTXT_LOC_TOTAL,
} FMG_CtxtLoc_t;


typedef enum FMG_ExecStatus_s
{
   FMG_STATUS_OK,
   FMG_STATUS_FAIL,
   FMG_STATUS_TOTAL,
} FMG_ExecStatus_t;







typedef void (*FMG_CallbackFunc_t)(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);




typedef struct FMG_Ctxt_s
{
   FMG_CallbackFunc_t   pCallbackFunc;
   void*                pUserArea;
   uint32_t             failureReport;
   uint32_t             pendingCompletions;
   uint16_t             nextCtxtIdx;
   uint16_t             thisCtxtIdx;
   uint8_t              weightToAquire;
   uint8_t              dstRdyQueue;
   uint8_t              allowedNestedAlloc : 2;
   uint8_t              isCounting         : 1;
   uint8_t              isAggregating      : 1;
   uint8_t              dismissStatusCheck : 1;
   uint8_t              allRdsErased : 1;
   uint8_t              isLastComplectionErased : 1;
   uint8_t              isWUC : 1;



   uint8_t              locationId         : 3;
   uint8_t              status             : 1;
   uint8_t              isScheduled        : 1;
   uint8_t              skipExecution      : 1;
   uint8_t              rfu8_2             : 2;


   uint32_t             dbgCounter;


} FMG_Ctxt_t;




typedef struct FMG_CtxtQueue_s
{
   uint16_t firstIdx;
   uint16_t lastIdx;
   uint16_t count;
} FMG_CtxtQueue_t;




typedef struct FMG_CtxtCb_s
{
   FMG_Ctxt_t        pContextsTbl    [ (512) ];
   FMG_CtxtQueue_t   pReadyQueuesTbl [FML_HID_NUM];

   uint32_t          freeCtxtCount;
   uint32_t          freeLstHeadIdx;
   uint32_t          dbgCallbackStartFreeCtxtCount;
} FMG_CtxtCb_t;





extern FMG_CtxtCb_t FMG_CtxtCb;

#line 270 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
FMG_Ctxt_t*   FMG_i_CtxtQueuePop (FMG_CtxtQueue_t* pQueue);

#line 282 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
void   FMG_i_CtxtQueueAdd (uint32_t ctxtId, FMG_CtxtQueue_t* pQueue);

#line 295 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
void   FMG_i_CtxtQueueAddToReady (uint32_t ctxtId, FMG_ExecStatus_t execStatus, uint32_t failureReport);

#line 308 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
void   FMG_CtxtQueueAddToPending (uint32_t ctxtId, FMG_CtxtQueue_t* pQueue, uint8_t weight);

#line 329 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
uint32_t   FMG_CtxtReportFailure(MP_MQD_PSType_t psid, uint32_t cookie, uint32_t report, uint16_t errorCode);

#line 344 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
void   FMG_CtxtHandleMailbox (uint32_t cookie);




void   FMG_CtxtHandleReadyQueueManagement(void);
void   FMG_CtxtHandleReadyQueueWrite(void);
void   FMG_CtxtHandleReadyQueueExclusive(void);
void   FMG_CtxtHandleReadyQueueBkops(void);
void FMG_CtxtHandleReadyQueueWaitForCLLoad(void);

#line 370 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
uint16_t   FMG_CtxtAllocate (FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue, BOOL32 countCompletions);










void   FMG_CtxtRelease (uint32_t ctxtId);










void  __attribute__((section("TRW")))  FMG_CtxtInitContexts (void);

#line 408 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint8_t          FMG_Ctxt_GetLocationId (FMG_Ctxt_t *pCtxt) { return                   pCtxt->locationId ; }
__inline static  FMG_ExecStatus_t FMG_Ctxt_GetStatus     (FMG_Ctxt_t *pCtxt) { return (FMG_ExecStatus_t)pCtxt->status     ; }
__inline static  BOOL             FMG_Ctxt_GetIsScheduled(FMG_Ctxt_t *pCtxt) { return                   pCtxt->isScheduled; }

#line 422 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void    FMG_Ctxt_SetLocationId (FMG_Ctxt_t *pCtxt, FMG_CtxtLoc_t          locationId ) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->locationId = (uint8_t)locationId;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }
__inline static  void    FMG_Ctxt_SetStatus     (FMG_Ctxt_t *pCtxt, FMG_ExecStatus_t status     ) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->status = (uint8_t)status;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }
__inline static  void    FMG_Ctxt_SetIsScheduled(FMG_Ctxt_t *pCtxt, BOOL             isScheduled) {  do {      uint32_t oldPosture = DisableInt() ;      pCtxt->isScheduled = isScheduled;      RestoreInt(oldPosture) ;   } while ((void)0, 0) ; }

#line 438 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtQueueInit (FMG_CtxtQueue_t* pQueue)
{
   pQueue->firstIdx  =  ( (0xFFFF)  - 1) ;
   pQueue->lastIdx   =  ( (0xFFFF)  - 1) ;
   pQueue->count     = 0;
}










__inline static  uint32_t FMG_CtxtQueuePeek (FMG_CtxtQueue_t* pQueue)
{
   return pQueue->firstIdx;
}










__inline static  void FMG_CtxtQueueMoveToReady (FMG_CtxtQueue_t* pSrcQueue)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(FML_IsInFTL()), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 470 , "FML_IsInFTL()");                         "BullseyeCoverage restore"; } ;
   FMG_i_CtxtQueueAddToReady(FMG_i_CtxtQueuePop(pSrcQueue)->thisCtxtIdx, FMG_STATUS_OK, 0);
}

#line 488 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint16_t FMG_CtxtAllocateNonCountingCompletions(FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue)
{
   return FMG_CtxtAllocate(pCallbackFunc, pUserArea, destRdyQueue,  (0) );
}

#line 504 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint16_t FMG_CtxtAllocateCountingCompletions(FMG_CallbackFunc_t pCallbackFunc, void* pUserArea, FML_HanderId destRdyQueue)
{
   return FMG_CtxtAllocate(pCallbackFunc, pUserArea, destRdyQueue,  (1) );
}










__inline static  void FMG_CtxtFlowScheduleForLater (uint32_t ctxtId)
{
   FMG_i_CtxtQueueAddToReady(ctxtId, FMG_STATUS_OK, 0);
   if (!FML_IsInFTL())
   {
      RTOS_LightWeightEventSet(EVENT_GROUP_FTL,  0x00000001 );
   }
}

#line 538 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtFlowScheduleForLaterWithStatus (uint32_t ctxtId, FMG_ExecStatus_t execStatus, uint32_t failureReport)
{
   FMG_i_CtxtQueueAddToReady(ctxtId, execStatus, failureReport);
   if (!FML_IsInFTL())
   {
      RTOS_LightWeightEventSet(EVENT_GROUP_FTL,  0x00000001 );
   }
}









__inline static  void FMG_CtxtDecrementDebugCounters(FMG_Ctxt_t* pCtxt, uint32_t amount)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)((pCtxt->isCounting == (0) ) && (pCtxt->pendingCompletions == 0)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 558 , "(pCtxt->isCounting == (0)) && (pCtxt->pendingCompletions == 0)");                         "BullseyeCoverage restore"; } ;



   pCtxt->dbgCounter -= amount;


}

#line 578 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  void FMG_CtxtFlowNotifyOperationStart (uint32_t ctxtId, uint32_t amountPsOps, FMG_CtxtLoc_t contextLocation)
{

   FMG_Ctxt_t* pCtxt =  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((pCtxt->pendingCompletions == 0) || ((pCtxt->isAggregating == (1) ) && (pCtxt->isCounting == (1) ))), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 584 , "(pCtxt->pendingCompletions == 0) || ((pCtxt->isAggregating == (1)) && (pCtxt->isCounting == (1)))");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(pCtxt->dismissStatusCheck || (FMG_Ctxt_GetStatus(pCtxt) == FMG_STATUS_OK)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 587 , "pCtxt->dismissStatusCheck || (FMG_Ctxt_GetStatus(pCtxt) == FMG_STATUS_OK)");                         "BullseyeCoverage restore"; } ;


   FMG_Ctxt_SetLocationId((pCtxt), (contextLocation)) ;


   if (pCtxt->isCounting ==  (1) )
   {
      pCtxt->pendingCompletions += (uint8_t)amountPsOps;
   }

   { "BullseyeCoverage save off";                          _AssertImpl((int)(pCtxt->dbgCounter>=0), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 598 , "pCtxt->dbgCounter>=0");                         "BullseyeCoverage restore"; } ;
   pCtxt->dbgCounter +=amountPsOps;

}

#line 613 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h"
__inline static  uint32_t FMG_CtxtCookieBuild(uint32_t ctxtId, uint16_t payload)
{
  return ((ctxtId &  ((1 << (9) ) - 1) ) <<  (0) ) | ((payload &  ((1 << (16) ) - 1) ) <<  ( (6)  + ( (1)  + ( (9)  + (0) ) ) ) );
}










__inline static  BOOL32 FMG_IsCtxtScheduled(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 629 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return FMG_Ctxt_GetIsScheduled( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) );
}










__inline static  BOOL FMG_CtxtFlowScheduleForLaterSafe (uint32_t ctxtId)
{
   BOOL canSchedule = !FMG_IsCtxtScheduled(ctxtId);

   if (canSchedule)
   {
      FMG_CtxtFlowScheduleForLater(ctxtId);
   }

   return canSchedule;
}









__inline static  void FMG_CtxtFastCallbackOnCompletion(FMG_Ctxt_t* pCtxt, uint32_t cookie)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)(!pCtxt->isCounting || pCtxt->pendingCompletions == 1), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 665 , "!pCtxt->isCounting || pCtxt->pendingCompletions == 1");                         "BullseyeCoverage restore"; } ;
   pCtxt->pendingCompletions = 0;


   if ( (pCtxt->skipExecution))
   {
      pCtxt->skipExecution =  (0) ;
      return;
   }


   if (FMG_Ctxt_GetStatus(pCtxt) != FMG_STATUS_OK)
   {

      (cookie) |= ((((uint32_t)(FMG_Ctxt_GetStatus(pCtxt))) & ( ((1 << (1) ) - 1) )) << ( ( (9)  + (0) ) )) ;


      FMG_Ctxt_SetStatus(pCtxt, FMG_STATUS_OK);
   }


   pCtxt->pCallbackFunc(pCtxt->thisCtxtIdx, (uint16_t) (((cookie) >> ( ( (6)  + ( (1)  + ( (9)  + (0) ) ) ) )) & ( ((1 << (16) ) - 1) )) , (FMG_ExecStatus_t) (((cookie) >> ( ( (9)  + (0) ) )) & ( ((1 << (1) ) - 1) )) );

}




__inline static  void FMG_CtxtSetCallbackFunc(uint32_t ctxtId, FMG_CallbackFunc_t pCallbackFunc)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 695 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;


   ;
   ;
   ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pCallbackFunc = pCallbackFunc;
}
__inline static  void FMG_CtxtSetUserArea(uint32_t ctxtId, void* pUserArea)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 706 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;


   ;
   ;
   ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pUserArea = pUserArea;
}
__inline static  void FMG_CtxtSetDstRdyQueue(uint32_t ctxtId, FML_HanderId dstRdyQueue)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 717 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;


   ;
   ;
   ;
   ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dstRdyQueue = (uint8_t)dstRdyQueue;
}
__inline static  void FMG_CtxtSetWeightToAquire(uint32_t ctxtId, uint8_t weightToAquire)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 728 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;

   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->weightToAquire = weightToAquire;
}
__inline static  void FMG_CtxtSetStartCompletionsAggregation(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 734 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pendingCompletions == 0) && ( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isCounting == (1) )), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 737 , "((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->pendingCompletions == 0) && ((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->isCounting == (1))");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating =  (1) ;
}
__inline static  void FMG_CtxtSetStopCompletionsAggregation(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 742 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isCounting == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 745 , "(&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))->isCounting == (1)");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating =  (0) ;
}

__inline static  void FMG_CtxtSetDismissFailureCheck(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 751 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;

   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dismissStatusCheck =  (1) ;

}

__inline static  void FMG_CtxtSetAllowedNestedAllocations(uint32_t ctxtId, uint8_t allowedAlloc)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 759 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(allowedAlloc <= (3)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 761 , "allowedAlloc <= (3)");                         "BullseyeCoverage restore"; } ;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allowedNestedAlloc = allowedAlloc;
}




__inline static  FMG_CallbackFunc_t FMG_CtxtGetCallbackFunc(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 770 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pCallbackFunc;
}
__inline static  void* FMG_CtxtGetUserArea(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 775 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->pUserArea;
}
__inline static  FML_HanderId FMG_CtxtGetDstRdyQueue(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 780 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return (FML_HanderId)( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->dstRdyQueue);
}
__inline static  uint8_t FMG_CtxtGetWeightToAquire(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 785 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->weightToAquire;
}
__inline static  uint32_t FMG_CtxtGetFailureReport(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 790 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->failureReport;
}
__inline static  uint32_t FMG_CtxtGetRdEraseErr(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 795 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return ( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allRdsErased == 1);
}
__inline static  void FMG_CtxtResetStatusNRdEraseErr(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 800 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(FMG_Ctxt_GetIsScheduled( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ) == (0)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 801 , "FMG_Ctxt_GetIsScheduled((&(FMG_CtxtCb.pContextsTbl[(ctxtId)]))) == (0)");                         "BullseyeCoverage restore"; } ;

   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isLastComplectionErased = 0;
   (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->allRdsErased = 1;
   FMG_Ctxt_SetStatus( (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) , FMG_STATUS_OK);
}

__inline static  BOOL32 FMG_CtxtGetIsAggregatingCompletions(uint32_t ctxtId)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 810 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   return  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ->isAggregating;
}

__inline static  uint32_t FMG_CtxtGetLrmThreshold()
{
   return  (10) ;
}

__inline static  uint32_t FMG_CtxtGetPendingCompletions(uint32_t ctxtId)
{
   FMG_Ctxt_t *pCtxt;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtId < (512)), "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_contexts.h" , 823 , "ctxtId < (512)");                         "BullseyeCoverage restore"; } ;
   pCtxt =  (&(FMG_CtxtCb.pContextsTbl[(ctxtId)])) ;

   return pCtxt->pendingCompletions;
}

__inline static  uint32_t FMG_CtxtIsInLowResources(void)
{
   return (FMG_CtxtCb.freeCtxtCount <  (10) );
}

#line 45 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"

#line 54 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"
typedef struct FMG_Lock_s
{
   FMG_CtxtQueue_t   pendingContextsQueue;
   uint8_t           currWeight;
   uint8_t           defaultWeight;

} FMG_Lock_t;




typedef struct FMG_LockCb_s
{
   FMG_Lock_t pLocks [ (256) ];
} FMG_LockCb_t;





extern FMG_LockCb_t FMG_LockCb;

#line 98 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"
BOOL32   FMG_LockAcquire (uint32_t lockId, uint16_t ctxtId, uint8_t weight, BOOL32 addToPendingQueue);

#line 116 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"
void   FMG_LockRelease (uint32_t lockId, uint8_t weight);

#line 128 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"
void   FMG_LockSetWeight (uint32_t lockId, uint8_t weight);










void  __attribute__((section("TRW")))  FMG_LockInitLocks (void);

#line 154 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_locks.h"
__inline static  BOOL32 FMG_LockIsAquirable (uint32_t lockId, uint8_t weight)
{

   FMG_Lock_t* pLock = &(FMG_LockCb.pLocks[lockId]);
   return ((pLock->currWeight >= weight) && ( ((&(pLock->pendingContextsQueue))->firstIdx == ( (0xFFFF)  - 1) ) ));
}

#line 46 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_userarea.h"

#line 60 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_userarea.h"
typedef enum FMG_UaPoolType_s
{
   FMG_UA_POOL_TYPE_T0,
   FMG_UA_POOL_TYPE_T1,
   FMG_UA_POOL_TYPE_T2,
   FMG_UA_POOL_TYPE_T3,
   FMG_UA_POOL_TYPE_T4,
   FMG_UA_POOL_TYPE_T5,
   FMG_UA_POOL_TYPE_TOTAL,
   FMG_UA_POOL_TYPE_ILLEGAL = 0xFFFFFFFF,
} FMG_UaPoolType_t;





typedef enum FMG_UaBufferSize_s
{
   FMG_UA_BUFF_SIZE_T0 = 20,
   FMG_UA_BUFF_SIZE_T1 =  (0) ,
   FMG_UA_BUFF_SIZE_T2 =  (0) ,
   FMG_UA_BUFF_SIZE_T3 = 104,
   FMG_UA_BUFF_SIZE_T4 = 216,
   FMG_UA_BUFF_SIZE_T5 =  (0) ,
} FMG_UaBufferSize_t;




typedef enum FMG_UaPoolSize_s
{
   FMG_UA_POOL_SIZE_T0 = 16,
   FMG_UA_POOL_SIZE_T1 =  (0) ,
   FMG_UA_POOL_SIZE_T2 =  (0) ,
   FMG_UA_POOL_SIZE_T3 = 96,
   FMG_UA_POOL_SIZE_T4 = 16,
   FMG_UA_POOL_SIZE_T5 =  (0) ,
} FMG_UaPoolSize_t;



typedef enum FMG_UaPoolSizeMin_s
{
   FMG_UA_POOL_SIZE_MIN_T0 = 1,
   FMG_UA_POOL_SIZE_MIN_T1 =  (0) ,
   FMG_UA_POOL_SIZE_MIN_T2 =  (0) ,
   FMG_UA_POOL_SIZE_MIN_T3 = 8,
   FMG_UA_POOL_SIZE_MIN_T4 = 1,
   FMG_UA_POOL_SIZE_MIN_T5 =  (0) ,
} FMG_UaPoolSizeMin_t;







typedef struct FMG_UaHiddenHeader_s
{
   uint16_t canary16;
   uint8_t  canary08;
   uint8_t  poolType;
} FMG_UaHiddenHeader_t;




typedef struct FMG_UaBuffHeader_s
{
   FMG_UaHiddenHeader_t       hiddenHdr;
   struct FMG_UaBuffHeader_s* pNext;
} FMG_UaBuffHeader_t;





typedef struct FMG_UaPool_s
{
   FMG_UaBuffHeader_t*  pFirstFree;
   uint32_t             freeBuffCount;
   uint32_t             minBuffCount;
   uint32_t             nextPoolIdx;
   BOOL32               dbgIsValid;
} FMG_UaPool_t;




typedef struct FMG_UaCb_s
{
   uint32_t       firstPoolIdx;
   FMG_UaPool_t   pPools [FMG_UA_POOL_TYPE_TOTAL];
   uint8_t        pRawBuffer [ ((FMG_UA_POOL_SIZE_T0 * ((FMG_UA_BUFF_SIZE_T0) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T1 * ((FMG_UA_BUFF_SIZE_T1) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T2 * ((FMG_UA_BUFF_SIZE_T2) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T3 * ((FMG_UA_BUFF_SIZE_T3) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T4 * ((FMG_UA_BUFF_SIZE_T4) + sizeof(FMG_UaHiddenHeader_t)) ) +     (FMG_UA_POOL_SIZE_T5 * ((FMG_UA_BUFF_SIZE_T5) + sizeof(FMG_UaHiddenHeader_t)) )) ];
} FMG_UaCb_t;





extern FMG_UaCb_t FMG_UaCb;

#line 179 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_userarea.h"
void*   FMG_UaAllocate (FMG_UaPoolType_t poolType);










void   FMG_UaFree (void* pUserBuff);










void  __attribute__((section("TRW")))  FMG_UaInitUserArea (void);




__inline static  uint32_t FMG_UaGetFreeBuffCount(FMG_UaPoolType_t poolType)
{
    return FMG_UaCb.pPools[poolType].freeBuffCount;
}

#line 47 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rtfadi.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rtfadi.h"
typedef struct MTM_RTFADI_Data_s
{
   uint8_t numClosedBlocks;
   uint8_t isRlcActive;
   uint8_t isSourcePendingRelease;
   uint8_t rfu;
}  MTM_RTFADI_Data_t;

typedef struct ULayer_RTFADI_Data_s
{
   uint16_t numFreeItems;
   uint16_t rfu;
}  ULayer_RTFADI_Data_t;

typedef struct MVP_RTFADI_Data_s
{
   uint16_t freeBlocksSLC;
   uint16_t freeBlocksTLC;
   uint32_t ratioHost;
   uint32_t ratioGc;
   uint8_t relocationType;
   uint8_t prevRelocationType;
   uint16_t numSourcesReleased;
}  MVP_RTFADI_Data_t;


typedef struct FML_FEAdminQ_RTFADI_Data_s
{
   uint32_t numItems;
   uint16_t headIndex;
   uint16_t tailIndex;
   uint8_t  cmdId[3];
   uint8_t  rfu;
}   FML_FEAdminQ_RTFADI_Data_t;

typedef struct FMG_RTFADI_Data_s
{
   uint32_t lowResourcesBitmap;
}  FMG_RTFADI_Data_t;

typedef struct FQD_RTFADI_Data_s
{
   uint16_t mailboxPendingCompletionsPS0;
   uint16_t mailboxPendingCompletionsPS1;
   uint16_t mailboxPendingCompletionsDPCA;
   uint16_t rfu;
}  FQD_RTFADI_Data_t;


typedef struct WL_RTFADI_Stat_s
{
   uint32_t            avgPec;
   uint32_t            maxPec;
   uint32_t            minPec;
   uint16_t            minJbid;
   uint8_t             minBlockExist;
   uint8_t             rfu;
}   WL_RTFADI_Stat_t;









typedef struct RLC_RTFADI_Data_s
{
   uint8_t           rlcState;
   uint8_t           rlcType;
   uint8_t           activeSourceBlocksNum;
   uint8_t           rlcReadQueueInLRM;
   uint32_t          srcJBA;
   uint32_t          sourceVC;
}  RLC_RTFADI_Data_t;


typedef struct RSQ_RTFADI_Data_s
{
   uint32_t          ReqCnt;
   uint8_t           QReqCnt[ 4 ];
   uint8_t           QReqHead[ 4 ];
   uint8_t           QReqTail[ 4 ];
}  RSQ_RTFADI_Data_t;


typedef struct FTL_RTFADI_Data_s
{
   BML_RTFADI_Data_t          bmlData;
   MTM_RTFADI_Data_t          mtmData;
   ULayer_RTFADI_Data_t       ulayerData;
   MVP_RTFADI_Data_t          mvpData;
   FML_RTFADI_Data_t          fmlData;
   FML_FEAdminQ_RTFADI_Data_t fmlAdmQData;
   FMG_RTFADI_Data_t          fmgData;
   FQD_RTFADI_Data_t          fqdData;
   RLC_RTFADI_Data_t          rlcData;
   RSQ_RTFADI_Data_t          rsqData;
   MQD_RTFADI_Data_t          mqdData;
   uint16_t                   padding;
}  FTL_RTFADI_Data_t;

#line 146 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rtfadi.h"
uint32_t  __attribute__((section("CODE_MEDIUM")))  FTL_CopyRTFadiData(FTL_RTFADI_Data_t *pFTLRTFADI);

#line 50 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 84 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"
void  __attribute__((section("TRW")))  FMG_Init (void);


   uint32_t  __attribute__((section("CODE_MEDIUM")))  FMG_GetRTFADIStatistics(FMG_RTFADI_Data_t *pFMGRTFADI);

#line 47 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fnvm/inc/fnvm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/log_common.h"

#line 44 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/log_common.h"
typedef enum LOG_MemorySection_e
{
   LOG_MEMORY_SECTION_ARAM    = 0,
   LOG_MEMORY_SECTION_XRAM    = 1,
   LOG_MEMORY_SECTION_TOTAL   = 2,
   LOG_PADDING_SECTION = LOG_MEMORY_SECTION_TOTAL
}   LOG_MemorySection_t;




typedef struct LOG_JumboBlockDecomposition_s
{
   VBA_t vba[ ( ( ( ( ( 4 ) / ( 2 ) )  * (1)  * (8) )  * ( 2 ) )  / (2) ) ];
}   LOG_JumboBlockDecomposition_t;

typedef struct LOG_DataInIfs_s
{
   LOG_JumboBlockDecomposition_t decompositions[ (2) ];
   uint32_t logMemorySectionSizeInFMUs[LOG_MEMORY_SECTION_TOTAL];
   uint32_t logCopySizeInBytes;
   uint32_t logCopySizeInFMUsForRead;
   uint32_t logPaddingSizeInFMUs;
   uint32_t logBlockPEC[ (2) ];
}   LOG_DataInIfs_t;

typedef struct LOG_FlgpResult_s
{
   VBA_t np1[ (2) ][ ( 2 ) ];
   VBA_t lgw[ (2) ][ ( 2 ) ];
   VBA_t fer[ (2) ][ ( 2 ) ];
}   LOG_FlgpResult_t;

typedef struct LOG_PwsData_s
{
   LOG_DataInIfs_t ifsData;
   LOG_FlgpResult_t flgpRes;
   uint32_t activeBlockIdx;
}   LOG_PwsData_t;

typedef struct LOG_IfsStatus_s
{
   Status_t fileSysytemReadStatus;
   Status_t fileSysytemVerifyStatus;
} LOG_IfsStatus_t;

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h"




typedef enum PWS_DPS_type
{
   PWS_SUSPEND_HMB = 0,
   PWS_RESUME_HMB = 1,
   PWS_DPS_2 = 2,
   PWS_DPS_3_1 = 3,
   PWS_DPS_3_2,
   PWS_SHUTDOWN,
   PWS_RST_DEACTIVATE,
   PWS_RST_ACTIVATE,
   PWS_POWER_ON_ACTIVATE,
   PWS_READONLY,
   PWS_WAKEUP_ACTIVATE,
   PWS_DPS_type_invalid = 0x3fffffff,
} PWS_DPS_type_t;




typedef struct PWS_SleepData_s
{
   uint64_t totalSleepTime;
   LOG_PwsData_t logPwsData;
}   PWS_SleepData_t;

typedef void(*FTL_InfraRetainedMemCbFunc)(uint8_t* memAddr);















__inline static  PWS_DPS_type_t FTL_PWS_ConvertPMMPSToPws(PMM_PowerState_t pmmState)
{
   PWS_DPS_type_t dps;

   switch (pmmState)
   {
      case PMM_PS0:
      case PMM_PS1:
      case PMM_PS2:
      case PMM_PST_ACTIVE:
      case PMM_PST_FFU_IA_ACTIVATE:
         dps = PWS_RST_ACTIVATE;
         break;

      case PMM_PS3:
         dps = PWS_DPS_2;
         break;

      case PMM_PS4:
         dps = PWS_DPS_3_1;
         break;
      case PMM_PS5:
         dps = PWS_DPS_3_2;
         break;

      case PMM_PST_SHN:
      case PMM_PST_FFU_IA_SHUTDOWN:
      case PMM_PST_FFU_RESET_SHUTDOWN:
         dps = PWS_SHUTDOWN;
         break;

      case PMM_PST_RO:
         dps = PWS_READONLY;
         break;

      case PMM_PST_RESET_DEACTIVATE:
         dps = PWS_RST_DEACTIVATE;
         break;

      case PMM_PST_RESET_ACTIVATE:
         dps = PWS_RST_ACTIVATE;
         break;

      case PMM_PST_POWER_ON_ACTIVATE:
      case PMM_PST_WAKEUP:
         dps = PWS_POWER_ON_ACTIVATE;
         break;

      case PMM_PST_NA:
      default:
         dps = PWS_DPS_type_invalid;
         { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h" , 127 , "0");                         "BullseyeCoverage restore"; } ;
         break;
   }

   return dps;
}








__inline static  uint32_t*   FTL_API_GetLpmBufferNoNeedToFree()
{
   return (uint32_t*) 0x02014400 ;
}









uint32_t*   FTL_API_GetLpmBufferNeedToFree();








void   FTL_API_FreeLpmBuffer();

#line 178 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h"
PWS_DPS_type_t   PWS_GetSysInitType(void);









PWS_DPS_type_t PWS_GetCurrentPSWType(void);

#line 200 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_pws_api.h"
void   FTL_PWS_PMMHandler(PWS_DPS_type_t enterDPS_type, void(*callbackFunc)(void), uint32_t token);








void   FTL_PWS_RequestRetainedMemory(FTL_InfraRetainedMemCbFunc callBkFun, uint32_t requestedBSize);








void PWS_ResumeHmbOnReset(void(*callbackFunc)(void), BOOL32 shouldSwitchProfile);








void PWS_ResetDeactivateHandler(void);


void   PWS_EnterPowerStateDps3_2(void);

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_feadmincmdapi.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_dst_api.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_dst_api.h"
typedef enum
{
   DST_MetadataTestStart = 0,
   DST_MetadataTestContinue,
   DST_NandTest
} DST_Test_t;

#line 27 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_feadmincmdapi.h"






typedef void (*FTL_AsynchClBkFunc)(Status_t status ,uint32_t token);
typedef void (*FTL_AsynchClBkFuncWithParams)(uint32_t* result);








typedef enum
{
   FTL_WRITE_BUFFER_MSG_RMW_STATE_NOT_RMW = 0,
   FTL_WRITE_BUFFER_MSG_RMW_STATE_RMW,
   FTL_WRITE_BUFFER_MSG_RMW_STATE_DEALLOCATE_RMW,
} FTL_WriteBufferMsg_RwmState;

typedef struct FTL_HostlessReadResult_s
{
   FTL_AsynchClBkFuncWithParams  pCallBkFnc;
   uint32_t                      token;
   Status_t                      status;
   uint8_t                       dataInvalidBitmap;
   uint8_t                       ctrlRdUECCBitmap;
   uint8_t                       res[2];
}FTL_HostlessReadResult_t;

typedef struct FTL_FMU_INFO_s
{
   uint8_t size;
   uint8_t rmw;
   uint16_t upperFlatLBA;
   uint32_t lowerFlatLBA;
}FTL_FMU_INFO_t;



typedef struct FlushNV_Progress_s
{
   uint8_t  progressInPercent;
   uint32_t timeEstimationInSec;
} FlushNV_Progress_t;

typedef enum
{
   ALLOCATION_PERMITTED = 0x00000000,
   ALLOCATION_FORBIDDEN = 0xFFFFFFFF,
}FTL_SctpRsvAllocation_t;


extern volatile FTL_SctpRsvAllocation_t         gIsAllocationPermitted;






void FlushNV_GetProgress(FlushNV_Progress_t* progress);

void   FTL_AsyncDeallocateAligned(uint32_t* pPayload, uint32_t* pHeader, uint32_t numEntries, uint32_t fmuCount, FTL_AsynchClBkFunc callBkFun, uint32_t token);
void   FTL_AsyncFormatNvm(uint32_t* pPayload, uint16_t cmdType, uint16_t nsId, FTL_AsynchClBkFunc callBkFun, uint32_t token);
uint32_t   FNVM_ProgressPercentage(void);
void   FTL_AsyncAbortFormatNvm();
void   FTL_AsyncFlush(FTL_AsynchClBkFunc callBkFun, uint32_t cmdIndex);
void   FTL_AsyncPwsPmmHandler(PWS_DPS_type_t psState, FTL_AsynchClBkFunc callBkFun, uint32_t token);
void   FTL_AsyncRequestRetMem(FTL_InfraRetainedMemCbFunc callBkFun, uint32_t requestedMemSz);
void   FTL_AsyncSctpFtlOperationStart(uint8_t state, uint8_t *pAsd, uint32_t *pBuffer,uint32_t numBytes, uint32_t* pRetStatus);
void   FTL_SctpRsvAllocationPending(void);
void   FTL_SctpRsvAllocationReleased(void);
void   FTL_AsyncSmartRequestCs(uint32_t smartClientId);
void   FTL_AsyncPingRequest(void);

void   FTL_AsyncWriteBuffer(FTL_AsynchClBkFunc callBkFun, uint32_t token, uint8_t numFmus,BOOL32 isRMW,
                          FTL_FMU_INFO_t* writeInfo, uint32_t *buffers, uint32_t *headers );

#line 111 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_feadmincmdapi.h"
void   FTL_AsyncHostRead (uint16_t cmdIndex);
void FTL_AsyncGoToROmode();

void   FTL_AsyncHostlessRead(FTL_HostlessReadResult_t* pResult,
                           uint32_t    fflba,
                           uint8_t     firstSectorOffset,
                           uint8_t     nbrSectors,
                           uint32_t    overlapBitMask,
                           uint32_t**  pDataBuffers,
                           uint32_t**  pHeaderBuffers) ;

void   FTL_asyncStartBkops(void);
void   FTL_asyncStopBkops(void);


BOOL   FTL_IsBkOpsNeeded(void);

#line 131 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_feadmincmdapi.h"
void   FTL_HslcEnableByHost(uint32_t IsHslcEnable);
void   FTL_AsyncSmartGetCounters(FTL_AsynchClBkFunc callBkFun, uint32_t *pBuffer, uint32_t token);
void FTL_AsyncSmartGetCountersForInfra(FTL_AsynchClBkFunc callBkFun, uint32_t *pBuffer, uint32_t token);

void   FTL_AsyncDST(DST_Test_t testType, BOOL32 isExtended, FTL_AsynchClBkFunc callBkFun, uint32_t token);
void FTL_AsyncFlushNV_Start(FTL_AsynchClBkFunc callBkFun, uint32_t token, uint16_t namespaceId, uint8_t flushType);

void FTL_AsyncFlushNV_Stop(FTL_AsynchClBkFunc callBkFun, uint32_t token);

void   FTL_ReqErrorLogEntry( uint32_t severity, uint32_t *pParams);
void FTL_API_AsyncHMBConfig( void* eventMsg);
void FTL_API_WakeOnHMBCompletion(uint32_t hmbUserID);
void FTL_AsyncSecMemoryAllocPrep(FTL_AsynchClBkFunc callBkFun, uint32_t token);

void FTL_AsyncSecMemoryRelease(FTL_AsynchClBkFunc callBkFun, uint32_t token);


void  __inline static    FTL_AsyncWriteRPMBBuffer(FTL_AsynchClBkFunc callBkFun, uint32_t token, uint32_t fflba,
                          uint8_t targetId, uint32_t writeCounter, uint8_t numFmus, FTL_FMU_INFO_t* writeInfo, uint32_t *buffers, uint32_t *headers)
{
   return;
}

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"

#line 67 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
extern void FE_AdminCmdCompletion(Status_t status, uint32_t param);








enum
{

   FTL_ADMIN_CMD_NO_WSYNC_BASE          = 0x00,

   FTL_ADMIN_CMD_DIAG,
   FTL_ADMIN_CMD_SMART_REQ_CS,
   FTL_ADMIN_CMD_PING_REQ,
   FTL_ADMIN_CMD_STOP_BKOPS,
   FTL_ADMIN_CMD_SMART_COUNTER_REQ,
   FTL_INFRA_CMD_SMART_COUNTER_REQ,
   FTL_ADMIN_CMD_GENERATE_ERROR_LOG,
   FTL_ADMIN_CMD_DST,
   FTL_ADMIN_CMD_FNVM_ABORT,
   FTL_ADMIN_CMD_FLUSH_NV_START,
   FTL_ADMIN_CMD_FLUSH_NV_STOP,
   FTL_ADMIN_CMD_HMB_CFG,
   FTL_ADMIN_CMD_HSLC_ENABLE_BY_HOST,


   FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED,



   FTL_ADMIN_CMD_WSYNC_BASE          = 0x80,

   FTL_ADMIN_CMD_FLUSH_SYNC,
   FTL_ADMIN_CMD_READ_SYNC,
   FTL_ADMIN_CMD_WRITE_BUFFER_SYNC,

#line 108 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
   FTL_ADMIN_CMD_DALOC_ALIGNED_SYNC,
   FTL_ADMIN_CMD_PWS_SYNC,
   FTL_ADMIN_CMD_HOSTLESS_READ_SYNC,
   FTL_ADMIN_CMD_RET_MEM_SYNC,
   FTL_ADMIN_CMD_FNVM_SYNC,
   FTL_ADMIN_CMD_SEC_ALLOC,
   FTL_ADMIN_CMD_SEC_RELEASE,






   FTL_ADMIN_CMD_START_BKOPS,

   FTL_ADMIN_CMD_SCTP_RSV_ALLOC_PENDING,
   FTL_ADMIN_CMD_SCTP_RSV_ALLOC_COMPLETED,


   FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED,

   FTL_ADMIN_CMD_INVALID               = 0xff,
};
typedef uint8_t FML_FEAdminCmdId_t;









typedef struct
{
   uint8_t             fmusCount;
   uint8_t             isRmw;
   uint16_t            res;
   FTL_FMU_INFO_t*     pWriteInfoFmus;
   uint32_t*           pDataList;
   uint32_t*           pHeaderList;
}FTL_FAQ_WriteBufferMsg_t, FTL_FakeHwdCntx_t;

typedef struct
{
   uint8_t                    sectorsNum;
   uint8_t                    firstSectorOffset;
   uint16_t                   res;
   uint32_t                   overlapBitMask;
   uint32_t                   fflba;
   uint32_t**                 pData;
   uint32_t**                 pHeader;
   FTL_HostlessReadResult_t*  pResult;
}FTL_FAQ_HostlessReadMsg_t;




typedef struct
{
   uint32_t *pPayload;
   uint32_t *pHeader;
   uint32_t validCount;
   uint32_t fmusCount;
}FTL_FAQ_AlgnDeallocMsg_t;





typedef struct
{
   uint8_t  overlapFlag;
   uint8_t  resv;
   uint16_t HIMCmdIdx;
}FTL_FAQ_ReadMsg_t;


typedef struct
{
   PWS_DPS_type_t pwsType;
   uint8_t  resv1;
   uint16_t resv2;

}FTL_FAQ_PowerStateMsg_t;




typedef struct
{
   uint32_t *pPayload;
   uint16_t namespaceId;
   uint16_t cmdType;
   BOOL32   isPowerCycleSafe;
}FTL_FAQ_FormatNvmMsg_t;




typedef struct
{
    uint16_t namespaceId;
    uint8_t  flushType;


}FTL_FAQ_FlushNvMsg_t;

typedef struct FTL_DiagMsg_s
{
   uint8_t state;
   uint8_t rfu0[3];
   uint8_t *pAsd;
   uint32_t *pBuffer;
   uint32_t numBytes;
   uint32_t *pRetStatus;
} FTL_FAQ_DiagMsg_t;


typedef struct FTL_SmartCSMsg_s
{
   uint32_t smartClientId;
} FTL_FAQ_SmartCSMsg_t;

typedef struct FTL_SmartCounterMsg_s
{
   uint32_t* pSmartFtlCounters;
} FTL_FAQ_SmartCounterMsg_t;

typedef struct FTL_FAQ_HslcEnByHostMsg_s
{
   uint32_t HslcIsEnableByHost;
} FTL_FAQ_HslcEnByHostMsg_t;

typedef struct FTL_FAQ_GetRetMemMsg_s
{
   FTL_InfraRetainedMemCbFunc  callBkFncWithParam;
   uint32_t requestedMemSz;

} FTL_FAQ_GetRetMemMsg_t;

typedef struct FTL_FAQ_DstMsg_s
{
   uint8_t testType;
   uint8_t isExtended;
   uint8_t reserved[2];
} FTL_FAQ_DstMsg_t;

typedef struct FTL_InjectErrorLogMsg_s
{
   uint32_t severity;
   uint32_t param0;
   uint32_t param1;
   uint32_t param2;
}FTL_InjectErrorLogMsg_t;

typedef struct FTL_HMB_msg_s
{
   uint32_t hmbSize;
   uint32_t hmbBaseAddress;
   BOOL32   hmbStatus;
   BOOL32   isReset;
}FTL_HMB_msg_t;




typedef struct
{

   FML_FEAdminCmdId_t      cmdId;
   uint8_t                 res1;
   uint16_t                writeFmgCtxtID;
   FTL_AsynchClBkFunc      clBkFun;
   uint32_t                clBkFunToken;
   union
   {

      FTL_FAQ_ReadMsg_t          readMsg;
      FTL_FAQ_PowerStateMsg_t    pwsMsg;
      FTL_FAQ_DiagMsg_t          diagMsg;
      FTL_FAQ_SmartCSMsg_t       smartCsMsg;
      FTL_FAQ_SmartCounterMsg_t  smartCounterMsg;
      FTL_FAQ_HslcEnByHostMsg_t  hslcEnByHostMsg;
      FTL_InjectErrorLogMsg_t    generateErrorLogMsg;
      FTL_HMB_msg_t              HMB_cfg_msg;


      FTL_FAQ_FormatNvmMsg_t     formatNvmMsg;
      FTL_FAQ_FlushNvMsg_t       flushNvMsg;
      FTL_FAQ_AlgnDeallocMsg_t   aligenDeallocMsg;
      FTL_FAQ_WriteBufferMsg_t   writeBufferMsg;
      FTL_FAQ_HostlessReadMsg_t  hostlessReadMsg;
      FTL_FAQ_GetRetMemMsg_t     getRetMemMsg;
      FTL_FAQ_DstMsg_t           dstMsg;

   }specific;
}FML_FEAdminQEntry_t;




typedef struct
{
   uint32_t             tailIndex;
   uint32_t             headIndex;
   uint32_t             numItems;
   FML_FEAdminQEntry_t  entries[ ( ( (FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_WSYNC_BASE)  + (FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_NO_WSYNC_BASE) ) *2 + 0xFF) ];
}FML_FEAdminQConfig_t;




extern FML_FEAdminQConfig_t gFML_FEAdminQueue;

#line 341 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  void FML_FEAdminQInit(void)
   {
      LivetMemset (&gFML_FEAdminQueue, 0, sizeof(FML_FEAdminQConfig_t));
   }

#line 358 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  uint32_t FML_FEAdminQGetnumEntries(void)
   {
      return gFML_FEAdminQueue.numItems;
   }

#line 375 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  FML_FEAdminQEntry_t* FML_FEAdminQPeek(void)
   {

      { "BullseyeCoverage save off";                          _AssertImpl((int)(gFML_FEAdminQueue.numItems), "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h" , 378 , "gFML_FEAdminQueue.numItems");                         "BullseyeCoverage restore"; } ;

      return &gFML_FEAdminQueue.entries[gFML_FEAdminQueue.headIndex];
   }

#line 393 "d:/gitrepo/fpgcss-vega/source/ftl/fml/inc/fml_feadminqueue.h"
   __inline static  uint32_t FML_FEAdminQ_GetRTFADIStatistics(FML_FEAdminQ_RTFADI_Data_t *pAdminQRTFADI)
   {
      uint8_t i;
      uint32_t entryIdx = gFML_FEAdminQueue.headIndex;

      pAdminQRTFADI->numItems = gFML_FEAdminQueue.numItems;
      pAdminQRTFADI->headIndex = (uint16_t)gFML_FEAdminQueue.headIndex;
      pAdminQRTFADI->tailIndex = (uint16_t)gFML_FEAdminQueue.tailIndex;

      for (i = 0; i <  (3) ; i++)
      {
         pAdminQRTFADI->cmdId[i] = (uint8_t)gFML_FEAdminQueue.entries[entryIdx++].cmdId;


         if ( (entryIdx ==  ( ( (FTL_ADMIN_CMD_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_WSYNC_BASE)  + (FTL_ADMIN_CMD_NO_WSYNC_FIRST_UNUSED - 1 - FTL_ADMIN_CMD_NO_WSYNC_BASE) ) *2 + 0xFF) ))
         {
            entryIdx = 0;
         }
      }

      return sizeof(FML_FEAdminQ_RTFADI_Data_t);
   }


void   FML_FEAdminQPop(void);

void   FML_FEAdminQPush(FML_FEAdminQEntry_t *pQEntry);

void   FML_HandleAdminQueueFE(void);

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/fnvm/inc/fnvm_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 29 "d:/gitrepo/fpgcss-vega/source/ftl/fnvm/inc/fnvm_api.h"






typedef void (*FNVM_CLBK_FUNC)(uint32_t);

void   FNVM_FirstMount(void);
void   FNVM_NormalMount(uint16_t mountCtxtId);
void   FNVM_FMGCallBack(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void   FNVM_HostCmdProcess(FML_FEAdminQEntry_t *pAdminQEntry);
BOOL32   FNVM_IsInProgress(void);
BOOL32   FNVM_IsSingle_Namespace(void);
BOOL32   FNVM_AbortOngoingFormat(void);
BOOL32   FNVM_ShouldBeIdle(void);
void FNVM_BmgProfileSwitchCallback(void);
BOOL32 FNVM_IsInClosedHostOpenBlkState();
OBM_BlockType_t FNVM_GetNextOpIdToLoad();

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_config.h"

#line 51 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bml_config.h"
typedef struct BML_JointPointConfig_s
{
   uint8_t  numXorZonesJointPoint;
   uint8_t  rfu[3];
   uint32_t xorLogicalZoneSizeAccum[NUM_BLOCK_TYPES][ ( ( (16) ) ) ];
   uint32_t xorZoneSizeAccum[NUM_BLOCK_TYPES][ ( ( (16) ) ) ];
   uint32_t xorLogicalZoneSizeMax[NUM_BLOCK_TYPES];
   uint32_t xorZoneSizeMax[NUM_BLOCK_TYPES];
   uint32_t numFmusUpToJumboBlockJointPoint[NUM_BLOCK_TYPES][NUM_PROTECTED_TYPES];
   uint32_t diePageJointPointLWLs;
   uint32_t diePageJointPointWLs;
   uint32_t fmusUptoJointPointInDiePage[NUM_BLOCK_TYPES];
}   BML_JointPointConfig_t;

typedef struct BML_Config_s
{
   uint8_t numChannelGroups;
   uint8_t numChannelGroupsMask;
   uint8_t log2ChannelGroups;

   uint8_t numMetaDieGroups;
   uint8_t numMetaDieGroupsMask;
   uint8_t log2numMetaDieGroups;

   uint8_t numMetaDies;
   uint8_t numMetaDiesPerChannelGroup;

   uint8_t numMetaDieGroupsPerChannelGroup;
   uint8_t numMetaDiesInMetaDieGroup;

   uint8_t diesPerMetadie;

   uint8_t rfu;

   uint16_t log2slcMetapage;
   uint16_t slcMetapageMask;

   uint16_t metaPageSize[NUM_BLOCK_TYPES];
   uint32_t jumboBlockSize[NUM_BLOCK_TYPES][NUM_SBM_TYPES];

   uint32_t numBlksNeededPerMd;

   BML_JointPointConfig_t jpConfig[NUM_SBM_TYPES];
}   BML_Config_t;

extern BML_Config_t *BML_Config;

void BML_InitializeConfig(uint32_t numOfChannelGroups, uint32_t numOfMetaDies, uint32_t diesPerMetaDie);

void BML_CONFIG_InitGlobalVariables(void);

#line 26 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_enums.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_enums.h"
typedef enum MBM_RequestType_e
{
   MBM_REQUEST_ALLOCATE_MBG    = 1,
   MBM_REQUEST_REUSE_MBG       = 2,
   MBM_REQUEST_RELEASE_MBG     = 4,
   MBM_REQUEST_DECOMMISSION_MB = 8,
   MBM_REQUEST_ERASE_MB        = 16,
}   MBM_RequestType_t;

typedef uint32_t MBM_RequestType_Filter_t;

typedef enum MBM_RequestState_e
{
   MBM_REQUEST_VALID,
   MBM_REQUEST_INVALID

}   MBM_RequestState_t;

typedef enum MBM_RequestQueueType_e
{
   MBM_REQUESTQUEUE_UNBLOCKED,
   MBM_REQUESTQUEUE_DELAYED

} MBM_RequestQueueType_t;

typedef enum MBM_MountState_e
{
   MBM_MOUNT_FIRST_TIME,
   MBM_MOUNT_NORMAL,
   MBM_MOUNT_COMPLETE

} MBM_MountState_t;

typedef enum MBM_ControlSyncState_e
{
   MBM_CONTROLSYNC_INACTIVE,
   MBM_CONTROLSYNC_PROCESS_COMPLETION,
   MBM_CONTROLSYNC_ACTIVE

} MBM_ControlSyncState_t;

typedef enum MBM_MetaBlockState_e
{
   MBM_METABLOCK_UNALLOCATED,
   MBM_METABLOCK_ALLOCATED,
   MBM_METABLOCK_DECOMMISSIONED,
   MBM_METABLOCK_SHORT_STROKE_DISABLED
} MBM_MetaBlockState_t;

typedef enum MBM_ListType_e
{
   MBM_LIST_FIRST,

   MBM_LIST_RESERVED = MBM_LIST_FIRST,

   MBM_LIST_FIRST_INTEREXCHANGABLE,

   MBM_LIST_FREECOLD = MBM_LIST_FIRST_INTEREXCHANGABLE,
   MBM_LIST_FREEHOT,


   MBM_NUM_LISTTYPES =  (3) ,

}   MBM_ListType_t;

typedef enum MBM_BinaryHeapType_e
{
   MBM_BH_MINPEC_UNERASED,
   MBM_BH_MINPEC_ERASED,
   MBM_BH_MINATS,

   MBM_NUM_BHTYPES

} MBM_BinaryHeapType_t;

typedef enum MBM_metablockSourceList_e
{
   MBM_MB_SRC_FMBL_COLD     = 0,
   MBM_MB_SRC_FMBL_HOT      = 1,
   MBM_MB_SRC_UNERASED_HEAP = 2,
   MBM_MB_SRC_ERASED_HEAP   = 3,
   MBM_MB_SRC_LIST_MAX      = 4
}MBM_metablockSourceList_t;

#line 132 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_enums.h"
typedef enum MBM_MetaDataDescriptorState_e
{
   MBM_MDD_UNALLOCATED      = 1,
   MBM_MDD_INITIALIZING     = 2,
   MBM_MDD_VALID            = 4,
   MBM_MDD_CORRUPTED        = 8,
   MBM_MDD_INVALID          = 16,
   MBM_MDD_FAILED_RECOVERY  = 32,
   MBM_MDD_PREVENT_RECOVERY = 64,
   MBM_MDD_ERASED           = 128,

   MBM_MDD_ALL = -1

} MBM_MetaDataDescriptorState_t;

typedef uint32_t MBM_MetaDataDescriptorState_Filter_t;

typedef enum MBM_FlashFillReq_e
{
   NO_FLASH_FILL_REQ,
   REG_FLASH_FILL_REQ,
   FORCE_FLASH_FILL_REQ = 0x03
} MBM_FlashFillReq_t;

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_config.h"





typedef union MBM_Address_u MBM_Address_t;
typedef struct DUI_Section_PEC_s DUI_Section_PEC_t;

#line 96 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/mbm_config.h"
typedef struct slc_s{
    uint16_t metablockPecLowBits;
    uint16_t metablockPecHighBits :  6 ;
    uint16_t rfu                  :  ( (8)  * 2 - 1  - 2  - 1  - 6  - 1 ) ;
    uint16_t shortParity          :  1 ;
    uint16_t partition            :  1 ;
    uint16_t metablockState       :  2 ;
    uint16_t isPreErased          :  1 ;
} slc_t;

typedef struct tlc_s {
    uint16_t metablockPecLowBits        :  8 ;
    uint16_t metablockHybridPecLowBits  :  8 ;
    uint16_t metablockPecHighBits       :  6 ;
    uint16_t metablockHybridPecHighBits :  5 ;
    uint16_t shortParity                :  1 ;
    uint16_t partition                  :  1 ;
    uint16_t metablockState             :  2 ;
    uint16_t isPreErased                :  1 ;
} tlc_t;

typedef union MBM_StatusTableEntry_s
{
    slc_t slc;
    tlc_t tlc;
    struct {
        uint16_t pecRawLowBits;
        uint16_t pecRawHighBits :  11 ;
        uint16_t shortParity    :  1 ;
        uint16_t partition      :  1 ;
        uint16_t metablockState :  2 ;
        uint16_t isPreErased    :  1 ;
    } all;
}   MBM_StatusTableEntry_t;



typedef struct MBM_FlatBmlStatusTable_s
{
    uint16_t size;
    uint16_t rfu;

    MBM_StatusTableEntry_t entry[ ( ((( (uint32_t)( ( (687) ) ) ) > ( (uint32_t)( ( (527) ) ) )) ? ( (uint32_t)( ( (687) ) ) ) : ( (uint32_t)( ( (527) ) ) )) ) ];

} MBM_FlatBmlStatusTable_t;


typedef struct MBM_ListConfig_s
{
   uint8_t refillThreshold;


   uint8_t refreshThresholdInPec;


   uint8_t lowResourceModeThreshold;



   uint8_t rfu;
}   MBM_ListConfig_t;

typedef int32_t(*MBM_BinaryHeap_CompareFunc_t)(uint32_t leftMetablockId, uint32_t rightMetablockId);

typedef struct MBM_BinaryHeapConfig_s
{
   MBM_BinaryHeap_CompareFunc_t compareFunc[MBM_NUM_BHTYPES];

} MBM_BinaryHeapConfig_t;


typedef struct MBM_PartitionConfig_s
{
   uint8_t blockType;



   uint8_t unusedMetaBlocksDistributionRatio;

   uint8_t irregularMetaBlocksDistributionRatio;

   uint8_t listSize[MBM_NUM_LISTTYPES];

   uint8_t reserved[2];

}   MBM_PartitionConfig_t;


typedef struct MBM_PartitionParametersConfig_s
{
   MBM_ListConfig_t listConfig[MBM_NUM_LISTTYPES];

}   MBM_PartitionParametersConfig_t;

typedef struct
{
   uint32_t numMetadies;
   uint32_t numMetadieMetablocks[ ( (8)  * ( 4 )  / (2) ) ];
} MBM_MBST_Header_t;





uint32_t MBM_DUI_GetMetaBlocksPec(DUI_Section_PEC_t * pecInfo);

#line 27 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/jbm_config.h"

#line 35 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/jbm_config.h"
typedef struct JBM_PartitionConfig_s
{
   uint8_t  blockType;
   uint8_t  reservedJBIDsForUECC;
   uint8_t  numGenericLists;
   uint8_t  rfu0;
}   JBM_PartitionConfig_t;


typedef struct JBM_PartitionParametersConfig_s
{
   uint8_t  freeIDsThreshold;

   uint8_t  rfu0[3];
}   JBM_PartitionParametersConfig_t;









uint32_t JBM_GetTLCJumboBlocksSizeFMU(void);

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/rs/inc/ftl_rs.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 7 "d:/gitrepo/fpgcss-vega/source/ftl/rs/inc/ftl_rs.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_timerservices.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/fwta_drv.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/fwta_defines.h"

#line 310 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/fwta_defines.h"
typedef struct _FWTA {
    HW_REG64 FWTA_GPT_INT_STATUS                        ;
    HW_REG64 Reserved0;
    HW_REG64 FWTA_GPT_IRQ_MASK                          ;
    HW_REG64 FWTA_GPT_ASYNC_WAKEUP_MASK                 ;
    HW_REG64 FWTA_WDT_INT_STATUS                        ;
    HW_REG64 Reserved1;
    HW_REG64 FWTA_WDT_IRQ_MASK                          ;
    HW_REG64 FWTA_WDT_ASYNC_WAKEUP_MASK                 ;
    HW_REG64 FWTA_CTRL_0                                ;
    HW_REG64 FWTA_CTRL_1                                ;
    HW_REG64 FWTA_CTRL_2                                ;
    HW_REG64 FWTA_GPT_SW_RESET_STATUS                   ;
    HW_REG64 FWTA_WDT_SW_RESET_STATUS                   ;
    HW_REG64 Reserved2[115];
    HW_REG64 FWTA_GPT_CNTR_INIT[32]                     ;

    HW_REG64 FWTA_GPT_CNTR_STATUS[32]                   ;
    HW_REG64 FWTA_GPT_CTRL[32]                          ;
    HW_REG64 FWTA_GPT_CLOCK_CFG[32]                     ;

    HW_REG64 FWTA_WDT_CNTR_STATUS[32]                   ;
    HW_REG64 FWTA_WDT_TRIG[32]                          ;
    HW_REG64 FWTA_WDT_CNTR_INIT[32]                     ;

    HW_REG64 FWTA_WDT_CLOCK_CFG[32]                     ;

}FWTA_t, *PFWTA;

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/fwta_drv.h"




typedef enum
{
   mFWTA_GPT_0 = 0,
   mFWTA_GPT_1,
   mFWTA_GPT_2,
   mFWTA_GPT_3,
   mFWTA_GPT_4,
   mFWTA_GPT_5,
   mFWTA_GPT_6,
   mFWTA_GPT_7,
   mFWTA_GPT_NUM
}eFWTA_GPT_ID_t;


typedef enum
{
   mFWTA_SRC_CLK0 = 0,
   mFWTA_SRC_CLK1
}eFWTA_SourceClock_t;



uint32_t FWTA_GptReadCountRegsterN(uint32_t timerIndex);
uint32_t FWTA_GptReadStatusReg(void);
void FWTA_GptIntStatusClr(uint32_t timerIndex);
BOOL FWTA_GptIntStatusCheck(uint32_t timerIndex);
void FWTA_InitGptTimer(
                      uint32_t timerIndex,
                      uint32_t periodValue,
                      uint32_t dutyValue,
                      uint32_t prescalerValue,
                      BOOL   modeRestart,
                      BOOL   enablePulse,
                      BOOL   pulseLow
                     );
void FWTA_GptTimerStart(uint32_t timerIndex);
void SYS_FWTA_ISR0(void* dummy);



 void SYS_FWTA0_ISR_Native(void);


BOOL FWTA_GetInitStatus(void);

void FWTA_ResetGPTs(uint64_t value);
void FWTA_DisableAllGPTs(void);
Status_t FWTA_Init(void);
BOOL FWTA_IsEnabled(void);
void FWTA_StartGPTimerSingleInterrupt(eFWTA_GPT_ID_t nGPT, uint32_t nScaledTicks);
uint64_t FWTA_ReadGPTCounter64Inv(eFWTA_GPT_ID_t nGPT);
uint32_t FWTA_ReadGPTCounterInv(eFWTA_GPT_ID_t nGPT);
uint32_t FWTA_ReadGPTCounter(eFWTA_GPT_ID_t nGPT);
uint32_t FWTA_GetTicksToExpire(eFWTA_GPT_ID_t nGPT);
uint64_t FWTA_ReadGPTCounter64(eFWTA_GPT_ID_t nGPT);
void FWTA_DisableGPTimer(eFWTA_GPT_ID_t nGPT);
void FWTA_EnableISR(eFWTA_GPT_ID_t nGPT);
void FWTA_DisableISR(eFWTA_GPT_ID_t nGPT);
void FWTA_ConfigSingleInterruptTimer(eFWTA_GPT_ID_t nGPT, uint32_t nScalar );
void FWTA_StartFreeRunningGPTimer(eFWTA_GPT_ID_t nGPT, uint32_t nPreScaler);

#line 113 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/fwta_drv.h"
typedef enum
{
   mFWTA_GPT_DISABLED = 0,
   mFWTA_GPT_FREE_RUNNING,
   mFWTA_GPT_SINGLE_INT,
   mFWTA_GPT_PERIODIC_INT
}eFWTA_GPT_MODE_t;

#line 37 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_timerservices.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_publicdefines.h"
#line 29 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_publicdefines.h"
typedef enum
{
   CMC_SRC_CLK_ID_0 = 0,
   CMC_SRC_CLK_ID_1,
   CMC_SRC_CLK_ID_2,
   CMC_SRC_CLK_ID_3,
   CMC_SRC_CLK_ID_4,
   CMC_SRC_CLK_ID_5,
   CMC_SRC_CLK_ID_6,
   CMC_SRC_CLK_ID_7,
   CMC_SRC_CLK_ID_8,
   CMC_SRC_CLK_ID_9,
   CMC_SRC_CLK_ID_10,
   CMC_SRC_CLK_ID_11,
   CMC_SRC_CLK_ID_12,
   CMC_SRC_CLK_ID_13,
   CMC_SRC_CLK_ID_14,
   CMC_SRC_CLK_ID_15,
   CMC_SRC_CLK_ID_NUM,
}Cmc_Src_Clk_Id_t;

#line 18 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_publictypes.h"
#line 28 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_publictypes.h"
typedef struct CMC_ClockInfo
{
   uint8_t mClkSource;
   uint8_t mClkDomain;
   uint16_t mClkPeriod;
   uint32_t mDutyCycle;
   uint32_t mpClockMask;
} CMC_ClockInfo_t;

typedef struct
{
   uint32_t domainId;
   uint32_t srcClkId;
   uint32_t reqfreq;
   uint32_t pClkBitmask;
} CMC_DomainInfo_t;


typedef struct CMC_Subdomain_Info
{
   uint32_t domainIndex;
   uint32_t subdIndex;
   uint32_t subdPlockMask;
   uint32_t divmDivider;


   uint32_t phase;


} CMC_Subdomain_Info_t;

#line 19 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_vega.h"

#line 32 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"

#line 51 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"
typedef enum FreqMonitorClock
{
   FM_CMC2_TOP_DOMAIN_15 = 0,
   FM_FIM0_MTR_CLK,
   FM_FIM2_MTR_CLK,
   FM_FIM3_MTR_CLK,
   FM_FIM4_MTR_CLK,
   FM_FIM5_MTR_CLK,
   FM_FIM6_MTR_CLK,
   FM_FIM7_MTR_CLK,
   FM_RESERVED_0,
   FM_FIM_MTR_CLK_0,
   FM_FIM_MTR_CLK_2,
   FM_FIM_MTR_CLK_3,
   FM_FIM_MTR_CLK_4,
   FM_FIM_MTR_CLK_5,
   FM_FIM_MTR_CLK_6,
   FM_FIM_MTR_CLK_7,
   FM_RESERVED_1,
   FM_PCIE_PHY_PLL,
   FM_DDR_DTO_0,
   FM_DDR_DTO_1,
   FM_HSIO,
   FM_NUM,
} eFreqMonitorClock;

extern const CMC_DomainInfo_t FW_DomainConfigArray[];
extern const CMC_DomainInfo_t FW_DPS2_DomainConfigArray[];
extern const CMC_DomainInfo_t FW_DPS3_1_DomainConfigArray[];

#line 111 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/cmc_top_dr_api.h"
   Status_t CMC_TOP_GetDomainFreq(uint32_t domain_id, uint32_t* domainFreq);
   uint32_t CMC_TOP_GetSrcClkFreq(uint32_t srcClkId);
   Status_t CMC_TOP_GetSysClkFreqMHz(uint32_t * sysClkFreq);
   Status_t CMC_TOP_Delay();
   uint32_t CMC_TOP_GetEfcClkFreqMHz(void);
   uint32_t CMC_TOP_ConfigureATBClockFreq(uint32_t ATBClkFreq);
   Status_t CMC_TOP_UpdateATBDomainDividers(uint32_t domDivider, uint32_t subDivider, uint32_t subdDivm);
   uint32_t CMC_TOP_GetATBClkFreqHz(void);
   Status_t CMC_TOP_GenerateATBClocks(void);
   Status_t CMC_TOP_DisableATBClocks(void);
   uint32_t CMC_TOP_ConvertNSecToFIMClockCycles(uint32_t timeNs);
   Status_t CMC_TOP_ConfigureCpuDomainMaxFreq(uint32_t srcClk);
   Status_t CMC_TOP_MonitorSourceClock(uint32_t srcClk);
   Status_t CMC_TOP_MonitorClocksOnGpio(eFreqMonitorClock fmClockType, uint32_t fmClockDivider, uint32_t cmcClockSource);

   Status_t CMC_TOP_ROM_Init(void);
   Status_t CMC_TOP_DLE_Init(void);
   Status_t CMC_TOP_InitCpuDomainDefault(void);
   Status_t CMC_GetDomainDivider(const uint32_t cmcBaseAddr, uint32_t domainId, uint32_t *pDivider);
   Status_t CMC_UpdateDomainDivider(const uint32_t cmcBaseAddr, uint32_t domainId, uint32_t domDivider);
   Status_t CMC3_TOP_InitATBClock(uint32_t targetFreq);
   Status_t CMC_TOP_EnterIDLELowPower(void);
   Status_t CMC_TOP_ExitIDLELowPower(void);
   uint32_t CMC_TOP_GetDomainDivider(uint32_t domainId);
   Status_t CMC_TOP_SetDomainDivider(uint32_t domainId, uint32_t domDivider);
   uint32_t CMC_TOP_GetSETClkFreqInMhz(void);
   void CMC_TOP_ConfigureFMDomain(CMC_DomainInfo_t* pDomainInfo);






   Status_t CMC3_TOP_InitCpuClockDomain(uint32_t srcClkId, uint32_t dividerValue);
   Status_t CMC3_TOP_ConfigureCpuClockDomain(uint32_t srcClkId, uint32_t dividerValue);
   Status_t CMC3_TOP_InitCpuDomainDefault(void);

   Status_t CMC_ConfigureInternalDomain(const uint32_t cmcBaseAddr, uint32_t cfgSrcClkId, uint32_t cfgClkDivider);

   Status_t CMC_TOP_RAM_Init(void);
   Status_t CMC_TOP_DisableDataPathDomain(void);

   Status_t CMC_Configure_eFuse_ClockROM(void);
   Status_t CMC_Configure_eFuse_Clock(void);
   Status_t CMC_Configure_FIM_LANE_HIGH_Clock(void);
   Status_t CMC_Configure_TM400_Clock(void);
   Status_t CMC_Configure_PeriphForeFuse_Clock(void);
   Status_t CMC_Configure_RestorePeriphForeFuse_Clock(void);


   void     CMC_TOP_CPUDelay(uint32_t delayTime);
   Status_t CMC_TOP_EnableFWTAClock(uint32_t fwtaIndex);
   Status_t CMC_TOP_EnableLDPC_ENC_Clock(void);
   Status_t CMC_TOP_EnableLDPC_DEC_Clock(void);
   Status_t CMC_TOP_EnableMultipleCTTClock(uint32_t cttMask);
   Status_t CMC_TOP_DisableCTTClock(uint32_t cttIndex);
   Status_t CMC_TOP_DisableMultipleCTTClock(uint32_t cttMask);
   uint32_t CMC_TOP_GetCTTClkFreq(uint32_t cttIndex);
   uint32_t CMC_TOP_GetFWTAClkFreq(uint32_t cttIndex);
   uint32_t CMC_TOP_GetSourceClkId(uint32_t domainId);

   uint32_t CMC_TOP_GetRotDomainFreqinMicrosec(void);


   Status_t CMC_TOP_ControlHIMClocks(uint32_t clkEnable);

   Status_t CMC_TOP_SetSourceClkId(uint32_t domainId, uint32_t srcClkId);
   Status_t CMC_TOP_EnableCpuPeriphPclk(uint32_t pClkId);
   Status_t CMC_TOP_DisableCpuPeriphPclk(uint32_t pClkId);
   Status_t CMC_TOP_ExitDPS(const CMC_DomainInfo_t* pDomainInfo);
   Status_t CMC_TOP_ExitDPS3(void);


   void SYS_Set_SFR_GP_REG_2_bit0(void);
   void SYS_Clear_SFR_GP_REG_2_bit0(void);
   BOOL32 SYS_Is_SFR_GP_REG_2_bit0_Set(void);



   Status_t CMC_TOP_SetSourceClkId(uint32_t domainId, uint32_t srcClkId);



Status_t CMC_CalibrateLFOSCfromEfuse(void);

#line 38 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_timerservices.h"

typedef enum SYS_Timer_Status_e
{
   STATUS_SYS_TIMER_INIT_ERROR = STATUS_TIMER_ERROR_BASE,
   STATUS_SYS_HIRES_TIMER_INIT_ERROR,
}   SYS_Timer_Status_t;

#line 93 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_timerservices.h"
typedef uint8_t TimeCallBackNum_t;



uint64_t          SYS_RuntimeReadUSec(void);

uint64_t          SYS_RuntimeReadUSecLPM(void);

uint64_t          SYS_RuntimeDiffTick(uint64_t startTick);
Status_t            SYS_HiresTimerInit(void);
Status_t          SYS_GPTTimerInit(uint32_t ctt_Index, uint32_t enable);
Status_t            SYS_RuntimeInitTick(void);
Status_t           __attribute__((section("TRW")))  SYS_StartPS_LDPC_SeedTimer(void);
void              SYS_RuntimeDelayMicroSec(uint64_t microSec);
void              SYS_TimersIntHandler(void);
void                SYS_CallbackInit(void);
void                SYS_CallbackDisable(TimeCallBackNum_t callbackNum, PVFV_t callbackFuncPtr);
void              SYS_CallbackEnableMicroSec(uint64_t callbackTimeoutUSec, PVFV_t callbackFuncPtr, BOOL periodic, TimeCallBackNum_t *callbackNumPtr);
void              SYS_CallbackEnableMicroSecWithPatameter(uint64_t mDelayMicroSeconds64,
                                             PVFV_t pFunc,
                                             uint32_t mParam,
                                             BOOL isPeriodic,
                                             TimeCallBackNum_t *pCallbackID);
void              SYS_CallbackResetAllCallBacks();
PVFV_t            SYS_GetCallbackPtr(uint32_t timerIndex);
void              SYS_AdjustReadTickPST(void);
Status_t          SYS_CallbackRemainingMicroSec(TimeCallBackNum_t callbackID, uint32_t *pMicroseconds);
uint64_t          SYS_CallbackElapsedMicroSec(TimeCallBackNum_t callbackID);
void SYS_RestartCallback( TimeCallBackNum_t callbackNum );
TimeCallBackNum_t SYS_CallbackUpdateTime(TimeCallBackNum_t callbackNum, uint32_t newMicroseconds);
BOOL SYS_IsAvailableCallbacks( void );
uint32_t SYS_NumActiveCallbacks(void);


typedef union SYS_HiResFlags_u
{
   struct SYS_HiResFlagsBits_s
   {
      uint32_t mIsAllocated  : 1;
      uint32_t mIsRunning    : 1;
      uint32_t rfu           : 30;
   }bits;
   uint32_t all32;
}SYS_HiResFlags_t;

typedef struct SYS_HiResCallbacks_s
{
   PVFV_t pCallback;
   SYS_HiResFlags_t mFlags;
}SYS_HiResCallbacks_t;

TimeCallBackNum_t extern gRTOS_TimerCallback;

void SYS_InitHiResCallbacks( SYS_HiResCallbacks_t *pHiResCallbacks);
Status_t SYS_AllocateHiResCallback( uint32_t *pCttNum );
void SYS_StartHiResCallback( uint32_t cttNum, PVFV_t pCallback, uint32_t delayMicroseconds );
void SYS_HaltHiResCallback( uint32_t cttNum );
void  SYS_ReleaseHiResCallback( uint32_t cttNum );
void SYS_HiResCallbackTest(void);

#line 173 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_timerservices.h"
void SYS_RTOS_TickHandler(void);

void SYS_TimeTickCountingHandler(void);

Status_t SYS_TimeServiceInit(uint32_t bootPhase);

void SYS_DoNopDelay(uint32_t num_of_nops);
void SYS_DoNopDelayMod4 (uint32_t num_of_nops);

#line 9 "d:/gitrepo/fpgcss-vega/source/ftl/rs/inc/ftl_rs.h"

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/rs/inc/ftl_rs.h"
typedef enum
{
   RS_MODE_CLIENT_FML,
   RS_MODE_CLIENT_RO,
   RS_MODE_CLIENT_RSQ,
   RS_MODE_CLIENT_RS,
   RS_MODE_CLIENT_MAX
} RS_ModeClients_t;


typedef struct RS_Statistics_s
{
   uint32_t StatsNumMediaScans;
   uint32_t StatsNumBlocksScanFgMode;
   uint32_t StatsNumBlocksScanBgMode;
   uint32_t rfu[4];
}   RS_Statistics_t;


typedef struct RS_StateCB_tagname_s
{
   uint64_t BgScanStartTimeUs;
   uint64_t FgScanStartTimeUs;
   uint64_t CurrTimeUs;
   uint64_t ScheduleNextFgScanTimeUs;

   uint32_t CurrJbNextToWriteFmu;
   uint32_t CurrJbIsAllocated;
   uint32_t CurrJbObId;
   uint32_t CurrJbQueueType;
   uint32_t CurrJbMaxScanOps;
   uint32_t NextJPageIdxToScanInMedia;
   uint32_t ReInit;
   uint32_t RsModeClientsBitmap;
   RS_Statistics_t rsStatistics;
   uint16_t CurrJbIdx;
   uint16_t CtxtId;

   uint8_t  CurrStringInWl;
   uint8_t  RsEnable;
   uint8_t  CurrJwlIdxInBlock;
   uint8_t  CurrJbIsClosed;
   uint8_t  CurrJbType;
   uint8_t BackgroundScanEnabled;
   uint8_t ForegroundScanEnabled;
   uint8_t MediaScanTimeTooLongNumEventsCount;
   uint8_t ScanWasStoppedDueToQueueFull;
   uint8_t  RsPaused;
   uint8_t  RsInitialized;
   TimeCallBackNum_t timeCallBackNum;
   uint8_t res_1;
   uint8_t res_2;
   uint8_t res_3;

}   RS_StateCB_s, *RS_StateCB_p;



typedef struct
{
   RS_ConfigCB_p RS_Config_p;
   RS_StateCB_p  RS_State_p;
   RS_MorpheusParamsCB_p RS_MrphParamsCB_p;
} RS_CB_s;

#line 108 "d:/gitrepo/fpgcss-vega/source/ftl/rs/inc/ftl_rs.h"
void   RS_Mount(void);
void   RS_NormalMount(uint16_t mountCtxtId);

void   RS_NormalMountSetLogInfo();
void   RS_NormalMountAll(uint16_t mountCtxtId);

void   RS_FirstMount(void);
void  __attribute__((section("TRW")))  RS_Init(void);


void   RS_Enable(uint8_t shouldEnable, RS_ModeClients_t clientId, uint64_t forceTime);
void   RS_PrepareDPS32(void);


void   RS_ControlSyncPrepare(void);

void   RS_PrepareDPS32(void);


void   RS_ProcessActiveScan(uint16_t contextId, uint16_t payload, FMG_ExecStatus_t execStatus);


void   RS_PauseActiveScan(void);


void   RS_DiagGetRsStatistics(uint32_t *pBufferOut, uint32_t bufferBytes);


void    RS_DiagSetRsDurationTimeFG(uint32_t *pBufferOut, uint32_t bufferBytes, uint32_t newTime);


void    RS_DiagSetRsDurationTimeBG(uint32_t *pBufferOut, uint32_t bufferBytes, uint32_t newTime);



uint32_t   Rs_IsRsInBgNeeded(void);


BOOL   RS_IsRsInBgMode(void);



Status_t   RS_BKOPSProcessActiveScan(void);

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_config_api.h"

#line 39 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_config_api.h"
typedef enum FTL_Capacity_e
{
    FTL_CAPACITY_128GB,
    FTL_CAPACITY_256GB,
    FTL_CAPACITY_512GB,
    FTL_CAPACITY_1024GB,
    FTL_CAPACITY_2048GB,
    FTL_CAPACITY_4096GB
}FTL_Capacity_e;
typedef uint8_t FTL_Capacity_t;










typedef struct WearLevelConfig_s
{
    uint8_t  WearLevelTlcPercentageThr;
    uint8_t  WearLevelTlcPercentageThrBkops;
    uint8_t  WearLevelSlcPercentageThr;
    uint8_t  WearLevelTlcJBAllocDiffFactor;
    uint8_t  WearLevelSlcJBAllocDiffFactor;
    uint8_t  rfu1;
    uint16_t WearLevelSlcEnduranceBudget;
}   WearLevelConfig_t;




typedef struct FTLFormatConfig_s
{

    uint32_t                         exportedCapacityInFMUs;


    uint16_t                         ftlBudget[NUM_BLOCK_TYPES];
    uint16_t                         minSparesRequiredPerMetadie;


    uint8_t                          numXorZones[NUM_SBM_TYPES];


    uint16_t                         numLwlPerZone[ ( ( (16) ) ) ];

    uint8_t                          numMetadiesPerJumboblock;


    JBM_PartitionConfig_t            jbmPartitionConfig[ ( (1)  + (1) ) ];
    MBM_PartitionConfig_t            mbmPartitionConfig[ ( (1)  + (1) ) ];
}   FTLFormatConfig_t;

;




typedef struct FTLParametersConfig_s
{

    JBM_PartitionParametersConfig_t  jbmPartitionParamConfig[ ( (1)  + (1) ) ];
    MBM_PartitionParametersConfig_t  mbmPartitionParamConfig[ ( (1)  + (1) ) ];


    RS_ConfigCB_s                    rsConfig;


    WearLevelConfig_t                wlConfig;

}   FTLParametersConfig_t;

typedef struct FTLExtConfig_s
{
    BML_Config_t            bmlConfig;
    uint32_t                numFMUsPerJumboWl[NUM_BLOCK_TYPES];
    uint32_t                numFMUsPerJumboblock[NUM_BLOCK_TYPES][NUM_SBM_TYPES];
    uint16_t                numFMUsPerWriteUnit[NUM_BLOCK_TYPES];
    FTL_Capacity_t          capacity;
    uint8_t                 rfu0;
    uint16_t                numSLCMetablocks;
    uint16_t                numTLCMetablocks[ ( ( ( ( ( 4 ) / ( 2 ) )  * (1)  * (8) )  * ( 2 ) )  / (2) ) ];
    uint32_t                shadowSpaceCapacityInFMUs;
    uint32_t                slcSizeInFMUs;
    uint32_t                totalCapacityInFMUs;
    uint32_t                rpmbCapacityInFMUs;
    uint32_t                bootPartitionsCapacityInFMUs;
    uint8_t                 numSubBlocksPerPhysicalByPartition[PARTITIONS_COUNT];
    BML_SbmType_t           sbmTypeByPartition[PARTITIONS_COUNT];
    uint32_t                rfu1[2];
}   FTLExtConfig_t;



typedef struct FTLRamConfig_s
{
    RS_MorpheusParamsCB_t   rsMrphParams;
    uint16_t                wearLevelTlcPecThr;
    uint16_t                wearLevelTlcPecThrBkops;
    uint16_t                wearLevelSlcPecThr;
    uint16_t                rfu1;
}   FTLRamConfig_t;




typedef PSMetaDieInfo_t   FTLPhysicalConfig_t;





typedef struct FTL_MRPH_Config_s
{
    uint32_t    pecWearLevelingGuardBand[NUM_BLOCK_TYPES];
    uint32_t    pecMaxValue[NUM_BLOCK_TYPES];
    uint32_t    pecSampleFrequency[NUM_BLOCK_TYPES];
    uint32_t    maxNumNandPors;
    uint32_t    rlcReadThreshold;
    uint32_t    ftlSpare2;
    uint32_t    ftlSpare3;
    uint32_t    ftlSpare4;
    uint32_t    secTerm;
}   FTL_MRPH_Config_t;




typedef struct FTLHybridSlcConfig_s
{
    uint8_t hybridSlcEnable;
    uint8_t logicalFullnessThreshold;
    uint8_t PotentialFreeBlocksThreshold;
    uint8_t rfu;
    uint32_t freeBlocksThreshold;
    uint32_t freeBlocksHysteresis;
    uint32_t recentSlcDataSizeDefinition;
    uint32_t bkopsTlcRlcVcFactor;
    uint32_t recentHybridSlcDataSizeDefinition;
    uint32_t rfu1;
    uint32_t rfu2;
}   FTLHybridSlcConfig_t;


typedef struct FWConfig_s
{
    FTLFormatConfig_t ftlConfig;
    FTLParametersConfig_t ftlParametersConfig;
    FTLExtConfig_t ftlExtConfig;
    FTLRamConfig_t ftlRamConfig;
    FTLPhysicalConfig_t ftlPhysicalConfig;
    FTL_MRPH_Config_t ftlMrphConfig;
    FTLHybridSlcConfig_t ftlHybridSlcConfig;
}   FTL_FWConfig_t;

void FTL_Config_DuiFwConfigGetData(FTL_FWConfig_t* DUIFwCnfgData);

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_morpheus.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_morpheus.h"

#line 168 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_morpheus.h"
typedef enum _PS_MRPH_EPWR_WL_MODE_t
{
   PS_MRPH_EPWR_DISABLE = 0,
   PS_MRPH_EPWR_ENABLE_SPECIFIC_WL = 1,
   PS_MRPH_EPWR_ENABLE_ALL_WL = 2,
}PS_MRPH_EPWR_WL_MODE_t;







typedef struct PS_NParam_Morpheus_param_type_s
{
   uint8_t type:2;
   uint8_t shift:1;
   uint8_t multiplier:3;
   uint8_t rfu:2;
}PS_NParam_Morpheus_param_type_t;


typedef struct PS_NParam_Morpheus_Param_s
{
   uint16_t                         paramAddress;
   uint8_t                          paramBitMask;
   PS_NParam_Morpheus_param_type_t  paramType;
   uint16_t                         paramValue;
} PS_NParam_Morpheus_Param_t;


typedef struct
{
   uint16_t setId;
   uint16_t setSize;
   uint16_t entryIx;
   uint16_t formatVer;
} PS_MRPH_SetInfo_t;

enum MrphDataSetIx_e
{
   MRPH_CVD_PARAM_IX = 0,
   MRPH_FLGP_PARAM_IX,
   MRPH_CVD_DRD_PARAM_IX,
   MRPH_FAST_SLC_PROGRAM_IX,
   MRPH_RS_PARAM_IX,
   MRPH_LDPC_TABLE_PARAM_IX,
   MRPH_REH_PARAM_IX,
   MRPH_READ_PERF_IMPRV_PARAM_IX,
   MRPH_BES_PARAM_IX,
   MRPH_VCGR_PARAM_IX,


   MRPH_IFT_TABLE_PARAM_IX,
   MRPH_ERASE_TABLE_PARAM_IX,
   MRPH_INIT_TABLE_PARAM_IX,
   MRPH_TIMING_TABLE_PARAM_IX,
   MRPH_PARAMS_NUM
};

   typedef uint32_t MrphDataSetIx_e;








typedef struct PS_MRPH_RS_Param_s
{
   uint16_t    CECCob_TLC;
   uint16_t    CECCcb_TLC;
   uint16_t    CECCob_SLC;
   uint16_t    CECCcb_SLC;

   uint8_t     actScanPgBm;

   uint8_t     maxActScanOBWLCount;
   uint8_t     validActScanOBWLCount;
   uint8_t     actScanOBWL[ (22) ];

   uint8_t     maxActScanCBWLCount;
   uint8_t     validActScanCBWLCount;
   uint8_t     actScanCBWL[ (22) ];

   uint8_t     maxActScanUpSubOBWLCount;
   uint8_t     validActScanUpSubOBWLCount;
   uint8_t     actScanUpSubOBWL[ (17) ];

   uint8_t     maxActScanLoSubOBWLCount;
   uint8_t     validActScanLoSubOBWLCount;
   uint8_t     actScanLoSubOBWL[ (17) ];

   uint8_t     maxActScanUpSubCBWLCount;
   uint8_t     validActScanUpSubCBWLCount;
   uint8_t     actScanUpSubCBWL[ (17) ];

   uint8_t     maxActScanLoSubCBWLCount;
   uint8_t     validActScanLoSubCBWLCount;
   uint8_t     actScanLoSubCBWL[ (17) ];

   uint8_t     rndScanPgBm;

   uint8_t     maxRndScanWLCount;
   uint8_t     validRndScanWLCount;
   uint8_t     rndScanWL[ (22) ];

   uint8_t     maxRndScanUpSubWLCount;
   uint8_t     validRndScanUpSubWLCount;
   uint8_t     rndScanUpSubWL[ (15) ];

   uint8_t     maxRndScanLoSubWLCount;
   uint8_t     validRndScanLoSubWLCount;
   uint8_t     rndScanLoSubWL[ (15) ];

   uint16_t    rndThMountTime[ (3) ];
   uint16_t    rndThOperTime[ (3) ];
   uint8_t     rndSwTimeScanFreqSet;

   uint8_t     rndNumRngLSB;
   uint8_t     rndCntOffset_TLC;
   uint8_t     rndCntOffset_SLC;

   uint16_t    CECCob_REH;
   uint16_t    CECCcb_REH;

   uint16_t    psvScanTlcObThreshold;
   uint16_t    psvScanTlcCbThreshold;
   uint16_t    psvScanSlcObThreshold;
   uint16_t    psvScanSlcCbThreshold;

   uint32_t    rdCntThSLC;

   uint8_t     actScanSlcBerEstimationReadType;
   uint8_t     actScanTlcCbBerEstimationReadType;

   uint8_t     actScanTlcObBerEstimationBWLReadType;
   uint8_t     actScanTlcObBerEstimationNonBWLReadType;

   uint8_t     rndScanSlcBerEstimationReadType;
   uint8_t     rndScanTlcCbBerEstimationReadType;

   uint8_t     rndScanTlcObBerEstimationBWLReadType;
   uint8_t     rndScanTlcObBerEstimationNonBWLReadType;

   uint8_t     switchCmdCfh;
   uint8_t     frequentRLChandling;
   uint8_t     NumOfSeqPEConSameWL;


   uint8_t     pad[1];

   uint32_t    SectionTerminator;
}   PS_MRPH_RS_Param_t;

typedef struct PS_MRPH_RS_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_RS_Param_t   setData;
}  PS_MRPH_RS_CFG_Param_t;





typedef struct PS_MRPH_REH_Param_s
{
   uint8_t    slcCvdDumpStepSize;
   uint8_t    rfu0;
   uint16_t   slcCvdDumpNumberSteps;
   uint8_t    slcCvdDumpStartingVoltage;
   uint8_t    tlcCvdDumpStepSize;
   uint16_t   tlcCvdDumpNumberSteps;
   uint8_t    tlcCvdDumpStartingVoltage;
   uint8_t    SwitchForLNAEnableAfterRehBes7Sb2;
   uint8_t    minSwForSb1;
   uint8_t    minSwForSb2;
   uint8_t    minSwForXor;
   uint8_t    CF_readRetrySwitch;
   uint8_t    FastReadBWL_NBWL;
   uint8_t    rfu2[5];
   uint32_t   SectionTerminator;
}   PS_MRPH_REH_Param_t;

typedef struct PS_MRPH_REH_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_REH_Param_t  setData;
}  PS_MRPH_REH_CFG_Param_t;






typedef  _Packed  struct PS_MRPH_CVD_Param_s
{
     _Packed  struct PS_MRPH_CVD_Param_WL_Zone_s
   {
      uint8_t  maxNumZones;
      uint8_t  validNumZones;

        _Packed  struct PS_MRPH_CVD_Param_zonesParams_s
      {
         uint8_t  upperBound;
         uint8_t  shifts[ (7) ];
      } zonesParams[ (24) ];
   } WL_Zone;

     _Packed  struct PS_MRPH_CVD_Param_TempZone_s
   {
      uint8_t  maxNumTempEntries;
      uint8_t  validNumTempEntries;

        _Packed  struct PS_MRPH_CVD_Param_entriesParams_s
      {
         uint8_t  lowerBoundDecreasingTemp;
         uint8_t  upperBoundDecreasingTemp;
      } entriesParams[ (4) ];

      uint8_t  tempHysteresis;
   } TempZone[PS_API_BLOCK_TYPE_TOTAL];

     _Packed  struct PS_MRPH_CVD_Param_TTM_s
   {
      uint8_t  timeTagsTotal;
      uint8_t  timeTagsSLC;
   } TTM;

     _Packed  struct PS_MRPH_CVD_Param_CVD_Cache_s
   {
      uint16_t maxNumCacheEntries;
      uint16_t numCacheEntries;
   } CVD_Cache;

     _Packed  struct PS_MRPH_CVD_Param_TT_Assignment_s
   {
      uint8_t  maxNumPECregions;
      uint8_t  validNumPECregions;

        _Packed  struct PS_MRPH_CVD_Param_regionsParams_TT_Assignment_s
      {
         uint8_t  lowerBoundPEC;
         uint8_t  pad;
         uint16_t validityThresholdLATT;
      } regionsParams[ (5) ];

      uint8_t  maxNumWLVerifiers;
      uint8_t  validNumWLVerifiers;
      uint8_t  verifierWL[ (12) ];
      uint8_t  FRBitmapCb;
      uint8_t  FRBitmapOb;

   } TT_Assignment[PS_API_BLOCK_TYPE_TOTAL];

     _Packed  struct PS_MRPH_CVD_Param_TT_Allocation_s
   {
      uint8_t  maxNumPECregions;
      uint8_t  validNumPECregions;

        _Packed  struct PS_MRPH_CVD_Param_regionsParams_TT_Allocation_s
      {
         uint16_t  updateThreshold;
         uint16_t  scrubThreshold;
      } regionsParams[ (5) ];

      uint8_t  reprWL_BES;
      uint8_t  maxNumWLVerifiers;
      uint8_t  validNumWLVerifiers;
      uint8_t  verifierWL[ (12) ];
      uint8_t  FRBitmapCb;
      uint8_t  FRBitmapOb;
      uint8_t  pad;
   } TT_Allocation[PS_API_BLOCK_TYPE_TOTAL];

     _Packed  struct PS_MRPH_CVD_Param_TT_Update_s
   {
      uint8_t  maxNumPECregions;
      uint8_t  validNumPECregions;

        _Packed  struct PS_MRPH_CVD_Param_regionsParams_TT_Update_s
      {
         uint8_t  lowerBoundPEC;
         uint8_t  HBER_MB_thresholdForRelocation;
         uint16_t updateThreshold;
         uint16_t scrubThreshold;
      } regionsParams[ (5) ];

      uint8_t  verifiersMB;
      uint8_t  WLNumber_BES;
      uint8_t  WLNumber_BES_LowerSBM;
      uint8_t  WLNumber_BES_UpperSBM;

      uint8_t  maxNumWLVerifiers;
      uint8_t  validNumWLVerifiers;
      uint8_t  verifierWL[ (12) ];
      uint8_t  FRBitmapCb;
      uint8_t  FRBitmapOb;
   } TT_Update[PS_API_BLOCK_TYPE_TOTAL];

     _Packed  struct PS_MRPH_CVD_Param_TT_UpdateOB_s
   {
      uint8_t  representativeWL;
      uint8_t  maxNumPECregions;
      uint8_t  validNumPECregions;

        _Packed  struct
      {
         uint8_t  lowerBoundPEC;
         uint16_t updateThreshold;
         uint16_t scrubThreshold;
         uint8_t  WLOffset;
      } regionsParams[ (5) ];

      uint8_t  pad;
   } TT_UpdateOB[PS_API_BLOCK_TYPE_TOTAL];

     _Packed  struct PS_MRPH_CVD_Param_BWL_Offset_s
   {
      uint8_t  maxNumBWLOffsets;
      uint8_t  validNumBWLOffests;
        _Packed  struct
      {
         uint8_t  upperBoundWL;
         uint8_t  shift[ (7) ];
      } offsets[ (6) ];
   } BWL_offset;

     _Packed  struct PS_MRPH_CVD_Param_OBWL_Zones_s
   {
      uint8_t  maxNumOBWLZones;
      uint8_t  validNumOBWLZones;
        _Packed  struct
      {
         uint8_t  upperBoundWL;
         uint8_t  shift[ (7) ];
      } offsets[ (12) ];
   } OBWL_Zones;

     _Packed  struct
   {
      uint8_t  maxNumberWLVerifiers;
      uint8_t  validNumberWLVerifiers;
      uint8_t  WL_Verifier[ (12) ];
      uint16_t CVD_cache_entry_time;
      uint8_t  update_is_needed_after_each_24h;
   } TT_Compaction;

     _Packed  struct
   {
      uint8_t pad[1];
      uint32_t secTerm;
   } other;
}   PS_MRPH_CVD_Param_t;

typedef struct PS_MRPH_CVD_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_CVD_Param_t  setData;
}   PS_MRPH_CVD_CFG_Param_t;






typedef  _Packed  struct PS_MRPH_CVD_DRD_Param_s
{
   uint8_t  maxNumPECregions;
   uint8_t  validNumPECregions;

     _Packed  struct PS_MRPH_CVD_DRD_Param_regionsParams_DRD_Param_s
   {
      uint16_t lowerBoundPEC;
      uint16_t CECCthreshold;
      uint8_t  scanShiftCR3;
      uint8_t  scanShiftGR5;
   } regionsParams[ (7) ];

   uint8_t  validNumberReprWL;
   uint8_t  padding;

   uint16_t reprWL[ (7) ];



   uint16_t thresholdTlcEPWR;
   uint16_t besTlcThreshold;
   uint8_t  enableTlcEPWR;
   uint8_t  padding1[3];
   uint32_t TlcPageBitmap[ (103) ];
   uint8_t  fmuEPWRTlc;
   uint8_t  mandatorypad[5];


   uint16_t thresholdSlcEPWR;
   uint16_t besSlcThreshold;
   uint8_t  enableSlcEPWR;
   uint8_t  padding3;
   uint32_t SlcPageBitmap[ (35) ];
   uint8_t  fmuEPWRSlc;
   uint8_t  padding4;


   uint16_t thresholdTlcPlDisturb;
   uint16_t thresholdSlcPlDisturb;
   uint8_t  LP_MP_UP_page_check_for_DRD;
   uint8_t  padding5[5];
   uint32_t secTerm;

}   PS_MRPH_CVD_DRD_Param_t;



typedef struct PS_MRPH_CVD_DRD_CFG_Param_s
{
   CFG_SetHdr_t               setHdr;
   PS_MRPH_CVD_DRD_Param_t    setData;
}   PS_MRPH_CVD_DRD_CFG_Param_t;








typedef    _Packed  struct PS_FAST_SLC_FEATURE_s
{
   uint16_t Feature_Address;
   uint8_t  Byte_0_Feature_Address;
   uint8_t  Byte_1_Feature_Address;
   uint8_t  Byte_2_Feature_Address;
   uint8_t  Byte_3_Feature_Address;
} PS_FAST_SLC_FEATURE_t;

typedef    _Packed  struct PS_FAST_SLC_PROGRAM_PE_THRESHOLD_s
{
   uint16_t Fast_SLC_Program_PE_Threshold_Entry;
   PS_FAST_SLC_FEATURE_t psFastSlcFeature[ (4) ];
} PS_FAST_SLC_PROGRAM_PE_THRESHOLD_t;

typedef    _Packed  struct PS_FAST_SLC_SSPV_PAGE_BIT_MAP_ENTRIES_s
{
   uint32_t SSPV_page_bit_map_Entry[ (35) ];
} PS_FAST_SLC_SSPV_PAGE_BIT_MAP_ENTRIES_t;

typedef  _Packed  struct PS_MRPH_FAST_SLC_PROGRAM_Param_s
{

  uint8_t Max_Number_of_Fast_SLC_Program_PE_Bins;
  uint8_t Valid_Number_of_Fast_SLC_Program_PE_Bins;
  uint8_t num_of_Fast_SLC_die_specific_features;
  uint8_t  Padding0;
  uint16_t num_of_provisioned_Fast_SLC_trim_feature;

  PS_FAST_SLC_PROGRAM_PE_THRESHOLD_t psFastSlcProgramPeThreshold[ (10) ];

  uint8_t Enable_1P0V_feature;
  uint8_t  Padding1;

  PS_FAST_SLC_SSPV_PAGE_BIT_MAP_ENTRIES_t psFastSlcSspvPageBitMapEntries;
  uint8_t  Padding[4];
  uint32_t Section_Terminator;

}  PS_MRPH_FAST_SLC_PROGRAM_Param_t;




typedef struct PS_MRPH_FAST_SLC_Param_s
{
   CFG_SetHdr_t               setHdr;
   PS_MRPH_FAST_SLC_PROGRAM_Param_t    setData;
}   PS_MRPH_FAST_SLC_Param_t;







typedef struct PS_NParam_MorpheusHdrFormat_s
{
   uint8_t  numProvisionedPeBins;
   uint8_t  numValidPeBins;
   uint8_t  numBlanketParams;
   uint8_t  numDieSpecificParams;
   uint16_t numProvisionedParams;
} PS_NParam_MorpheusHdrFormat_t;

typedef uint16_t PS_NParam_MorpheusPECThr_t;



typedef  _Packed  struct PS_MRPH_VCGR_Param_s
{
   PS_NParam_MorpheusHdrFormat_t    header;
   PS_NParam_MorpheusPECThr_t PEthresholdEntry;

     _Packed  struct PS_MRPH_VCG_Param_s
   {
      PS_NParam_Morpheus_Param_t DVCG[8];
   } DVCG;

     _Packed  struct PS_MRPH_DVCG_Param_s
   {
      PS_NParam_Morpheus_Param_t VCG[8];
   } plane[ (4) ];

   uint8_t padding1[4];
   uint32_t secTerm;
}  PS_MRPH_VCGR_Param_t;



typedef struct PS_MRPH_VCGR_s
{
   CFG_SetHdr_t               setHdr;
   PS_MRPH_VCGR_Param_t       setData;
}   PS_MRPH_VCGR_t;










typedef    _Packed  struct PS_MRPH_FLGP_Param_SLC_s
{
   uint16_t psFlgpSLCFLGPBinarySearchPECountStartEntry;

   uint16_t psFlgpSLCFLGPBinarySearchVCG_SLCRShiftEntry;

   uint16_t psFlgpSLCFLGPBinarySearchBitDetectionThresholdEntry;
   uint16_t psFlgpSLCFLGPTrueEraseDetectionBitThresholdEntry;

   uint16_t  psFlgpSLCFLGPTrueEraseDetectionVCG_SLCRShiftEntry[ (12) ];

   uint8_t  psFlgpSLCFLGPTrueEraseDetectionVREADKShiftEntry;
   uint8_t  psFlgpPadding1;

   uint16_t  psFlgpSLCFLGPMarginalpagedetectionVCG_SLCRShiftEntry;

   uint16_t psFlgpSLCFLGPGoodpageECCThresholdentry;
   uint16_t psFlgpSLCFLGPMarginalpageECCThresholdentry;

   uint16_t psFlgpSLC_NUM_OF_FLASH_FILL_ZEROS_TH_Entry;
} PS_MRPH_FLGP_Param_SLC_t;









typedef    _Packed  struct PS_MRPH_FLGP_Param_SLCSBM_s
{
   uint16_t psFlgpSLCSBMFLGPBinarySearchPECountStartEntry;

   uint16_t psFlgpSLCSBMFLGPBinarySearchVCG_SLCRShiftEntry;

   uint16_t psFlgpSLCSBMFLGPBinarySearchBitDetectionThresholdEntry;
   uint16_t psFlgpSLCSBMFLGPTrueEraseDetectionBitThresholdEntry;

   uint16_t  psFlgpSLCSBMFLGPTrueEraseDetectionVCG_SLCRShiftEntry[ (12) ];

   uint8_t  psFlgpSLCSBMFLGPTrueEraseDetectionVREADKShiftEntry;
   uint8_t  psFlgpPadding1;

   uint16_t  psFlgpSLCSBMFLGPMarginalpagedetectionVCG_SLCRShiftEntry;

   uint16_t psFlgpSLCSBMFLGPGoodpageECCThresholdentry;
   uint16_t psFlgpSLCSBMFLGPMarginalpageECCThresholdentry;

   uint16_t psFlgpSLCSBM_NUM_OF_FLASH_FILL_ZEROS_TH_Entry;
} PS_MRPH_FLGP_Param_SLCSBM_t;








typedef    _Packed  struct PS_MRPH_FLGP_Param_TLC_s
{
   uint16_t psFlgpTLCFLGPBinarySearchPECountStartEntry;
   uint8_t  psFlgpTLCFLGPBinarySearchVCG_SLCRShiftEntry;
   uint8_t  psFlgpPadding;
   uint16_t psFlgpTLCFLGPBinarySearchBitDetectionThresholdEntry;
   uint16_t psFlgpTLCFLGPTrueEraseDetectionBitThresholdEntry;
   uint8_t  psFlgpTLCFLGPTrueEraseDetectionVCG_SLCRShiftEntry[ (12) ];
   uint8_t  psFlgpTLCFLGPTrueEraseDetectionVREADKShiftEntry;
   uint8_t  psFlgpTLCFLGPMarginalpagedetectionVCG_SLCRShiftEntry;


   uint16_t psFlgpTLCFLGPGoodpageECCThresholdentry_non_LWL0;
   uint16_t psFlgpTLCFLGPMarginalpageECCThresholdentry_non_LWL0;
   uint16_t psFlgpTLCFLGPGoodpageECCThresholdentry_only_LWL0;
   uint16_t psFlgpTLCFLGPMarginalpageECCThresholdentry_only_LWL0;

   uint16_t psFlgpTLC_NUM_OF_FLASH_FILL_ZEROS_TH_Entry;
   uint16_t TLC_MIN_read_up_th;
} PS_MRPH_FLGP_Param_TLC_t;





typedef    _Packed  struct PS_MRPH_FLGP_Param_hSLC_s
{
   uint16_t psFlgphSLCFLGPBinarySearchPECountStartEntry;
   uint16_t psFlgphSLCFLGPBinarySearchVCG_SLCRShiftEntry;
   uint16_t psFlgphSLCFLGPBinarySearchBitDetectionThresholdEntry;
   uint16_t psFlgphSLCFLGPTrueEraseDetectionBitThresholdEntry;
   uint16_t psFlgphSLCFLGPTrueEraseDetectionVCG_SLCRShiftEntry[ (12) ];
   uint8_t  psFlgphSLCFLGPTrueEraseDetectionVREADKShiftEntry;
   uint8_t  psFlgpPadding1;
   uint16_t psFlgphSLCFLGPMarginalpagedetectionVCG_SLCRShiftEntry;
   uint16_t psFlgphSLCFLGPGoodpageECCThresholdentry;
   uint16_t psFlgphSLCFLGPMarginalpageECCThresholdentry;
   uint16_t psFlgphSLC_NUM_OF_FLASH_FILL_ZEROS_TH_Entry;
} PS_MRPH_FLGP_Param_hSLC_t;








typedef struct PS_FLGP_MRPH_Params_s
{



   uint8_t  psFlgpTEDReadWLZoneBoundary[ (12) ];




   uint8_t  psFlgpMaxNumberofentriesforSLCFLGPBinarySearch;
   uint8_t  psFlgpValidNumberofentriesforSLCFLGPBinarySearch;
   PS_MRPH_FLGP_Param_SLC_t SLC_PEC[ (11) ];






   uint8_t  psFlgpMaxNumberofentriesforTLCFLGPBinarySearch;
   uint8_t  psFlgpValidNumberofentriesforTLCFLGPBinarySearch;

   PS_MRPH_FLGP_Param_TLC_t TLC_PEC[ (7) ];






   uint8_t  psFlgpMaxNumberofentriesforhSLCFLGPBinarySearch;
   uint8_t  psFlgpValidNumberofentriesforhSLCFLGPBinarySearch;

   PS_MRPH_FLGP_Param_hSLC_t hSLC_PEC[ (11) ];





   uint8_t  Enabling_dynTT0_acquiring_during_FLGP;
   uint8_t  psFlgpPadding[1];
   uint16_t FLGP_Erase_Block_Type_Detection_Bit_Threshold;
   uint16_t FLGP_Erase_Block_Type_Detection_VCG_SLCR_Shift;
   uint8_t  psFlgpPadding_2[2];





   uint16_t FWD_Read_Level[ (12) ];





   PS_MRPH_FLGP_Param_SLCSBM_t SLCSBM_USB_PEC[ (11) ];
   PS_MRPH_FLGP_Param_SLCSBM_t SLCSBM_LSB_PEC[ (11) ];

   uint8_t  psFlgpPadding_3[4];


   uint32_t psFlgpSectionTerminator;
}   PS_FLGP_MRPH_Params_t;


typedef struct PS_MRPH_FLGP_CFG_Param_s
{
   CFG_SetHdr_t            setHdr;
   PS_FLGP_MRPH_Params_t   setData;
}   PS_MRPH_FLGP_CFG_Param_t;







typedef struct PS_MRPH_LDPC_TABLE_Params_s
{

   uint8_t  maxNumBERRegions;
   uint8_t  ValidNumBERRegions;

     _Packed  struct PS_MRPH_CVD_BER_Regions_s
   {
      uint16_t  SW_UpBound;
      uint16_t  NumberSB;
   } BER_Region [ (16) ];






   uint8_t SB1_Delta_Neg_VCG_SLCR;
   uint8_t SB1_Delta_Pos_VCG_SLCR;

   uint8_t SB1_Delta_Neg_VCG_AR3;
   uint8_t SB1_Delta_Pos_VCG_AR3;
   uint8_t SB1_Delta_Neg_VCG_ER3;
   uint8_t SB1_Delta_Pos_VCG_ER3;
   uint8_t SB1_Delta_Neg_VCG_BR3;
   uint8_t SB1_Delta_Pos_VCG_BR3;
   uint8_t SB1_Delta_Neg_VCG_DR3;
   uint8_t SB1_Delta_Pos_VCG_DR3;
   uint8_t SB1_Delta_Neg_VCG_FR3;
   uint8_t SB1_Delta_Pos_VCG_FR3;
   uint8_t SB1_Delta_Neg_VCG_CR3;
   uint8_t SB1_Delta_Pos_VCG_CR3;
   uint8_t SB1_Delta_Neg_VCG_GR3;
   uint8_t SB1_Delta_Pos_VCG_GR3;






   uint8_t SB2_1_Delta_Neg_VCG_SLCR;
   uint8_t SB2_1_Delta_Pos_VCG_SLCR;

   uint8_t SB2_1_Delta_Neg_VCG_AR3;
   uint8_t SB2_1_Delta_Pos_VCG_AR3;
   uint8_t SB2_1_Delta_Neg_VCG_ER3;
   uint8_t SB2_1_Delta_Pos_VCG_ER3;
   uint8_t SB2_1_Delta_Neg_VCG_BR3;
   uint8_t SB2_1_Delta_Pos_VCG_BR3;
   uint8_t SB2_1_Delta_Neg_VCG_DR3;
   uint8_t SB2_1_Delta_Pos_VCG_DR3;
   uint8_t SB2_1_Delta_Neg_VCG_FR3;
   uint8_t SB2_1_Delta_Pos_VCG_FR3;
   uint8_t SB2_1_Delta_Neg_VCG_CR3;
   uint8_t SB2_1_Delta_Pos_VCG_CR3;
   uint8_t SB2_1_Delta_Neg_VCG_GR3;
   uint8_t SB2_1_Delta_Pos_VCG_GR3;






   uint8_t SB2_2_Delta_Neg_VCG_SLCR;
   uint8_t SB2_2_Delta_Pos_VCG_SLCR;

   uint8_t SB2_2_Delta_Neg_VCG_AR3;
   uint8_t SB2_2_Delta_Pos_VCG_AR3;
   uint8_t SB2_2_Delta_Neg_VCG_ER3;
   uint8_t SB2_2_Delta_Pos_VCG_ER3;
   uint8_t SB2_2_Delta_Neg_VCG_BR3;
   uint8_t SB2_2_Delta_Pos_VCG_BR3;
   uint8_t SB2_2_Delta_Neg_VCG_DR3;
   uint8_t SB2_2_Delta_Pos_VCG_DR3;
   uint8_t SB2_2_Delta_Neg_VCG_FR3;
   uint8_t SB2_2_Delta_Pos_VCG_FR3;
   uint8_t SB2_2_Delta_Neg_VCG_CR3;
   uint8_t SB2_2_Delta_Pos_VCG_CR3;
   uint8_t SB2_2_Delta_Neg_VCG_GR3;
   uint8_t SB2_2_Delta_Pos_VCG_GR3;


   uint16_t Erase_Page_SW_Threshold;
   uint32_t Section_Terminator;
}   PS_MRPH_LDPC_TABLE_Params_t;



typedef struct PS_MRPH_LDPC_TABLE_CFG_Param_s
{
   CFG_SetHdr_t                   setHdr;
   PS_MRPH_LDPC_TABLE_Params_t    setData;
}   PS_MRPH_LDPC_TABLE_CFG_Params_t;





typedef struct PS_MRPH_BES_Params_s
{
   int16_t BES3_X1_Offset;
   int8_t BES3_X3_AR3_Offset;
   int8_t BES3_X3_BR3_Offset;
   int8_t BES3_X3_CR3_Offset;
   int8_t BES3_X3_DR3_Offset;
   int8_t BES3_X3_ER3_Offset;
   int8_t BES3_X3_FR3_Offset;
   int8_t BES3_X3_GR3_Offset;
   int8_t BES3_X1_Delta;
   int8_t BES3_X3_AR3_Delta;
   int8_t BES3_X3_BR3_Delta;
   int8_t BES3_X3_CR3_Delta;
   int8_t BES3_X3_DR3_Delta;
   int8_t BES3_X3_ER3_Delta;
   int8_t BES3_X3_FR3_Delta;
   int8_t BES3_X3_GR3_Delta;
   int8_t padding0;
   int16_t BES5_X1_Offset;
   int8_t BES5_X3_AR3_Offset;
   int8_t BES5_X3_BR3_Offset;
   int8_t BES5_X3_CR3_Offset;
   int8_t BES5_X3_DR3_Offset;
   int8_t BES5_X3_ER3_Offset;
   int8_t BES5_X3_FR3_Offset;
   int8_t BES5_X3_GR3_Offset;
   int8_t BES5_X1_Delta;
   int8_t BES5_X3_AR3_Delta;
   int8_t BES5_X3_BR3_Delta;
   int8_t BES5_X3_CR3_Delta;
   int8_t BES5_X3_DR3_Delta;
   int8_t BES5_X3_ER3_Delta;
   int8_t BES5_X3_FR3_Delta;
   int8_t BES5_X3_GR3_Delta;
   int8_t padding1;
   int16_t BES7_X1_Offset;
   int8_t BES7_X3_AR3_Offset;
   int8_t BES7_X3_BR3_Offset;
   int8_t BES7_X3_CR3_Offset;
   int8_t BES7_X3_DR3_Offset;
   int8_t BES7_X3_ER3_Offset;
   int8_t BES7_X3_FR3_Offset;
   int8_t BES7_X3_GR3_Offset;
   int8_t BES7_X1_Delta;
   int8_t BES7_X3_AR3_Delta;
   int8_t BES7_X3_BR3_Delta;
   int8_t BES7_X3_CR3_Delta;
   int8_t BES7_X3_DR3_Delta;
   int8_t BES7_X3_ER3_Delta;
   int8_t BES7_X3_FR3_Delta;
   int8_t BES7_X3_GR3_Delta;
   int8_t RehBesAcquisationWithLNASwitch;
   int8_t FlgpBesAcquisationWithLNASwitch;
   int8_t padding2[5];
   int32_t Section_Terminator;
}   PS_MRPH_BES_Params_t;

typedef struct PS_MRPH_BES_CFG_Param_s
{
   CFG_SetHdr_t            setHdr;
   PS_MRPH_BES_Params_t    setData;
}   PS_MRPH_BES_CFG_Params_t;










typedef  _Packed  struct PS_MRPH_READ_PERF_IMPRV_Params_s
{
   uint8_t  fastReadUECCCounterThreshold;
   uint8_t  readTypeOBTLC;
   uint16_t cmdD2hRefreshFrequency;
   uint8_t cmdD2hEnableDisableSwitch;
   uint16_t fastReadTLCPECountThreshold;
   uint8_t enable_program_suspend;
   uint16_t Number_of_Read_allowed_during_1msec_of_Program_suspend;
   uint16_t Time_in_msec_allow_for_ASMR;
   uint16_t Total_maximum_number_of_reads_per_suspend;
   uint8_t  Max_num_of_erease_suspend;
   uint8_t  padding0[5];
   uint32_t Section_Terminator;
}   PS_MRPH_READ_PERF_IMPRV_Params_t;



typedef struct PS_MRPH_READ_PERF_IMPRV_CFG_Params_s
{
   CFG_SetHdr_t                     setHdr;
   PS_MRPH_READ_PERF_IMPRV_Params_t setData;
}   PS_MRPH_READ_PERF_IMPRV_CFG_Params_t;





typedef struct MRPH_FTL_Config_s
{
   uint32_t    pecWearLevelingGuardBand[PS_API_BLOCK_TYPE_TOTAL];
   uint32_t    pecMaxValue[PS_API_BLOCK_TYPE_TOTAL];
   uint32_t    pecSampleFrequency[PS_API_BLOCK_TYPE_TOTAL];
   uint32_t    maxNumNandPors;
   uint32_t    rlcReadThreshold;
   uint32_t    ftlSpare2;
   uint32_t    ftlSpare3;
   uint32_t    ftlSpare4;
   uint32_t    secTerm;
} MRPH_FTL_Config_t;










typedef  _Packed  struct
{
   uint8_t maxParamSupported;
   uint8_t validParam;
} SGD_ParamHeader_t;

typedef  _Packed  struct
{

   struct
   {
      uint16_t upperTailCorrectCtrl;
      uint16_t upperTailCorrect1Ctrl;
      uint16_t lowerTailCorrectCtrl;
   } detectCorrectCtrl[ (2) ];


   uint32_t upperTailMaintMode[ (2) ];
   uint32_t upperTailFreqMode[ (2) ];
   uint32_t upperTailBitIgnoreMode;
   uint32_t upperTailVoltReadMode;


   uint32_t lowerTailMaintMode[ (2) ];
   uint32_t lowerTailFreqMode[ (2) ];
   uint32_t lowerTailBitIgnoreMode;
   uint32_t lowerTailVoltReadMode;


   uint32_t opBitIgnoreMode;
   uint32_t opVoltReadMode;

   uint32_t PECTbl[ (8) ];

   uint16_t PECFreqTbl[ (8) ];

   uint16_t bitIgnoreTbl[ (8) ];
   uint16_t readVoltTbl[ (8) ];
}   PS_MRPH_SGD_Mode_Param_t;

typedef  _Packed  struct PS_MRPH_SGD_Param_s
{
   PS_MRPH_SGD_Mode_Param_t modeTbl;


   SGD_ParamHeader_t commonHeaderErase;
   uint8_t  paramEntryErase[20][6];


   SGD_ParamHeader_t commonHeaderSGD;
   uint8_t  paramEntrySGD[120][6];


   SGD_ParamHeader_t commonHeaderSGS;
   uint8_t  paramEntrySGS[64][6];


   SGD_ParamHeader_t commonHeaderDWL;
   uint8_t  paramEntryDWL[37][6];


   SGD_ParamHeader_t commonHeaderWLDS0;
   uint8_t  paramEntryWLDS0[10][6];


   SGD_ParamHeader_t commonHeaderWLDS1;
   uint8_t  paramEntryWLDS1[10][6];


   SGD_ParamHeader_t commonHeaderWLDD0;
   uint8_t  paramEntryWLDD0[10][6];


   SGD_ParamHeader_t commonHeaderWLDD1;
   uint8_t  paramEntryWLDD1[10][6];


   SGD_ParamHeader_t commonHeaderWLDL;
   uint8_t  paramEntryWLDL[10][6];


   SGD_ParamHeader_t commonHeaderWLDU;
   uint8_t  paramEntryWLDU[10][6];


   SGD_ParamHeader_t commonHeaderUpperTailDetect;
   uint8_t  paramEntryUpperTailDetect[15][6];


   SGD_ParamHeader_t commonHeaderLowerTailDetect;
   uint8_t  paramEntryLowerTailDetect[15][6];

   uint16_t psSpare[17];
   uint32_t padding;
   uint32_t secTerm;
}   PS_MRPH_SGD_Param_t;



typedef struct PS_MRPH_SGD_s
{
   CFG_SetHdr_t              setHdr;
   PS_MRPH_SGD_Param_t       setData;
}   PS_MRPH_SGD_t;







typedef  _Packed  struct PS_MRPH_IFT_Param_s
{
   uint8_t     IFT_TEMP_TIME;
   uint8_t     IFT_MULT_STEP_CRSE;
   uint8_t     IFT_MULT_STEP_FINE;
   uint8_t     IFT_TRIPLE_TRAIN_EN;
   uint16_t    IFT_SW_THR;

   uint8_t     IFT_IVWT_RD;
   uint8_t     IFT_IVWT_WR;
   uint8_t     IFT_IVWT_DQ_RD;
   uint8_t     IFT_IVWT_DQ_WR;

   uint8_t     IFT_TEMP_ZONES_EN_ASIC;
   uint8_t     IFT_TEMP_ZONES_EN_NAND;

   uint8_t     IFT_ASIC_TEMP_ZONE0_START;
   uint8_t     IFT_ASIC_TEMP_ZONE0_END;

   uint8_t     IFT_ASIC_TEMP_ZONE1_END;
   uint8_t     IFT_NAND_TEMP_ZONE0_START;
   uint8_t     IFT_NAND_TEMP_ZONE0_END;
   uint8_t     IFT_NAND_TEMP_ZONE1_END;
   uint8_t     IFT_IO_CENTER_READ_ENABLE;
   uint8_t     IFT_IO_CENTER_WRITE_ENABLE;
   uint8_t     IFT_RIGHT_EDGE_SEARCH_SKIP_MULT;

   uint8_t     RFU[39];

   uint32_t    section_terminator;
}   PS_MRPH_IFT_Param_t;



typedef struct PS_MRPH_IFT_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_IFT_Param_t  setData;
}   PS_MRPH_IFT_CFG_Param_t;










typedef  _Packed  struct PS_MRPH_ERASE_Param_s
{
   uint16_t    F_STATUS_TEST_parameter_address;
   uint8_t     bitmask_IO_2_parameter;
   uint8_t     padding;

   uint16_t    F_C6_PREREAD_Address;
   uint8_t     F_C6_PREREAD_bitmask;
   uint8_t     padding1;

   uint16_t    F_VPGMU_address;
   uint8_t     F_VPGMU_bitmask;
   uint8_t     F_VPGMU_shift;

   uint16_t    F_INC_VPGM_PPROG_address;
   uint8_t     F_INC_VPGM_PPROG_mask;
   uint8_t     F_INC_VPGM_PPROG_Shift;

   uint16_t    F_PAP_EREASE_MLC_PREPROG_address;
   uint8_t     F_PAP_EREASE_MLC_PREPROG_mask;
   uint8_t     type_shift_format;
   uint16_t    hslc_tlc_pec_ratio;

     _Packed  struct Parameter
   {
      uint16_t    address_format;
      uint8_t     bitmask_IO_7_6_format;
      uint8_t     type_shift_format;
      uint16_t    value_format;
   } rfu[ 3 ];

   uint8_t     padding2[ 4 ];
   uint32_t    section_terminator;
}   PS_MRPH_ERASE_Param_t;



typedef struct PS_MRPH_ERASE_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_ERASE_Param_t  setData;
}   PS_MRPH_ERASE_CFG_Param_t;







typedef  _Packed  struct PS_MRPH_INIT_Param_s
{
   uint8_t     num_of_init_trim_blanket_parameters;
   uint8_t     num_of_init_die_specific_parameters;
   uint16_t    num_of_provisioned_init_parameters;

   uint16_t    AIPR_OPT_parameter_address;
   uint8_t     bitmask_parameter;
   uint8_t     type_shift_parameter;
   uint16_t    parameter_value;

     _Packed  struct
   {
      uint16_t    address;
      uint8_t     bitmask;
      uint8_t     type_shift;
      uint16_t    value;
   } parameter[11];

   uint32_t    section_terminator;

}   PS_MRPH_INIT_Param_t;



typedef struct PS_MRPH_INIT_CFG_Param_s
{
   CFG_SetHdr_t         setHdr;
   PS_MRPH_INIT_Param_t  setData;
}   PS_MRPH_INIT_CFG_Param_t;









typedef    _Packed  struct PS_MRPH_Timing_WL_Zone_s
{
   uint8_t    Tprog_Upper_Bound_WL;
   uint8_t    rfu[1];
   uint16_t   TLC_Write_True_Ready_Timing_BOL;
   uint16_t   TLC_Write_True_Ready_Timing_EOL;
   uint16_t   TLC_Write_Cache_Ready_Timing_1st_2nd_3rd_BOL;
   uint16_t   TLC_Write_1st_Cache_Ready_Timings_BOL;
   uint16_t   TLC_Write_Cache_Ready_Timing_1st_2nd_3rd_EOL;
   uint16_t   TLC_Write_1st_Cache_Ready_Timings_EOL;
} PS_MRPH_Timing_WL_Zone_t;

typedef  _Packed  struct PS_MRPH_Timing_s
{
   uint32_t    SLC_BOL_PEC_Start;
   uint32_t    SLC_EOL_PEC_Start;
   uint32_t    TLC_BOL_PEC_Start;
   uint32_t    TLC_EOL_PEC_Start;

   uint16_t    SLC_Erase_True_Read_Timing_2P_BOL;
   uint16_t    SLC_Erase_True_Read_Timing_2P_EOL;
   uint16_t    TLC_Erase_True_Read_Timing_2P_BOL;
   uint16_t    TLC_Erase_True_Read_Timing_2P_EOL;

   uint16_t    SLC_Write_True_Ready_Timing_2P_BOL_1P0V;
   uint16_t    SLC_Write_True_Ready_Timing_2P_EOL_1P0V;
   uint16_t    SLC_Write_Cache_Ready_Timing_2P_BOL_1P0V;
   uint16_t    SLC_Write_Cache_Ready_Timing_2P_EOL_1P0V;

   uint16_t    SLC_Write_True_Ready_Timing_BOL_1P1V;
   uint16_t    SLC_Write_True_Ready_Timing_EOL_1P1V;
   uint16_t    SLC_Write_Cache_Ready_Timing_BOL_1P1V;
   uint16_t    SLC_Write_Cache_Ready_Timing_EOL_1P1V;

   uint8_t     Max_Num_Of_Tprog_WL_Zone;
   uint8_t     Valid_Num_Of_Tprog_WL_Zone;

   PS_MRPH_Timing_WL_Zone_t   WL_Zone[ 8 ];

   uint8_t     rfu0[2];

   uint32_t    Smart_Verify_WLs_Bitmap_Entry_1_WL_0_31;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_2_WL_32_63;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_3_WL_64_95;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_4_WL_96_127;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_5_WL_128_159;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_6_WL_160_191;
   uint32_t    Smart_Verify_WLs_Bitmap_Entry_7_WL_192_217;
   uint16_t    BOL_Delta_Avg_of_Smart_Verify_WL_Avg_of_App_WL;
   uint16_t    EOL_Delta_Avg_of_Smart_Verify_WL_Avg_of_App_WL;

   uint16_t    SLC_Read_True_Ready_Timing_2P_us_BOL;
   uint16_t    SLC_Read_True_Ready_Timing_2P_us_EOL;
   uint16_t    SLC_Read_Cache_Ready_Timing_2P_us_BOL;
   uint16_t    SLC_Read_Cache_Ready_Timing_2P_us_EOL;
   uint16_t    TLC_Read_True_Ready_Timing_2P_us_LP;
   uint16_t    TLC_Read_True_Ready_Timing_2P_us_MP;
   uint16_t    TLC_Read_True_Ready_Timing_2P_us_UP;
   uint16_t    TLC_Read_Cache_Ready_Timing_2P_us_LP;
   uint16_t    TLC_Read_Cache_Ready_Timing_2P_us_MP;
   uint16_t    TLC_Read_Cache_Ready_Timing_2P_us_UP;
   uint16_t    SLC_SB_Read_True_Ready_Timing_2P_us;
   uint16_t    TLC_SB_Read_True_Ready_Timing_2P_us_LP;
   uint16_t    TLC_SB_Read_True_Ready_Timing_2P_us_MP;
   uint16_t    TLC_SB_Read_True_Ready_Timing_2P_us_UP;
   uint16_t    Read_Cache_Termination_True_Ready_Timing_2P_us_LP;
   uint16_t    Read_Cache_Termination_True_Ready_Timing_2P_us_MP;
   uint16_t    Read_Cache_Termination_True_Ready_Timing_2P_us_UP;

   uint16_t   SLC_Read_True_Ready_Timing_BOL;
   uint16_t   SLC_Read_True_Ready_Timing_EOL;
   uint16_t   TLC_Read_True_Ready_Timing_LP;
   uint16_t   TLC_Read_True_Ready_Timing_MP;
   uint16_t   TLC_Read_True_Ready_Timing_UP;

   uint8_t     padding[4];

   uint32_t    section_terminator;

}   PS_MRPH_Timing_t;



typedef struct PS_MRPH_TIMING_CFG_s
{
   CFG_SetHdr_t       setHdr;
   PS_MRPH_Timing_t   setData;
}   PS_MRPH_TIMING_CFG_Param_t;

#line 2760 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_morpheus.h"
Status_t PS_MRPH_DataSetsStartup(uint32_t *pPsMrphParams);
void *   PS_MRPH_GetMrphDataSet(MrphDataSetIx_e dataSet);

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"

#line 81 "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h"
typedef enum FTL_EVENTS_COUNTER__e
{
   FTL_EVENTS_COUNTER_START_CANARIAN=0x0,
   FTL_EVENTS_COUNTER_FLUSH=0x1,
   FTL_EVENTS_COUNTER_DEALLOCATE=0x2,
   FTL_EVENTS_COUNTER_CHANGE_TO_IDLE=0x3,
   FTL_EVENTS_COUNTER_WRITE_UNCORRECTABLE=0x4,
   FTL_EVENTS_COUNTER_WRITE_ZEROES=0x5,
   FTL_EVENTS_COUNTER_IDENTIFY_CONTROLLER=0x6,
   FTL_EVENTS_COUNTER_FORMAT_NVM=0x7,
   FTL_EVENTS_COUNTER_GET_LOG=0x8,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_2 = 0x9,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_3_1 = 0xA,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_3_2=0xB,
   FTL_EVENTS_COUNTER_SWITCH_TO_POWER_STATE_4=0xC,
   FTL_EVENTS_COUNTER_AVOID_EXIT_L12=0xD,
   FTL_EVENTS_COUNTER_GSD=0xE,
   FTL_EVENTS_COUNTER_UGSD=0xF,
   FTL_EVENTS_COUNTER_END_CANARIAN=0x10,
   FTL_EVENTS_COUNTER_SECURITY_MEM_REQ = 0x11,
   FTL_EVENTS_COUNTER_TOTAL = 0x12
} FTL_EVENTS_COUNTER_t;


typedef struct FTLFormatCfgOptions_s
{
   CFG_SetHdr_t            setHdr;
   FTLFormatConfig_t       ftlFormatConfigSet[ 18 ];
}   FTLFormatCfgOptions_t;


typedef struct FTLParametersCfgOptions_s
{
   CFG_SetHdr_t            setHdr;
   FTLParametersConfig_t   ftlParametersConfigSet[ 18 ];
}   FTLParametersCfgOptions_t;


typedef struct FTLPhysicalCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLPhysicalConfig_t  ftlPhysicalConfigSet;
}   FTLPhysicalCfgOptions_t;


typedef struct FTLExtCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLExtConfig_t    ftlExtConfigSet;
}   FTLExtCfgOptions_t;


typedef struct FTLMrphCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTL_MRPH_Config_t ftlMrphConfigSet;
}   FTLMrphCfgOptions_t;


typedef struct FTLHybridSlcCfgOptions_s
{
   CFG_SetHdr_t      setHdr;
   FTLHybridSlcConfig_t   ftlHybridSlcConfigSet[ 18 ];
}   FTLHybridSlcCfgOptions_t;



typedef struct FTLDefinesCfg_s
{
   uint8_t  numChannelGroups;
   uint8_t  numDiesPerMetadie;
   uint8_t  numPlanesPerDie;
   uint8_t  numSectorsPerFMU;
   uint8_t  numFMUsPerDiePage[NUM_BLOCK_TYPES];
   uint8_t  numFMUsPerMetaWL[NUM_BLOCK_TYPES];
   uint16_t numBlocksPerPlane;
   uint8_t  numStringsPerWL;
   uint8_t  numPhysWLsPerBlock;

   uint16_t numLogicalWLsPerBlock;
   uint16_t numJumboBlocksMax;

   uint8_t  numPartitionsMax;
   uint8_t  numMetadiesMax;
   uint8_t  padding[2];

   uint16_t numFMUsPerJumboWLMax[NUM_BLOCK_TYPES];
   uint32_t numFMUsPerJumboBlock[NUM_BLOCK_TYPES][NUM_SBM_TYPES];

}  FTLDefinesCfg_t;






extern FTL_FWConfig_t* pFWCfg;


extern FTLFormatConfig_t *pFTLFormatConfig;
extern FTLParametersConfig_t *pFTLParametersConfig;
extern FTLPhysicalConfig_t *pFTLPhysicalConfig;
extern FTLExtConfig_t *pFTLExtConfig;
extern FTL_MRPH_Config_t *pFTLMrphConfig;
extern FTLRamConfig_t *pFTLRamConfig;
extern FTLHybridSlcConfig_t *pFTLHybridSlcConfig;

extern uint32_t ftlMrphHybridSlcRatio;


extern const FTLFormatCfgOptions_t FTLFormatCfgData;


extern const FTLParametersCfgOptions_t FTLParametersCfgData;


extern const FTLPhysicalCfgOptions_t FTLPhysicalCfgData;


extern const FTLExtCfgOptions_t FTLExtCfgData;


extern const FTLMrphCfgOptions_t FTLMrphCfgData;


extern const FTLHybridSlcCfgOptions_t FTLHybridSlcCfgData;





Status_t   __attribute__((section("TRW")))  FTL_Config_Init(void);

void FTL_Config_InitGlobalVariables(void);

void FTL_Config_SLAVE_InitGlobals(void);

Status_t   __attribute__((section("TRW")))  FTL_Config_InitAfterLOGinFS(BOOL isNormalMount);

void   FTL_Config_CopyRuntimeConfig(uint8_t *pBuffer, uint32_t *numBytes);

void   FTL_Config_CopyDefinesConfig(uint8_t *pBuffer, uint32_t *numBytes);

uint32_t   FTL_Config_GetTotalBudget(void);

uint32_t   FTL_Config_GetMinSparesBudget(void);

uint32_t FTL_GetNumWlPerJb(OBM_BlockType_t blockType, BML_SbmType_t sbmType);

uint32_t   FTL_Config_GetDHMPecThreshold(BML_Partition_ID_t partitionID);

uint32_t   FTL_Config_GetMaxPecAllowed(BML_Partition_ID_t partitionID);

uint32_t   FTL_Config_GetWLGuardBand(BML_Partition_ID_t partitionID);

uint32_t FTL_Config_GetMaxNANDPors(void);

uint32_t FTL_Config_GetRLCReadThreshold(void);

uint8_t   FTL_Config_IsHybridSlcEnable(void);

uint8_t   FTL_Config_GetHybridLogicalFullnessThr(void);
uint8_t   FTL_Config_GetHybridPotentialFreeBlocksThr(void);

uint32_t   FTL_Config_GetHybridFreeBlocksThr(void);

uint32_t   FTL_Config_GetHybridFreeBlocksHysteresis(void);

uint32_t   FTL_Config_GetHybridRecentSlcDataSize(void);

uint32_t   FTL_Config_GetHybridRecentHybridSlcDataSize(void);

uint32_t   FTL_Config_GetHybridBkopsTlcRlcVcFactor(void);

void   FTL_Config_SetEventCounter(FTL_EVENTS_COUNTER_t counterType, uint32_t Value);

void   FTL_Config_IncreaseEventCounter(FTL_EVENTS_COUNTER_t counterType);

uint8_t FTL_Config_GetWearLevelTlcPercentageThr(void);

uint8_t FTL_Config_GetWearLevelSlcPercentageThr(void);

uint8_t FTL_Config_GetWearLevelTlcPercentageThrBkops(void);

uint8_t   FTL_Config_GetWearLevelTlcJBAllocDiffFactor(void);

uint8_t   FTL_Config_GetWearLevelSlcJBAllocDiffFactor(void);

uint16_t FTL_Config_GetWearLevelSlcEnduranceBudget(void);

uint16_t   FTL_Config_GetWearLevelTlcPecThr(void);

uint16_t   FTL_Config_GetWearLevelTlcPecThrBkops(void);

uint16_t   FTL_Config_GetWearLevelSlcPecThr(void);

uint32_t FTL_Config_GetShadowSpaceCapacityInFMUs(void);

uint32_t FTL_Config_GetRpmbCapacityInFMUs(void);

uint32_t FTL_Config_GetBootPartitionsSpaceCapacityInFMUs(void);

uint32_t FTL_Config_GetBootPartitionsSpaceStartFFLBA(void);

uint32_t   FTL_Config_GetNumFMUsPerZone(BML_BlockType_t blockType, BML_SbmType_t sbmType, uint32_t zoneNum);








__inline static  uint8_t FTL_Config_GetMetadiesPerJumboblock(void)
{
   return pFTLFormatConfig->numMetadiesPerJumboblock;
}

__inline static  uint32_t FTL_Config_GetSLCSizeInFMUs(void)
{
   return pFTLExtConfig->slcSizeInFMUs;
}

__inline static  FTL_Capacity_t FTL_Config_GetCapacity(void)
{
   return pFTLExtConfig->capacity;
}

__inline static  uint32_t FTL_Config_GetHSlcPecRatio(void)
{
   return ftlMrphHybridSlcRatio;
}

__inline static  uint8_t FTL_Config_GetNumXorZones(BML_SbmType_t sbmType)
{
   return pFTLFormatConfig->numXorZones[sbmType];
}


;
;
;
;



__inline static  uint8_t FTL_Config_GetPartitionSubBlockNumber(uint32_t partition)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(partition < PARTITIONS_COUNT), "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h" , 329 , "partition < PARTITIONS_COUNT");                         "BullseyeCoverage restore"; } ;
   return pFWCfg->ftlExtConfig.numSubBlocksPerPhysicalByPartition[partition];
}

__inline static  BML_SbmType_t FTL_Config_GetPartitionSbmType(uint32_t partition)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(partition < PARTITIONS_COUNT), "d:/gitrepo/fpgcss-vega/source/ftl/inc_private/ftl_config.h" , 335 , "partition < PARTITIONS_COUNT");                         "BullseyeCoverage restore"; } ;
   return pFWCfg->ftlExtConfig.sbmTypeByPartition[partition];
}

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"

#line 42 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"
Status_t   BML_FirstMount(void);

void   BML_NormalMount(uint16_t ctxtId);

#line 56 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"
void   BML_UngracefulMount(uint32_t ctxtId, uint8_t *allHeaders, uint8_t **headersPointers, uint32_t sizeInBytes, BML_JumboBlock_ID_t *jbId, uint8_t **headers);

uint32_t   BML_UngracefulMount_MemoryRequired(void);

BML_JumboBlock_ID_t   BML_AllocateJumboBlock(BML_Partition_ID_t ptnId, uint32_t openBlockType, BML_PecStrategy_t pecStrategy, uint32_t priorityLevel, uint32_t isEraseRequested, uint32_t isHSLC, uint32_t waitForEraseOfOpbId);

void   BML_ReleaseJumboBlock(BML_JumboBlock_ID_t jumboblockId, MBM_FlashFillReq_t flashFillRequested, uint32_t priorityLevel, uint32_t doRetireJumboBlockId);

void   BML_ReuseJumboBlock(BML_JumboBlock_ID_t jumboblockId, uint32_t priorityQueue);

void   BML_CloseJumboBlock(BML_JumboBlock_ID_t jumboblockId, BOOL32 isHostRandom, BML_FifoId_t fifoId);

int32_t   BML_Translate(JBA_t jumboblockAddress, BOOL32 isXorProtected, uint32_t* psId_p, BML_BlockType_t blockType, VBA_t* vba_p);

int32_t  __attribute__((section("CODE_RANDOM")))  BML_TranslateOpt(JBA_t jumboblockAddress, BOOL32 skipXor, uint32_t *pChGroup, BML_BlockType_t blockType, VBA_t* vba_p);

int32_t   BML_TranslateRunLength(JBA_t jumboblockAddress, uint32_t lengthFmus, BOOL32 isXorProtected, VBA_t vbaArray[],
   uint32_t *pFMUsTillEndOfFirstMB, BML_BlockType_t blockType, uint32_t *pOffsetInComp);

int32_t   BML_ReverseTranslate(VBA_t inputVBA, BML_JumboBlock_ID_t jbId, BOOL isXorProtected, JBA_t *pJba, BML_RevrsTransInParityLocation_t* inParityLocation, uint32_t canFail);

uint32_t BML_LogVbaToFmuOffset(VBA_t composition[], VBA_t vbaToTranslate);
void BML_LogFmuOffsetToVba(uint32_t fmuToTranslate, VBA_t outputVba[]);

void  __attribute__((section("TRW")))  BML_Init(void);
void BML_SLAVE_InitGlobals(void);



uint32_t   BML_GetNumFreeJumboBlocks(BML_Partition_ID_t partition, uint32_t includeReleased);








uint32_t   BML_GetNumJumboBlocksInFmbls(BML_Partition_ID_t ptnId, BML_PecStrategy_t pecStrategy);

uint32_t   BML_GetJumboBlockPec(BML_JumboBlock_ID_t jbId);

uint32_t   BML_GetJumboBlockFlatPec(BML_JumboBlock_ID_t jbId);

BML_FifoId_t   BML_GetJumboBlockFifo(BML_JumboBlock_ID_t jbId);


uint32_t   BML_GetJumboBlockPecAllocatedNext(BML_Partition_ID_t ptnId, BML_PecStrategy_t pecStrategy);


uint32_t   BML_GetMaxMetaBlockPec(BML_Partition_ID_t ptnId);

uint32_t   BML_GetMinMetaBlockPec(BML_Partition_ID_t ptnId);


uint32_t   BML_GetAverageMetaBlockPec(BML_Partition_ID_t ptnId);

uint32_t   BML_JBsAllocations(BML_Partition_ID_t ptnId);

uint32_t   BML_GetNumberOfMetaBlockErases(BML_Partition_ID_t ptnId);

uint32_t   BML_GetNumberOfMetaBlockPreErased(BML_Partition_ID_t ptnId);

uint32_t   BML_GetInUseBlocksInPartition(BML_Partition_ID_t ptnId);

void   BML_GetSparesPerMetaDie(uint32_t mdSpares[]);

uint32_t   BML_GetNumDecommissionedMBsInMD(uint8_t metadie);

uint32_t BML_GetNumberOfDecommissionedMetaBlocksInMetaDieGroup(BML_Partition_ID_t ptnId, uint32_t cgId, uint32_t mdgId);

uint32_t BML_GetNumberOfRemainingMetaBlockGroupsToSecureErase(BML_Partition_ID_t ptnId);

void BML_SecureEraseRemainingMetaBlockGroup(BML_Partition_ID_t ptnId);

uint32_t   BML_GetTotalJumboBlocks(BML_Partition_ID_t ptnId);

Status_t   BML_DeleteMBSTFile(void);

uint32_t   BML_Fifo_GetSize(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId);
BML_Iterator_ID_t   BML_Iterator_Allocate(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId);
void   BML_Iterator_Release(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
BML_JumboBlock_ID_t   BML_Iterator_Next(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
BML_JumboBlock_ID_t   BML_Iterator_Next_WithPayload(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, uint32_t* pPayload);
BML_JumboBlock_ID_t   BML_Iterator_Next_WithTimeStamp(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, uint32_t* pTimeStamp);
uint32_t BML_Iterator_HasNext(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);
uint32_t   BML_Iterator_HasNextWithJumboBlockId(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId, BML_JumboBlock_ID_t *pJumboBlockId);


BML_JumboBlock_ID_t   BML_SecureEraseJumboBlock(BML_Partition_ID_t ptnId, BOOL32 isLogSyncAllowed);
uint32_t   BML_GetNumberOfJBlocksToSecureErase(BML_Partition_ID_t ptnId);
uint32_t   BML_GetNumberOfReleasedJBlocksToSecureErase(void);
void   BML_FnvmSecureEraseListClear(BML_Partition_ID_t ptnId);
void BML_SecureEraseReleaseRsrvBlk(BML_Partition_ID_t ptnId, uint16_t rsrvBlkList[]);



void   BML_ControlSyncPrepare(void);
void   BML_ControlSyncComplete(void);

void   BML_GetJumboBlockComposition(BML_JumboBlock_ID_t jumboBlockId, VBA_t compsitionArray[]);
void   BML_SwapJumboBlockCompositions(BML_JumboBlock_ID_t jumboBlockA, BML_JumboBlock_ID_t jumboBlockB);


BOOL32   BML_IsJumboBlockAllocated(BML_JumboBlock_ID_t jumboBlockId);
BOOL32   BML_IsJumboBlockClosed(BML_JumboBlock_ID_t jumboBlockId);
BOOL32   BML_IsJumboBlockHybrid(BML_JumboBlock_ID_t jumboBlockId);
BOOL32 BML_IsJumboBlockRandom(BML_JumboBlock_ID_t jumboBlockId);

void   BML_GetNextAllocatableJbComposition(BML_Partition_ID_t partitionId, BML_PecStrategy_t pecStrategy, VBA_t compsitionArray[], uint32_t *jbPec);
BOOL32   BML_IsUngracefulMountInProgress(void);
uint32_t   BML_UngracefulMount_GetReallocatedJBCount(void);
BOOL32   BML_IsJbInUeccList(BML_JumboBlock_ID_t jbId);
BOOL32 BML_IsNbcsQempty(void);
BML_SbmType_t   BML_GetBlockSbmType(BML_JumboBlock_ID_t jbId);
void   BML_HandleMbStatusReq(VBA_t vba, MP_MQD_PSType_t psType);

#line 180 "d:/gitrepo/fpgcss-vega/source/ftl/bml/inc/bml_api.h"
   uint32_t BML_GetRTFADIStat(BML_RTFADI_Data_t* pBMLRTFADI);


void BML_RoFormatEraseAllMB(FNVM_CLBK_FUNC callBack, uint16_t ctxtId);

#line 49 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_mount_api.h"

#line 58 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_mount_api.h"
typedef enum MNT_State_s
{


   MNT_STATE_START = 0,
   MNT_STATE_REQ_FLGP_LOG,
   MNT_STATE_HANDLE_LOG,
   MNT_STATE_HANDLE_LOG_END,
   MNT_STATE_CHECK_READONLY,
   MNT_STATE_NOTIFY_PS,
   MNT_STATE_MOUNT_BML,
   MNT_STATE_SEND_DEVICE_HEALTH,
   MNT_STATE_MOUNT_XORM,
   MNT_STATE_MOUNT_RLC,
   MNT_STATE_MOUNT_SMART,
   MNT_STATE_MOUNT_FNVM,
   MNT_STATE_MOUNT_EI,
   MNT_STATE_MOUNT_BKOPS,
   MNT_STATE_MOUNT_CAT_HMB,
   MNT_STATE_MOUNT_HSLC,
   MNT_STATE_MOUNT_RPMB,
   MNT_STATE_CHECK_GSD_FLAG,



   MNT_STATE_DR_CHECK_REQ = 50,
   MNT_STATE_OPBS_REBUILD_XOR_PAR,
   MNT_STATE_OPBS_REBUILD_XOR_DONE,
   MNT_STATE_ENABLE_READ,
   MNT_STATE_OPBS_BRLC,
   MNT_STATE_MOUNT_HWD,
   MNT_STATE_CONTROL_SYNC,
   MNT_STATE_MOUNT_FINISH,


   MNT_STATE_GSD_MOUNT_OBM = 100,
   MNT_STATE_GSD_MOUNT_RSQ,
   MNT_STATE_GSD_MOUNT_MTM,
   MNT_STATE_GSD_MOUNT_SAT,
   MNT_STATE_GSD_MOUNT_MVP,
   MNT_STATE_GSD_MOUNT_RS,


   MNT_STATE_GSD_MOUNT_PEM,


   MNT_STATE_UGSD_MOD_MOUNT_READ_LOG = 200,
   MNT_STATE_UGSD_BML_RECOVERY,
   MNT_STATE_UGSD_EXTRACT_METADATA,
   MNT_STATE_UGSD_OBM_RECOVERY,
   MNT_STATE_UGSD_CHECK_CS_NEEDED,
   MNT_STATE_UGSD_SAT_MOUNT_UGSD,
   MNT_STATE_UGSD_MOUNT_RSQ,
   MNT_STATE_UGSD_XOR_BLOCK_FLGP,
   MNT_STATE_UGSD_XOR_BLOCK_RECOVERY,
   MNT_STATE_UGSD_MTM_BLOCK_FLGP,
   MNT_STATE_UGSD_MTM_BLOCK_RECOVERY,
   MNT_STATE_UGSD_HOST_BLOCK_FLGP,
   MNT_STATE_UGSD_HOST_BLOCK_RECOVERY,
   MNT_STATE_UGSD_RLC_STC_BLOCK_FLGP,
   MNT_STATE_UGSD_RLC_STC_BLOCK_RECOVERY,
   MNT_STATE_UGSD_RLC_DYN_BLOCK_FLGP,
   MNT_STATE_UGSD_RLC_DYN_BLOCK_RECOVERY,
   MNT_STATE_UGSD_MOUNT_MVP,
   MNT_STATE_UGSD_MOUNT_RS,



   MNT_STATE_MOUNT_COMPLETE,


   MNT_STATE_MOUNT_FIRST_MOUNT,



   MNT_STATE_LAST = (uint16_t)0x3FFF
}MNT_State_t;





enum MNT_InitTypes_e
{
   MNT_TYPE_INVALID = 0,
   MNT_TYPE_GSD =  (1 << ( (0) )) ,
   MNT_TYPE_UGSD =  (1 << ( (1) )) ,
   MNT_TYPE_DPS2 =  (1 << ( (2) )) ,
   MNT_TYPE_DPS3_1 =  (1 << ( (3) )) ,
   MNT_TYPE_DPS3_2 =  (1 << ( (4) )) ,
   MNT_TYPE_PERST =  (1 << ( (5) )) ,
   MNT_TYPE_FTM =  (1 << ( (6) )) ,
   MNT_TYPE_RO =  (1 << ( (7) )) ,
};
typedef uint8_t MNT_InitTypes_t;





typedef struct MNT_UgsdHostBlkBtBData_s
{
   BOOL32 wasWa;
   VBA_t vbaLgw[ ( 2 ) ];
   VBA_t vbaFer[ ( 2 ) ];

   uint32_t numGoodWrittenFmus;
   uint32_t placeHolder;

   JBA_t LgwJba;
   JBA_t FerJba;

   uint32_t* flgpBitmapOfLwls;
   BML_RevrsTransInParityLocation_t lgwParityLocation;
   uint32_t rfu0;
}  MNT_UgsdHostBlkBtBData_t;

typedef struct MNT_UGSD_Statistics_s
{
   uint32_t UGSD_Amount;
   uint32_t UGSD_MaxMount;
   uint32_t UGSD_MinMount;
   uint32_t UGSD_AvgMount;
   uint32_t mountDelayBeforeEnableRead;
   uint32_t mountDelayBeforeCompletion;
   uint32_t UGSDmacHang_Amount;
   uint32_t UGSDperst_Amount;
   uint32_t UGSDlinkDownL2_Amount;
   uint32_t mntState;
   uint32_t WA_Amount;
   uint32_t WA_OPID[ (OBM_BLOCK_TYPE_LOG + 1) ];
   uint32_t B2B_WA_Brlc[ (OBM_BLOCK_TYPE_MAX - (OBM_BLOCK_TYPE_MAX - OBM_BLOCK_TYPE_CTL_BLK_BASE) ) ];
   uint32_t UGSD_EIB_L2_Amount;
   uint32_t afterFatalResetCount;
   uint32_t moreRfu[14];
}   MNT_UGSD_Statistics_t;

typedef struct MNT_GSD_Statistics_s
{
   uint32_t MntGSD_Amount;
   uint32_t MntDps2_Amount;
   uint32_t MntDps3_1_Amount;
   uint32_t MntDps3_2_Amount;
   uint32_t rfu[4];
}  MNT_GSD_Statistics_t;

typedef struct MNT_LogResident_s
{
   uint128_t                      ugsdCount;
   BML_JumboBlock_ID_t            rjbl[ ( (1 << ( (5) )) ) ];
   uint32_t                       rjblLength;
   MetaData_MountFields_t         blockInfo[ ( (1 << ( (5) )) ) ];
   MNT_UgsdHostBlkBtBData_t       prevUgsdVals[ (OBM_BLOCK_TYPE_MAX - (OBM_BLOCK_TYPE_MAX - OBM_BLOCK_TYPE_CTL_BLK_BASE) ) ];

   MNT_UGSD_Statistics_t          UGSD_Statistics;
   MNT_InitTypes_t                dbgLastMountType;
   uint8_t                        rfu[3];
   MNT_GSD_Statistics_t           GSD_Statistics;
}  MNT_LogResident_t;

#line 231 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_mount_api.h"
MNT_State_t   MNT_getMountState(void);










void MNT_SLAVE_InitGlobals(void);

#line 254 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_mount_api.h"
__inline static  BOOL32 MNT_IsMountOngoing(void)
{
   MNT_State_t mntState = MNT_getMountState();
   return (mntState < MNT_STATE_MOUNT_COMPLETE);
}


void MNT_DuiLogGetData(MNT_LogResident_t* DUIMntLogData);

#line 51 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rlc_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_hwd_api.h"

#line 42 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_hwd_api.h"
typedef enum HWD_TLCFlushCause_e
{
    HWD_FLUSH_CAUSE_ROUTING = 0,
    HWD_FLUSH_CAUSE_OVP = 1,
    HWD_FLUSH_CAUSE_OVP_RMW = 2,
    HWD_FLUSH_CAUSE_RMW = 3,
    HWD_FLUSH_CAUSE_BMG = 4,
    HWD_FLUSH_CAUSE_RLA = 5,
    HWD_FLUSH_CAUSE_MAX = 6,
} HWD_TLCFlushCause_t;

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rlc_api.h"

#line 45 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_rlc_api.h"
typedef enum RLC_Type_e
{
    RLC_TYPE_SLC_DYNAMIC = 0,
    RLC_TYPE_TLC_DYNAMIC = 1,
    RLC_TYPE_SLC_FORMAT = 2,
    RLC_TYPE_TLC_FORMAT = 3,
    RLC_TYPE_SLC_FORMAT_NS_UDE = 4,
    RLC_TYPE_TLC_FORMAT_NS_UDE = 5,
    RLC_TYPE_SLC_FLUSHNV = 6,
    RLC_TYPE_TLC_FLUSHNV = 7,
    RLC_TYPE_TLC_STATIC = 8,
    RLC_TYPE_RS = 9,
    RLC_TYPE_SLC_STATIC = 10,
    RLC_TYPE_MAX = 11,
    RLC_TYPE_TERMINATE = RLC_TYPE_MAX,
    RLC_TYPE_TERMINATE_NO_COPY = 12,
    RLC_TYPE_NONE = 13,
    RLC_TYPE_NUM = 14
}   RLC_Type_t;

typedef enum BRLC_Cause_e
{
    BRLC_CAUSE_RS,
    BRLC_CAUSE_WL,
    BRLC_CAUSE_MOUNT,
    BRLC_CAUSE_NUM
} BRLC_Cause_t;

typedef struct RLC_WA_Statistics_s
{
    uint32_t blocksAllocNum[OBM_BLOCK_TYPE_MAX];
    uint32_t relocationsNum[RLC_TYPE_MAX];
    uint32_t flushToSlc;
    uint32_t fmusFlushToSlc;
    uint32_t fmusFlushToSlcByCause[HWD_FLUSH_CAUSE_MAX];
    uint32_t fuaWrites;
    uint32_t paddingFmus[BML_NUM_PARTITIONS];
    uint32_t rmwWrites;
    uint32_t rmwSectors;
    uint32_t autoFreeJbs[BML_NUM_PARTITIONS];
    uint32_t brlcNum[BRLC_CAUSE_NUM];
    uint32_t hSlcBlocks;
    uint32_t rfu[4];
}   RLC_WA_Statistics_t;

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"

#line 85 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"
typedef enum RLC_Step_Status_e
{
   RLC_STEP_STATUS_WAIT,

   RLC_STEP_STATUS_SCAN_FWD_SENT,
   RLC_STEP_STATUS_COPY_STEP_DONE,
   RLC_STEP_STATUS_SCAN_BUF_RELEASED,

#line 95 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"
   RLC_STEP_STATUS_SRC_RELEASED,
   RLC_STEP_STATUS_AUTO_FREE,
   RLC_STEP_STATUS_RLC_REQ_COMPLETION,
   RLC_STEP_STATUS_NUM
} RLC_Step_Status_t;

typedef enum RLC_Read_Type_e
{
   RLC_READ_TYPE_REGULAR,
   RLC_READ_TYPE_PADDING,
   RLC_READ_TYPE_NUM
} RLC_Read_Type_t;

typedef enum
{
   RLC_SLECT_STATIC_DONT_IGNORE_JB_ALLOC_DIFF,
   RLC_SLECT_STATIC_IGNORE_JB_ALLOC_DIFF,
} RLC_IgnoreJbAllocStaticSelection_t;





void   RLC_Init(void);

void   RLC_FirstMount(uint32_t ctxtId);

void   RLC_NormalMount(uint16_t ctxtId);

void   RLC_StartBrlcInMount(uint16_t jbid, OBM_BlockType_t opbid, JBA_t jbaLgw, JBA_t jbaFer, uint32_t* pBitmap, uint32_t fmuBaseOfBitMap, uint16_t callerCtxtId);

void   RLC_StartBrlc(uint16_t jbid, uint16_t callerCtxtId, BRLC_Cause_t brlcCause);

BOOL32 RLC_IsBrlcActive();

BOOL32 RLC_IsBkopsSlcRlcNeeded(void);
BOOL32 RLC_IsBkopsTlcRlcNeeded(void);

BOOL32   RLC_IsStaticRelocationNeeded(BML_Partition_ID_t ptnId, BOOL32 isBkopsQuery, RLC_IgnoreJbAllocStaticSelection_t ignoreJbAlloc);


RLC_Step_Status_t   RLC_RunScanStep(RLC_Type_t rlcType);
RLC_Step_Status_t   RLC_RunCopyStep(BOOL performCopyValid);

#line 142 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"
BOOL32   RLC_AutoFree();

void   RLC_RecoverStaticSourceBlock(uint16_t jbid);

void   RLC_ControlSyncPrepare(void);

void   RLC_ControlSyncDone(void);

void   RLC_PrepareDPS32(void);

BOOL32   RLC_IsRelocationActive(void);

void   RLC_GetWearLevelingThresholds(uint32_t* retCont);

uint32_t   RLC_DiagGetDynamicRlcCandidatesTlc(BOOL32 isBkops, uint16_t* pBuffer);

uint32_t   RLC_DiagGetDynamicRlcCandidatesSlc(BOOL32 isBkops, uint16_t* pBuffer);

uint32_t*   RLC_GetCycleParamsAddr();

uint32_t   RLC_GetCycleParamsSize();

uint32_t*   RLC_GetBufferManagerAddr();

uint32_t   RLC_GetBufferManagerSize();

uint32_t*   RLC_GetStatisticsAddr();

uint32_t   RLC_GetStatisticsSize();

void   RLC_UpdateBmlOnStatisticsCounters();

void   RLC_StartFnvmRlc(void);

uint32_t   RLC_FnvmGetSlcBlocksNum();

uint32_t   RLC_FnvmGetTlcBlocksNum();

BOOL32   RLC_IsBlockStuck(BML_JumboBlock_ID_t jbId, BML_Partition_ID_t ptnId, uint32_t blockJbAllocations, uint32_t jbAllocationsCriteria, uint32_t *pJbAllocationsDiff);

BOOL32   RLC_Has_NextBlock(BML_Partition_ID_t ptnId, BML_FifoId_t fifoId, uint8_t iteratorId);

void   RLC_ReportWaStatistics(void);

BOOL32 RLC_GetDynamicTlcNextCandidate(JBA_t* pCurrSrcBlock, uint32_t* pSourceVC);

void   RLC_NotifyConsolidationComplete();

uint32_t   RLC_FlushNvGetNumBlocksLeftInPtn(BML_Partition_ID_t ptnId);


   uint32_t   RLC_GetRTFADIStatistics(RLC_RTFADI_Data_t* pRLCRTFADI);

#line 201 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"
void   RLC_IRLC_InitializePerSessionData(RLC_Type_t nextRlcType);
void   RLC_IRLC_TerminatePerSessionData(RLC_Type_t rlcTypeToContinue);
void   RLC_IRLC_SwapPerSessionData();
void   RLC_IRLC_RemoveSourceListForRLCType(RLC_Type_t rlcType);
void   RLC_RemoveJbidFromCpyBuffer(uint16_t jbid);
void   RLC_MarkRangesStale(uint16_t jbid);

#line 52 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 151 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_IsZoneEnded(JBA_t jba, OBM_BlockType_t opbid);
uint32_t OBM_GetZoneStartFMU(JBA_t jba, OBM_BlockType_t opbid);

#line 166 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
typedef enum OBM_LrmCcheckState_e
{
   OBM_LRM_CHECK_STATE_INC_NEXT_TO_WRITE,
   OBM_LRM_CHECK_STATE_BLOCK_ALLOC,
   OBM_LRM_CHECK_STATE_FORCE_TLC_CHECK_NOT_EMPTY,
   OBM_LRM_CHECK_STATE_NUM
} OBM_LrmCcheckState_t;









typedef enum OBM_BlockCapacityState_e
{
   OBM_BLOCK_CAPACITY_FREE = 0,
   OBM_BLOCK_CAPACITY_FULL,
   OBM_BLOCK_CAPACITY_OVERFLOW,
} OBM_BlockCapacityState_t;

typedef enum
{
   OBM_RESET_FLAGS_NONE = 0,
   OBM_RESET_FLAGS_IS_WRITE_ABORT = 1 << 0,
   OBM_RESET_FLAGS_DO_UPDATE_FMU_OFFSET = 1 << 1,
   OBM_RESET_FLAGS_DO_UPDATE_JB_ALLOCATIONS = 1 << 2,
} OBM_ResetFlags_t;




typedef enum OBM_JbObMapEntryType_e
{
   OBM_JB_OB_MAP_ENTRY_TYPE_OBID = 0,
   OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR,
   OBM_JB_OB_MAP_ENTRY_TYPE_TOTAL,
} OBM_JbObMapEntryType_t;




typedef bitset32_t OBM_BlockTypeSet_t;




typedef struct OBM_OpenBlockPolicy_s
{
   uint8_t  blockType;
   uint8_t  mbAllocPolicy;

   uint8_t  psQType;
   uint8_t  XOR;
   uint32_t validFMUsSize[NUM_SBM_TYPES];
}   OBM_OpenBlockPolicy_t;




typedef struct OBM_OpenBlock_s
{
   JBA_t                   jba;
   OBM_OpenBlockPolicy_t   policy;
   uint32_t                validFMUsSize;
   uint32_t                prtnJbsAllocations;
   uint32_t                opbCounter;
}   OBM_OpenBlock_t;




typedef struct OBM_Cb_s
{
   uint32_t* logObm_p;
   OBM_OpenBlock_t openBlocks[OBM_BLOCK_TYPE_MAX];
   uint32_t  OBMinitialized;
   uint32_t lastAllocatedHostOpbid;
   uint32_t IsUnevenZone;

   OBM_BlockType_t    preservedFbccRouting;
} OBM_Cb_t;




typedef struct OBM_JumboBlockAllocTS_s
{
   uint8_t  allocationTS :  (5) ;
   uint8_t  rfu :  (8 - (5) ) ;
   uint8_t  rfu1[3];
} OBM_JumboBlockAllocTS_t;




typedef struct OBM_BlockXorZoneData_s
{

   uint32_t blockEndXorZoneFmu[ ( ( (16) ) ) ];


   uint32_t blockCurrentXorZoneIndex;
}OBM_BlockXorZoneData_t;



extern uint8_t (*pOBM_JbObMap)[ ( ( ( ((( (uint32_t)( ( (687) ) ) ) > ( (uint32_t)( ( (527) ) ) )) ? ( (uint32_t)( ( (687) ) ) ) : ( (uint32_t)( ( (527) ) ) )) )  + (20)  + (140) )  + 1) ][OBM_JB_OB_MAP_ENTRY_TYPE_TOTAL];
extern OBM_Cb_t* pOBM_Cb;
extern uint32_t OBM_HostBlocksBitmap;
extern   OBM_JumboBlockAllocTS_t OBM_JumboBlockAllocationTS;
extern OBM_BlockXorZoneData_t OBM_BlockXorZoneData[OBM_BLOCK_TYPE_MAX];

#line 292 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void  __attribute__((section("TRW")))  OBM_Init (void);

void OBM_SetGlobalVariables(void);

void OBM_SLAVE_InitGlobals(void);










Status_t   OBM_FirstTimeMount (uint32_t ctxtId);










void   OBM_MountSetLogInfo(void);

#line 330 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
uint32_t   OBM_NormalMount(uint16_t mntCtxtId, BOOL32 setOpbPS);

void   OBM_MountSetLogInfo(void);
uint32_t   OBM_MountAll(uint16_t mntCtxtId, BOOL32 setOpbPS);










BML_JumboBlock_ID_t   OBM_AllocBlock(OBM_BlockType_t openBlock);










uint32_t OBM_GetJbObMapSize(void);









BML_JumboBlock_ID_t   OBM_AllocJB(OBM_BlockType_t openBlockType, BOOL32 isEraseRequired, BOOL32 isHSLC);

#line 378 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_ReuseBlock(OBM_BlockType_t openBlockType, JBA_t jba);

#line 392 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_GetBlockNextToWrite(OBM_BlockType_t openBlockType, JBA_t* jbaOutput_p)
{
   OBM_OpenBlock_t* openBlock =  ((void *)0) ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(openBlockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 395 , "openBlockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   openBlock = &(pOBM_Cb->openBlocks[openBlockType]);
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbaOutput_p), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 397 , "jbaOutput_p");                         "BullseyeCoverage restore"; } ;

   (*((uint32_t*)(void*)(&(*jbaOutput_p))))  =  (*((uint32_t*)(void*)(&(openBlock->jba)))) ;
}

__inline static  uint32_t OBM_GetNumAllocationsBlockType(OBM_BlockType_t openBlockType)
{
   OBM_OpenBlock_t* openBlock_p;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(openBlockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 406 , "openBlockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   openBlock_p = &(pOBM_Cb->openBlocks[openBlockType]);

   return openBlock_p->opbCounter;
}

#line 424 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_CsPrepRLCHost(void);

#line 437 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_CsPrepCTL(void);

#line 450 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_GetBlockNextToWrite(OBM_BlockType_t openBlockType, JBA_t* jbaOutput_p);

#line 463 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_GetAndAllocBlockNextToWrite(OBM_BlockType_t openBlockType, JBA_t* jbaOutput_p);

#line 477 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_UgsdSetOpenBlock(JBA_t jbaNer, OBM_BlockType_t opbType, JBA_t lastXorProtectedJba, BML_RevrsTransInParityLocation_t lgwInParityLocation, JBA_t jbaFlgpFer);









__inline static  BOOL32 OBM_ShouldPreventBMLRecovery(OBM_BlockType_t openBlockType)
{
    return ((openBlockType == OBM_BLOCK_TYPE_BRLC) || (openBlockType == OBM_BLOCK_TYPE_LOG));
}








__inline static  BML_PecStrategy_t OBM_GetPolicyByBlockType(OBM_BlockType_t openBlockType)
{
    return (BML_PecStrategy_t)pOBM_Cb->openBlocks[openBlockType].policy.mbAllocPolicy;
}

#line 514 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_UgsdForceSetNextToWrite(JBA_t jba, OBM_BlockType_t openBlockType);

#line 526 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_MNTForceMarkingLogicallyClose(OBM_BlockType_t openBlockType);

#line 538 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_CloseBlock(OBM_BlockType_t openBlockType, BML_JumboBlock_ID_t jumboBlockId, BOOL32 forceClose);

#line 551 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void OBM_FNVMCloseBlocks(void);

#line 563 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
BOOL32   OBM_PadOpenBlock(OBM_BlockType_t obid, uint32_t numFMUsToPad, uint16_t fnvmCtxtID);

#line 578 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
BML_JumboBlock_ID_t   OBM_BRLCAllocBlock(OBM_BlockType_t srcObid, BML_JumboBlock_ID_t srcJumboBlockId, uint32_t rlcEndFmus, BRLC_Cause_t brlcCause);

#line 593 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_BRLCSwapTargetBlk(OBM_BlockType_t srcObid, BML_JumboBlock_ID_t srcJumboBlockId, BML_JumboBlock_ID_t trgtJumboBlockId, BOOL32 isMountBrlc);

#line 606 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
BOOL32 OBM_CanBlockBeBRLC(BML_JumboBlock_ID_t jumboBlockId);










uint32_t   OBM_GetBlockRemainingFMUs(OBM_BlockType_t openBlockType);

#line 629 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
uint32_t   OBM_GetOpenBlockMountFields(OBM_BlockType_t openBlockType, uint32_t mdIdx);

#line 643 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_ResetOpenBlock(OBM_BlockType_t openBlockType, JBA_t jba, uint32_t flags);

#line 657 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
OBM_BlockCapacityState_t  __attribute__((section("CODE_RANDOM")))  OBM_IncBlockNextToWrite(OBM_BlockType_t openBlockType, uint32_t length);

#line 671 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_EndXORZoneReqPSCallBack(uint16_t ctxtId, uint16_t dummy, FMG_ExecStatus_t execStatus);










uint32_t   OBM_GetHostBlocksFreeFMUsByPartition(uint32_t partitionType);

#line 694 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
uint32_t   OBM_GetBlocksFreeFMUsByPartition(uint32_t partitionType);

#line 706 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_TestAndClearBlocksAllocLRM(void);










void   OBM_ControlSyncComplete(void);

#line 730 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_GetBlockLogicallyClosedObid(BML_JumboBlock_ID_t srcJumboBlockId, OBM_BlockType_t* openBlockIdOut, BOOL32* isLogicallyClosedOut);










void   OBM_HandleSingleBlockWearLevel(JBA_t jba, uint32_t JbAllocations, OBM_BlockType_t blockType);










uint32_t   OBM_CheckCanAllocateBlock(OBM_BlockType_t opbBlockType, OBM_LrmCcheckState_t state);

#line 766 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
void   OBM_TestAndSetBlocksAllocLRM(OBM_BlockType_t openBlockType, BOOL32 isHSLC);

#line 781 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  OBM_BlockType_t OBM_GetOBIDByJBID (uint32_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 783 , "jbid < (((uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   return ((OBM_BlockType_t)((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_OBID]));
}

#line 797 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  OBM_BlockType_t OBM_GetObidRlcRead(BML_JumboBlock_ID_t jblId)
{
   OBM_BlockType_t opbId;

   if (MNT_IsMountOngoing())
   {
      BOOL32 isLogicallyClosed =  (0) ;

      OBM_GetBlockLogicallyClosedObid(jblId, &opbId, &isLogicallyClosed);
   }
   else
   {
      opbId = OBM_GetOBIDByJBID(jblId);
   }

   return opbId;
}









__inline static  OBM_BlockType_t OBM_GetBlockTypeByJBA(JBA_t jba)
{
   return (OBM_GetOBIDByJBID(jba.jumboBlockId));
}

__inline static  uint8_t OBM_GetpsQByopbId(OBM_BlockType_t opbId)
{
   return pOBM_Cb->openBlocks[opbId].policy.psQType;
}

#line 843 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_SetOBIDByJBID(BML_JumboBlock_ID_t jbid, OBM_BlockType_t obid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)((obid < OBM_BLOCK_TYPE_MAX) || (obid == OBM_BLOCK_TYPE_ILLEGAL) || ( (((obid) < (OBM_BLOCK_TYPE_ILLEGAL & (0xFF) )) && (((obid) & (0xF) ) == (0xF) )) )), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 845 , "(obid < OBM_BLOCK_TYPE_MAX) || (obid == OBM_BLOCK_TYPE_ILLEGAL) || ((((obid) < (OBM_BLOCK_TYPE_ILLEGAL & (0xFF))) && (((obid) & (0xF)) == (0xF))))");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 846 , "jbid < (((uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   (*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_OBID] = (uint8_t)obid;
}









__inline static  uint32_t OBM_GetJbidByBlockType (OBM_BlockType_t blockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(blockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 860 , "blockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   return ((uint32_t)(pOBM_Cb->openBlocks[blockType].jba.jumboBlockId));
}









__inline static  uint32_t OBM_GetFmuInBlockType (OBM_BlockType_t blockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(blockType < OBM_BLOCK_TYPE_MAX), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 874 , "blockType < OBM_BLOCK_TYPE_MAX");                         "BullseyeCoverage restore"; } ;
   return ((uint32_t)(pOBM_Cb->openBlocks[blockType].jba.fmuInBlock));
}

#line 889 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_SetEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid, uint8_t ctxtRefCtr)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 891 , "jbid < (((uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(ctxtRefCtr <= ( ( 2 ) )), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 892 , "ctxtRefCtr <= ((2))");                         "BullseyeCoverage restore"; } ;
   (*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] = ctxtRefCtr;
}

#line 906 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
__inline static  void OBM_DecEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 908 , "jbid < (((uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] > 0) && ((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] != (0xFF) )), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 909 , "((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] > 0) && ((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR] != (0xFF))");                         "BullseyeCoverage restore"; } ;
   (*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR]-- ;
}










__inline static  uint8_t OBM_GetEndXorZoneCtxtRefCtr(BML_JumboBlock_ID_t jbid)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(jbid < ( ( (uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140) ) + 1)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 924 , "jbid < (((uint32_t)(pFWCfg->ftlPhysicalConfig.maxBlocksPerPlane) + (20) + (140)) + 1)");                         "BullseyeCoverage restore"; } ;
   return ((*pOBM_JbObMap)[jbid][OBM_JB_OB_MAP_ENTRY_TYPE_EXZ_CTXT_REF_CTR]);
}








__inline static  BOOL OBM_IsOpenBlockBlockFullyWritten(OBM_OpenBlock_t* pOpenBlock)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pOpenBlock->validFMUsSize != 0), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 937 , "pOpenBlock->validFMUsSize != 0");                         "BullseyeCoverage restore"; } ;

   return pOpenBlock->jba.fmuInBlock == pOpenBlock->validFMUsSize;
}









__inline static  BOOL32 OBM_IsOBOpened(OBM_BlockType_t openBlockType)
{
   return (((uint8_t)openBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX) &&  ( (! ( (*((uint32_t*)(void*)(&((pOBM_Cb->openBlocks[openBlockType]).jba))))  == (0xFFFFFFFF) ) )  && !( OBM_IsOpenBlockBlockFullyWritten(&pOBM_Cb->openBlocks[openBlockType])  ) ) );
}









__inline static  void OBM_GetOpenBlockJba(OBM_BlockType_t opbBlockType, JBA_t* opbJba)
{
   OBM_GetBlockNextToWrite(opbBlockType, opbJba);
}









__inline static  uint32_t OBM_GetOpenBlockNumValidFMUs(OBM_BlockType_t opbBlockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 978 , "((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pOBM_Cb->openBlocks[opbBlockType].validFMUsSize != 0), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 979 , "pOBM_Cb->openBlocks[opbBlockType].validFMUsSize != 0");                         "BullseyeCoverage restore"; } ;

   return pOBM_Cb->openBlocks[opbBlockType].validFMUsSize;
}









__inline static  uint32_t OBM_GetOpenBlockNumValidFMUsSafe(OBM_BlockType_t opbBlockType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 994 , "((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)");                         "BullseyeCoverage restore"; } ;

   return OBM_IsOBOpened(opbBlockType) ? OBM_GetOpenBlockNumValidFMUs(opbBlockType) : 0;
}









__inline static  void OBM_SetOpenBlockNumValidFMUs(OBM_BlockType_t opbBlockType, BML_SbmType_t sbmType)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)), "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h" , 1009 , "((uint8_t)opbBlockType < (uint8_t)OBM_BLOCK_TYPE_MAX)");                         "BullseyeCoverage restore"; } ;

   pOBM_Cb->openBlocks[opbBlockType].validFMUsSize = pOBM_Cb->openBlocks[opbBlockType].policy.validFMUsSize[sbmType];
}










__inline static  void OBM_PrepareDPS32(void)
{
   OBM_CsPrepCTL();
   OBM_CsPrepRLCHost();
}










__inline static  uint8_t OBM_GetAllocationTS(void)
{
   return (OBM_JumboBlockAllocationTS.allocationTS);
}

__inline static  uint32_t OBM_IsUnevenZone(void)
{
   return pOBM_Cb->IsUnevenZone;
}

#line 1069 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"
uint32_t OBM_GetRemainedStripeSize(OBM_BlockType_t openBlockType);

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_api.h"

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 36 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_hwd_api.h"

#line 39 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/fmg/inc/fmg_userarea.h"

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"

#line 55 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"
typedef enum
{
   HWD_DEALLOCATE_RMW_STATE_NONE,
   HWD_DEALLOCATE_RMW_STATE_RMW_NEEDS_WRITE,
   HWD_DEALLOCATE_RMW_STATE_RMW_SKIP_WRITE,
} HWD_DeallocateRmwState_t;




typedef struct HWD_RMW_UserArea_s
{
   HIM_HWD_Context_t*      hwdCtxt_p;
   uint32_t                hwdCtxtId;
   FML_FEAdminQEntry_t     feCtxt;

   FMU_Metadata_t          metadata;
   uint16_t                rmwToken;
   uint8_t                 isDeallocateRmw;
   uint8_t                 res;
   uint8_t                 rmwBitmap[ (0x10) ];
   uint8_t                 fmuIndex;
   uint8_t                 isSimpleHostWrite;
   uint8_t                 isInOvlRunningTable;
   uint8_t                 wasKeptForOverlap;

}HWD_RMW_UserArea_t;

#line 107 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void   HWD_RMW_StartHandleRMW(uint32_t hwdCtxtID,FML_FEAdminQEntry_t  *pAdminQEntry);

#line 123 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void   HWD_RMW_HandleResume(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

#line 137 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void   HWD_RMW_InitOverlapInfo(void);

#line 153 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_rmw.h"
void   HWD_RMW_RemoveRunningRMW(uint16_t FMGCtxtID);

BOOL32  __attribute__((section("CODE_RANDOM")))  HWD_RMW_IsWriteOverlappedWithRMW(uint32_t hwdCtxtID, FML_FEAdminQEntry_t* pAdminQEntry);

void   HWD_RMW_HandleKeptRMWs();

BOOL32   HWD_RMW_IsRMWOverlapped(uint32_t* pFflbasToCheck, uint32_t fmusCount);



#line 40 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"

#line 58 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"
extern uint16_t gHwdFuaCmdList[ (512) ];
extern uint32_t gHwdFuaErrBits[ (512)  / (1 <<  (5) )];

#line 83 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"
void   HWD_HandleFUA(uint32_t hwdCtxtID);

#line 99 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"
void   HWD_HandleResumeFUA(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

#line 111 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"
uint32_t   HWD_GetFUACookie(HIM_HWD_Context_t *pHwdCtxt, uint32_t hwdCtxtID);

#line 41 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddr_descr_defines.h"

#line 53 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddr_descr_defines.h"
typedef struct _DDR_DESCRIPTOR {
    HW_REG BYTES0_3                                     ;
    HW_REG BYTES4_7                                     ;
    HW_REG BYTES8_11                                    ;
    HW_REG BYTES12_15                                   ;
    HW_REG BYTES16_19                                   ;
    HW_REG BYTES20_23                                   ;
    HW_REG BYTES24_27                                   ;
    HW_REG BYTES28_31                                   ;
    HW_REG BYTES32_35                                   ;
    HW_REG BYTES36_39                                   ;
}DDR_DESCRIPTOR_t, *PDDR_DESCRIPTOR;

#line 21 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddrc_dma_defines.h"

#line 192 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddrc_dma_defines.h"
typedef struct _DDRC_DMA {
    HW_REG64 DDR_DMA_CTRL                               ;
    HW_REG64 DDR_DMA_CFG                                ;
    HW_REG64 DDR_DMA_ERROR_INT_STATUS                   ;
    HW_REG64 DDR_DMA_SB_ERR_CNT                         ;
    HW_REG64 DDR_DMA_SB_ERR_THR                        ;
    HW_REG64 DDR_DMA_ERROR_INJECT                       ;
    HW_REG64 DDR_DMA_ECC_CTRL_STATUS                    ;
    HW_REG64 DDR_DMA_ERROR_INT_ENABLE                   ;
    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_00               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_01               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_02               ;

    HW_REG64 DDR_DMA_PIPE_ERROR_STATUS_03               ;

    HW_REG64 DDR_DMA_DATA_PORTS_ERROR_STATUS[4]         ;

    HW_REG64 DDR_DMA_RS_DC_CFG[15]                      ;



    HW_REG64 Reserved1[17]                             ;
    HW_REG64 DDR_DMA_CHN_DBG_REGS[16]                   ;
    HW_REG64 DDR_DMA_REQ_CFG[16]                        ;
    HW_REG64 DDR_DMA_REQ_CNT[16]                        ;
    HW_REG64 DDR_DMA_REQ_RPTR[16]                       ;
    HW_REG64 DDR_DMA_REQ_LOCK                           ;
    HW_REG64 DDR_DMA_REQ_INT_STATUS                     ;
    HW_REG64 Reserved2[5]                               ;
    HW_REG64 HMB_CTRL                                   ;
    HW_REG64 HEB_EVENT_FILTER                           ;
    HW_REG64 Reserved3                                  ;
    HW_REG64 DP_HEB_DEBUG_0                             ;
    HW_REG64 DP_HEB_DEBUG_1                             ;
    HW_REG64 Reserved4[100]                             ;
    HW_REG64 DDR_DMA_EXTR_CNTR_ADDR[4]                  ;
    HW_REG64 Reserved5[27];
    HW_REG64 DDR_DMA_DUMMY                              ;
    HW_REG64 DDR_DMA_CNTR[66]                           ;
}DDRC_DMA_t, *PDDRC_DMA;

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_dram_defines.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/modules/pmm/inc_public/sys_pmm.h"

#line 44 "d:/gitrepo/fpgcss-vega/source/infra/modules/pmm/inc_public/sys_pmm.h"
enum PMM_WakeupSource_e
{
   PMM_WAKEDUP_BY_GPIO_IRQ = 0,
   PMM_WAKEDUP_BY_TIMER,
   PMM_WAKEDUP_BY_CLKREQ,
   PMM_WAKEDUP_BY_PERST,
   PMM_WAKEDUP_BY_WAKE,
   MM_WAKEDUP_BY_DEBUG_TIMER,
   PMM_WAKEDUP_BY_NA = 99
};
typedef uint32_t PMM_WakeupSource_t;










enum SYS_DevicePowerState_e
{
   SYS_DPS_00        = 0,
   SYS_DPS_01,
   SYS_DPS_02,
   SYS_DPS_12,
   SYS_DPS_20,
   SYS_DPS_31,
   SYS_DPS_32,
};
typedef uint32_t SYS_DevicePowerState_t;

#line 95 "d:/gitrepo/fpgcss-vega/source/infra/modules/pmm/inc_public/sys_pmm.h"
uint8_t  __attribute__((section("CODE_MEDIUM")))  PMM_GetPCUMsg_DiagReadPMIC(void);
void  __attribute__((section("CODE_MEDIUM")))  PMM_IssuePMICCFGtoPCU(uint32_t powerState);
void  __attribute__((section("CODE_MEDIUM")))  PMM_LogPMICPOKEvent(uint32_t param);
void  __attribute__((section("CODE_MEDIUM")))  PMM_SetPmicLastTs(void);
void  __attribute__((section("CODE_MEDIUM")))  PMM_LogPMICIRQEvent(uint32_t param);
void  __attribute__((section("CODE_MEDIUM")))  PMM_LogPMICPCUInitExceptionEvent(uint32_t param);
void  __attribute__((section("CODE_MEDIUM")))  PMM_LogPMICThermalShutdown(void);

void PMM_PowerOffDevice(void);

void PMM_StartDASTimer(void);
void PMM_NotifyInfraReadyToPCU(void);
Status_t PMM_EnterIDLELowPowerState();
Status_t PMM_ExitIDLELowPowerState();
void PMM_ControlBuck2(uint32_t Buck2Level);

Status_t PMM_DivideCMC(void);
Status_t PMM_RestoreCMC(void);


void RAM_DPS_SendPlaceEvent(uint16_t p);
void RAM_DPS_SendPlaceEvent_3Params(uint16_t p, uint32_t p1, uint32_t p2, uint32_t p3);
void PMM_PS_WaitForStablePower(void);



void PCU_D3HotTimerEnable(void);
void PCU_D3HotTimerDisable(void);



void setAssertFatalSig(uint32_t sig);
void PMM_ResetLinkAbortReasonFlag(void);
void PMM_SetLinkAbortReasonFlag(uint32_t lpmAbortReason);

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_dram_defines.h"

#line 192 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_dram_defines.h"
typedef enum cacheLineState_e
{
   CACHE_EVICTED = 0,
   CACHE_LOADING,
   CACHE_VALID,
   CACHE_DIRTY,
   CACHE_ERROR,
   CACHE_FLUSHING,
   CACHE_CORRECTION
} CacheLineState_t;

typedef enum
{
   DMA_READ = 0,
   DMA_WRITE,
   DMA_WRITE_FILL,
   DMA_MAX
} DDR_Operation_t;



typedef enum cacheLineAction_e
{
   ACTION_INVALIDATE_FLUSH_LOAD = 0,
   ACTION_INVALIDATE_FLUSH,
   ACTION_WRITE_BACK_VALID,
   ACTION_INVALIDATE_ERROR
} CacheLineAction_t;

typedef enum DDRC_Status_Error_e
{
   STATUS_DDRC_ERROR = STATUS_INFRA_DDRC_BASE,
   STATUS_DDRC_BAD_BOOT_PHASE_INIT,
}   SCTP_Status_Error_t;

typedef enum DDRC_Module_Src_e
{
   DDRC_MODULE_SRC_DMA = 0,
   DDRC_MODULE_SRC_CL,
} DDRC_Module_Src_t;

#line 244 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_dram_defines.h"
typedef struct ddr_cache_sync_cmd_s
{

   uint32_t wbk_range:       1;
   uint32_t inv_range:       1;
   uint32_t addr_range_mode: 2;


   uint32_t start_addr;
   uint32_t range_size;
} ddr_cache_sync_cmd_t;




__inline static  BOOL isSVCI_ErrAtDDRCBufferRange( uint32_t  svciAddress)
{
   uint8_t  retValue = (0)  ;
   if ((svciAddress >=  0x0C000000 ) && (svciAddress <=   0x0C000000 + (127) * 128 ))
   {
      retValue =  (1)  ;
   }
   return retValue;
}
Status_t SYS_DDRC_Init(SysBootPhase_t bootPhase);
void SYS_DRAM_ERR_ISR(void* dummy);
void DDR_DMA_InitChannels();
void DDR_DMA_SYS_InterruptCompletionEnable();
Status_t DDR_DMA_Operation(uint32_t DDRAddr, uint32_t SRAMAddr, uint32_t targetLength, DDR_Operation_t operation, uint32_t pattern);
Status_t DDR_DMA_MemSet(uint32_t DDRAddr, uint32_t pattern, uint32_t targetLength);
void SYS_DDR_DMA_ISR (void* dummy);
void WRITE_REGISTER_LOCAL (    uint32_t  address,    uint32_t  wrVal);
uint32_t  READ_REGISTER_LOCAL (    uint32_t  address);
void DDR_InjectError(uint32_t DramAddr,DDRC_Module_Src_t injectSrc);



uint32_t DDR_IsIdle(void);

#line 24 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_hmb.h"

#line 37 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_hmb.h"
enum
{
   READ_FROM_HOST_NO_SEC   = 0x20,
   READ_FROM_HOST_WITH_SEC = 0x21,
   WRITE_TO_HOST_NO_SEC    = 0x28,
   WRITE_TO_HOST_WITH_SEC  = 0x29
};
typedef uint32_t HmbcDirection_e;

enum
{
   HMBC_STATUS_OK,
   HMBC_STATUS_SINGLE_ERROR_CORRECTION,
   HMBC_STATUS_DOUBLE_ERROR_DETECTION,
   HMBC_STATUS_OUT_OF_RANGE_ERROR,
   HMBC_STATUS_BUS_ERROR,
   HMBC_STATUS_HMB_DISABLED_ERROR,
   HMBC_STATUS_FW_TAG_ERROR,
   HMBC_STATUS_NO_COMPLETION_ERROR,
   HMBC_STATUS_MAX_ERROR
};
typedef uint32_t HmbStatusCode_e;





typedef union HMB_Token_u
{
   struct HMB_Token_s
   {
      uint32_t cmdIndex             : 10 ;
      uint32_t state                :3;
      uint32_t userId               :3;
      uint32_t reserved             :16;
   } bits;

   uint32_t all32;
} HMB_Token_t;
;

typedef void(*HMBCallBackFnPtr_t)(HMB_Token_t token);

typedef struct HMB_EventMsg_s
{
   uint32_t                    logicalAddress;
   uint32_t                    size;
   HMBCallBackFnPtr_t          hmbCallBackFnPtr;
   HMB_Token_t                 token;
   BOOL32                      enableHMB : 8;
   BOOL32                      isMemoryReturn : 8;
   BOOL32                      isReset : 8;
   BOOL32                      rfu : 8;
} HMB_EventMsg_t;



typedef struct HMB_statistics_s
{
   uint32_t catHMBSetConfig;
   uint32_t catHMBWriteByDMA;
   uint32_t catHMBReadFromBufferCL;
   uint32_t catHMBReadByDMA;
   uint32_t catHMBRandomEviction;
   uint32_t catHMBWriteError;
   uint32_t catHMBReadError;
   uint32_t catHMBCompletion;
   uint32_t xorHMBSetConfig;
   uint32_t xorHMBWriteToHMB;
   uint32_t xorHMBReadFromHMB;
   uint32_t xorHMBWriteError;
   uint32_t xorHMBReadError;
   uint32_t xorHMBCompletion;
   uint32_t satTranslateByTempHMB;
   uint32_t rfu1;
   uint32_t hmbEnableCount;
   uint32_t hmbDisableCount;
   uint32_t catHmbPromotionCount;
   uint32_t catHmbDemotionCount;
   uint32_t readFromInvlaidateCL;
   uint32_t readFromErrorCL;
   uint32_t catHMBWriteToBufferCL;
   uint32_t rfu[2];
} HMB_Statistics_t;

extern HMB_Statistics_t HMB_Statistics;





Status_t     FE_API_HMB_UsersInit(void);
void          FE_API_HMB_Callback(HMB_Token_t token);
void         FE_API_PMM_HMB_Disable_Callback(HMB_Token_t token);
void         FE_API_PMM_HMB_Enable_Callback(HMB_Token_t token);
void          FE_API_HMB_GetConfig(uint32_t userId, HMB_EventMsg_t* eventMsg);









typedef struct HMB_ReadWrite128_s
{
   uint32_t            logicalAddress;
   uint32_t            systemAddress;
   uint32_t            requestId;
   uint32_t            fwTag;
   uint32_t            userId;
   uint32_t            transferSize;
} HMB_ReadWrite128_t;



typedef struct HMB_Read4Bytes_s
{
   uint32_t            logicalAddress;
   uint32_t            requestId;
   uint32_t            fwTag;
   uint32_t            userId;
} HMB_Read4Bytes_t;



typedef struct HMB_CompletionParameters_s
{
   uint32_t requestId;
   uint32_t systemAddressOrData;
   uint32_t fwTag;
   uint16_t moreCompletions;
   uint16_t numRemainingCompletions;
} HMB_CompletionParameters_t;

uint32_t     HMBC_DequeueCompletionMessage(uint32_t userId, HMB_CompletionParameters_t* complParametersPtr);
void         HMBC_IntEnable(uint32_t userId);
Status_t     FE_HAL_HMB_Read4Bytes(HMB_Read4Bytes_t* hmbRequest4Bytes);
BOOL32       HMBC_IsIdle(void);

#line 184 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_hmb.h"
Status_t     HMBC_QueueRequestReadWrite128(HMB_ReadWrite128_t* hmbRequest128, HmbcDirection_e direction);

#line 25 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/ddrc_indirect_defines.h"

#line 175 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/ddrc_indirect_defines.h"
typedef struct _DDRC_BUFFER_CMD
{
   uint64_t  IND_BUFFER_CMD[ 126 ];
   uint64_t  DIR_BUFFER_CMD[ 0 ];
} DDRC_BUFFER_CMD, *PDDRC_BUFFER_CMD;

typedef struct _DDRC_BUFFER_DATA_SINGLE_CL
{
   uint32_t   data[32];
}DDRC_BUFFER_DATA_SINGLE_CL;

typedef struct _DDRC_BUFFER_DATA
{
   DDRC_BUFFER_DATA_SINGLE_CL IND_BUFFER_DATA[ 126 ];
}DDRC_BUFFER_DATA, *PDDRC_BUFFER_DATA;

typedef struct _DDRC_CACHE_SYNC_CMD
{
   uint64_t  CHCHE_SYNC_CMD[ 0x10 ];
} DDRC_CACHE_SYNC_CMD, *PDDRC_CACHE_SYNC_CMD;

#line 240 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/ddrc_indirect_defines.h"
typedef struct _DDRC_INDIRECT_ADDR
{
   uint64_t  DDR_INDIRECT_ADDR;
} DDRC_INDIRECT_ADDR_t;


typedef struct _DDRC_INDIRECT {
    DDRC_INDIRECT_ADDR_t DDR_INDIRECT[16];
}DDRC_INDIRECT, *PDDRC_INDIRECT;

#line 30 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/ddrc_cache_debug_regs_defines.h"

#line 644 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/ddrc_cache_debug_regs_defines.h"
typedef struct _DDRC_DEBUG_REGS {
    uint64_t  DIRECT_REGION_ADDR                         ;
    uint64_t  DRAM_CMD_RSP_TIMESTAMP                     ;
    uint64_t  CACHE_ERROR_STATUS                         ;
    uint64_t  WR_PORT_STATUS                             ;
    uint64_t  RD_PORT_STATUS                             ;
    uint64_t  CACHE_MNGR_STATUS                          ;
    uint64_t  DRAM_SB_ERR_CNT                            ;
    uint64_t  DRAM_SB_ERR_THR                            ;
    uint64_t  ERROR_INJECT_ADDR                          ;
    uint64_t  Reserved0[3];
    uint64_t  CACHE_LINES_BUSY[4]                        ;
    uint64_t  CACHE_LINES_DB_ERR[4]                      ;
    uint64_t  CACHE_LINES_SB_ERR[4]                      ;
    uint64_t  SPARE_CL_STATUS[4]                         ;
    uint64_t  Reserved1[4];
    uint64_t  DDR_DEBUG_CACHE_WFSM                       ;
    uint64_t  DDR_DEBUG_CACHE_RFSM                       ;
    uint64_t  DDR_DEBUG_CACHE_HIF                        ;
    uint64_t  DDR_DEBUG_CACHE_HIF_CMD_FIFO_DST_DATA      ;
    uint64_t  DDR_DEBUG_CACHE_ECC                        ;
    uint64_t  DDR_DEBUG_FIFO_PTR                         ;
    uint64_t  DATA_TO_HIF_FIFO                           ;
    uint64_t  DDR_CACHE_ECC_DEBUG                        ;
    uint64_t  Reserved2[24];
    uint64_t  CL_LRU_TABLE[64]                           ;
    uint64_t  CL_PHYS_MAP[64]                            ;
    uint64_t  Reserved3[64];
    uint64_t  MID_MAP_CFG[30]                            ;
    uint64_t  Reserved4[226];
    uint64_t  DIR_TIMERS_CFG[40]                         ;
    uint64_t  Reserved5[216];
    uint64_t  CACHE_LINES_STATE[128]                     ;
    uint64_t  Reserved6[128];
    uint64_t  BUFFERS_STATE[126]                         ;
    uint64_t  Reserved7[130];
    uint64_t  CL_QUEUES_STATUS[128]                      ;
}DDRC_DEBUG_REGS_t, *PDDRC_DEBUG_REGS;

#line 31 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"





extern volatile uint32_t ExceptionHanldingDone;

#line 74 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
typedef enum DDR_CahceSyncRangeMode_e
{
   ALL_RANGE = 0,
   GRANULARITY_128B,
   GRANULARITY_4KB,
   GRANULARITY_128B_BIG_RANGE
}DDR_CahceSyncRangeMode_t;

typedef enum DDR_CahceSyncExecute_e
{
   NO_WB_NO_INV = 0,
   DO_WB_WITHOUT_INV,
   DO_INV_WITHOT_WB,
   DO_WB_WITH_INV
}DDR_CahceSyncExecute_t;

__inline static  uint32_t DDR_getIndierctBufferDataAddr(uint32_t index)
{
   return  0x0C000000  +  128 *index;
}

__inline static  uint32_t DDR_getIndierctBufferCmdAddr(uint32_t index)
{
   return  0x0C800000  +  128 *index;
}

__inline static  uint32_t DDR_getIndierctBufferIndexFromDataAddr(uint32_t dataAddr)
{
   return (dataAddr -  0x0C000000 ) /  128 ;
}

#line 177 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  Status_t ddr_CacheLoadEntry_INVFLLD(uint32_t entryNum, uint32_t ddrAddressMsb)
{
   PDDRC_BUFFER_CMD pDDRC_BUFFER_CMD = (PDDRC_BUFFER_CMD) 0x0C800000 ;

#line 183 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   WriteRegister64( (unsigned long)(&pDDRC_BUFFER_CMD->IND_BUFFER_CMD[entryNum]), (unsigned long long)( ((0 << 31 ) | (0 << 30 ) | (0 << 29 ) | ((ddrAddressMsb) << 0 )) ) ) ;
   return STATUS_OK;
}
__inline static  Status_t ddr_CacheLoadEntry_INVFL(uint32_t entryNum)
{
   PDDRC_BUFFER_CMD pDDRC_BUFFER_CMD = (PDDRC_BUFFER_CMD) 0x0C800000 ;
   WriteRegister64( (unsigned long)(&pDDRC_BUFFER_CMD->IND_BUFFER_CMD[entryNum]), (unsigned long long)( (((uint64_t)1 << 31 ) | (1 << 30 ) | (3 << 28 )) ) ) ;
   return STATUS_OK;
}
__inline static  Status_t ddr_CacheLoadEntry_WBVAL(uint32_t entryNum)
{
   PDDRC_BUFFER_CMD pDDRC_BUFFER_CMD = (PDDRC_BUFFER_CMD) 0x0C800000 ;
   WriteRegister64( (unsigned long)(&pDDRC_BUFFER_CMD->IND_BUFFER_CMD[entryNum]), (unsigned long long)( (((uint64_t)1 << 31 ) | (0 << 30 ) | (3 << 28 )) ) ) ;
   return STATUS_OK;
}
__inline static  Status_t ddr_CacheLoadEntry_INVERR(uint32_t entryNum)
{
   PDDRC_BUFFER_CMD pDDRC_BUFFER_CMD = (PDDRC_BUFFER_CMD) 0x0C800000 ;
   WriteRegister64( (unsigned long)(&pDDRC_BUFFER_CMD->IND_BUFFER_CMD[entryNum]), (unsigned long long)( (((uint64_t)1 << 31 ) | (1 << 30 ) | (0 << 28 )) ) ) ;
   return STATUS_OK;
}

#line 227 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
typedef struct _SYS_DIAG_DDR_WRC_TEST_s
{
   uint8_t is_running;
   uint32_t addr;
   uint8_t cl;
   uint8_t len;
   uint32_t data[ 32 ];
   uint8_t option;
} SYS_DIAG_DDR_WRC_TEST_t;

typedef struct _SYS_DIAG_DDR_COMPARE_RESULT_s
{
   uint8_t failed_idx;
   uint8_t failed_bit;
} SYS_DIAG_DDR_COMPARE_RESULT_t;

typedef struct _SYS_DIAG_DDR_WRC_RESULT_s
{
   uint32_t status;
   uint32_t cycle_cnt;
   uint32_t test_cnt;
   uint32_t failed_cnt;
   SYS_DIAG_DDR_COMPARE_RESULT_t failed_info[ 32  *  4 ];
} SYS_DIAG_DDR_WRC_RESULT_t;

typedef struct _SYS_DIAG_DDR_ATE_TEST_s
{
   uint32_t is_running;
   uint32_t test_cnt;
   uint32_t result;
   Status_t status;
} SYS_DIAG_DDR_ATE_TEST_t;

#line 265 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
extern SYS_DIAG_DDR_WRC_TEST_t wrc_test;








__inline static  uint32_t DDR_GetCacheState(uint32_t cacheLineIndex)
{
   volatile uint64_t readData = 0;
   volatile uint64_t cacheIdx = 0;
   uint32_t rtnValue = CACHE_EVICTED;
   uint32_t cacheStateBitOffset = 0;
   uint32_t cacheStateRegNum = 0;
   BOOL isBuffValid =  (0) ;
   BOOL isCacheValid =  (0) ;
   BOOL isCacheDirty =  (0) ;
   BOOL isCacheBusy =  (0) ;
   BOOL isCacheSbErr =  (0) ;
   BOOL isCacheDbErr =  (0) ;
   PDDRC_DEBUG_REGS pDDRC_DBG_REGS = (PDDRC_DEBUG_REGS) (0x70000000) ;


   readData =  ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->BUFFERS_STATE[cacheLineIndex]) ) ;
   isBuffValid = (BOOL)((readData &  (0x00000001ULL << 63 ) ) >>  63 );
   if(isBuffValid)
   {

      cacheIdx = (uint64_t)((readData &  (0x0000FFFFULL << 32 ) ) >>  32 );

      readData = (uint64_t) ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->CACHE_LINES_STATE[cacheIdx]) ) ;
      isCacheValid = (BOOL)((readData &  (0x00000001UL << 31 ) ) >>  31 );
      isCacheDirty = (BOOL)((readData &  (0x00000001UL << 30 ) ) >>  30 );

      cacheStateBitOffset = (uint32_t)cacheIdx %  64 ;
      cacheStateRegNum = (uint32_t)cacheIdx /  64 ;

      readData = (uint64_t) ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->CACHE_LINES_BUSY[cacheStateRegNum]) ) ;
      isCacheBusy = (BOOL)((readData >> cacheStateBitOffset) & 0x01);

      readData = (uint64_t) ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->CACHE_LINES_SB_ERR[cacheStateRegNum]) ) ;
      isCacheSbErr = (BOOL)((readData >> cacheStateBitOffset) & 0x01);
      readData = (uint64_t) ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->CACHE_LINES_DB_ERR[cacheStateRegNum]) ) ;
      isCacheDbErr = (BOOL)((readData >> cacheStateBitOffset) & 0x01);

      if(isCacheValid)
      {
         rtnValue = CACHE_VALID;
      }
      else if(isCacheSbErr || isCacheDbErr)
      {
         rtnValue = CACHE_ERROR;
      }
      else if(isCacheDirty)
      {
         rtnValue = CACHE_DIRTY;
      }
      else if(isCacheBusy)
      {
         rtnValue = CACHE_LOADING;
      }
      else
      {
         { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 330 , "0");                         "BullseyeCoverage restore"; } ;
      }
   }
   else
   {
      rtnValue = CACHE_EVICTED;
   }
   return rtnValue;
}


__inline static  BOOL DDR_IsEccErrorDetectedFromAllCachelines(void)
{
   uint64_t readData = 0;
   BOOL isSbErr = 0;
   BOOL isDbErr = 0;
   PDDRC_DEBUG_REGS pDDRC_DBG_REGS = (PDDRC_DEBUG_REGS) (0x70000000) ;

   readData =  ReadRegister64( (unsigned long)(&pDDRC_DBG_REGS->CACHE_ERROR_STATUS) ) ;
   isDbErr = (BOOL)((readData &  (0x00000001UL << 31 ) ) >>  31 );
   isSbErr = (BOOL)((readData &  (0x00000001UL << 29 ) ) >>  29 );

   if(isSbErr || isDbErr)
   {
      return  (1) ;
   }
   else
   {
      return  (0) ;
   }
}

__inline static  BOOL DDR_IsCacheEvicted(uint32_t cacheLineIndex)
{
   return (CACHE_EVICTED == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheLoading(uint32_t cacheLineIndex)
{
   return (CACHE_LOADING == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheValid(uint32_t cacheLineIndex)
{
   return (CACHE_VALID == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheDirty(uint32_t cacheLineIndex)
{
   return (CACHE_DIRTY == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheError(uint32_t cacheLineIndex)
{
   return (CACHE_ERROR == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheFlushing(uint32_t cacheLineIndex)
{
   return (CACHE_FLUSHING == DDR_GetCacheState(cacheLineIndex));
}

__inline static  BOOL DDR_IsCacheCorrection(uint32_t cacheLineIndex)
{
   return (CACHE_CORRECTION == DDR_GetCacheState(cacheLineIndex));
}

#line 421 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_LoadBuffer(uint32_t bufIdx, uint64_t DramAddr)
{
   uint32_t DDR_addr=(uint32_t)(DramAddr >>  7 );
   ddr_CacheLoadEntry_INVFLLD(bufIdx, DDR_addr);

#line 433 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
}

#line 445 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_AttachBuffer(uint32_t bufIdx, uint64_t DramAddr)
{
   uint32_t DDR_addr = (uint32_t)(DramAddr >>  7 );
   PDDRC_BUFFER_CMD pDDRC_BUFFER_CMD = (PDDRC_BUFFER_CMD) 0x0C800000 ;
   WriteRegister64( (unsigned long)(&pDDRC_BUFFER_CMD->IND_BUFFER_CMD[bufIdx]), (unsigned long long)( ((0 << 31 ) | (1 << 30 ) | (0 << 29 ) | ((DDR_addr) << 0 )) ) ) ;
}

#line 464 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_InvalidateBufferWithWriteback(uint32_t bufIdx)
{
   ddr_CacheLoadEntry_INVFL(bufIdx);

   ;
   ;

}

#line 485 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_InvalidateBufferWithoutWriteback(uint32_t bufIdx)
{
   ddr_CacheLoadEntry_INVERR(bufIdx);

   ;
   ;

}

#line 506 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_WritebackBuffer(uint32_t bufIdx)
{
   ddr_CacheLoadEntry_WBVAL(bufIdx);

   ;
   ;

}

#line 528 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  uint32_t DDR_ReadCacheWord32(uint32_t bufIdx, uint32_t dwordOffset)
{
   uint32_t *pCacheWord;
   uint32_t wordRead;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(bufIdx < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 533 , "bufIdx < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(dwordOffset < 128 / sizeof(uint32_t)), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 534 , "dwordOffset < 128 / sizeof(uint32_t)");                         "BullseyeCoverage restore"; } ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   wordRead =  ReadRegister( (unsigned long)(pCacheWord + bufIdx* 128  / sizeof(uint32_t)  + dwordOffset) ) ;


   CATHmb_IncrementReadCLStats();

#line 554 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   return wordRead;
}

#line 567 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  uint64_t DDR_ReadCacheWord64(uint32_t bufIdx, uint32_t dwordOffset)
{
   uint32_t *pCacheWord;
   uint64_t wordRead;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(bufIdx < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 572 , "bufIdx < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(dwordOffset < 128 / sizeof(uint32_t)), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 573 , "dwordOffset < 128 / sizeof(uint32_t)");                         "BullseyeCoverage restore"; } ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   wordRead =  ReadRegister64( (unsigned long)(pCacheWord + bufIdx* 128  / sizeof(uint32_t)  + dwordOffset) ) ;


   CATHmb_IncrementReadCLStats();

#line 594 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   return wordRead;
}

#line 607 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  uint8_t DDR_ReadCacheByte(uint32_t bufIdx, uint32_t byteOffset)
{
   uint8_t byteRead;


   uint32_t* pCacheWord;
   uint32_t wordRead;
   uint32_t dwordOffset;

#line 619 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   { "BullseyeCoverage save off";                          _AssertImpl((int)(bufIdx < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 619 , "bufIdx < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(byteOffset < 128), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 620 , "byteOffset < 128");                         "BullseyeCoverage restore"; } ;


   dwordOffset = byteOffset /  4 ;
   byteOffset = byteOffset %  4 ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   wordRead =  ReadRegister( (unsigned long)(pCacheWord + bufIdx * 128  / sizeof(uint32_t)  + dwordOffset) ) ;
   byteRead = (uint8_t)(*(((uint8_t*)&wordRead) + byteOffset));

#line 635 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   CATHmb_IncrementReadCLStats();

#line 649 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   return byteRead;
}


typedef uint32_t(*readDataBufferfunc)(uint32_t bufIdx, uint32_t dwordOffset, void* output);
typedef uint32_t(*writeDataBufferfunc)(uint32_t cacheLineIndex, uint32_t cacheLineOffset, uint32_t word);

__inline static  void DDR_VerifySVCICompleted()
{
   while(!ExceptionHanldingDone){};
   ExceptionHanldingDone =  (0) ;
}

__inline static  uint32_t DDR_verifyStatusAndHandleSVCI(uint32_t bufIdx)
{
   uint32_t isValid =  (0) ;

   if (( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) ))
   {
      isValid =  (1) ;
   }
   else
   {
      DDR_VerifySVCICompleted();
      isValid =  (0) ;;
   }
   return isValid;
}

__inline static  uint32_t DDR_DataRead64AndCheckStatusAfter(uint32_t bufIdx, uint32_t dwordOffset, void* output)
{
   *(uint64_t*)output = DDR_ReadCacheWord64(bufIdx,dwordOffset);
   return DDR_verifyStatusAndHandleSVCI(bufIdx);
}

__inline static  uint32_t DDR_DataRead32AndCheckStatusAfter(uint32_t bufIdx, uint32_t dwordOffset, void* output)
{
   *(uint32_t*)output = DDR_ReadCacheWord32(bufIdx,dwordOffset);
   return DDR_verifyStatusAndHandleSVCI(bufIdx);
}

__inline static  uint32_t DDR_ReadFromBuffSafely(uint32_t bufIdx, uint32_t dwordOffset, void* output,readDataBufferfunc func)
{
   uint32_t isValid  =  (0) ;

   if ( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) )
   {
      isValid = func(bufIdx, dwordOffset,output);
   }
   else
   {
      while (( (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 63 ) )>> 63 ) ) && (! (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 48 ) )>> 48 ) )){};

      if (( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) ))
      {
         isValid = func(bufIdx, dwordOffset,output);
      }
   }
   return isValid;
}



__inline static  uint32_t DDR_ReadDataFromBuffer(uint32_t bufIdx, uint32_t dwordOffset, uint32_t* output )
{
   return DDR_ReadFromBuffSafely(bufIdx,dwordOffset,(void*) output,DDR_DataRead32AndCheckStatusAfter);
}

__inline static  uint32_t DDR_ReadDataFromBufferDword(uint32_t buffOffsetCalclutedSizeInDWORD, uint32_t* output)
{
   return DDR_ReadDataFromBuffer( (buffOffsetCalclutedSizeInDWORD / (uint32_t)( 128  / sizeof(uint32_t) )) ,  (buffOffsetCalclutedSizeInDWORD % (uint32_t)( 128  / sizeof(uint32_t) )) , output);
}

__inline static  uint32_t DDR_ReadDataFromBufferQword(uint32_t buffOffsetCalclutedSizeInDWORD, uint64_t* output)
{
   return DDR_ReadFromBuffSafely( (buffOffsetCalclutedSizeInDWORD / (uint32_t)( 128  / sizeof(uint32_t) )) ,  (buffOffsetCalclutedSizeInDWORD % (uint32_t)( 128  / sizeof(uint32_t) )) ,(void*) output,DDR_DataRead64AndCheckStatusAfter);
}

__inline static  uint32_t DDR_ReadDataFromBufferByte(uint32_t bufIdx, uint32_t byteOffset, uint32_t byteLength, void* output)
{
   uint32_t lengthToRead;
   uint32_t isValid =  (1) ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)((byteOffset + byteLength) <= 128), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 732 , "(byteOffset + byteLength) <= 128");                         "BullseyeCoverage restore"; } ;

   for (lengthToRead = 0; lengthToRead < byteLength && isValid ==  (1) ; lengthToRead++)
   {
      ((uint8_t*)output)[lengthToRead] = DDR_ReadCacheByte(bufIdx, byteOffset + lengthToRead);
      isValid = DDR_verifyStatusAndHandleSVCI(bufIdx);
   }

   return isValid;
}

#line 754 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_WriteCacheByte(uint32_t cacheLineIndex, uint32_t byteOffset, uint8_t byte)
{


   uint32_t* pCacheWord;
   uint32_t wordRead;
   uint32_t dwordOffset;

#line 765 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
   { "BullseyeCoverage save off";                          _AssertImpl((int)(cacheLineIndex < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 765 , "cacheLineIndex < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(byteOffset < 128), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 766 , "byteOffset < 128");                         "BullseyeCoverage restore"; } ;


   dwordOffset = byteOffset /  4 ;
   byteOffset = byteOffset %  4 ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   wordRead =  ReadRegister( (unsigned long)(pCacheWord + cacheLineIndex * 128  / sizeof(uint32_t)  + dwordOffset) ) ;
   *((uint8_t*)&wordRead + byteOffset) = byte;
   WriteRegister( (unsigned long)(pCacheWord + cacheLineIndex * 128  / sizeof(uint32_t)  + dwordOffset), (unsigned long)(wordRead) ) ;

#line 791 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
}


__inline static  uint32_t DDR_WriteByteArrToBuffer(uint32_t bufIdx, uint32_t byteOffset, uint32_t length, uint8_t* byteArray)
{
   uint32_t lengthToWrite;
   uint32_t isValid =  (1) ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)((byteOffset + length) <= 128), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 799 , "(byteOffset + length) <= 128");                         "BullseyeCoverage restore"; } ;

   for (lengthToWrite = 0; lengthToWrite < length && isValid ==  (1) ; lengthToWrite++)
   {
      DDR_WriteCacheByte(bufIdx, byteOffset + lengthToWrite, byteArray[lengthToWrite]);
      isValid = DDR_verifyStatusAndHandleSVCI(bufIdx);
   }
   return isValid;
}

#line 819 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_WriteCacheWord32(uint32_t cacheLineIndex, uint32_t cacheLineOffset, uint32_t word)
{
   uint32_t *pCacheWord;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(cacheLineIndex < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 823 , "cacheLineIndex < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(cacheLineOffset < 128 / sizeof(uint32_t)), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 824 , "cacheLineOffset < 128 / sizeof(uint32_t)");                         "BullseyeCoverage restore"; } ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   WriteRegister( (unsigned long)(pCacheWord + cacheLineIndex* 128  / sizeof(uint32_t)  + cacheLineOffset), (unsigned long)(word) ) ;

#line 840 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
}

#line 854 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_WriteCacheWord64(uint32_t cacheLineIndex, uint32_t cacheLineOffset, uint64_t word)
{
   uint32_t *pCacheWord;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(cacheLineIndex < 126), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 858 , "cacheLineIndex < 126");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(cacheLineOffset < 128 / sizeof(uint32_t)), "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h" , 859 , "cacheLineOffset < 128 / sizeof(uint32_t)");                         "BullseyeCoverage restore"; } ;

   pCacheWord = (uint32_t*) 0x0C000000 ;
   WriteRegister64( (unsigned long)(pCacheWord + cacheLineIndex* 128  / sizeof(uint32_t)  + cacheLineOffset), (unsigned long long)(word) ) ;


   CATHmb_IncrementWriteCLStats();

#line 880 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
}



__inline static  void DDR_WriteDataToBufferDword(uint32_t buffOffsetCalclutedSizeInDWORD, uint32_t data) {
   DDR_WriteCacheWord32( (buffOffsetCalclutedSizeInDWORD / (uint32_t)( 128  / sizeof(uint32_t) )) ,  (buffOffsetCalclutedSizeInDWORD % (uint32_t)( 128  / sizeof(uint32_t) )) ,data);}
__inline static  void DDR_WriteDataToBufferQword(uint32_t buffOffsetCalclutedSizeInDWORD, uint64_t data) {
   DDR_WriteCacheWord64( (buffOffsetCalclutedSizeInDWORD / (uint32_t)( 128  / sizeof(uint32_t) )) ,  (buffOffsetCalclutedSizeInDWORD % (uint32_t)( 128  / sizeof(uint32_t) )) ,data);}
__inline static  void DDR_WriteDataToBuffer(uint32_t bufIdx, uint32_t dwordOffset, uint32_t data) {DDR_WriteCacheWord32(bufIdx,dwordOffset,data);}

#line 908 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
void DDR_CacheSync(DDR_CahceSyncRangeMode_t rangeModeIdx, DDR_CahceSyncExecute_t cacheSyncExecute, uint64_t startADDR, uint64_t sizeInBytes);





typedef void(*DDR_CL_Callback)(void);
void DDR_CL_InitISR();
void DDR_updateHMBCLErrorCounter(uint32_t DramAddr);
Status_t DDR_LoadCacheWait(uint32_t cacheLineIndex, uint32_t ddrAddrMSB);
void DDR_LoadAllCache(uint32_t* ddrAddrMSB);
Status_t DDR_LoadAllCacheWait(uint32_t* ddrAddrMSB);

void DDR_FreeCache(uint32_t cacheLineIndex);
Status_t DDR_FreeCacheWait(uint32_t cacheLineIndex);
void DDR_FreeAllCache(void);
Status_t DDR_FreeAllCacheWait(void);

void DDR_WriteBackCache(uint32_t cacheLineIndex);
Status_t DDR_WriteBackCacheWait(uint32_t cacheLineIndex);
void DDR_WriteBackAllCache(void);
Status_t DDR_WriteBackAllCacheWait(void);

void DDR_InvalidateErrorCache(uint32_t cacheLineIndex);
Status_t DDR_InvalidateErrorCacheWait(uint32_t cacheLineIndex);


uint64_t DDR_GetCacheAddr(uint32_t cacheLineIndex);
uint32_t DDR_GetCacheAddrMSB(uint32_t cacheLineIndex);


uint32_t DDR_ReadCacheWord32(uint32_t cacheLineIndex, uint32_t cacheLineOffset);
void DDR_WriteCacheWord32(uint32_t cacheLineIndex, uint32_t cacheLineOffset, uint32_t word);
uint8_t DDR_ReadCacheByte(uint32_t cacheLineIndex, uint32_t cacheLineOffset);
void DDR_WriteCacheByte(uint32_t cacheLineIndex, uint32_t cacheLineOffset, uint8_t byte);
Status_t DDR_WaitForCacheValid(uint32_t cacheLindeIndex);
Status_t DDR_WaitForCacheEvicted(uint32_t cacheLindeIndex);
void ddr_reload();

#line 965 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
__inline static  void DDR_updateHmbReadClStatistics(uint32_t bufferIdx)
{
   if (! (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufferIdx]) ) ))& (0x00000001ULL << 63 ) )>> 63 )  && ! (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufferIdx]) ) ))& (0x00000001ULL << 48 ) )>> 48 ) )
   {
      HMB_Statistics.readFromInvlaidateCL++;
   }
   else if ( (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufferIdx]) ) ))& (0x00000001ULL << 50 ) )>> 50 ) )
   {
      HMB_Statistics.readFromErrorCL++;
   }
}

__inline static  uint32_t DDR_ReadByteFromBuffSafely(uint32_t bufIdx, uint32_t byteOffset, uint32_t byteLength, void* output)
{
   uint32_t isValid =  (0) ;

   if ( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) )
   {
      isValid = DDR_ReadDataFromBufferByte(bufIdx, byteOffset, byteLength, output);
   }
   else
   {
      while (( (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 63 ) )>> 63 ) ) && (! (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 48 ) )>> 48 ) )) {

#line 991 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
      };

      if (( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) ))
      {
         isValid = DDR_ReadDataFromBufferByte(bufIdx, byteOffset, byteLength, output);
      }
   }
   return isValid;

}

__inline static  uint32_t DDR_WriteToBuffSafely(uint32_t bufIdx, uint32_t ByteOffset, uint32_t length, uint8_t* byteArray)
{
   uint32_t isValid =  (0) ;

   if ( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) )
   {
      isValid = DDR_WriteByteArrToBuffer(bufIdx, ByteOffset, length, byteArray);
   }
   else
   {
      while (( (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 63 ) )>> 63 ) ) && (! (((( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) ) ))& (0x00000001ULL << 48 ) )>> 48 ) ))
      {

#line 1017 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_buffer_driver.h"
      };

      if (( (( ReadRegister64( (unsigned long)(&((PDDRC_DEBUG_REGS) (0x70000000) )->BUFFERS_STATE[bufIdx]) )  & (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 50 ) | (uint64_t)(1ULL<< 48 )) ) == (uint64_t) ((uint64_t)(1ULL<< 63 ) | (uint64_t)(1ULL<< 48 )) ) ))
      {
         isValid = DDR_WriteByteArrToBuffer(bufIdx, ByteOffset, length, byteArray);
      }
   }
   return isValid;

}

#line 44 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_intgeneralimp.h"

#line 48 "d:/gitrepo/fpgcss-vega/source/infra/drivers/inc_public/sys_intgeneralimp.h"
typedef union SVCI_BridgeControl_u
{
   struct {
      uint32_t mode : 1;

      uint32_t reserved : 31;
   } b;
   uint32_t all;
} SVCI_BridgeControl_t, *SVCI_BridgeControl_tp;






typedef union SVCI_ErrorStatus_u
{
   struct {
      uint32_t read_response_opcode : 4;
      uint32_t write_response_opcode : 4;
      uint32_t reserved_8_28 : 21;
      uint32_t read_error_response_flag : 1;
      uint32_t write_error_response_flag : 1;
      uint32_t write_error_response_int : 1;
   } b;
   uint32_t all;
} SVCI_ErrorStatus_t, *SVCI_ErrorStatus_tp;




typedef union SVCI_ReadErrorAddress_u
{
   struct {
      uint32_t address;
   } b;
   uint32_t all;
} SVCI_ReadErrorAddress_t, *SVCI_ReadErrorAddress_tp;




typedef union SVCI_WriteErrorAddress_u
{
   struct {
      uint32_t address;
   } b;
   uint32_t all;
} SVCI_WriteErrorAddress_t, *SVCI_WriteErrorAddress_tp;








typedef union SVCI_MLMPurge_u
{
   struct {
      uint32_t purge_mlm0  : 1;
      uint32_t purge_mlm1  : 1;
      uint32_t purge_mlm2  : 1;
      uint32_t purge_mlm3  : 1;
      uint32_t purge_mlm4  : 1;
      uint32_t purge_mlm5  : 1;
      uint32_t purge_mlm6  : 1;
      uint32_t purge_mlm7  : 1;
      uint32_t purge_mlm8  : 1;
      uint32_t purge_mlm9  : 1;
      uint32_t purge_mlm10 : 1;
      uint32_t purge_mlm11 : 1;
      uint32_t purge_mlm12 : 1;
      uint32_t purge_mlm13 : 1;
      uint32_t purge_mlm14 : 1;
      uint32_t purge_mlm15 : 1;
      uint32_t purge_mlm16 : 1;
      uint32_t purge_mlm17 : 1;
      uint32_t purge_mlm18 : 1;
      uint32_t purge_mlm19 : 1;
      uint32_t purge_mlm20 : 1;
      uint32_t purge_mlm21 : 1;
      uint32_t purge_mlm22 : 1;
      uint32_t purge_mlm23 : 1;
      uint32_t purge_mlm24 : 1;
      uint32_t purge_mlm25 : 1;
      uint32_t purge_mlm26 : 1;
      uint32_t purge_mlm27 : 1;
      uint32_t purge_mlm28 : 1;
      uint32_t purge_mlm29 : 1;
      uint32_t purge_mlm30 : 1;
      uint32_t purge_mlm31 : 1;
   } b;
   uint32_t all;
} SVCI_MLMPurge_t, *SVCI_MLMPurge_tp;





typedef union SVCI_TimeoutControl_u
{
   struct {
      uint32_t timeout : 5;
      uint32_t reserved_5_7 : 3;
      uint32_t timeout_error_mode : 2;
      uint32_t reserved_10_30 : 21;
      uint32_t timeout_enable : 1;
   } b;
   uint32_t all;
} SVCI_TimeoutControl_t, *SVCI_TimeoutControl_tp;









typedef union SVCI_TimeoutStatus_u
{
   struct {
      uint32_t reserved : 31;
      uint32_t status : 1;

   } b;
   uint32_t all;
} SVCI_TimeoutStatus_t, *SVCI_TimeoutStatus_tp;










typedef enum
{
   SVCI_BRIDGE_CONTROL_Enable =  0xFA610DD1 ,
   SVCI_BRIDGE_CONTROL_Disable = 0x4DB4DB15 ,
} SVCI_BridgeControlOptions_t;


void SVCI_Init(void);
void SVCI_InExceptionHandler(void);

SVCI_BridgeControl_t SVCI_GetBridgeControl(void);
void SVCI_BridgeControlEnable(SVCI_BridgeControlOptions_t value);
SVCI_ErrorStatus_t SVCI_GetErrorStatus(void);
void SVCI_ClrErrorStatus(SVCI_ErrorStatus_t mask);
SVCI_ReadErrorAddress_t SVCI_GetReadErrorAddress(void);
SVCI_WriteErrorAddress_t SVCI_GetWriteErrorAddress(void);
SVCI_MLMPurge_t SVCI_GetPurge(void);
void SVCI_SetPurge(SVCI_MLMPurge_t mask);
SVCI_TimeoutControl_t SVCI_GetTimeoutControl(void);
void SVCI_SetTimeoutControl(SVCI_TimeoutControl_t timeout_ctrl);
SVCI_TimeoutStatus_t SVCI_GetTimeoutStatus(void);
void SVCI_ClrTimeoutStatus(void);

#line 22 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddr_descr_defines.h"

#line 23 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/cat_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_regs_defines.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_ps.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/fe_nvme/driver/inc/him_hawa_registers.h"

#line 100 "d:/gitrepo/fpgcss-vega/source/fe_nvme/driver/inc/him_hawa_registers.h"
enum HAWA_FSM_STATE_e
{
   HAWA_FSM_ST_IDLE                 = 0x00,
   HAWA_FSM_ST_FLUSH_MODE           = 0x01,
   HAWA_FSM_ST_FETCH_CMD_CTX        = 0x02,
   HAWA_FSM_ST_CMD_PARSING          = 0x03,
   HAWA_FSM_ST_RSRC_ALLOC           = 0x04,
   HAWA_FSM_ST_WAIT_HWD_CTX_IDX_REL = 0x05,
   HAWA_FSM_ST_BUF_ALLOC            = 0x06,
   HAWA_FSM_ST_WAIT_RS_DONE         = 0x07,
   HAWA_FSM_ST_HWD_DB_UPDT          = 0x08,
   HAWA_FSM_ST_WAIT_HWD_DB_UPDT_DONE = 0x09,
   HAWA_FSM_ST_CMD_CTX_WR           = 0x0A,
   HAWA_FSM_ST_FETCH_HWD_CTX        = 0x0B,
   HAWA_FSM_ST_WAIT_SRAM_RB_SLOT    = 0x0C,
   HAWA_FSM_ST_CMPL_FLOW_HALT       = 0x0D,
   HAWA_FSM_ST_WAIT_TM_TIMER_TO     = 0x0E,
   HAWA_FSM_ST_HABM_DESC_GEN        = 0x0F
};



typedef union HIM_HAWA_CTRL_u
{
   struct HIM_HAWA_CTRL_s
   {
      uint32_t orderIdRelEn                 :1;
      uint32_t reserved_0                   :2;
      uint32_t flushMode                    :2;








      uint32_t hsecEn                       :1;
      uint32_t fuaCmdMode                   :1;

      uint32_t timeoutNoBufEn               :1;
      uint32_t wrExeFlowSvciPrty            :2;
      uint32_t habmCmplFlowSvciPrty         :2;
      uint32_t dramCtrlCmplFlowSvciPrty     :2;
      uint32_t cmdCtxWrEn                   :1;

      uint32_t reserved_1                   :1;
      uint32_t agingMechEn                  :1;
      uint32_t rbPtrRst                     :1;


      uint32_t setEvtHabmDescGenLoEn        :1;
      uint32_t setEvtHabmDescGenHiEn        :1;
      uint32_t setEvtHwdCtxGenEn            :1;
      uint32_t timeoutMechEn                :1;
      uint32_t bpmCnt                       :8;

      uint32_t swRst                        :1;


      uint32_t swRstDone                    :1;
   } bits;

   uint32_t all32;
} HIM_HAWA_CTRL_t;

typedef union HIM_HAWA_CMD_CTX_BADDR_u
{
   struct HIM_HAWA_CMD_CTX_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_CMD_CTX_BADDR_t;

typedef union HIM_HAWA_HWD_CTX_BADDR_u
{
   struct HIM_HAWA_HWD_CTX_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_HWD_CTX_BADDR_t;

typedef union HIM_HAWA_HWD_CTX_SLOTS_NUM_u
{
   struct HIM_HAWA_HWD_CTX_SLOTS_NUM_s
   {
      uint32_t slotsNum                     :7;






      uint32_t reserved_0                   :25;
   } bits;

   uint32_t all32;
} HIM_HAWA_HWD_CTX_SLOTS_NUM_t;

typedef union HIM_HAWA_HWD_CTX_SLOTS_NUM_CHANGE_u
{
   struct HIM_HAWA_HWD_CTX_SLOTS_NUM_CHANGE_s
   {
      uint32_t sts                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_HWD_CTX_SLOTS_NUM_CHANGE_t;

typedef union HIM_HAWA_HWD_CTX_REL_IDX_u
{
   struct HIM_HAWA_HWD_CTX_REL_IDX_s
   {
      uint32_t index                        :16;
      uint32_t reserved_0                   :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_HWD_CTX_REL_IDX_t;


typedef union HIM_HAWA_FMU_SIZE_u
{
   struct HIM_HAWA_FMU_SIZE_s
   {
      uint32_t log                          :4;

      uint32_t reserved_0                   :28;
   } bits;

   uint32_t all32;
} HIM_HAWA_FMU_SIZE_t;

typedef union HIM_HAWA_CMD_CLASSIF_u
{
   struct HIM_HAWA_CMD_CLASSIF_s
   {
      uint32_t exampleEn                    :1;

      uint32_t defaultSt                    :4;
      uint32_t en                           :5;
      uint32_t reserved_0                   :22;
   } bits;

   uint32_t all32;
} HIM_HAWA_CMD_CLASSIF_t;

typedef union HIM_HAWA_BUF_ALLOC_STEP1_ADDR_u
{
   struct HIM_HAWA_BUF_ALLOC_STEP1_ADDR_s
   {
      uint32_t addr                         :32;

   } bits;

   uint32_t all32;
} HIM_HAWA_BUF_ALLOC_STEP1_ADDR_t;

typedef union HIM_HAWA_BUF_ALLOC_STEP2_ADDR_u
{
   struct HIM_HAWA_BUF_ALLOC_STEP2_ADDR_s
   {
      uint32_t addr                         :32;

   } bits;

   uint32_t all32;
} HIM_HAWA_BUF_ALLOC_STEP2_ADDR_t;

typedef union HIM_HAWA_BUF_ALLOC_STEP2_DATA_u
{
   struct HIM_HAWA_BUF_ALLOC_STEP2_DATA_s
   {
      uint32_t data                         :32;

   } bits;

   uint32_t all32;
} HIM_HAWA_BUF_ALLOC_STEP2_DATA_t;

typedef union HIM_HAWA_RS_DONE_u
{
   struct HIM_HAWA_RS_DONE_s
   {
      uint32_t reserved_0                   :7;
      uint32_t type                         :1;
      uint32_t reserved_1                   :24;
   } bits;

   uint32_t all32;
} HIM_HAWA_RS_DONE_t;

typedef union HIM_HAWA_DATA_XFR_DESC_1_u
{
   struct HIM_HAWA_DATA_XFR_DESC_1_s
   {
      uint32_t eac                          :2;




      uint32_t dce                          :4;




      uint32_t esec                         :2;




      uint32_t reserved_0                   :2;
      uint32_t mdd                          :1;


      uint32_t qoa                          :1;



      uint32_t statm                        :3;






      uint32_t intAsserted                   :1;

      uint32_t reserved_1                    :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_DATA_XFR_DESC_1_t;

typedef union HIM_HAWA_DATA_XFR_DESC_2_u
{
   struct HIM_HAWA_DATA_XFR_DESC_2_s
   {
      uint32_t lCid1                        :8;
      uint32_t eCid1                        :8;
      uint32_t lCid2                        :8;
      uint32_t eCid2                        :8;
   } bits;

   uint32_t all32;
} HIM_HAWA_DATA_XFR_DESC_2_t;

typedef union HIM_HAWA_DATA_XFR_DESC_3_u
{
   struct HIM_HAWA_DATA_XFR_DESC_3_s
   {
      uint32_t sfinfo                       :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DATA_XFR_DESC_3_t;

typedef union HIM_HAWA_DATA_XFR_DESC_4_u
{
   struct HIM_HAWA_DATA_XFR_DESC_4_s
   {
      uint32_t secp                         :16;
      uint32_t reserved_0                   :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_DATA_XFR_DESC_4_t;

typedef union HIM_HAWA_DATA_XFR_DESC_5_u
{
   struct HIM_HAWA_DATA_XFR_DESC_5_s
   {
      uint32_t dataQoa                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DATA_XFR_DESC_5_t;

typedef union HIM_HAWA_TM_TIMER_u
{
   struct HIM_HAWA_TM_TIMER_s
   {
      uint32_t thrsh                        :20;
      uint32_t thrshMultiply4               :1;
      uint32_t thrshMultiply16              :1;
      uint32_t reserved_0                   :10;
   } bits;

   uint32_t all32;
} HIM_HAWA_TM_TIMER_t;

typedef union HIM_HAWA_HABM_DESC_RB_BADDR_u
{
   struct HIM_HAWA_HABM_DESC_RB_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_HABM_DESC_RB_BADDR_t;

typedef union HIM_HAWA_HABM_DESC_RB_SIZE_u
{
   struct HIM_HAWA_HABM_DESC_RB_SIZE_s
   {
      uint32_t size                         :6;





      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_HABM_DESC_RB_SIZE_t;

typedef union HIM_HAWA_HABM_DESC_RB_WPTR_u
{
   struct HIM_HAWA_HABM_DESC_RB_WPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_HABM_DESC_RB_WPTR_t;

typedef union HIM_HAWA_HABM_DESC_RB_RPTR_u
{
   struct HIM_HAWA_HABM_DESC_RB_RPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_HABM_DESC_RB_RPTR_t;

typedef union HIM_HAWA_HABM_CMPL_u
{
   struct HIM_HAWA_HABM_CMPL_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_HABM_CMPL_t;

typedef union HIM_HAWA_DRAM_CTRL_CMPL_u
{
   struct HIM_HAWA_DRAM_CTRL_CMPL_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_CTRL_CMPL_t;

typedef union HIM_HAWA_SRAM_UDBUF_BADDR_u
{
   struct HIM_HAWA_SRAM_UDBUF_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_UDBUF_BADDR_t;

typedef union HIM_HAWA_SRAM_UDBUF_SIZE_u
{
   struct HIM_HAWA_SRAM_UDBUF_SIZE_s
   {
      uint32_t size                         :6;




      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_UDBUF_SIZE_t;

typedef union HIM_HAWA_SRAM_UDBUF_WPTR_u
{
   struct HIM_HAWA_SRAM_UDBUF_WPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_UDBUF_WPTR_t;

typedef union HIM_HAWA_SRAM_UDBUF_RPTR_u
{
   struct HIM_HAWA_SRAM_UDBUF_RPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_UDBUF_RPTR_t;

typedef union HIM_HAWA_SRAM_MDBUF_BADDR_u
{
   struct HIM_HAWA_SRAM_MDBUF_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_MDBUF_BADDR_t;

typedef union HIM_HAWA_SRAM_MDBUF_SIZE_u
{
   struct HIM_HAWA_SRAM_MDBUF_SIZE_s
   {
      uint32_t size                         :6;





      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_MDBUF_SIZE_t;

typedef union HIM_HAWA_SRAM_MDBUF_WPTR_u
{
   struct HIM_HAWA_SRAM_MDBUF_WPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_MDBUF_WPTR_t;

typedef union HIM_HAWA_SRAM_MDBUF_RPTR_u
{
   struct HIM_HAWA_SRAM_MDBUF_RPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_SRAM_MDBUF_RPTR_t;

typedef union HIM_HAWA_DRAM_DESC_RB_BADDR_u
{
   struct HIM_HAWA_DRAM_DESC_RB_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_DESC_RB_BADDR_t;

typedef union HIM_HAWA_DRAM_DESC_RB_SIZE_u
{
   struct HIM_HAWA_DRAM_DESC_RB_SIZE_s
   {
      uint32_t size                         :6;





      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_DESC_RB_SIZE_t;

typedef union HIM_HAWA_DRAM_DESC_RB_WPTR_u
{
   struct HIM_HAWA_DRAM_DESC_RB_WPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_DESC_RB_WPTR_t;

typedef union HIM_HAWA_DRAM_DESC_RB_RPTR_u
{
   struct HIM_HAWA_DRAM_DESC_RB_RPTR_s
   {
      uint32_t addr                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_DESC_RB_RPTR_t;

typedef union HIM_HAWA_DRAM_CTRL_TRG_ADDR_u
{
   struct HIM_HAWA_DRAM_CTRL_TRG_ADDR_s
   {
      uint32_t addr                         :32;



   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_CTRL_TRG_ADDR_t;

typedef union HIM_HAWA_DRAM_CTRL_TRG_MSG_u
{
   struct HIM_HAWA_DRAM_CTRL_TRG_MSG_s
   {
      uint32_t data                         :32;


   } bits;

   uint32_t all32;
} HIM_HAWA_DRAM_CTRL_TRG_MSG_t;

typedef union HIM_HAWA_DEBUG_WR_EXE_FLOW_u
{
   struct HIM_HAWA_DEBUG_WR_EXE_FLOW_s
   {
      uint32_t fsmState                     :4;

#line 671 "d:/gitrepo/fpgcss-vega/source/fe_nvme/driver/inc/him_hawa_registers.h"
      uint32_t reserved_0                   :2;
      uint32_t buffAllocFsmState            :2;



      uint32_t actHwdCtxIdxCnt              :8;



      uint32_t reserved_1                   :8;
      uint32_t habmDescGenFsmState          :3;






      uint32_t reserved_2                   :3;
      uint32_t hwdCtxFetchFsmState          :2;



   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_WR_EXE_FLOW_t;

typedef union HIM_HAWA_DEBUG_HABM_CMPL_FLOW_u
{
   struct HIM_HAWA_DEBUG_HABM_CMPL_FLOW_s
   {
      uint32_t fsmState                     :4;

#line 718 "d:/gitrepo/fpgcss-vega/source/fe_nvme/driver/inc/him_hawa_registers.h"
      uint32_t reserved_0                   :28;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_HABM_CMPL_FLOW_t;

typedef union HIM_HAWA_DEBUG_DRAM_CTRL_CMPL_FLOW_u
{
   struct HIM_HAWA_DEBUG_DRAM_CTRL_CMPL_FLOW_s
   {
      uint32_t fsmState                     :3;





      uint32_t reserved_0                   :29;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_DRAM_CTRL_CMPL_FLOW_t;

typedef union HIM_HAWA_SVCI_ERR_ADDR_u
{
   struct HIM_HAWA_SVCI_ERR_ADDR_s
   {
      uint32_t addr                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_ERR_ADDR_t;

typedef union HIM_HAWA_SVCI_ERR_u
{
   struct HIM_HAWA_SVCI_ERR_s
   {
      uint32_t resp                         :4;
      uint32_t reserved_0                   :28;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_ERR_t;

typedef union HIM_HAWA_OVP_CTRL_u
{
   struct HIM_HAWA_OVP_CTRL_s
   {
      uint32_t ovpM                         :5;





      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_OVP_CTRL_t;

typedef union HIM_HAWA_DEBUG_CTRL_u
{
   struct HIM_HAWA_DEBUG_CTRL_s
   {
      uint32_t reserved_0                   :30;
      uint32_t writeEn                      :1;


      uint32_t debugEn                      :1;

   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_CTRL_t;

typedef union HIM_HAWA_DEBUG_PDMA_CMD_FIFO_u
{
   struct HIM_HAWA_DEBUG_PDMA_CMD_FIFO_s
   {
      uint32_t fifoLevel                    :8;
      uint32_t reserved_0                   :22;
      uint32_t fifoEmpty                    :1;
      uint32_t fifoPop                      :1;



   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_PDMA_CMD_FIFO_t;

typedef union HIM_HAWA_DEBUG_PDMA_CMD_FIFO_TRN_DATA_u
{
   struct HIM_HAWA_DEBUG_PDMA_CMD_FIFO_TRN_DATA_s
   {
      uint32_t userTrnTag                   :2;
      uint32_t trnPrty                      :2;
      uint32_t trnWrResp                    :2;
      uint32_t trnWr                        :1;
      uint32_t reserved_0                   :9;
      uint32_t trnSize                      :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_PDMA_CMD_FIFO_TRN_DATA_t;

typedef union HIM_HAWA_DEBUG_PDMA_CMD_FIFO_ADDR_u
{
   struct HIM_HAWA_DEBUG_PDMA_CMD_FIFO_ADDR_s
   {
      uint32_t trnAddr                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_PDMA_CMD_FIFO_ADDR_t;

typedef union HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_u
{
   struct HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_s
   {
      uint32_t fifoLevel                    :8;
      uint32_t reserved_0                   :22;
      uint32_t fifoEmpty                    :1;
      uint32_t fifoPop                      :1;



   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_t;

typedef union HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_TRN_DATA_u
{
   struct HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_TRN_DATA_s
   {
      uint32_t userTrnTag                   :2;
      uint32_t trnPrty                      :2;
      uint32_t trnOpc                       :3;
      uint32_t reserved_0                   :1;
      uint32_t trnLen                       :3;
      uint32_t trnTag                       :4;
      uint32_t trnMid                       :1;
      uint32_t trnWbe                       :8;
      uint32_t reserved_1                   :8;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_TRN_DATA_t;

typedef union HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_ADDR_u
{
   struct HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_ADDR_s
   {
      uint32_t trnAddr                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_ADDR_t;

typedef union HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_MSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_MSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_MSB_t;

typedef union HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_LSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_LSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_LSB_t;

typedef union HIM_HAWA_DEBUG_SVCI_CMD_FIFO_u
{
   struct HIM_HAWA_DEBUG_SVCI_CMD_FIFO_s
   {
      uint32_t fifoLevel                    :8;
      uint32_t reserved_0                   :22;
      uint32_t fifoEmpty                    :1;
      uint32_t fifoPop                      :1;



   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_CMD_FIFO_t;

typedef union HIM_HAWA_DEBUG_SVCI_CMD_FIFO_TRN_DATA_u
{
   struct HIM_HAWA_DEBUG_SVCI_CMD_FIFO_TRN_DATA_s
   {
      uint32_t userTrnTag                   :2;
      uint32_t trnPrty                      :2;
      uint32_t trnOpc                       :3;
      uint32_t reserved_0                   :1;
      uint32_t trnLen                       :3;
      uint32_t trnTag                       :4;
      uint32_t trnMid                       :1;
      uint32_t trnWbe                       :8;
      uint32_t reserved_1                   :8;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_CMD_FIFO_TRN_DATA_t;

typedef union HIM_HAWA_DEBUG_SVCI_CMD_FIFO_ADDR_u
{
   struct HIM_HAWA_DEBUG_SVCI_CMD_FIFO_ADDR_s
   {
      uint32_t trnAddr                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_CMD_FIFO_ADDR_t;

typedef union HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_MSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_MSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_MSB_t;

typedef union HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_LSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_LSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_LSB_t;

typedef union HIM_HAWA_DEBUG_SVCI_RSP_FIFO_u
{
   struct HIM_HAWA_DEBUG_SVCI_RSP_FIFO_s
   {
      uint32_t fifoLevel                    :8;
      uint32_t reserved_0                   :22;
      uint32_t fifoEmpty                    :1;
      uint32_t fifoPop                      :1;



   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_RSP_FIFO_t;

typedef union HIM_HAWA_DEBUG_SVCI_RSP_FIFO_TRN_DATA_u
{
   struct HIM_HAWA_DEBUG_SVCI_RSP_FIFO_TRN_DATA_s
   {
      uint32_t userTrnTag                   :2;
      uint32_t trnPrty                      :2;
      uint32_t trnOpc                       :4;
      uint32_t reserved_0                   :3;
      uint32_t trnTag                       :4;
      uint32_t trnMid                       :1;
      uint32_t reserved_1                   :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_RSP_FIFO_TRN_DATA_t;

typedef union HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_MSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_MSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_MSB_t;

typedef union HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_LSB_u
{
   struct HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_LSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_LSB_t;

typedef union HIM_HAWA_SVCI_PORT_STATUS_u
{
   struct HIM_HAWA_SVCI_PORT_STATUS_s
   {
      uint32_t cmdFifoLevel                 :4;
      uint32_t cmdFifoEmpty                 :1;
      uint32_t cmdFifoFull                  :1;
      uint32_t reserved_0                   :2;
      uint32_t wrRspFifoLevel               :2;
      uint32_t wrRspFifoEmpty               :1;
      uint32_t wrRspFifoFull                :1;
      uint32_t reserved_1                   :4;
      uint32_t rdRspFifoLevel               :5;
      uint32_t rdRspFifoEmpty               :1;
      uint32_t rdRspFifoFull                :1;
      uint32_t reserved_2                   :8;
      uint32_t portIdle                     :1;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_STATUS_t;

typedef union HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_PTR_STATUS_u
{
   struct HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_PTR_STATUS_s
   {
      uint32_t rdPtr                        :2;
      uint32_t reserved_0                   :14;
      uint32_t wrPtr                        :2;
      uint32_t reserved_1                   :14;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_PTR_STATUS_t;

typedef union HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_u
{
   struct HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_s
   {
      uint32_t tglFlg                       :1;



      uint32_t errFlg                       :1;

      uint32_t err                          :1;
      uint32_t reserved_0                   :1;
      uint32_t last                         :1;
      uint32_t reserved_1                   :3;
      uint32_t userTag                      :4;
      uint32_t reserved_2                   :20;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_t;

typedef struct HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_64_s
{
   HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_t  HHSPWRFS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_64_t;

typedef union HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_PTR_STATUS_u
{
   struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_PTR_STATUS_s
   {
      uint32_t rdPtr                        :5;
      uint32_t reserved_0                   :11;
       uint32_t     wrPtr                                               :5;
       uint32_t     reserved_1                                          :11;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_PTR_STATUS_t;

typedef union HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_u
{
   struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_s
   {
      uint32_t tglFlg                       :1;


      uint32_t reserved_0                   :1;
      uint32_t err                          :1;
      uint32_t reserved_1                   :1;
      uint32_t last                         :1;
      uint32_t reserved_2                   :11;
      uint32_t userTag                      :4;
      uint32_t reserved_3                   :12;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_t;

typedef struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_64_s
{
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_t  HHSPRRFS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_64_t;

typedef union HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_u
{
   struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_t;

typedef struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_64_s
{
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_t  HHSPRRFSDL;
   uint32_t                   reserved_32_63;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_64_t;

typedef union HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_u
{
   struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_t;

typedef struct HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_64_s
{
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_t  HHSPRRFSDM;
   uint32_t                   reserved_32_63;
} HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_64_t;

typedef union HIM_HAWA_SVCI_INT_SIGNAL_STATUS_u
{
   struct HIM_HAWA_SVCI_INT_SIGNAL_STATUS_s
   {
      uint32_t tranTag                      :4;
      uint32_t tranTagQ                     :4;
      uint32_t reserved_0                   :5;
      uint32_t trnWr                        :1;
      uint32_t trnWrQ                       :1;
      uint32_t trnStat                      :1;
      uint32_t trnCnt                       :16;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_INT_SIGNAL_STATUS_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_s
   {
      uint32_t cmdValid                     :1;
      uint32_t cmdReady                     :1;
      uint32_t cmdMid                       :1;
      uint32_t cmdTag                       :4;
      uint32_t cmdLen                       :3;
      uint32_t cmdOpc                       :3;
      uint32_t cmdPrty                      :2;
      uint32_t reserved_0                   :1;
      uint32_t cmdWbe                       :8;
      uint32_t reserved_1                   :8;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_ADDR_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_ADDR_s
   {
      uint32_t cmdAddr                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_ADDR_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_LSB_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_LSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_LSB_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_MSB_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_MSB_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_MSB_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_s
   {
      uint32_t rspValid                     :1;
      uint32_t rspReady                     :1;
      uint32_t rspMid                       :1;
      uint32_t rspTag                       :4;
      uint32_t reserved_0                   :1;
      uint32_t rspOpc                       :4;
      uint32_t rspPrty                      :2;
      uint32_t reserved_1                   :18;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_LSB_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_LSB_s
   {
      uint32_t rspData                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_LSB_t;

typedef union HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_MSB_u
{
   struct HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_MSB_s
   {
      uint32_t rspData                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_MSB_t;

typedef union HIM_HAWA_SVCI_REQ_SEL_u
{
   struct HIM_HAWA_SVCI_REQ_SEL_s
   {
      uint32_t reserved_0                   :31;
      uint32_t sel                          :1;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_SEL_t;

typedef union HIM_HAWA_SVCI_REQ_CMD_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_CMD_PHASE_s
   {
      uint32_t cmdTrig                      :1;
      uint32_t reserved_0                   :1;
      uint32_t cmdMid                       :1;
      uint32_t cmdTag                       :4;
      uint32_t cmdLen                       :3;
      uint32_t cmdOpc                       :3;
      uint32_t cmdPrty                      :2;
      uint32_t reserved_1                   :1;
      uint32_t cmdWbe                       :8;
      uint32_t reserved_2                   :7;
      uint32_t cmdAck                       :1;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_CMD_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_CMD_ADDR_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_CMD_ADDR_PHASE_s
   {
      uint32_t addr                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_CMD_ADDR_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_CMD_DATA_LSB_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_CMD_DATA_LSB_PHASE_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_CMD_DATA_LSB_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_CMD_DATA_MSB_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_CMD_DATA_MSB_PHASE_s
   {
      uint32_t data                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_CMD_DATA_MSB_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_RSP_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_RSP_PHASE_s
   {
      uint32_t reserved_0                   :2;
      uint32_t rspMid                       :1;
      uint32_t rspTag                       :4;
      uint32_t reserved_1                   :1;
      uint32_t rspOpc                       :4;
      uint32_t rspPrty                      :2;
      uint32_t reserved_2                   :17;
      uint32_t rspAck                       :1;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_RSP_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_RSP_DATA_LSB_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_RSP_DATA_LSB_PHASE_s
   {
      uint32_t rspData                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_RSP_DATA_LSB_PHASE_t;

typedef union HIM_HAWA_SVCI_REQ_RSP_DATA_MSB_PHASE_u
{
   struct HIM_HAWA_SVCI_REQ_RSP_DATA_MSB_PHASE_s
   {
      uint32_t rspData                      :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_SVCI_REQ_RSP_DATA_MSB_PHASE_t;

typedef union HIM_HAWA_MAX_ACC_BUF_SIZE_u
{
   struct HIM_HAWA_MAX_ACC_BUF_SIZE_s
   {
      uint32_t val                          :6;

      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_MAX_ACC_BUF_SIZE_t;

typedef union HIM_HAWA_ACC_BUF_SIZE_u
{
   struct HIM_HAWA_ACC_BUF_SIZE_s
   {
      uint32_t val                          :6;

      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_ACC_BUF_SIZE_t;

typedef struct HIM_HAWA_ACC_BUF_SIZE_64_s
{
   HIM_HAWA_ACC_BUF_SIZE_t  HHABS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_ACC_BUF_SIZE_64_t;

typedef union HIM_HAWA_ACC_BUF_SIZE_PH_u
{
   struct HIM_HAWA_ACC_BUF_SIZE_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_ACC_BUF_SIZE_PH_t;

typedef struct HIM_HAWA_ACC_BUF_SIZE_PH_64_s
{
   HIM_HAWA_ACC_BUF_SIZE_PH_t  HHABSP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_ACC_BUF_SIZE_PH_64_t;

typedef union HIM_HAWA_ACC_LIMIT_SIZE_u
{
   struct HIM_HAWA_ACC_LIMIT_SIZE_s
   {
      uint32_t val                          :6;
      uint32_t sts                          :1;
      uint32_t reserved_0                   :25;
   } bits;

   uint32_t all32;
} HIM_HAWA_ACC_LIMIT_SIZE_t;

typedef struct HIM_HAWA_ACC_LIMIT_SIZE_64_s
{
   HIM_HAWA_ACC_LIMIT_SIZE_t  HHALS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_ACC_LIMIT_SIZE_64_t;

typedef union HIM_HAWA_ACC_LIMIT_SIZE_PH_u
{
   struct HIM_HAWA_ACC_LIMIT_SIZE_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_ACC_LIMIT_SIZE_PH_t;

typedef struct HIM_HAWA_ACC_LIMIT_SIZE_PH_64_s
{
   HIM_HAWA_ACC_LIMIT_SIZE_PH_t  HHALSP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_ACC_LIMIT_SIZE_PH_64_t;

typedef union HIM_HAWA_MAX_CC_MASK_u
{
   struct HIM_HAWA_MAX_CC_MASK_s
   {
      uint32_t val                          :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_MAX_CC_MASK_t;

typedef struct HIM_HAWA_MAX_CC_MASK_64_s
{
   HIM_HAWA_MAX_CC_MASK_t  HHMCM;
   uint32_t                   reserved_32_63;
} HIM_HAWA_MAX_CC_MASK_64_t;

typedef union HIM_HAWA_MAX_CC_MASK_PH_u
{
   struct HIM_HAWA_MAX_CC_MASK_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_MAX_CC_MASK_PH_t;

typedef struct HIM_HAWA_MAX_CC_MASK_PH_64_s
{
   HIM_HAWA_MAX_CC_MASK_PH_t  HHMCMP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_MAX_CC_MASK_PH_64_t;

typedef union HIM_HAWA_MAX_CC_REF_u
{
   struct HIM_HAWA_MAX_CC_REF_s
   {
      uint32_t val                          :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_MAX_CC_REF_t;

typedef struct HIM_HAWA_MAX_CC_REF_64_s
{
   HIM_HAWA_MAX_CC_REF_t  HHMCR;
   uint32_t                   reserved_32_63;
} HIM_HAWA_MAX_CC_REF_64_t;

typedef union HIM_HAWA_MAX_CC_REF_PH_u
{
   struct HIM_HAWA_MAX_CC_REF_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_MAX_CC_REF_PH_t;

typedef struct HIM_HAWA_MAX_CC_REF_PH_64_s
{
   HIM_HAWA_MAX_CC_REF_PH_t  HHMCRP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_MAX_CC_REF_PH_64_t;

typedef union HIM_HAWA_CC_QW_0_u
{
   struct HIM_HAWA_CC_QW_0_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_0_t;

typedef union HIM_HAWA_CC_QW_1_u
{
   struct HIM_HAWA_CC_QW_1_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_1_t;

typedef union HIM_HAWA_CC_QW_2_u
{
   struct HIM_HAWA_CC_QW_2_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_2_t;

typedef union HIM_HAWA_CC_QW_3_u
{
   struct HIM_HAWA_CC_QW_3_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_3_t;

typedef union HIM_HAWA_CC_QW_4_u
{
   struct HIM_HAWA_CC_QW_4_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_4_t;

typedef union HIM_HAWA_CC_QW_5_u
{
   struct HIM_HAWA_CC_QW_5_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_5_t;

typedef union HIM_HAWA_CC_QW_6_u
{
   struct HIM_HAWA_CC_QW_6_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_6_t;

typedef union HIM_HAWA_CC_QW_7_u
{
   struct HIM_HAWA_CC_QW_7_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_QW_7_t;

typedef union HIM_HAWA_CC_ITAG2_u
{
   struct HIM_HAWA_CC_ITAG2_s
   {
      uint32_t msg                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CC_ITAG2_t;

typedef union HIM_HAWA_HA_CMD_NTF_u
{
   struct HIM_HAWA_HA_CMD_NTF_s
   {
      uint32_t addr                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_HA_CMD_NTF_t;

typedef union HIM_HAWA_HA_ORDER_ID_REL_u
{
   struct HIM_HAWA_HA_ORDER_ID_REL_s
   {
      uint32_t addr                         :32;
   } bits;

   uint32_t all32;
} HIM_HAWA_HA_ORDER_ID_REL_t;

typedef union HIM_HAWA_STR_FLUSH_MODE_u
{
   struct HIM_HAWA_STR_FLUSH_MODE_s
   {
      uint32_t en                           :1;






      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_FLUSH_MODE_t;

typedef struct HIM_HAWA_STR_FLUSH_MODE_64_s
{
   HIM_HAWA_STR_FLUSH_MODE_t  HHSFM;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_FLUSH_MODE_64_t;

typedef union HIM_HAWA_STR_FLUSH_MODE_PH_u
{
   struct HIM_HAWA_STR_FLUSH_MODE_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_FLUSH_MODE_PH_t;

typedef struct HIM_HAWA_STR_FLUSH_MODE_PH_64_s
{
   HIM_HAWA_STR_FLUSH_MODE_PH_t  HHSFMP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_FLUSH_MODE_PH_64_t;

typedef union HIM_HAWA_STR_BUF_TIMER_u
{
   struct HIM_HAWA_STR_BUF_TIMER_s
   {
      uint32_t thrsh                        :20;
      uint32_t thrshMultiply4               :1;
      uint32_t thrshMultiply16              :1;

      uint32_t reserved_0                   :10;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_BUF_TIMER_t;

typedef struct HIM_HAWA_STR_BUF_TIMER_64_s
{
   HIM_HAWA_STR_BUF_TIMER_t  HHSBT;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_BUF_TIMER_64_t;

typedef union HIM_HAWA_STR_BUF_TIMER_PH_u
{
   struct HIM_HAWA_STR_BUF_TIMER_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_BUF_TIMER_PH_t;

typedef struct HIM_HAWA_STR_BUF_TIMER_PH_64_s
{
   HIM_HAWA_STR_BUF_TIMER_PH_t  HHSBTP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_BUF_TIMER_PH_64_t;

typedef union HIM_HAWA_GLB_BUF_TIMER_u
{
   struct HIM_HAWA_GLB_BUF_TIMER_s
   {
      uint32_t thrsh                        :20;
      uint32_t thrshMultiply4               :1;
      uint32_t thrshMultiply16              :1;

      uint32_t reserved_0                   :10;
   } bits;

   uint32_t all32;
} HIM_HAWA_GLB_BUF_TIMER_t;

typedef union HIM_HAWA_NO_BUF_TIMER_u
{
   struct HIM_HAWA_NO_BUF_TIMER_s
   {
      uint32_t thrsh                        :20;
      uint32_t thrshMultiply4               :1;
      uint32_t thrshMultiply16              :1;

      uint32_t reserved_0                   :10;
   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_TIMER_t;

typedef union HIM_HAWA_WAIT_HWD_CTX_IDX_REL_TIMER_u
{
   struct HIM_HAWA_WAIT_HWD_CTX_IDX_REL_TIMER_s
   {
      uint32_t thrsh                        :20;
      uint32_t thrshMultiply4               :1;
      uint32_t thrshMultiply16              :1;

      uint32_t reserved_0                   :10;
   } bits;

   uint32_t all32;
} HIM_HAWA_WAIT_HWD_CTX_IDX_REL_TIMER_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_BADDR_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_BADDR_s
   {
      uint32_t reserved_0                   :3;
      uint32_t baddr                        :29;

   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_BADDR_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_BADDR_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_BADDR_t  HHSCNRB;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_BADDR_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_t  HHSCNRBP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_SIZE_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_SIZE_s
   {
      uint32_t size                         :9;





      uint32_t reserved_0                   :23;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_SIZE_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_SIZE_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_SIZE_t  HHSCNRS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_SIZE_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_t  HHSCNRSP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_RPTR_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_RPTR_s
   {
      uint32_t ptr                          :9;



      uint32_t reserved_0                   :22;
      uint32_t mode                         :1;

   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_RPTR_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_RPTR_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_RPTR_t  HHSCNRR;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_RPTR_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_t  HHSCNRRP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_WPTR_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_WPTR_s
   {
      uint32_t addr                         :32;



   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_WPTR_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_WPTR_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_WPTR_t  HHSCNRW;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_WPTR_64_t;

typedef union HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_u
{
   struct HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_t;

typedef struct HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_64_s
{
   HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_t  HHSCNRWP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_64_t;

typedef union HIM_HAWA_STR_HAWAQ_NTF_ADDR_u
{
   struct HIM_HAWA_STR_HAWAQ_NTF_ADDR_s
   {
      uint32_t addr                         :32;

   } bits;

   uint32_t all32;
} HIM_HAWA_STR_HAWAQ_NTF_ADDR_t;

typedef struct HIM_HAWA_STR_HAWAQ_NTF_ADDR_64_s
{
   HIM_HAWA_STR_HAWAQ_NTF_ADDR_t  HHSHNA;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_HAWAQ_NTF_ADDR_64_t;

typedef union HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_u
{
   struct HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_t;

typedef struct HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_64_s
{
   HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_t  HHSHNAP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_64_t;

typedef union HIM_HAWA_STR_AGING_CNT_INIT_u
{
   struct HIM_HAWA_STR_AGING_CNT_INIT_s
   {
      uint32_t val                          :26;

      uint32_t reserved_0                   :6;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_AGING_CNT_INIT_t;

typedef struct HIM_HAWA_STR_AGING_CNT_INIT_64_s
{
   HIM_HAWA_STR_AGING_CNT_INIT_t  HHSACI;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_AGING_CNT_INIT_64_t;

typedef union HIM_HAWA_STR_AGING_CNT_INIT_PH_u
{
   struct HIM_HAWA_STR_AGING_CNT_INIT_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_AGING_CNT_INIT_PH_t;

typedef struct HIM_HAWA_STR_AGING_CNT_INIT_PH_64_s
{
   HIM_HAWA_STR_AGING_CNT_INIT_PH_t  HHSACIP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_AGING_CNT_INIT_PH_64_t;

typedef union HIM_HAWA_GLB_TIMEOUT_CNT_u
{
   struct HIM_HAWA_GLB_TIMEOUT_CNT_s
   {
      uint32_t val                          :26;

      uint32_t reserved_0                   :6;
   } bits;

   uint32_t all32;
} HIM_HAWA_GLB_TIMEOUT_CNT_t;

typedef union HIM_HAWA_STR_AGING_CNT_u
{
   struct HIM_HAWA_STR_AGING_CNT_s
   {
      uint32_t val                          :26;

      uint32_t reserved_0                   :6;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_AGING_CNT_t;

typedef struct HIM_HAWA_STR_AGING_CNT_64_s
{
   HIM_HAWA_STR_AGING_CNT_t  HHSAC;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_AGING_CNT_64_t;

typedef union HIM_HAWA_STR_AGING_CNT_PH_u
{
   struct HIM_HAWA_STR_AGING_CNT_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_AGING_CNT_PH_t;

typedef struct HIM_HAWA_STR_AGING_CNT_PH_64_s
{
   HIM_HAWA_STR_AGING_CNT_PH_t  HHSACP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_AGING_CNT_PH_64_t;

typedef union HIM_HAWA_STR_TIMEOUT_CNT_u
{
   struct HIM_HAWA_STR_TIMEOUT_CNT_s
   {
      uint32_t val                          :26;

      uint32_t reserved_0                   :6;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_TIMEOUT_CNT_t;

typedef struct HIM_HAWA_STR_TIMEOUT_CNT_64_s
{
   HIM_HAWA_STR_TIMEOUT_CNT_t  HHSTC;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_TIMEOUT_CNT_64_t;

typedef union HIM_HAWA_STR_TIMEOUT_CNT_PH_u
{
   struct HIM_HAWA_STR_TIMEOUT_CNT_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_TIMEOUT_CNT_PH_t;

typedef struct HIM_HAWA_STR_TIMEOUT_CNT_PH_64_s
{
   HIM_HAWA_STR_TIMEOUT_CNT_PH_t  HHSTCP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_TIMEOUT_CNT_PH_64_t;

typedef union HIM_HAWA_NO_BUF_TIMEOUT_CNT_u
{
   struct HIM_HAWA_NO_BUF_TIMEOUT_CNT_s
   {
      uint32_t val                          :26;

      uint32_t reserved_0                   :6;
   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_TIMEOUT_CNT_t;

typedef union HIM_HAWA_CTX_NTF_RB_STS_u
{
   struct HIM_HAWA_CTX_NTF_RB_STS_s
   {
      uint32_t strAvailEntries              :9;

      uint32_t reserved_0                   :23;
   } bits;

   uint32_t all32;
} HIM_HAWA_CTX_NTF_RB_STS_t;

typedef struct HIM_HAWA_CTX_NTF_RB_STS_64_s
{
   HIM_HAWA_CTX_NTF_RB_STS_t  HHCNRS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_CTX_NTF_RB_STS_64_t;

typedef union HIM_HAWA_CTX_NTF_RB_STS_PH_u
{
   struct HIM_HAWA_CTX_NTF_RB_STS_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_CTX_NTF_RB_STS_PH_t;

typedef struct HIM_HAWA_CTX_NTF_RB_STS_PH_64_s
{
   HIM_HAWA_CTX_NTF_RB_STS_PH_t  HHCNRSP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_CTX_NTF_RB_STS_PH_64_t;



typedef union HIM_HAWA_STR_STS_u
{
   struct HIM_HAWA_STR_STS_s
   {
      uint32_t hwdCtxIdx                    :8;

      uint32_t hwdCtxCnt                    :8;

      uint32_t outstXfrCnt                  :9;

      uint32_t reserved_0                   :6;
      uint32_t bufActive                    :1;


   } bits;

   uint32_t all32;
} HIM_HAWA_STR_STS_t;

typedef struct HIM_HAWA_STR_STS_64_s
{
   HIM_HAWA_STR_STS_t  HHSS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_STS_64_t;

typedef union HIM_HAWA_STR_STS_PH_u
{
   struct HIM_HAWA_STR_STS_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_STS_PH_t;

typedef struct HIM_HAWA_STR_STS_PH_64_s
{
   HIM_HAWA_STR_STS_PH_t  HHSSP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_STS_PH_64_t;

typedef union HIM_HAWA_FW_ALLOC_HWD_CTX_u
{
   struct HIM_HAWA_FW_ALLOC_HWD_CTX_s
   {
      uint32_t idx                          :7;

      uint32_t reserved_0                   :25;
   } bits;

   uint32_t all32;
} HIM_HAWA_FW_ALLOC_HWD_CTX_t;

typedef union HIM_HAWA_STR_JOINT_REL_u
{
   struct HIM_HAWA_STR_JOINT_REL_s
   {
      uint32_t val                          :2;
      uint32_t reserved_0                   :30;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_JOINT_REL_t;

typedef struct HIM_HAWA_STR_JOINT_REL_64_s
{
   HIM_HAWA_STR_JOINT_REL_t  HHSJR;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_JOINT_REL_64_t;

typedef union HIM_HAWA_STR_JOINT_REL_PH_u
{
   struct HIM_HAWA_STR_JOINT_REL_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STR_JOINT_REL_PH_t;

typedef struct HIM_HAWA_STR_JOINT_REL_PH_64_s
{
   HIM_HAWA_STR_JOINT_REL_PH_t  HHSJRP;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STR_JOINT_REL_PH_64_t;

typedef union HIM_HAWA_FW_JOINT_REL_u
{
   struct HIM_HAWA_FW_JOINT_REL_s
   {
      uint32_t val                          :2;
      uint32_t reserved_0                   :30;
   } bits;

   uint32_t all32;
} HIM_HAWA_FW_JOINT_REL_t;

typedef union HIM_HAWA_PAUSE_MODE_u
{
   struct HIM_HAWA_PAUSE_MODE_s
   {
      uint32_t cmdBound                     :1;
      uint32_t hwdCtxBound                  :1;
      uint32_t reserved_0                   :30;
   } bits;

   uint32_t all32;
} HIM_HAWA_PAUSE_MODE_t;

typedef union HIM_HAWA_NO_BUF_FLUSH_ID_u
{
   struct HIM_HAWA_NO_BUF_FLUSH_ID_s
   {
      uint32_t thread                       :3;
      uint32_t client                       :3;
      uint32_t reserved_0                   :26;
   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_FLUSH_ID_t;

typedef union HIM_HAWA_NO_BUF_FLUSH_u
{
   struct HIM_HAWA_NO_BUF_FLUSH_s
   {
      uint32_t rsCancellReq                 :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_FLUSH_t;

typedef union HIM_HAWA_NO_BUF_FLUSH_END_u
{
   struct HIM_HAWA_NO_BUF_FLUSH_END_s
   {
      uint32_t end                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_FLUSH_END_t;

typedef union HIM_HAWA_NO_BUF_ADDR_u
{
   struct HIM_HAWA_NO_BUF_ADDR_s
   {
      uint32_t addr                         :32;

   } bits;

   uint32_t all32;
} HIM_HAWA_NO_BUF_ADDR_t;

typedef union HIM_HAWA_CTRL_2_u
{
   struct HIM_HAWA_CTRL_2_s
   {
      uint32_t rwCmdMode                    :1;

      uint32_t reserved_0                   :1;
      uint32_t ramDiskMode                  :1;


      uint32_t reserved_1                   :1;
      uint32_t setEvtBufAllocEn             :1;
      uint32_t setEvtHabmCmplEn             :1;
      uint32_t setEvtFlushEn                :1;
      uint32_t reserved_2                   :25;
   } bits;

   uint32_t all32;
} HIM_HAWA_CTRL_2_t;

typedef union HIM_HAWA_STS_u
{
   struct HIM_HAWA_STS_s
   {
      uint32_t idleSoft                     :1;
      uint32_t idleHard                     :1;
      uint32_t waitHwdCtxIdxRel             :1;

      uint32_t waitRsDone                   :1;
      uint32_t waitHwdCtxFetch              :1;
      uint32_t waitSramRbSlot               :1;
      uint32_t waitTmTimerTo                :1;
      uint32_t waitHabmDescRbSlot           :1;
      uint32_t waitCtxNtfRbSlot             :1;
      uint32_t waitDramDescRbSlot           :1;
      uint32_t flushActive                  :1;
      uint32_t reserved_0                   :3;
      uint32_t habmCmplFifoFull             :1;
      uint32_t dramCtrlCmplFifoFull         :1;
      uint32_t habmDescRbFull               :1;
      uint32_t sramUdbufFull                :1;
      uint32_t sramMdbufFull                :1;
      uint32_t dramDescRbFull               :1;
      uint32_t waitDramCtrlCmplMsg          :1;
      uint32_t waitHabmCmplMsg              :1;
      uint32_t idleWrExe                    :1;
      uint32_t reserved_1                   :9;
   } bits;

   uint32_t all32;
} HIM_HAWA_STS_t;

typedef union HIM_HAWA_INT_STS_u
{
   struct HIM_HAWA_INT_STS_s
   {
      uint32_t fwAllocHwdCtxIdxReady        :1;
      uint32_t hwdCtxSlotsNumChangeFin      :1;
      uint32_t forceFlushCmpl               :1;

      uint32_t gracefulFlushCmpl            :1;

      uint32_t svciErr                      :1;

      uint32_t pauseCmdBound                :1;
      uint32_t pauseHwdCtxBound             :1;
      uint32_t rsAllocCancReqDrop           :1;
      uint32_t rsAllocCancReqCmpl           :1;
      uint32_t glbTimeout                   :1;
      uint32_t allStrCtxNtfRbNotEmpty       :1;



      uint32_t allStrHwdCtxQueued           :1;



      uint32_t allStrAgingTimeout           :1;



      uint32_t allStrTimeout                :1;



      uint32_t waitHwdCtxIdxRelTimeout      :1;
      uint32_t reserved_0                   :17;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_STS_t;

typedef struct HIM_HAWA_INT_STS_64_s
{
   HIM_HAWA_INT_STS_t  HHIS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_STS_64_t;

typedef union HIM_HAWA_INT_EN_u
{
   struct HIM_HAWA_INT_EN_s
   {
      uint32_t fwAllocHwdCtxIdxReady        :1;
      uint32_t hwdCtxSlotsNumChangeFin      :1;
      uint32_t forceFlushCmpl               :1;
      uint32_t gracefulFlushCmpl            :1;
      uint32_t svciErr                      :1;
      uint32_t pauseCmdBound                :1;
      uint32_t pauseHwdCtxBound             :1;
      uint32_t rsAllocCancReqDrop           :1;
      uint32_t rsAllocCancReqCmpl           :1;
      uint32_t glbTimeout                   :1;
      uint32_t allStrCtxNtfRbNotEmpty       :1;
      uint32_t allStrHwdCtxQueued           :1;
      uint32_t allStrAgingTimeout           :1;
      uint32_t allStrTimeout                :1;
      uint32_t waitHwdCtxIdxRelTimeout      :1;
      uint32_t reserved_0                   :17;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_EN_t;

typedef struct HIM_HAWA_INT_EN_64_s
{
   HIM_HAWA_INT_EN_t  HHIE;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_EN_64_t;

typedef union HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_u
{
   struct HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_s
   {
      uint32_t bufferNotEmpty               :5;

      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_t;

typedef struct HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_64_s
{
   HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_t  HHISSCNRNE;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_64_t;

typedef union HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_u
{
   struct HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_s
   {
      uint32_t en                           :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_t;

typedef struct HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_64_s
{
   HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_t  HHIESCNRNE;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_64_t;

typedef union HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_u
{
   struct HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_s
   {
      uint32_t close                        :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_t;

typedef struct HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_64_s
{
   HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_t  HHISSHCQ;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_64_t;

typedef union HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_u
{
   struct HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_s
   {
      uint32_t en                           :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_t;

typedef struct HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_64_s
{
   HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_t  HHIEHCQ;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_64_t;

typedef union HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_u
{
   struct HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_s
   {
      uint32_t flushOccurred                :5;

      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_t;

typedef struct HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_64_s
{
   HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_t  HHISSAT;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_64_t;

typedef union HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_u
{
   struct HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_s
   {
      uint32_t en                           :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_t;

typedef struct HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_64_s
{
   HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_t  HHIESAT;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_64_t;

typedef union HIM_HAWA_INT_STS_STR_TIMEOUT_u
{
   struct HIM_HAWA_INT_STS_STR_TIMEOUT_s
   {
      uint32_t bufferTOevent                :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_STS_STR_TIMEOUT_t;

typedef struct HIM_HAWA_INT_STS_STR_TIMEOUT_64_s
{
   HIM_HAWA_INT_STS_STR_TIMEOUT_t  HHISST;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_STS_STR_TIMEOUT_64_t;

typedef union HIM_HAWA_INT_EN_STR_TIMEOUT_u
{
   struct HIM_HAWA_INT_EN_STR_TIMEOUT_s
   {
      uint32_t en                           :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_INT_EN_STR_TIMEOUT_t;

typedef struct HIM_HAWA_INT_EN_STR_TIMEOUT_64_s
{
   HIM_HAWA_INT_EN_STR_TIMEOUT_t  HHIEST;
   uint32_t                   reserved_32_63;
} HIM_HAWA_INT_EN_STR_TIMEOUT_64_t;

typedef union HIM_HAWA_STS_2_u
{
   struct HIM_HAWA_STS_2_s
   {
      uint32_t strSessionActive             :1;


      uint32_t strWaitHwdCtxQueue           :1;


      uint32_t strCtxNtfRbFull              :1;
      uint32_t reserved_0                   :29;
   } bits;

   uint32_t all32;
} HIM_HAWA_STS_2_t;

typedef struct HIM_HAWA_STS_2_64_s
{
   HIM_HAWA_STS_2_t  HHS2;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STS_2_64_t;

typedef union HIM_HAWA_STS_2_PH_u
{
   struct HIM_HAWA_STS_2_PH_s
   {
      uint32_t rsvd                         :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_STS_2_PH_t;

typedef struct HIM_HAWA_STS_2_PH_64_s
{
   HIM_HAWA_STS_2_PH_t  HHS2P;
   uint32_t                   reserved_32_63;
} HIM_HAWA_STS_2_PH_64_t;

typedef union HIM_HAWA_HWD_CTX_ALLOC_STS_u
{
   struct HIM_HAWA_HWD_CTX_ALLOC_STS_s
   {
      uint32_t val                          :32;



   } bits;

   uint32_t all32;
} HIM_HAWA_HWD_CTX_ALLOC_STS_t;

typedef struct HIM_HAWA_HWD_CTX_ALLOC_STS_64_s
{
   HIM_HAWA_HWD_CTX_ALLOC_STS_t  HHHCAS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_HWD_CTX_ALLOC_STS_64_t;

typedef union HIM_HAWA_JOINT_REL_STS_u
{
   struct HIM_HAWA_JOINT_REL_STS_s
   {
      uint32_t val                          :32;








   } bits;

   uint32_t all32;
} HIM_HAWA_JOINT_REL_STS_t;

typedef struct HIM_HAWA_JOINT_REL_STS_64_s
{
   HIM_HAWA_JOINT_REL_STS_t  HHJRS;
   uint32_t                   reserved_32_63;
} HIM_HAWA_JOINT_REL_STS_64_t;

typedef union HIM_HAWA_CMD_CTX_SIZE_u
{
   struct HIM_HAWA_CMD_CTX_SIZE_s
   {
      uint32_t val                          :5;
      uint32_t reserved_0                   :27;
   } bits;

   uint32_t all32;
} HIM_HAWA_CMD_CTX_SIZE_t;

typedef union HIM_HAWA_DBG_HABM_QUEUE_REQ_u
{
   struct HIM_HAWA_DBG_HABM_QUEUE_REQ_s
   {
      uint32_t en                           :1;
      uint32_t reserved_0                   :2;
      uint32_t addr                         :29;
   } bits;

   uint32_t all32;
} HIM_HAWA_DBG_HABM_QUEUE_REQ_t;

typedef union HIM_HAWA_DBG_HABM_QUEUE_END_u
{
   struct HIM_HAWA_DBG_HABM_QUEUE_END_s
   {
      uint32_t end                          :1;
      uint32_t reserved_0                   :31;
   } bits;

   uint32_t all32;
} HIM_HAWA_DBG_HABM_QUEUE_END_t;

typedef union HIM_HAWA_SPARE1_u
{
   struct HIM_HAWA_SPARE1_s
   {
      uint32_t val                          :8;
      uint32_t reserved_0                   :24;
   } bits;

   uint32_t all32;
} HIM_HAWA_SPARE1_t;

typedef union HIM_HAWA_SPARE2_u
{
   struct HIM_HAWA_SPARE2_s
   {
      uint32_t val                          :8;
      uint32_t reserved_0                   :24;
   } bits;

   uint32_t all32;
} HIM_HAWA_SPARE2_t;




typedef struct HAWA_REGS_s
{
   HIM_HAWA_CTRL_t                                     HIM_HAWA_CTRL;
   HwRegField32_t                                      Reserved0;
   HIM_HAWA_CMD_CTX_BADDR_t                            HIM_HAWA_CMD_CTX_BADDR;
   HwRegField32_t                                      Reserved1;
   HIM_HAWA_HWD_CTX_BADDR_t                            HIM_HAWA_HWD_CTX_BADDR;
   HwRegField32_t                                      Reserved2;
   HIM_HAWA_HWD_CTX_SLOTS_NUM_t                        HIM_HAWA_HWD_CTX_SLOTS_NUM;
   HwRegField32_t                                      Reserved3;
   HIM_HAWA_HWD_CTX_SLOTS_NUM_CHANGE_t                 HIM_HAWA_HWD_CTX_SLOTS_NUM_CHANGE;
   HwRegField32_t                                      Reserved4;
   HIM_HAWA_HWD_CTX_REL_IDX_t                          HIM_HAWA_HWD_CTX_REL_IDX;
   HwRegField32_t                                      Reserved5;
   HIM_HAWA_FMU_SIZE_t                                 HIM_HAWA_FMU_SIZE;
   HwRegField32_t                                      Reserved6;
   HIM_HAWA_CMD_CLASSIF_t                              HIM_HAWA_CMD_CLASSIF;
   HwRegField32_t                                      Reserved7;
   HIM_HAWA_BUF_ALLOC_STEP1_ADDR_t                     HIM_HAWA_BUF_ALLOC_STEP1_ADDR;
   HwRegField32_t                                      Reserved8;
   HIM_HAWA_BUF_ALLOC_STEP2_ADDR_t                     HIM_HAWA_BUF_ALLOC_STEP2_ADDR;
   HwRegField32_t                                      Reserved9;
   HIM_HAWA_BUF_ALLOC_STEP2_DATA_t                     HIM_HAWA_BUF_ALLOC_STEP2_DATA;
   HwRegField32_t                                      Reserved10;
   HIM_HAWA_RS_DONE_t                                  HIM_HAWA_RS_DONE;
   HwRegField32_t                                      Reserved11;
   HIM_HAWA_DATA_XFR_DESC_1_t                          HIM_HAWA_DATA_XFR_DESC_1;
   HwRegField32_t                                      Reserved12;
   HIM_HAWA_DATA_XFR_DESC_2_t                          HIM_HAWA_DATA_XFR_DESC_2;
   HwRegField32_t                                      Reserved13;
   HIM_HAWA_DATA_XFR_DESC_3_t                          HIM_HAWA_DATA_XFR_DESC_3;
   HwRegField32_t                                      Reserved14;
   HIM_HAWA_DATA_XFR_DESC_4_t                          HIM_HAWA_DATA_XFR_DESC_4;
   HwRegField32_t                                      Reserved15;
   HIM_HAWA_DATA_XFR_DESC_5_t                          HIM_HAWA_DATA_XFR_DESC_5;
   HwRegField32_t                                      Reserved16;
   HIM_HAWA_TM_TIMER_t                                 HIM_HAWA_TM_TIMER;

   HwRegField32_t                                      Reserved17;
   HIM_HAWA_HABM_DESC_RB_BADDR_t                       HIM_HAWA_HABM_DESC_RB_BADDR;
   HwRegField32_t                                      Reserved18;
   HIM_HAWA_HABM_DESC_RB_SIZE_t                        HIM_HAWA_HABM_DESC_RB_SIZE;
   HwRegField32_t                                      Reserved19;
   HIM_HAWA_HABM_DESC_RB_WPTR_t                        HIM_HAWA_HABM_DESC_RB_WPTR;
   HwRegField32_t                                      Reserved20;
   HIM_HAWA_HABM_DESC_RB_RPTR_t                        HIM_HAWA_HABM_DESC_RB_RPTR;
   HwRegField32_t                                      Reserved21;
   HIM_HAWA_HABM_CMPL_t                                HIM_HAWA_HABM_CMPL;
   HwRegField32_t                                      Reserved22;
   HIM_HAWA_DRAM_CTRL_CMPL_t                           HIM_HAWA_DRAM_CTRL_CMPL;
   HwRegField32_t                                      Reserved23;
   HIM_HAWA_SRAM_UDBUF_BADDR_t                         HIM_HAWA_SRAM_UDBUF_BADDR;
   HwRegField32_t                                      Reserved24;
   HIM_HAWA_SRAM_UDBUF_SIZE_t                          HIM_HAWA_SRAM_UDBUF_SIZE;
   HwRegField32_t                                      Reserved25;
   HIM_HAWA_SRAM_UDBUF_WPTR_t                          HIM_HAWA_SRAM_UDBUF_WPTR;
   HwRegField32_t                                      Reserved26;
   HIM_HAWA_SRAM_UDBUF_RPTR_t                          HIM_HAWA_SRAM_UDBUF_RPTR;
   HwRegField32_t                                      Reserved27;
   HIM_HAWA_SRAM_MDBUF_BADDR_t                         HIM_HAWA_SRAM_MDBUF_BADDR;
   HwRegField32_t                                      Reserved28;
   HIM_HAWA_SRAM_MDBUF_SIZE_t                          HIM_HAWA_SRAM_MDBUF_SIZE;
   HwRegField32_t                                      Reserved29;
   HIM_HAWA_SRAM_MDBUF_WPTR_t                          HIM_HAWA_SRAM_MDBUF_WPTR;
   HwRegField32_t                                      Reserved30;
   HIM_HAWA_SRAM_MDBUF_RPTR_t                          HIM_HAWA_SRAM_MDBUF_RPTR;
   HwRegField32_t                                      Reserved31;
   HIM_HAWA_DRAM_DESC_RB_BADDR_t                       HIM_HAWA_DRAM_DESC_RB_BADDR;
   HwRegField32_t                                      Reserved32;
   HIM_HAWA_DRAM_DESC_RB_SIZE_t                        HIM_HAWA_DRAM_DESC_RB_SIZE;
   HwRegField32_t                                      Reserved33;
   HIM_HAWA_DRAM_DESC_RB_WPTR_t                        HIM_HAWA_DRAM_DESC_RB_WPTR;
   HwRegField32_t                                      Reserved34;
   HIM_HAWA_DRAM_DESC_RB_RPTR_t                        HIM_HAWA_DRAM_DESC_RB_RPTR;
   HwRegField32_t                                      Reserved35;
   HIM_HAWA_DRAM_CTRL_TRG_ADDR_t                       HIM_HAWA_DRAM_CTRL_TRG_ADDR;
   HwRegField32_t                                      Reserved36;
   HIM_HAWA_DRAM_CTRL_TRG_MSG_t                        HIM_HAWA_DRAM_CTRL_TRG_MSG;
   HwRegField32_t                                      Reserved37;
   HIM_HAWA_DEBUG_WR_EXE_FLOW_t                        HIM_HAWA_DEBUG_WR_EXE_FLOW;
   HwRegField32_t                                      Reserved38;
   HIM_HAWA_DEBUG_HABM_CMPL_FLOW_t                     HIM_HAWA_DEBUG_HABM_CMPL_FLOW;
   HwRegField32_t                                      Reserved39;
   HIM_HAWA_DEBUG_DRAM_CTRL_CMPL_FLOW_t                HIM_HAWA_DEBUG_DRAM_CTRL_CMPL_FLOW;
   HwRegField32_t                                      Reserved40;
   HIM_HAWA_SVCI_ERR_ADDR_t                            HIM_HAWA_SVCI_ERR_ADDR;
   HwRegField32_t                                      Reserved41;
   HIM_HAWA_SVCI_ERR_t                                 HIM_HAWA_SVCI_ERR;
   HwRegField32_t                                      Reserved42;
   HIM_HAWA_OVP_CTRL_t                                 HIM_HAWA_OVP_CTRL;
   HwRegField32_t                                      Reserved43;
   HIM_HAWA_DEBUG_CTRL_t                               HIM_HAWA_DEBUG_CTRL;

   HwRegField32_t                                      Reserved44;
   HIM_HAWA_DEBUG_PDMA_CMD_FIFO_t                      HIM_HAWA_DEBUG_PDMA_CMD_FIFO;

   HwRegField32_t                                      Reserved45;
   HIM_HAWA_DEBUG_PDMA_CMD_FIFO_TRN_DATA_t             HIM_HAWA_DEBUG_PDMA_CMD_FIFO_TRN_DATA;
   HwRegField32_t                                      Reserved46;
   HIM_HAWA_DEBUG_PDMA_CMD_FIFO_ADDR_t                 HIM_HAWA_DEBUG_PDMA_CMD_FIFO_ADDR;
   HwRegField32_t                                      Reserved47;
   HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_t               HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO;

   HwRegField32_t                                      Reserved48;
   HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_TRN_DATA_t      HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_TRN_DATA;
   HwRegField32_t                                      Reserved49;
   HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_ADDR_t          HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_ADDR;
   HwRegField32_t                                      Reserved50;
   HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_MSB_t      HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_MSB;
   HwRegField32_t                                      Reserved51;
   HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_LSB_t      HIM_HAWA_DEBUG_SVCI_NON_PST_WR_FIFO_DATA_LSB;
   HwRegField32_t                                      Reserved52;
   HIM_HAWA_DEBUG_SVCI_CMD_FIFO_t                      HIM_HAWA_DEBUG_SVCI_CMD_FIFO;

   HwRegField32_t                                      Reserved53;
   HIM_HAWA_DEBUG_SVCI_CMD_FIFO_TRN_DATA_t             HIM_HAWA_DEBUG_SVCI_CMD_FIFO_TRN_DATA;
   HwRegField32_t                                      Reserved54;
   HIM_HAWA_DEBUG_SVCI_CMD_FIFO_ADDR_t                 HIM_HAWA_DEBUG_SVCI_CMD_FIFO_ADDR;
   HwRegField32_t                                      Reserved55;
   HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_MSB_t             HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_MSB;

   HwRegField32_t                                      Reserved56;
   HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_LSB_t             HIM_HAWA_DEBUG_SVCI_CMD_FIFO_DATA_LSB;

   HwRegField32_t                                      Reserved57;
   HIM_HAWA_DEBUG_SVCI_RSP_FIFO_t                      HIM_HAWA_DEBUG_SVCI_RSP_FIFO;

   HwRegField32_t                                      Reserved58;
   HIM_HAWA_DEBUG_SVCI_RSP_FIFO_TRN_DATA_t             HIM_HAWA_DEBUG_SVCI_RSP_FIFO_TRN_DATA;
   HwRegField32_t                                      Reserved59;
   HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_MSB_t             HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_MSB;

   HwRegField32_t                                      Reserved60;
   HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_LSB_t             HIM_HAWA_DEBUG_SVCI_RSP_FIFO_DATA_LSB;

   HwRegField32_t                                      Reserved61;
   HIM_HAWA_SVCI_PORT_STATUS_t                         HIM_HAWA_SVCI_PORT_STATUS;
   HwRegField32_t                                      Reserved62;
   HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_PTR_STATUS_t         HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_PTR_STATUS;
   HwRegField32_t                                      Reserved63;
   HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS_64_t          HIM_HAWA_SVCI_PORT_WR_RSP_FIFO_STATUS[ 0x2 ];

   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_PTR_STATUS_t         HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_PTR_STATUS;
   HwRegField32_t                                      Reserved64;
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_64_t          HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS[ 0x10 ];
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB_64_t HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_LSB[ 0x10 ];
   HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB_64_t HIM_HAWA_SVCI_PORT_RD_RSP_FIFO_STATUS_DATA_MSB[ 0x10 ];
   HIM_HAWA_SVCI_INT_SIGNAL_STATUS_t                   HIM_HAWA_SVCI_INT_SIGNAL_STATUS;
   HwRegField32_t                                      Reserved65;
   HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_t                 HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE;
   HwRegField32_t                                      Reserved66;
   HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_ADDR_t            HIM_HAWA_SVCI_IF_STATUS_CMD_PHASE_ADDR;
   HwRegField32_t                                      Reserved67;
   HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_LSB_t              HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_LSB;
   HwRegField32_t                                      Reserved68;
   HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_MSB_t              HIM_HAWA_SVCI_IF_STATUS_CMD_DATA_MSB;
   HwRegField32_t                                      Reserved69;
   HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_t                 HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE;
   HwRegField32_t                                      Reserved70;
   HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_LSB_t        HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_LSB;
   HwRegField32_t                                      Reserved71;
   HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_MSB_t        HIM_HAWA_SVCI_IF_STATUS_RSP_PHASE_DATA_MSB;
   HwRegField32_t                                      Reserved72;
   HIM_HAWA_SVCI_REQ_SEL_t                             HIM_HAWA_SVCI_REQ_SEL;


   HwRegField32_t                                      Reserved73;
   HIM_HAWA_SVCI_REQ_CMD_PHASE_t                       HIM_HAWA_SVCI_REQ_CMD_PHASE;



   HwRegField32_t                                      Reserved74;
   HIM_HAWA_SVCI_REQ_CMD_ADDR_PHASE_t                  HIM_HAWA_SVCI_REQ_CMD_ADDR_PHASE;
   HwRegField32_t                                      Reserved75;
   HIM_HAWA_SVCI_REQ_CMD_DATA_LSB_PHASE_t              HIM_HAWA_SVCI_REQ_CMD_DATA_LSB_PHASE;
   HwRegField32_t                                      Reserved76;
   HIM_HAWA_SVCI_REQ_CMD_DATA_MSB_PHASE_t              HIM_HAWA_SVCI_REQ_CMD_DATA_MSB_PHASE;
   HwRegField32_t                                      Reserved77;
   HIM_HAWA_SVCI_REQ_RSP_PHASE_t                       HIM_HAWA_SVCI_REQ_RSP_PHASE;


   HwRegField32_t                                      Reserved78;
   HIM_HAWA_SVCI_REQ_RSP_DATA_LSB_PHASE_t              HIM_HAWA_SVCI_REQ_RSP_DATA_LSB_PHASE;
   HwRegField32_t                                      Reserved79;
   HIM_HAWA_SVCI_REQ_RSP_DATA_MSB_PHASE_t              HIM_HAWA_SVCI_REQ_RSP_DATA_MSB_PHASE;
   HwRegField32_t                                      Reserved80;
   HIM_HAWA_MAX_ACC_BUF_SIZE_t                         HIM_HAWA_MAX_ACC_BUF_SIZE;
   HwRegField32_t                                      Reserved81;
   HIM_HAWA_ACC_BUF_SIZE_64_t                          HIM_HAWA_ACC_BUF_SIZE[ 0x5 ];
   HIM_HAWA_ACC_BUF_SIZE_PH_64_t                       HIM_HAWA_ACC_BUF_SIZE_PH[ 0xB ];
   HIM_HAWA_ACC_LIMIT_SIZE_64_t                        HIM_HAWA_ACC_LIMIT_SIZE[ 0x5 ];
   HIM_HAWA_ACC_LIMIT_SIZE_PH_64_t                     HIM_HAWA_ACC_LIMIT_SIZE_PH[ 0xB ];
   HIM_HAWA_MAX_CC_MASK_64_t                           HIM_HAWA_MAX_CC_MASK[ 0x5 ];
   HIM_HAWA_MAX_CC_MASK_PH_64_t                        HIM_HAWA_MAX_CC_MASK_PH[ 0xB ];
   HIM_HAWA_MAX_CC_REF_64_t                            HIM_HAWA_MAX_CC_REF[ 0x5 ];
   HIM_HAWA_MAX_CC_REF_PH_64_t                         HIM_HAWA_MAX_CC_REF_PH[ 0xB ];
   HIM_HAWA_CC_QW_0_t                                  HIM_HAWA_CC_QW_0;
   HwRegField32_t                                      Reserved82;
   HIM_HAWA_CC_QW_1_t                                  HIM_HAWA_CC_QW_1;
   HwRegField32_t                                      Reserved83;
   HIM_HAWA_CC_QW_2_t                                  HIM_HAWA_CC_QW_2;
   HwRegField32_t                                      Reserved84;
   HIM_HAWA_CC_QW_3_t                                  HIM_HAWA_CC_QW_3;
   HwRegField32_t                                      Reserved85;
   HIM_HAWA_CC_QW_4_t                                  HIM_HAWA_CC_QW_4;
   HwRegField32_t                                      Reserved86;
   HIM_HAWA_CC_QW_5_t                                  HIM_HAWA_CC_QW_5;
   HwRegField32_t                                      Reserved87;
   HIM_HAWA_CC_QW_6_t                                  HIM_HAWA_CC_QW_6;
   HwRegField32_t                                      Reserved88;
   HIM_HAWA_CC_QW_7_t                                  HIM_HAWA_CC_QW_7;
   HwRegField32_t                                      Reserved89;
   HIM_HAWA_CC_ITAG2_t                                 HIM_HAWA_CC_ITAG2;
   HwRegField32_t                                      Reserved90;
   HIM_HAWA_HA_CMD_NTF_t                               HIM_HAWA_HA_CMD_NTF;
   HwRegField32_t                                      Reserved91;
   HIM_HAWA_HA_ORDER_ID_REL_t                          HIM_HAWA_HA_ORDER_ID_REL;
   HwRegField32_t                                      Reserved92;
   HIM_HAWA_STR_FLUSH_MODE_64_t                        HIM_HAWA_STR_FLUSH_MODE[ 0x5 ];
   HIM_HAWA_STR_FLUSH_MODE_PH_64_t                     HIM_HAWA_STR_FLUSH_MODE_PH[ 0xB ];
   HIM_HAWA_STR_BUF_TIMER_64_t                         HIM_HAWA_STR_BUF_TIMER[ 0x5 ];

   HIM_HAWA_STR_BUF_TIMER_PH_64_t                      HIM_HAWA_STR_BUF_TIMER_PH[ 0xB ];
   HIM_HAWA_GLB_BUF_TIMER_t                            HIM_HAWA_GLB_BUF_TIMER;

   HwRegField32_t                                      Reserved93;
   HIM_HAWA_NO_BUF_TIMER_t                             HIM_HAWA_NO_BUF_TIMER;

   HwRegField32_t                                      Reserved94;
   HIM_HAWA_WAIT_HWD_CTX_IDX_REL_TIMER_t               HIM_HAWA_WAIT_HWD_CTX_IDX_REL_TIMER;

   HwRegField32_t                                      Reserved95;
   HIM_HAWA_STR_CTX_NTF_RB_BADDR_64_t                  HIM_HAWA_STR_CTX_NTF_RB_BADDR[ 0x5 ];
   HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH_64_t               HIM_HAWA_STR_CTX_NTF_RB_BADDR_PH[ 0xB ];
   HIM_HAWA_STR_CTX_NTF_RB_SIZE_64_t                   HIM_HAWA_STR_CTX_NTF_RB_SIZE[ 0x5 ];
   HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH_64_t                HIM_HAWA_STR_CTX_NTF_RB_SIZE_PH[ 0xB ];
   HIM_HAWA_STR_CTX_NTF_RB_RPTR_64_t                   HIM_HAWA_STR_CTX_NTF_RB_RPTR[ 0x5 ];

   HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH_64_t                HIM_HAWA_STR_CTX_NTF_RB_RPTR_PH[ 0xB ];
   HIM_HAWA_STR_CTX_NTF_RB_WPTR_64_t                   HIM_HAWA_STR_CTX_NTF_RB_WPTR[ 0x5 ];
   HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH_64_t                HIM_HAWA_STR_CTX_NTF_RB_WPTR_PH[ 0xB ];
   HIM_HAWA_STR_HAWAQ_NTF_ADDR_64_t                    HIM_HAWA_STR_HAWAQ_NTF_ADDR[ 0x5 ];
   HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH_64_t                 HIM_HAWA_STR_HAWAQ_NTF_ADDR_PH[ 0xB ];
   HIM_HAWA_STR_AGING_CNT_INIT_64_t                    HIM_HAWA_STR_AGING_CNT_INIT[ 0x5 ];

   HIM_HAWA_STR_AGING_CNT_INIT_PH_64_t                 HIM_HAWA_STR_AGING_CNT_INIT_PH[ 0xB ];
   HIM_HAWA_GLB_TIMEOUT_CNT_t                          HIM_HAWA_GLB_TIMEOUT_CNT;
   HwRegField32_t                                      Reserved96;
   HIM_HAWA_STR_AGING_CNT_64_t                         HIM_HAWA_STR_AGING_CNT[ 0x5 ];
   HIM_HAWA_STR_AGING_CNT_PH_64_t                      HIM_HAWA_STR_AGING_CNT_PH[ 0xB ];
   HIM_HAWA_STR_TIMEOUT_CNT_64_t                       HIM_HAWA_STR_TIMEOUT_CNT[ 0x5 ];
   HIM_HAWA_STR_TIMEOUT_CNT_PH_64_t                    HIM_HAWA_STR_TIMEOUT_CNT_PH[ 0xB ];
   HIM_HAWA_NO_BUF_TIMEOUT_CNT_t                       HIM_HAWA_NO_BUF_TIMEOUT_CNT;
   HwRegField32_t                                      Reserved97;
   HIM_HAWA_CTX_NTF_RB_STS_64_t                        HIM_HAWA_CTX_NTF_RB_STS[ 0x5 ];
   HIM_HAWA_CTX_NTF_RB_STS_PH_64_t                     HIM_HAWA_CTX_NTF_RB_STS_PH[ 0xB ];
   HIM_HAWA_STR_STS_64_t                               HIM_HAWA_STR_STS[ 0x5 ];
   HIM_HAWA_STR_STS_PH_64_t                            HIM_HAWA_STR_STS_PH[ 0xB ];
   HIM_HAWA_FW_ALLOC_HWD_CTX_t                         HIM_HAWA_FW_ALLOC_HWD_CTX;
   HwRegField32_t                                      Reserved98;
   HIM_HAWA_STR_JOINT_REL_64_t                         HIM_HAWA_STR_JOINT_REL[ 0x5 ];
   HIM_HAWA_STR_JOINT_REL_PH_64_t                      HIM_HAWA_STR_JOINT_REL_PH[ 0xB ];
   HIM_HAWA_FW_JOINT_REL_t                             HIM_HAWA_FW_JOINT_REL;
   HwRegField32_t                                      Reserved99;
   HIM_HAWA_PAUSE_MODE_t                               HIM_HAWA_PAUSE_MODE;
   HwRegField32_t                                      Reserved100;
   HIM_HAWA_NO_BUF_FLUSH_ID_t                          HIM_HAWA_NO_BUF_FLUSH_ID;
   HwRegField32_t                                      Reserved101;
   HIM_HAWA_NO_BUF_FLUSH_t                             HIM_HAWA_NO_BUF_FLUSH;
   HwRegField32_t                                      Reserved102;
   HIM_HAWA_NO_BUF_FLUSH_END_t                         HIM_HAWA_NO_BUF_FLUSH_END;
   HwRegField32_t                                      Reserved103;
   HIM_HAWA_NO_BUF_ADDR_t                              HIM_HAWA_NO_BUF_ADDR;
   HwRegField32_t                                      Reserved104;
   HIM_HAWA_CTRL_2_t                                   HIM_HAWA_CTRL_2;
   HwRegField32_t                                      Reserved105;
   HIM_HAWA_STS_t                                      HIM_HAWA_STS;
   HwRegField32_t                                      Reserved106;
   HIM_HAWA_INT_STS_64_t                               HIM_HAWA_INT_STS[HIM_CPU_NUM];

   HIM_HAWA_INT_EN_64_t                                HIM_HAWA_INT_EN[HIM_CPU_NUM];
   HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY_64_t      HIM_HAWA_INT_STS_STR_CTX_NTF_RB_NOT_EMPTY[HIM_CPU_NUM];
   HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY_64_t       HIM_HAWA_INT_EN_STR_CTX_NTF_RB_NOT_EMPTY[HIM_CPU_NUM];
   HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED_64_t            HIM_HAWA_INT_STS_STR_HWD_CTX_QUEUED[HIM_CPU_NUM];
   HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED_64_t             HIM_HAWA_INT_EN_STR_HWD_CTX_QUEUED[HIM_CPU_NUM];
   HIM_HAWA_INT_STS_STR_AGING_TIMEOUT_64_t             HIM_HAWA_INT_STS_STR_AGING_TIMEOUT[HIM_CPU_NUM];
   HIM_HAWA_INT_EN_STR_AGING_TIMEOUT_64_t              HIM_HAWA_INT_EN_STR_AGING_TIMEOUT[HIM_CPU_NUM];
   HIM_HAWA_INT_STS_STR_TIMEOUT_64_t                   HIM_HAWA_INT_STS_STR_TIMEOUT[HIM_CPU_NUM];
   HIM_HAWA_INT_EN_STR_TIMEOUT_64_t                    HIM_HAWA_INT_EN_STR_TIMEOUT[HIM_CPU_NUM];
   HIM_HAWA_STS_2_64_t                                 HIM_HAWA_STS_2[ 0x5 ];
   HIM_HAWA_STS_2_PH_64_t                              HIM_HAWA_STS_2_PH[ 0xB ];
   HIM_HAWA_HWD_CTX_ALLOC_STS_64_t                     HIM_HAWA_HWD_CTX_ALLOC_STS[HIM_CPU_NUM];
   HIM_HAWA_JOINT_REL_STS_64_t                         HIM_HAWA_JOINT_REL_STS[ 0x8 ];
   HIM_HAWA_CMD_CTX_SIZE_t                             HIM_HAWA_CMD_CTX_SIZE;
   HwRegField32_t                                      Reserved107;
   HIM_HAWA_DBG_HABM_QUEUE_REQ_t                       HIM_HAWA_DBG_HABM_QUEUE_REQ;
   HwRegField32_t                                      Reserved108;
   HIM_HAWA_DBG_HABM_QUEUE_END_t                       HIM_HAWA_DBG_HABM_QUEUE_END;
   HwRegField32_t                                      Reserved109;
   HIM_HAWA_SPARE1_t                                   HIM_HAWA_SPARE1;
   HwRegField32_t                                      Reserved110;
   HIM_HAWA_SPARE2_t                                   HIM_HAWA_SPARE2;
   HwRegField32_t                                      Reserved111;
}  HAWA_REGS_t, *pHAWA_REGS_t;


;


extern pHAWA_REGS_t hawaRegistersPtr;

void   HAWA_GetHAWARegsValues(HAWA_REGS_t * hawaRegistersTargetPtr);

#line 19 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_ps.h"

#line 33 "d:/gitrepo/fpgcss-vega/source/fe_nvme/public/inc/fe_api_ps.h"
uint32_t FE_API_PS_HWD_GetContextBaseAddress(void);

#line 27 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 1 "d:/gitrepo/fpgcss-vega/_out/model/dllbuild/shuri_ei.ram/softmap.h"

#line 36 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/cam_reg/cam_regs_defines.h"

#line 1806 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/cam_reg/cam_regs_defines.h"
typedef struct _CAM {
    uint64_t  CAM_INT_STATUS                             ;
    uint64_t  Reserved0[2];
    uint64_t  CAM_INT_ALLOC_DONE_EN                      ;
    uint64_t  CAM_INT_ALLOC_DONE_MASK                    ;
    uint64_t  CAM_DBG_INT_STATUS                         ;
    uint64_t  CAM_DBG_INT_MASK[12]                       ;
    uint64_t  Reserved1[20];
    uint64_t  CAM_ARRAY_SELECT                           ;
    uint64_t  CAM_ARRAY_CFG                              ;
    uint64_t  CAM_ARRAY_ADDR                             ;
    uint64_t  CAM_ARRAY_HISTORY_ADDR                     ;
    uint64_t  CAM_ARRAY_HISTORY_CFG                      ;
    uint64_t  CAM_ARRAY_STATUS                           ;
    uint64_t  CAM_ARRAY_DEBUG                            ;
    uint64_t  CAM_ARRAY_HISTORY_CACHE                    ;
    uint64_t  Reserved2[2];
    uint64_t  CAM_RELEASE                                ;
    uint64_t  Reserved3[6];
    uint64_t  CAM_BUS_CFG                                ;
    uint64_t  CAM_CTRL                                   ;
    uint64_t  CAM_STATUS                                 ;
    uint64_t  CAM_DUMMY_REG                              ;
    uint64_t  Reserved4;
    uint64_t  CAM_HEB_DATA                               ;
    uint64_t  CAM_HEB_EVENT_FILTER                       ;
    uint64_t  Reserved5[2];
    uint64_t  CAM_ARRAY_ALLOC_REQ[12]                    ;
    uint64_t  Reserved6[20];
    uint64_t  CAM_ARRAY_ALLOC_INDEXES0[12]               ;
    uint64_t  Reserved7[20];
    uint64_t  CAM_ARRAY_ALLOC_INDEXES1[12]               ;
    uint64_t  Reserved8[20];
    uint64_t  CAM_REF_COUNT                              ;
    uint64_t  Reserved9[3];
    uint64_t  CAM_DEBUG                                  ;
    uint64_t  CAM_DEBUG_POSTED                           ;
    uint64_t  CAM_ARRAY_DBG_STAT[8]                      ;
    uint64_t  Reserved10[18];
    uint64_t  CAM_DEBUG_ARRAY_SELECT                     ;
    uint64_t  Reserved11;
    uint64_t  CAM_DEBUG_ARRAY_ENTRIES                    ;
    uint64_t  Reserved12;
    uint64_t  CAM_HEB_OV_CNT                             ;
    uint64_t  Reserved13;
    uint64_t  CAM_VIRTUAL_CFG[64]                        ;
    uint64_t  Reserved14[64];
    uint64_t  CAM_VIRTUAL_CNT[64]                        ;
    uint64_t  Reserved15[64];
    uint64_t  CAM_NOTIFICATION_ADDR[12]                  ;
    uint64_t  Reserved16[20];
    uint64_t  CAM_NOTIFICATION_MSG                       ;
    uint64_t  CAM_BUS_ERROR                              ;
    uint64_t  CAM_DBG_FREE_RELEASE                       ;
    uint64_t  CAM_DBG_RELEASE_OOR                        ;
    uint64_t  CAM_DBG_REFCNT_ERR                         ;
    uint64_t  CAM_DBG_HEB_SAME_CPU_PUSH                  ;
    uint64_t  Reserved17[33];
    uint64_t  CAM_REF_CNT_TBL[512]                       ;
    uint64_t  CAM_VIRTUAL_TABLE[1024]                    ;
}CAM_t, *PCAM;

#line 30 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_regs_defines.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/cap_reg/cap_regs_defines.h"

#line 520 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/cap_reg/cap_regs_defines.h"
typedef struct _CAP {
    uint64_t  CAP_INT_STATUS                             ;
    uint64_t  CAP_INT_MASK[2]                            ;
    uint64_t  CAP_LLFS_INT_MASK[2]                       ;
    uint64_t  CAP_CTRL                                   ;
    uint64_t  CAP_STATUS                                 ;
    uint64_t  CAP_CFG                                    ;
    uint64_t  CAP_BUS_ERROR_DBG                          ;
    uint64_t  CAP_BUS_ERROR_ADDR                         ;
    uint64_t  CAP_OUTPUT_QUEUE_CFG[12]                   ;
    uint64_t  Reserved0[16];
    uint64_t  CAP_OUTPUT_QUEUE_WR_IDX[12]                ;
    uint64_t  Reserved1[16];
    uint64_t  CAP_OUTPUT_QUEUE_RD_IDX[12]                ;
    uint64_t  Reserved2[16];
    uint64_t  CAP_OUT_SCHEDULING[6]                      ;
    uint64_t  Reserved3;
    uint64_t  CAP_OUT_SCHED_ISSUE                        ;
    uint64_t  CAP_CCQ_CFG                                ;
    uint64_t  CAP_CCQ_TRIG_CFG[32]                       ;
    uint64_t  Reserved4[96];
    uint64_t  CAP_CCQ_LOCK_REQ[1]                        ;
    uint64_t  Reserved5[3];
    uint64_t  CAP_CCQ_LOCK_STATUS[1]                     ;
    uint64_t  Reserved6[3];
    uint64_t  CAP_CCQ_INT_OVERFLOW_STATUS[1]             ;
    uint64_t  Reserved7[3];
    uint64_t  CAP_CCQ_INT_UNDERFLOW_STATUS[1]            ;
    uint64_t  Reserved8[3];
    uint64_t  CAP_CCQ_VALID_CNT[32]                      ;
    uint64_t  Reserved9[96];
    uint64_t  CAP_CCQ_RD_IDX[32]                         ;
    uint64_t  Reserved10[96];
    uint64_t  CAP_DSVG_TRUE_CNTR[8]                      ;
    uint64_t  Reserved11[24];
    uint64_t  CAP_DIE_TRUE_COUNTER[128]                  ;
    uint64_t  Reserved12[3968];
    uint64_t  CAP_DIE_READY_UPDATE_FIM[1]                ;
    uint64_t  Reserved13[3];
    uint64_t  CAP_DIE_READY_UPDATE                       ;
    uint64_t  CAP_FIM_STATE                              ;
    uint64_t  CAP_POWER_REL_ADDR                         ;
    uint64_t  CAP_DATA_CNTR_CFG                          ;
    uint64_t  CAP_DIE_TRUE_INT_ENABLE_UPDATE             ;
    uint64_t  CAP_DIE_TRUE_INT[4]                        ;
    uint64_t  Reserved14[124];
    uint64_t  CAP_DATA_CNTR[32]                          ;
    uint64_t  Reserved15[32];
    uint64_t  CAP_DSVG_TRUE_READY[9]                     ;
    uint64_t  Reserved16[63];
    uint64_t  CAP_DSVG_CACHE_READY[9]                    ;
    uint64_t  Reserved17[63];
    uint64_t  CAP_DSVG_READ_READY[9]                     ;
    uint64_t  Reserved18[63];
    uint64_t  CAP_DSVG_TRUE_READY_PENDING[9]             ;
    uint64_t  Reserved19[63];
    uint64_t  CAP_DSVG_CACHE_READY_PENDING[9]            ;
    uint64_t  Reserved20[63];
    uint64_t  CAP_DSVG_READ_READY_PENDING[9]             ;
    uint64_t  Reserved21[63];
    uint64_t  CAP_DIE_PENDING_UPDATE_DATA                ;

    uint64_t  CAP_DIE_PENDING_UPDATE_CTRL                ;
    uint64_t  CAP_FIM_SYNC_TAG[1]                        ;
    uint64_t  Reserved22[3];
    uint64_t  CAP_SCH_DIE_QUEUE_HEAD[1]                  ;

    uint64_t  Reserved23[3];
    uint64_t  CAP_SCH_DIE_QUEUE_TAIL[1]                  ;

    uint64_t  Reserved24[3];
    uint64_t  CAP_DIE_STATE_VARIABLE                     ;
    uint64_t  CAP_THREAD_TAG[8]                          ;
    uint64_t  Reserved25[120];
    uint64_t  CAP_CCQ_TAG[32]                            ;
    uint64_t  Reserved26[96];
    uint64_t  CAP_HEB_DATA                               ;
    uint64_t  CAP_HEB_EVENT_FILTER                       ;
    uint64_t  CAP_HEB_DIE_GROUP                          ;
    uint64_t  CAP_DBG_CCQ_STATE[1]                       ;
    uint64_t  Reserved27[3];
    uint64_t  CAP_DBG_MLM_ARBITER                        ;
    uint64_t  CAP_DBG_CCD0                               ;
    uint64_t  CAP_DBG_CCD1                               ;
    uint64_t  CAP_DBG_CCD2                               ;
    uint64_t  CAP_DBG_CCD3                               ;
    uint64_t  CAP_DBG_CCD4                               ;
    uint64_t  CAP_DBG_CCD5                               ;
    uint64_t  CAP_DBG_CCD6                               ;
    uint64_t  CAP_DBG_CCD7                               ;
    uint64_t  CAP_DBG_RS0                                ;
    uint64_t  CAP_DBG_RS1                                ;
    uint64_t  CAP_DBG_RS2                                ;
    uint64_t  CAP_DBG_RS3                                ;
    uint64_t  CAP_DBG_RS4                                ;
    uint64_t  CAP_DBG_RS_OVERRIDE_0                      ;
    uint64_t  CAP_DBG_RS_OVERRIDE_1                      ;
    uint64_t  CAP_DBG_SCHED0                             ;
    uint64_t  CAP_DBG_SCHED1                             ;
    uint64_t  CAP_DBG_SCHED2                             ;
    uint64_t  CAP_DBG_SCHED3                             ;
    uint64_t  CAP_DBG_SCHED4                             ;
    uint64_t  CAP_DBG_SCHED5                             ;
    uint64_t  CAP_DBG_TAG_OOR                            ;
    uint64_t  CAP_DBG_TRUE_RELEASE                       ;
    uint64_t  CAP_DBG_READ_RELEASE                       ;
    uint64_t  CAP_DBG_ALLOC_VALID                        ;
    uint64_t  CAP_DBG_TRUE_COUNTER                       ;
    uint64_t  CAP_DBG_ENABLE_DIFF                        ;
    uint64_t  CAP_DIE_TRUE_INT_DBG[4]                    ;
    uint64_t  Reserved28[124];
    uint64_t  CAP_DUMMY_REG                              ;
    uint64_t  CAP_DBG_QUAL_1                             ;
    uint64_t  CAP_DBG_QUAL_2                             ;
    uint64_t  CAP_DBG_QUAL_3                             ;
    uint64_t  CAP_DBG_QUAL_4                             ;
    uint64_t  CAP_DBG_QUAL_5                             ;
    uint64_t  CAP_DBG_CONTINUEFIM[1]                     ;
    uint64_t  Reserved29[3];
    uint64_t  CAP_HEB_OV_CNT                             ;
    uint64_t  CAP_DBG_TAG_OOR_INFO                       ;
}CAP_t, *PCAP;

#line 32 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/dpca_reg/dpca_regs_defines.h"

#line 833 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/dpca_reg/dpca_regs_defines.h"
typedef struct _DPCA {
    uint64_t  DPCA_INT_STATUS                            ;
    uint64_t  DPCA_INT_MASK                              ;


    uint64_t  DPCA_DEBUG                                 ;
    uint64_t  Reserved0;
    uint64_t  DPCA_CTRL                                  ;
    uint64_t  DPCA_STATUS                                ;
    uint64_t  Reserved1[2];
    uint64_t  DPCA_CNT_UPDATE                            ;
    uint64_t  DPCA_CNT_ADDR                              ;
    uint64_t  Reserved2[2];
    uint64_t  DPCA_GROUP_UPDATE                          ;
    uint64_t  Reserved3[3];
    uint64_t  DPCA_GROUP_INT_SUMMARY[4]                  ;
    uint64_t  Reserved4[204];
    uint64_t  DPCA_DEBUG_STATE                           ;
    uint64_t  DPCA_DEBUG_REG_CMD_STATE                   ;
    uint64_t  Reserved5[2];
    uint64_t  DPCA_DEBUG_MSG_STATE[4]                    ;
    uint64_t  Reserved6[20];
    uint64_t  DPCA_HEB_DATA                              ;
    uint64_t  DPCA_HEB_EVENT_FILTER                      ;
    uint64_t  Reserved7;
    uint64_t  DPCA_DUMMY_REG                             ;
    uint64_t  DPCA_GROUP_STATUS[256]                     ;
    uint64_t  DPCA_GROUP_CTRL[256]                       ;
    uint64_t  DPCA_GROUP_MSG_ADR[256]                    ;
    uint64_t  DPCA_HEB_OV_CNT                            ;
}DPCA_t, *PDPCA;

#line 33 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 34 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"

#line 58 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/llfs_reg/llfs_be_common_defs.h"
extern uint32_t g_NANDAddrBytes;


extern uint32_t g_NANDTMEn;


extern uint32_t g_NANDCeShiftInRowAddr;


extern uint32_t g_NANDPlanesPerDie;


extern uint32_t g_NANDBics6X3;


extern uint32_t g_NANDBics6X4;


extern uint32_t g_NANDBics8X3;

#line 41 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 28 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_ra.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 30 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_ra.h"

#line 149 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_ra.h"
__inline static  uint32_t RSV_GetHostWritePoolAddress(void)
{

   return  ( 0x02014400 ) ;

#line 156 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver_ra.h"
}

#line 38 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_be_init_def.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 5 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/rs_reg/rs_be_init_def.h"

#line 40 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"


extern const PRS gpRSV;

#line 89 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
;

#line 364 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
;

#line 368 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
;

#line 511 "d:/gitrepo/fpgcss-vega/source/ps/hw_drivers/rsv_driver/inc/rsv_driver.h"
extern const uint64_t   RSV_BE_RB_MAPPING_TABLE[ 0x7 ][ 0x4 ][2];
extern const uint32_t RSV_BE_RB_POOL[ 0x7 ];









typedef enum RSV_EnableProfileCtrl_e
{
   PROFILE_DISABLED = 0,
   PROFILE_ENABLED_AND_LAST = 1,
   PROFILE_ENABLED_AND_NEXT_REQUIRED = 2,
   PROFILE_ENABLED_AND_NEXT_CAN_SUBSTITUTE = 3,
} RSV_EnableProfileCtrl_t;

#line 17 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/cat_api.h"

#line 25 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/ddr_dma_reg/ddrc_dma_defines.h"

#line 26 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/llfs/inc_public/datapath_memory_assign.h"

#line 28 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"

#line 66 "d:/gitrepo/fpgcss-vega/source/infra/drivers/ddr/inc_public/sys_ddr_dma_driver.h"
typedef enum DDR_DMA_ErrorStatus_e
{
   DDRC_DMA_STATUS_OK = 0,
   DDRC_DMA_STATUS_SINGLE_BIT,
   DDRC_DMA_STATUS_SINGLE_BIT_THRESHOLD,
   DDRC_DMA_STATUS_DOUBLE_BIT,
   DDRC_DMA_STATUS_HMBC_DISABLE
}DDR_DMA_ErrorStatus_t;

enum
{
   READ_FROM_DRAM,
   WRITE_TO_DRAM
};
typedef uint32_t DdrcDirection_e;




typedef void(*DDR_DMA_Callback)(uint32_t channelIdx);

typedef struct DDR_DMA_FW_descriptor_s
{
   uint32_t DMA_desc_Cookie;
   DDR_DMA_ErrorStatus_t DMA_ErrorStatus;
   DDR_DMA_Callback callback;
}DDR_DMA_FW_descriptor_t;

typedef struct DDR_DMA_handlingCompletion_s
{
   uint32_t dmaDescHead;
   uint32_t dmaDescTail;
   uint32_t dmaDescCount;
   uint32_t rfu;
}DDR_DMA_handlingCompletion_t;

typedef struct DDR_DMA_ChannelParam_s
{
   DDR_DESCRIPTOR_t* DMA_HW_desc;
   DDR_DESCRIPTOR_t** DDR_descQueue_p;
   DDR_DMA_FW_descriptor_t* DMA_FW_desc;
   const uint32_t numOfDescriptors;
   const uint32_t DRAM_range[2];
   DDR_DMA_handlingCompletion_t handlingCompletion;
}DDR_DMA_ChannelParam_t;




void DDR_DMA_TriggerDescriptor(DDR_DMA_FW_descriptor_t DMA_FW_desc, uint32_t chIdx, uint32_t direction, uint32_t SRAM_addr, uint32_t  DRAM_addr, uint32_t length);
DDR_DMA_FW_descriptor_t DDR_DMA_popDescriptor(uint32_t chIdx);
DDR_DMA_FW_descriptor_t DDR_DMA_peekDescriptor(uint32_t chIdx, uint32_t descIndex);
uint32_t DDR_DMA_peekHeadIndex(uint32_t chIdx);
uint32_t DDR_DMA_peekTailIndex(uint32_t chIdx);
uint32_t DDR_DMA_IsFMLBitCanBeCleared(uint32_t chIdx);

#line 45 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"

#line 95 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
;

#line 121 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
typedef enum HWD_HostlessWriteType_e
{
   HWD_WRITE_BUFFER_UPADTE_SAT      = 0,
   HWD_WRITE_BUFFER_NO_UPADTE_SAT   = 1,

} HWD_HostlessWriteType_t;


typedef enum HWD_TLCAccum_e
{
    HWD_ACCUM_SLC = BLOCK_SLC,
    HWD_ACCUM_TLC_SHARED = BLOCK_TLC,
    HWD_ACCUM_MAX = NUM_BLOCK_TYPES,
} HWD_Accum_t;

typedef enum HWD_CtxDataType_e
{
   HWD_CTXT_DATA_TYPE_RANDOM = 0,
   HWD_CTXT_DATA_TYPE_SEQ,
   HWD_CTXT_DATA_TYPE_OVERLAP,
   HWD_CTXT_DATA_TYPE_LAST_VALID = HWD_CTXT_DATA_TYPE_OVERLAP
}HWD_CtxDataType_t;

#line 159 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
typedef struct HWD_GroupManager_s
{
   uint8_t               groupIdx;
   uint8_t               groupSize[ (6) ];
   uint8_t               numberOfGroups;
   uint8_t               canDoOptimRandWriteUpdate[ ( (2) ) ];
   uint32_t              fflbas[ ( (2) ) ][ (16) ];
   uint32_t*             hwdCtxtIndex_p;
   HIM_HWD_Context_t**   hwdCtxt_p;

} HWD_GroupManager_t;

typedef struct HWD_PeekManager_s
{
   uint32_t              canPeekAhead;
   uint16_t              peekCounter;
   uint32_t*             peekCtxtFirstIndexPtr;
   uint16_t              peekAllowedPerStream[HAWA_NUM_WRITE_TYPES];

} HWD_PeekManager_t;

typedef struct HWD_DataAccumulator_s
{
   uint8_t              contextCounter;
   uint8_t              maxAccuSize;
   uint16_t             reserved;
   uint32_t             contexIdtList[ (6) ];
   HIM_HWD_Context_t*   contexPtrList[ (6) ];

} HWD_DataAccumulator_t;

typedef struct HWD_WriteFlowManager_s
{
   JBA_t           jba;
   OBM_BlockType_t opbId;
   HWD_Accum_t     accumType;
} HWD_WriteFlowManager_t;

typedef struct HWD_GenOpUA_s
{
  FTL_AsynchClBkFunc callBkFun;
  uint32_t callerToken;
}HWD_GenOpUA_t;

typedef struct HWD_GrpId_s
{
   uint32_t grpIdCounter;
   uint32_t haltCounter;
   BOOL32   ongingFlush;
   BOOL32   haltingHAWA;
   BOOL32   HAWAHalted;
   BOOL32   Resv;
} HWD_GrpId_t;

__inline static  void HWD_ResetHeader(FMU_Metadata_t* pFmuMetadata)
{
   pFmuMetadata->CRC[0]=0x00;
   pFmuMetadata->CRC[1]=0x00;
   pFmuMetadata->CRC[2]=0x00;
   pFmuMetadata->CRC[3]=0x00;
   pFmuMetadata->CRC[4]=0x00;
   pFmuMetadata->CRC[5]=0x00;
   pFmuMetadata->CRC[6]=0x00;
   pFmuMetadata->CRC[7]=0x00;
   pFmuMetadata->HOST_LBA            =  ( (0xFFFFFFF8) ) ;
   pFmuMetadata->LDPC_SEED           = 0;
   pFmuMetadata->MOUNT_FIELDS.all32  = 0;
   pFmuMetadata->NAME_SPACE          = 0;
   pFmuMetadata->SEQ_NUM             = 0;
   pFmuMetadata->UECC                = 0;
}








typedef struct HWD_RMW_FflbasTable_s
{
    uint8_t  fmusCount;
    uint8_t  res;
    uint16_t ctxtId;
    uint32_t fflbas[ (16) ];
}HWD_RMW_FflbasTable_t;

typedef struct HWD_RMW_Overlap_s
{
    uint8_t keptRMWCounter;
    uint8_t firstValidKeptEntry;
    uint8_t runningRMWCounter;
    uint8_t isDallocActive;
    uint16_t keptCtxts[ FMG_UA_POOL_SIZE_T4 ];
    HWD_RMW_FflbasTable_t fflbasTable[ 12 ];
}HWD_RMW_Overlap_s;

typedef struct HWD_DebugInfo_s
{
    uint32_t lastIds[3][4];
} HWD_DebugInfo_t;

typedef struct HWD_Cb_s
{
    HWD_RMW_Overlap_s HwdRmwOverlapInfo;

    HWD_DataAccumulator_t HwdAccumulator[HWD_ACCUM_MAX];
    HWD_GroupManager_t    groupManager;
    HWD_PeekManager_t     peekManager;
    HWD_WriteFlowManager_t HhwWfm;
    HWD_DebugInfo_t Dbg;
    HWD_GrpId_t GrpId_CB;
    uint16_t GrpIdResCtxt;

    uint16_t HwdFuaCmdList[ (512) ];
    uint32_t HwdFuaErrBits[ (512)  / (1 <<  (5) )];
    uint16_t fuaFmgCtxtID;
    uint32_t fuaCookie;
} HWD_Cb_t;




   extern HWD_Cb_t HWD_CB;





   __inline static  BOOL32 HWD_RMW_IsActive()
   {
      return HWD_CB.HwdRmwOverlapInfo.runningRMWCounter>0;
   }

   __inline static  uint32_t HWD_GetTLCBufferSize(HWD_Accum_t accumType)
   {
      return HWD_CB.HwdAccumulator[accumType].contextCounter;
   }


   __inline static  uint32_t HWD_GetTLCBufferList(HWD_Accum_t accumType, uint32_t* list)
   {
      int32_t i,j;
      uint32_t contextCounter = 0;

      if (accumType != HWD_ACCUM_SLC)
      {
         contextCounter = HWD_CB.HwdAccumulator[accumType].contextCounter;

         ;
         ;

         if (contextCounter > 0)
         {
            for (i = ((int32_t)contextCounter-1), j=0; i >= 0; i--,j++)
            {
               list[j] = HWD_CB.HwdAccumulator[accumType].contexIdtList[i];
               ;
               ;
            }
         }
      }

      return contextCounter;
   }

   __inline static  void HWD_TryPeekHwdFromDCCM(uint8_t queueNum, HIM_HWD_Context_t** pHwdCtxt, uint32_t* hwdCtxtID, uint8_t index)
   {
       FE_API_HWD_GetNewContextIndexDCCM((uint32_t)queueNum, index, pHwdCtxt, hwdCtxtID);
   }

   __inline static  void HWD_DccmInitHwdContextAndIndex(uint8_t queueNum, HIM_HWD_Context_t** pHwdCtxt, uint32_t* hwdCtxtID)
   {
      FE_API_HWD_GetNewContextIndexDCCM((uint32_t)queueNum, 0, pHwdCtxt, hwdCtxtID);
   }


   __inline static  uint8_t HWD_getGroupSize()
   {
      return HWD_CB.groupManager.groupSize[HWD_CB.groupManager.groupIdx];
   }

   __inline static  uint8_t HWD_getNumOfGroups()
   {
      return HWD_CB.groupManager.numberOfGroups;
   }

   __inline static  uint32_t* HWD_groupGetFFLBAptr(uint32_t indexInGroup, uint32_t fmuIndex)
   {
      return &HWD_CB.groupManager.fflbas[indexInGroup][fmuIndex];
   }

   __inline static  uint32_t HWD_groupGetFFLBA(uint32_t indexInGroup, uint32_t fmuIndex)
   {
      return HWD_CB.groupManager.fflbas[indexInGroup][fmuIndex];
   }

   __inline static  uint32_t HWD_getGroupCtxtIndex(uint32_t indexInGroup)
   {
      return HWD_CB.groupManager.hwdCtxtIndex_p[indexInGroup];
   }

   __inline static  HIM_HWD_Context_t* HWD_getGroupCtxtPtr(uint32_t indexInGroup)
   {
      return HWD_CB.groupManager.hwdCtxt_p[indexInGroup];
   }

   __inline static  void   HWD_advanceToNextGroup()
   {
      HWD_CB.groupManager.hwdCtxtIndex_p += HWD_getGroupSize();
      HWD_CB.groupManager.hwdCtxt_p += HWD_getGroupSize();
      HWD_CB.groupManager.groupIdx++;
   }







extern   uint32_t gSequNumber;

#line 398 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
BOOL32  __attribute__((section("CODE_RANDOM")))  HWD_WriteFlow(HIM_HWD_Context_t* pHwdCtxt, uint32_t hwdCtxtID);

#line 416 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
void   HWD_FlushTLCBuffer(HWD_Accum_t tlcAccumListID, HWD_TLCFlushCause_t flushCause);

#line 432 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
void   HWD_Flush(FTL_AsynchClBkFunc callBkFun, uint32_t token);

#line 448 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
void   HWD_ResumeWriteAfterRMW(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void   HWD_ResumeWriteBufferAfterRMW(uint16_t fmgCtxtId, uint16_t payload, FMG_ExecStatus_t execStatus);
void   HWD_SetDallocState(uint8_t state);

void HWD_printCtxtID(uint32_t hwdCtxtID);

BOOL32   HWD_WriteBuffer(FML_FEAdminQEntry_t  *pAdminQEntry);

void   HWD_WriteDeallocatePayload(uint16_t fmgCtxtID, uint32_t *pPayload, uint32_t *pHeader, uint8_t fmuCount, FTL_AsynchClBkFunc callBkFun, uint32_t token);

void   HWD_WriteRpmbPayload(uint16_t fmgCtxtID, uint32_t *pPayload, uint32_t *pHeader, uint8_t fmuCount, FTL_FMU_INFO_t* pWriteInfoFmus, FTL_AsynchClBkFunc callBkFun, uint32_t token);

#line 470 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
void   HWD_Init(void);

#line 486 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd.h"
void   HWD_GrpIdResHandler(uint16_t contextId, uint16_t payload, FMG_ExecStatus_t execStatus);










void   HWD_GrpId_Done(void);

void   HWD_HandlePadding(HIM_HWD_Context_t* pHwdCtxt, uint32_t hwdCtxtID);

void   HWD_HandleErrorBit(HIM_HWD_Context_t* pHwdCtxt, uint32_t hwdCtxtID);

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/hwd/inc/ftl_hwd_fua.h"

#line 35 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/rlc/inc/rlc_api.h"

#line 38 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorconfig_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 23 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorconfig_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_ps_xorconfig_api.h"

#line 75 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_ps_xorconfig_api.h"
typedef enum XBID_e
{
   XBID_FIRST = 0,
   XBID0 = XBID_FIRST,
   XBID1,
   XBID_MVP_MANAGED = XBID1,
   XBID_LAST_VALID_TLC = XBID1,
   XBID_TLC_COUNT,
   XBID_SLC_BASE = XBID_TLC_COUNT,
   XBID2 = XBID_SLC_BASE,
   XBID3,
   XBID4,
   XBID_LAST_VALID = XBID4,
   XBID_COUNT,
   XBID_INACTIVE =  (0xF) ,
} XBID_t;


enum
{
   XRAM_SLOT_0,
   XRAM_SLOT_1,
   XRAM_SLOT_2,
   XRAM_SLOT_3,
   XRAM_SLOT_4,
   XRAM_SLOT_5,

};

enum
{
   TRAM_SLOT_0,
   TRAM_SLOT_1,

};





typedef uint8_t PS_XOR_FMU_Buf_t[ (1 << (12) )  +  ( (4)  + (32)  + (12) ) ];

typedef struct FTL_PS_XORLoadErrorResponse_s
{
   union
   {
      struct {
         uint32_t msgBitmap     : 4;
         uint32_t msgSequenceId : 4;
         uint32_t psIdx         : 1;
         uint32_t corruptedFMUs : 16;
         uint32_t rfu           : 7;
      } bits;
      uint32_t all;
   } data;
} FTL_PS_XORLoadErrorReport_t;

#line 149 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_ps_xorconfig_api.h"
__inline static  uint32_t XORM_GetXBIDMemoryRegion(XBID_t xbid)
{
   uint32_t xbidMemoryRegion;

   switch (xbid)
   {
   case XBID0:
   case XBID1:
   case XBID4:
      xbidMemoryRegion =  0x03004100 ;
      break;
   case XBID2:
   case XBID3:
      xbidMemoryRegion =  0x02127c00 ;
      break;
   default:
      xbidMemoryRegion =  (0xFFFFFFFFUL) ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_ps_xorconfig_api.h" , 166 , "(0)");                         "BullseyeCoverage restore"; } ;
      break;
   }
   return xbidMemoryRegion;

}










__inline static  uint8_t XORConfig_GetXbidOffsetInSlots(XBID_t xbid)
{
   uint8_t XbidOffset;

   switch (xbid)
   {
   case XBID0:
      XbidOffset = XRAM_SLOT_0;
      break;
   case XBID1:
      XbidOffset = XRAM_SLOT_3;
      break;
   case XBID2:
      XbidOffset = TRAM_SLOT_0;
      break;
   case XBID3:
      XbidOffset = TRAM_SLOT_1;
      break;
   case XBID4:
      XbidOffset = XRAM_SLOT_5;
      break;
   default:
      XbidOffset =  (0xFF) ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ftl_ps_xorconfig_api.h" , 205 , "(0)");                         "BullseyeCoverage restore"; } ;
      break;
   }
   return XbidOffset;

}








__inline static  uint32_t XORM_GetXbidAddress(XBID_t xbid)
{
   return (uint32_t)XORM_GetXBIDMemoryRegion(xbid) + XORConfig_GetXbidOffsetInSlots(xbid) *  165760 ;
}

#line 24 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorconfig_api.h"

#line 53 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorconfig_api.h"
typedef enum XBID_Mode_e
{
   XBID_MODE_BASE,










   XBID_MODE_DUAL_TLC_RLC = XBID_MODE_BASE,
   XBID_MODE_DUAL_TLC_MIX,
   XBID_MODE_SINGLE_TLC,
   XBID_MODE_SLC_ONLY,
   XBID_MODE_COUNT,
   XBID_MODE_XOR_ALL = XBID_MODE_COUNT,
   XBID_MODE_INIT,
   XBID_MODE_COUNT_TOTAL,

} XBID_Mode_t;






typedef enum XOR_ActiveInstance_e
{
   XOR_ACTIVE_INSTANCE_FIRST   = 0,
   XOR_ACTIVE_INSTANCE_CURRENT = XOR_ACTIVE_INSTANCE_FIRST,
   XOR_ACTIVE_INSTANCE_FUTURE  = 1,
   XOR_ACTIVE_INSTANCE_COUNT,
} XOR_ActiveInstance_t;




typedef bitset32_t XBID_ModeSet_t;




extern OBM_BlockType_t xbidToActiveOPBIdMap[XBID_COUNT];








void               XORConfig_Init                            (void);
XBID_ModeSet_t     XORConfig_GetCompatibleXbidModes          (OBM_BlockTypeSet_t exclusiveOpbids);
OBM_BlockTypeSet_t XORConfig_GetAvailableHostOpbids          (XBID_Mode_t mode);
OBM_BlockTypeSet_t XORConfig_GetPossibleConflictingHostOpbids(OBM_BlockTypeSet_t exclusiveOpbids, XBID_Mode_t mode);
OBM_BlockTypeSet_t XORConfig_GetConflictingOpbids            (OBM_BlockType_t opbid, XOR_ActiveInstance_t instance);
OBM_BlockTypeSet_t XORConfig_GetXbidBindingInMode            (XBID_t xbid, XBID_Mode_t mode);
XBID_Mode_t        XORConfig_GetCurrentXbidMode              (void);
void               XORConfig_SwitchXbidMode                  (XBID_Mode_t mode);
OBM_BlockType_t    XORConfig_GetActiveOpbid                  (XBID_t xbid, XOR_ActiveInstance_t instance);
XBID_t             XORConfig_GetActiveXbid                   (OBM_BlockType_t opbid, XOR_ActiveInstance_t instance);
void               XORConfig_SetActiveOpbid                  (XBID_t xbid, OBM_BlockType_t opbid, XOR_ActiveInstance_t instance);
XBID_t             XORConfig_GetOpbidBinding                 (OBM_BlockType_t opbid);
XBID_t             XORConfig_GetOpbidBindingInMode           (XBID_Mode_t mode, OBM_BlockType_t opbid);
XBID_t             XORConfig_GetOpbidBindingForSetOpenBlock  (OBM_BlockType_t opbid);
void               XORConfig_ChangeBrlcBinding               (OBM_BlockType_t opbid);
XBID_t             XORConfig_GetBrlcBinding                  (OBM_BlockType_t opbid);
void               XORConfig_BRLCEndSwitch                   (OBM_BlockType_t sourceBrlc, BML_JumboBlock_ID_t sourceJBId);
uint32_t          *XORConfig_GetCbAddr                       (void);
uint32_t           XORConfig_GetCbSize                       (void);
uint8_t            XORConfig_GetXbidOffsetInSlots            (XBID_t xbid);
uint32_t           XORConfig_GetXbidSizeInSlots              (XBID_t xbid);
uint8_t            XORConfig_GetXorSlotCount                 (void);

#line 39 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_compaction.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 27 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_compaction.h"

#line 38 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_compaction.h"
Status_t   FTL_XORM_Compaction_Process(void);

Status_t   FTL_XORM_Compaction_Finilize(void);

#line 26 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/obm/inc/obm_api.h"

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xor_hmb.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/winfw_adapter.h"

#line 6 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xor_hmb.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/fmu_header_structs.h"

#line 9 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xor_hmb.h"

#line 36 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xor_hmb.h"
typedef enum XORHMB_CFG_STATES
{
   XORHMB_CONFIG_FROM_INIT = 0,
   XORHMB_CONFIG_START,
   XORHMB_CONFIG_WAIT_XORM_IS_IDLE,
   XORHMB_CONFIG_UPDATE_STATE,
   XORHMB_CONFIG_UPDATE_STATE_DISABLE_AND_RELEASE,

} XORHmb_CfgStates_t;


typedef struct
{
   uint32_t state;
   uint32_t headersAddr;
   uint32_t headersSize;
} XORHmb_HeadersInfo_t, *XORHmb_HeadersInfo_pt;

#line 57 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xor_hmb.h"
typedef struct
{

   uint32_t             hmbEnable;
   uint32_t             hmbBaseAddress;
   uint32_t             hmbSize;

   uint32_t             pendingWriteCompletion;
   uint32_t             pendingCompletion;

   uint32_t             hmbSuspended;
   XORHmb_CfgStates_t   configState;

   uint8_t              isXORinDRAM[OBM_BLOCK_TYPE_MAX];


   JBA_t                lastProtectedJBAinDRAM[OBM_NUM_XORM_ARRAY_PROTECTED_BLK];

} XORHmb_Config_t, *XORHmb_Config_pt;


typedef struct XOR_HMB_ReadParams_s
{
   uint32_t sourceAddress;
   uint32_t destinationOffset;
   uint32_t transferSizeBytes;
   uint16_t contextId;
   uint16_t rfu;
} XOR_HMB_ReadParams_t;


typedef struct XOR_HMB_WriteParams_s
{
   uint32_t sourceAddress;
   uint32_t destinationOffset;
   uint32_t transferSizeBytes;
   uint16_t contextId;
   uint16_t rfu;
} XOR_HMB_WriteParams_t;

void XOR_HMB_Write(uint32_t sourceAddress, uint32_t destinationOffset, uint16_t contextId, uint32_t transferSizeBytes);
void XOR_HMB_Read(uint32_t sourceAddress, uint32_t destinationOffset, uint16_t contextId, uint32_t transferSizeBytes);
void XORHmb_InitConfig();
BOOL32 XORHmb_SetConfig(BOOL32 hmbEnable, uint32_t baseAddress, uint32_t hmbSize, BOOL32 isReset, HMBCallBackFnPtr_t callBackFun, HMB_Token_t token);
void XORHmb_SetInitStateForDPS3_2();



extern   XORHmb_Config_t XORHmb_config;








__inline static  uint32_t XORHmb_GetPendingCompletion(void)
{
   return XORHmb_config.pendingCompletion;
}






__inline static  void XOR_HMB_WritePacked(XOR_HMB_WriteParams_t *parm)
{
   XOR_HMB_Write(parm->sourceAddress, parm->destinationOffset, parm->contextId, parm->transferSizeBytes);
}






__inline static  void XOR_HMB_ReadPacked(XOR_HMB_ReadParams_t *parm)
{
   XOR_HMB_Read(parm->sourceAddress, parm->destinationOffset, parm->contextId, parm->transferSizeBytes);
}






__inline static  BOOL32 XOR_HMB_IsSuspended(void)
{
   return XORHmb_config.hmbSuspended;
}






__inline static  BOOL32 XOR_HMB_IsEnable(void)
{
   return XORHmb_config.hmbEnable;
}






__inline static  void XOR_HMB_SuspendHmb(void)
{
   if (XORHmb_config.hmbEnable)
   {
      XORHmb_config.hmbEnable =  (0) ;
      XORHmb_config.hmbSuspended =  (1) ;
   }
}






__inline static  void XOR_HMB_ResumeHmb(void)
{
   if (XORHmb_config.hmbSuspended)
   {
      XORHmb_config.hmbEnable =  (1) ;
      XORHmb_config.hmbSuspended =  (0) ;
   }
}

void XOR_HMB_OnBMGProfileSwitchDone(void);

void FTL_XOR_HMB_SetEnableFlagOnReset(void);

#line 30 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bkops_api.h"

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/bkops_api.h"
typedef enum
{
   BKOPS_XOR_LOAD_MODE_ONLY_MTM,
   BKOPS_XOR_LOAD_MODE_MTM_AND_DYNAMIC_RLC,
   BKOPS_XOR_LOAD_MODE_MTM_AND_STATIC_RLC,
} BKOPS_XorLoadMode_t;

Status_t   BKOPS_FirstMount(void);

void   BKOPS_Mount(uint16_t ctxtId);

void   BKOPS_NotifyControlSyncStart();

void   BKOPS_Init(void);

void   BKOPS_MainLoopHandler(void);

void   BKOPS_NotifyBkopsStart(void);

void   BKOPS_NotifyBkopsStop(BOOL32 shouldCallRebuildOnReset);

void   BKOPS_NotifyOnReadScrub(uint32_t rsqType);

void   BKOPS_NotifyMTMRelocationDone(void);

void   BKOPS_NotifyRelocationStepDone(void);

void   BKOPS_NotifyCsAndConsolidationDone(void);

void   BKOPS_NotifyReadOnlyMode(void);

uint32_t   BKOPS_GetStatus(void);

BOOL   BKOPs_IsBKOPsAvoidNeeded(void);

uint32_t   BKOPS_GetStatisticsSize();

uint32_t*   BKOPS_GetStatisticsAddr();

uint32_t   BKOPS_GetBkopsCompleted();

void BKOPS_GetStatistics(void *pBkops);

void   BKOPS_PrepareDPS32(void);

uint32_t BKOPS_ShouldNotifyOnConsolidationComplete();

void   BKOPS_RemovePemRestrictionIfPsQueueNotEmpty(void);

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
#line 1 "d:/gitrepo/fpgcss-vega/source/ps/inc_public/ps_xor_config.h"

#line 32 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"

#line 137 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
enum FTL_XorSwapMode_e
{
   XORM_SWAP_MODE_FULL_SWAP,
   XORM_SWAP_MODE_STORE_ONLY,

   XORM_SWAP_MODE_STORE_SHUTDOWN,

   XORM_SWAP_MODE_LOAD_ONLY,
   XORM_SWAP_MODE_REBUILD_UGSD,
   XORM_SWAP_MODE_NOP_SWAP,
   XORM_SWAP_MODE_PERFORM_COMPACTION,
   XORM_SWAP_NUM_MODES,
   XORM_SWAP_MODE_DONE_FLAG = 0x80
};

typedef uint8_t FTL_XorSwapMode_t;


enum FTL_XORM_XorLocType_e
{
   FTL_XORM_XOR_LOC_TYPE_XRAM,
   FTL_XORM_XOR_LOC_TYPE_FLASH,

   FTL_XORM_XOR_LOC_TYPE_DRAM,

};

typedef uint8_t FTL_XORM_XorLocType_t;


enum FTL_XORM_Descriptors_e
{
   XORM_DESC_IDX_CURRENT,
   XORM_DESC_IDX_PENDING
};

typedef uint8_t FTL_XORM_DescriptorIdx_t;




enum FTL_XORM_States_e
{
   XORM_STATE_IDLE                       = 0,
   XORM_STATE_START                      = 1,
   XORM_STATE_BARRIER_DONE               = 2,
   XORM_STATE_STORE_REQUEST_SEND         = 3,
   XORM_STATE_STORE_REQUEST_WAIT         = 4,
   XORM_STATE_STORE_REQUEST_WAIT_HMB     = 5,
   XORM_STATE_STORE_REQUEST_DONE_WAIT    = 6,
   XORM_STATE_LOAD_REQUEST_SEND          = 7,
   XORM_STATE_LOAD_REQUEST_WAIT          = 8,
   XORM_STATE_LOAD_REQUEST_WAIT_HMB      = 9,
   XORM_STATE_LOAD_REQUEST_DONE_WAIT     = 10,
   XORM_STATE_ZERO_FILL_FOR_REBUILD_WAIT = 11,
   XORM_STATE_REBUILD_WAIT               = 12,
   XORM_STATE_SWAP_DONE                  = 13,
   XORM_STATE_COMPACTION_CHECK           = 14,
   XORM_STATE_COMPACTION_WAIT            = 15,
   XORM_STATE_FINISH                     = 16,
   XORM_STATE_NUM                        = 17


};

typedef uint8_t FTL_XORM_States_t;


enum FTL_XORM_Compaction_States_e
{
   XORM_COMPACTION_STATE_START,
   XORM_COMPACTION_STATE_FINISH,
};

typedef uint8_t FTL_XORM_Compaction_States_t;


enum FTL_XORM_RSQ_States_e
{
   XORM_RSQ_IDLE,
   XORM_RSQ_NOPSWAP,
   XORM_RSQ_BRLC_SEND,
   XORM_RSQ_BRLC_WAIT
};

typedef uint8_t FTL_XORM_RSQ_States_t;


enum FTL_XORM_ParityActions_e
{
   XORM_PARITY_ACTION_INVALID,
   XORM_PARITY_ACTION_VALIDATE,
   XORM_PARITY_ACTION_FAKE_STORE_BEFORE_INV,
   XORM_PARITY_ACTION_INVALIDATE,
   XORM_PARITY_ACTION_INVALIDATE_AND_INV_IN_PS,
   XORM_PARITY_ACTION_STORE_REQUESTED,
   XORM_PARITY_ACTION_STORE_COMPLETED,
   XORM_PARITY_ACTION_LOAD_REQUESTED,
   XORM_PARITY_ACTION_LOAD_COMPLETED,
   XORM_PARITY_ACTION_LOAD_FAILED,
   XORM_PARITY_ACTION_LOAD_REBUILD_COMPLETED,
   XORM_PARITY_ACTION_ZERO_FILL,
   XORM_PARITY_ACTION_BRLC_COMPLETED,
};

typedef uint8_t FTL_XORM_ParityActions_t;

typedef enum XORM_ResetRebuildState_e
{
    XORM_RESET_REBUILD_STATE_SWITCH_PROFILE,
    XORM_RESET_REBUILD_STATE_CHECK_IF_NEEDED,
    XORM_RESET_REBUILD_STATE_STORE_OPBID,
    XORM_RESET_REBUILD_STATE_INVALIDATE_XBID,
    XORM_RESET_REBUILD_STATE_SOB_AND_ZERO_FILL,
    XORM_RESET_REBUILD_STATE_REBUILD,
    XORM_RESET_REBUILD_STATE_SET_ACTIVE_OPBID,
    XORM_RESET_REBUILD_STATE_FINISH,
} XORM_ResetRebuildState_t;









   typedef uint64_t binFailureBitmap_t;

#line 269 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
;


typedef struct Dbg_Xorm_SwapCounter_s
{
   uint32_t totalNumSwap;
   uint32_t numLoadFromDram;
   uint32_t numStoreToDram;
   uint32_t numLoadFromNAND;
   uint32_t numStoreToNAND;
   uint32_t numStoreOnly;
   uint32_t numSkipStore;
   uint32_t numNOPSwap;
   uint32_t numClearBuf;
   uint32_t numSkippedSwap;
   uint32_t numSwitch[XBID_MODE_COUNT_TOTAL][XBID_MODE_COUNT_TOTAL];
   uint32_t numSwapPerXBID[XBID_COUNT];
} Dbg_Xorm_SwapCounter_t;



typedef struct FTL_XORM_XorLoc_s
{
   JBA_t   jba;
   XBID_t  xbid;
} FTL_XORM_XorLoc_t;


typedef struct XORM_StateOnRequest_s
{
   BOOL                    isOpened;
   uint8_t                 rfu[3];
   JBA_t                   protectedJba;
} XORM_StateOnRequest_t;



typedef struct XORM_DelayedThings_s
{
   BOOL                    isInvalidationDelayed;
   BOOL                    isLogOnlyInvalidationDelayed;
   BOOL                    isValidationDelayed;
   uint8_t                 rfu;
} XORM_DelayedThings_t;

typedef struct XORM_PsQueueDescriptor_s
{
   MP_MQD_PSType_t         psType;
   MP_PS_PQD_QueueType_t      qType;
} XORM_PsQueueDescriptor_t;

typedef struct XORM_PsQueueList_s
{
   XORM_PsQueueDescriptor_t   list[ (2) ];
   uint8_t                    length;
   uint8_t                    rfu[3];
} XORM_PsQueueList_t;



typedef struct XORM_SwapDescriptor_s
{
   XORM_PsQueueList_t      psBlockedQList;
   OBM_BlockType_t         opbid;
   uint8_t                 chainFlags;
   FTL_XorSwapMode_t       swapMode;
   uint16_t                callerCtxtId;
   uint16_t                barrierCtxtId;
   uint16_t                rfu;
   RebuildMode_t           rebuildMode;
   XORM_StateOnRequest_t   stateOnRequestMoment;
   XORM_DelayedThings_t    delayedThings;
} XORM_SwapDescriptor_t;


typedef struct XORM_SwapDescriptorQueue_s
{
   XORM_SwapDescriptor_t   queue[ (2) ];
   uint8_t                 iHead;
   uint8_t                 iTail;
   uint8_t                 length;
   uint8_t                 rfu0;
} XORM_SwapDescriptorQueue_t;



typedef struct XORM_XorOpbInfoInLog_s
{
   JBA_t                   jbaInXORB;
   JBA_t                   lastProtectedJBA;
}   XORM_XorOpbInfoInLog_t;


typedef struct XORM_LogInfo_s
{
   JBA_t                   sourceBlockJBA;
   uint32_t                compactionThresholdInFMUs;
   FTL_XORM_ParityActions_t dbgLastOPBParityOperation[OBM_NUM_XORM_ARRAY_PROTECTED_BLK];
   uint8_t                 rfu[( 16  - OBM_NUM_XORM_ARRAY_PROTECTED_BLK)];
   XORM_XorOpbInfoInLog_t  xorOpbInfo[OBM_NUM_XORM_ARRAY_PROTECTED_BLK];
}   XORM_LogInfo_t;



typedef struct XORM_Compaction_Descriptor_s
{
   BOOL                          inProgress;
   uint8_t                       paritiesToCopy;
   uint16_t                      rfu0;
   JBA_t                         jbaInOldBlock[OBM_NUM_XORM_ARRAY_PROTECTED_BLK];
} XORM_CompactionDescriptor_t;

typedef union XORM_HmbReadWriteParams_u
{
   XOR_HMB_ReadParams_t  read;
   XOR_HMB_WriteParams_t write;
} XORM_HmbReadWriteParams_t;

typedef struct
{
   uint8_t* xorParityWriteDataPointersList[ ( ( ((( ( (2)  * ( (5) ) ) ) + ( (4) ) - 1) / ( (4) )) ) ) ][ ( (4)  * (4) ) ];
   uint8_t* xorParityHeaderPointersList[ ( ( ((( ( (2)  * ( (5) ) ) ) + ( (4) ) - 1) / ( (4) )) ) ) ][ ( (4)  * (4) ) ];
} XORM_WritePointers_SLC_t;

typedef struct
{
   uint8_t* xorParityWriteDataPointersList[ ( ( ((( ( (3)  * ( (2)  * ( (5) ) ) ) ) + ( (4) ) - 1) / ( (4) )) ) ) ][ ( (4)  * (4) ) ];
   uint8_t* xorParityHeaderPointersList[ ( ( ((( ( (3)  * ( (2)  * ( (5) ) ) ) ) + ( (4) ) - 1) / ( (4) )) ) ) ][ ( (4)  * (4) ) ];
} XORM_WritePointers_TLC_t;

typedef struct
{
   XORM_WritePointers_TLC_t writePointersTlcXbid[XBID_TLC_COUNT];
   XORM_WritePointers_SLC_t writePointersSlcXbid[XBID_COUNT-XBID_TLC_COUNT];
} XORM_WritePointers_t;

typedef struct XORM_NumLoadFailurePending_s
{
   union
   {
      struct {
         uint8_t maxNumLoadFailurePending;
         uint8_t maxNumLoadFailurePendingPerPS[ ( 2 ) ];
         uint8_t rfu;
      } bits;
      uint32_t all;
   } data;
} XORM_NumLoadFailurePending_t;


typedef struct XORM_Cb_s
{
   XORM_LogInfo_t                *pXorLogInfo;
   XORM_LogInfo_t                *pXORActiveLOGPointer;
   XORM_LogInfo_t                nbcsXorLogInfo;
   RebuildMode_t                 rebuildMode;
   uint16_t                      loadContext;
   uint16_t                      rebuildContext;

   uint16_t                      hmbLoadContext;
   uint16_t                      hmbStoreContext;
   uint16_t                      hmbRebuildOnResetCtxt;

   uint16_t                      storeContext;
   uint16_t                      rsqContext;
   uint8_t                       numPendingCompletions;
   uint8_t                       chainFlags;
   BOOL                          exitToFML;
   BOOL                          isMessageBlocked;
   BOOL                          controlSyncActive;
   BOOL                          isSwapQueueInLrm;
   BOOL                          isXorCompactionActive;
   FTL_XORM_States_t             state;
   uint16_t                      callerCtxtId;
   FTL_XorSwapMode_t             swapMode;
   FTL_XORM_RSQ_States_t         rsqHandlingState;

   XORM_StateOnRequest_t         stateOnRequestMoment;
   OBM_BlockType_t               opbID;
   OBM_BlockType_t               activeOpbid;
   XBID_t                        xbID;
   XBID_t                        activeXbid;
   OBM_BlockTypeSet_t            conflictingOpbids;
   binFailureBitmap_t            binFailureBitmap;
   XORM_SwapDescriptorQueue_t    swapDescriptorQueue;
   XORM_CompactionDescriptor_t   compactionDescriptor;
   JBA_t                         protectedJba;


   uint8_t                       *pIsXORinDRAM;
   JBA_t                         *pLastProtectedJBAinDRAM;



   Dbg_Xorm_SwapCounter_t        swapCounters;


   BOOL                          isForcedStoringToNand;
   BOOL                          isHmbReadWritePlanned;
   uint8_t                       lastHmbOpCount;
   uint8_t                       diagFailLoad;
   uint16_t                      hmbOffsetInFMUs[OBM_NUM_XOR_PROTECTED_TYPES];
   XORM_HmbReadWriteParams_t     hmbReadWriteParams;
   XORM_NumLoadFailurePending_t  maxNumLoadFailurePendingInfo;
} XORM_CB_t;

typedef struct XORM_DiagStoreUserArea_s
{
   uint16_t        origCtxtId;
   OBM_BlockType_t curParityOpbId;
   uint8_t         res0;
   uint32_t        activeOpbIDBitmap;
}XORM_DiagStoreUserArea_t;

typedef struct XORM_RSQ_UserArea_s
{
   BML_JumboBlock_ID_t  rsqJBID;
   uint8_t              reqType;
   uint8_t              rfu;
}XORM_RSQ_UserArea_t;

typedef struct XORM_ResetRebuild_UserArea_s
{
    XORM_ResetRebuildState_t    state;
    OBM_BlockType_t             currentOpbId;
    OBM_BlockType_t             activeOpbidOnXram;
    uint32_t                    currentOpbIdFmuInBlock;
    BOOL32                      isResetRebuildNeededOnOPBID[OBM_BLOCK_TYPE_MAX];
    uint16_t                    disableHmbCtxt;
}XORM_ResetRebuild_UserArea_t;

typedef struct XORM_PrepareToBkops_UserArea_s
{
   BKOPS_XorLoadMode_t  BKOPS_XorLoadMode;
   OBM_BlockType_t      opbidToStore;
   BOOL32               didSetAsInvalidAfterStore;
   BOOL32               didSwitchedToSolidMode;
   OBM_BlockType_t      opbidToLoad;
}XORM_PrepareToBkops_UserArea_t;

#line 521 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
extern XORM_CB_t XORM_Cb;

void   FTL_XORM_XorSwap_CallbackEntry(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);





uint32_t FTL_XORM_GetParityHeadersPointers(XBID_t xbid, uint32_t partID);

uint32_t FTL_XORM_GetParityDataPointers(XBID_t xbid, uint32_t partID);

void  __attribute__((section("TRW")))  FTL_XORM_Init(void);

Status_t   FTL_XORM_FirstMount(void);

Status_t   FTL_XORM_Mount(uint16_t mntCtxtId);

void   FTL_XORM_CheckLogPtr(void);

void   FTL_XORM_CheckAndReleaseCompactionSource(void);

void FTL_XORM_StoreCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

void FTL_XORM_LoadCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);


void FTL_XORM_XorSwap_Shutdown(uint16_t callerCtxtId, OBM_BlockType_t opbID);


FTL_XORM_XorLocType_t   FTL_XORM_GetOpenBlockParityLoc(BML_JumboBlock_ID_t jbID, OBM_BlockType_t opbID, uint32_t groupID, FTL_XORM_XorLoc_t* pLocation);

JBA_t   FTL_XORM_GetLastParityProtectedFmu(OBM_BlockType_t opbID);

void   FTL_XORM_NotifyXRAMParityValid(OBM_BlockType_t opbID);

void   FTL_XORM_InvalidateStoredParity(OBM_BlockType_t opbID, BOOL invalidateActiveOPBId);

void   FTL_XORM_NotifyPsOpbidInvalidation(OBM_BlockType_t opbID);

void   FTL_XORM_ControlSyncPrepare(void);

void   FTL_XORM_ControlSyncComplete(void);

void   FTL_XORM_SetCompactionThreshold(uint32_t newValue);

uint32_t   FTL_XORM_GetCompactionThreshold(void);

BOOL   FTL_XORM_IsXORMBlock(BML_JumboBlock_ID_t JBID);

void   FTL_XORM_ScheduleRSQRequest();

void   FTL_XORM_RSQRequestCallback(uint16_t ctxtId, uint16_t payload, FMG_ExecStatus_t execStatus);

void FTL_XORM_ResetActiveOPBID(XBID_t XBID);

uint32_t   FTL_XORM_GetFMUsToWriteForSwapOut(void);

BOOL FTL_XORM_CanWriteNow(OBM_BlockType_t opbid);

void FTL_XORM_PrepareToWrite(OBM_BlockType_t opbID, MP_MQD_PSType_t psType, MP_PS_PQD_QueueType_t qType);

void FTL_XORM_StoreParity(OBM_BlockType_t opbid, uint16_t callerCtxtId);

void FTL_XORM_EnsureSwapsFinished(uint16_t callerCtxtId);

void FTL_XORM_PerformCompaction(uint16_t callerCtxtId);

void FTL_XORM_NotifyXRAMParityInvalid(OBM_BlockType_t opbID);

void FTL_XORM_NotifyLogParityInvalid(OBM_BlockType_t opbID);

void FTL_XORM_NotifyHmbStatusChanged(BOOL isEnabled);
void FTL_XORM_StartRebuildOnReset();

#line 614 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  void XORM_SwapDescriptorQueue_Init(XORM_SwapDescriptorQueue_t *pQueue)
{
   uint32_t i;

   pQueue->iHead  = 0;
   pQueue->iTail  = 0;
   pQueue->length = 0;


   for (i = 0; i <  (2) ; i++)
   {
      pQueue->queue[i].barrierCtxtId = FMG_CtxtAllocateCountingCompletions(FTL_XORM_XorSwap_CallbackEntry,  ((void *)0) ,  FML_HID_FMG_EXCLUSIVE );
   }
}

#line 641 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  XORM_SwapDescriptor_t *XORM_SwapDescriptorQueue_Push(XORM_SwapDescriptorQueue_t *pQueue)
{
   XORM_SwapDescriptor_t *pDescr = pQueue->queue + pQueue->iTail;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->length < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 645 , "pQueue->length < (2)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->iTail < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 646 , "pQueue->iTail < (2)");                         "BullseyeCoverage restore"; } ;

   pQueue->iTail = (pQueue->iTail + 1) %  (2) ;
   pQueue->length++;

   return pDescr;
}

#line 666 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  XORM_SwapDescriptor_t *XORM_SwapDescriptorQueue_GetTop(XORM_SwapDescriptorQueue_t *pQueue)
{
   XORM_SwapDescriptor_t *pDescr = pQueue->queue + pQueue->iHead;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->length > 0), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 670 , "pQueue->length > 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->iHead < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 671 , "pQueue->iHead < (2)");                         "BullseyeCoverage restore"; } ;

   return pDescr;
}

#line 689 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  XORM_SwapDescriptor_t *XORM_SwapDescriptorQueue_GetNthTop(XORM_SwapDescriptorQueue_t *pQueue, uint8_t n)
{
   uint8_t                i      = (pQueue->iHead + n) %  (2) ;
   XORM_SwapDescriptor_t *pDescr = pQueue->queue + i;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(n < pQueue->length), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 694 , "n < pQueue->length");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(i < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 695 , "i < (2)");                         "BullseyeCoverage restore"; } ;

   return pDescr;
}

#line 712 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  XORM_SwapDescriptor_t *XORM_SwapDescriptorQueue_GetLast(XORM_SwapDescriptorQueue_t *pQueue)
{
   return XORM_SwapDescriptorQueue_GetNthTop(pQueue, (uint8_t)(pQueue->length - 1));
}

#line 729 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  void XORM_SwapDescriptorQueue_Pop(XORM_SwapDescriptorQueue_t *pQueue)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->length > 0), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 731 , "pQueue->length > 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pQueue->iHead < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 732 , "pQueue->iHead < (2)");                         "BullseyeCoverage restore"; } ;

   pQueue->iHead = (pQueue->iHead + 1) %  (2) ;
   pQueue->length--;
}

#line 751 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  uint8_t XORM_SwapDescriptorQueue_GetDescriptorIndex(XORM_SwapDescriptorQueue_t *pQueue, XORM_SwapDescriptor_t *pDescr)
{
   int32_t iDescr = pDescr - pQueue->queue;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(0 <= iDescr && iDescr < (2)), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 755 , "0 <= iDescr && iDescr < (2)");                         "BullseyeCoverage restore"; } ;

   return (uint8_t)iDescr;
}

#line 772 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  uint8_t XORM_SwapDescriptorQueue_GetCapacity(XORM_SwapDescriptorQueue_t *pQueue)
{
   return  (sizeof(pQueue->queue) / sizeof(*pQueue->queue)) ;
}

#line 789 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  uint8_t XORM_SwapDescriptorQueue_GetLength(XORM_SwapDescriptorQueue_t *pQueue)
{
   return pQueue->length;
}

#line 806 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  uint8_t XORM_SwapDescriptorQueue_GetFree(XORM_SwapDescriptorQueue_t *pQueue)
{
   return (uint8_t)(XORM_SwapDescriptorQueue_GetCapacity(pQueue) - XORM_SwapDescriptorQueue_GetLength(pQueue));
}

#line 824 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  void FTL_XORM_SetParityPtrXORB(OBM_BlockType_t obid, JBA_t jba)
{
   XORM_Cb.pXORActiveLOGPointer->xorOpbInfo[obid].jbaInXORB = jba;
}

#line 839 "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h"
__inline static  BOOL FTL_XORM_IsIdle(void)
{
   return XORM_SwapDescriptorQueue_GetLength(&XORM_Cb.swapDescriptorQueue) == 0;
}










__inline static  BOOL FTL_XORM_IsXorCompactionActive(void)
{
   return XORM_Cb.isXorCompactionActive;
}










__inline static  BOOL FTL_XORM_BkopsPrepGetNextOpbidToLoad(OBM_BlockType_t* opbidToLoad, BKOPS_XorLoadMode_t  BKOPS_XorLoadMode)
{

   if (*opbidToLoad == OBM_BLOCK_TYPE_ILLEGAL)
   {
      *opbidToLoad = OBM_BLOCK_TYPE_CTL_BLK;
      return  (1) ;
   }

   if (*opbidToLoad == OBM_BLOCK_TYPE_CTL_BLK)
   {
      switch (BKOPS_XorLoadMode)
      {
         case BKOPS_XOR_LOAD_MODE_ONLY_MTM:
            return  (0) ;
         case BKOPS_XOR_LOAD_MODE_MTM_AND_DYNAMIC_RLC:
            *opbidToLoad = OBM_BLOCK_TYPE_DYN_RLC;
            break;
         case BKOPS_XOR_LOAD_MODE_MTM_AND_STATIC_RLC:
            *opbidToLoad = OBM_BLOCK_TYPE_STC_RLC;
            break;
         default:
            { "BullseyeCoverage save off";                          _AssertImpl((int)(0), "d:/gitrepo/fpgcss-vega/source/ftl/xorm/inc/ftl_xorm_api.h" , 889 , "0");                         "BullseyeCoverage restore"; } ;
      }
      return  (1) ;
   }
   return  (0) ;
}










__inline static  BOOL XORM_IsDramSwapEnabled(void)
{
   return XORHmb_config.hmbEnable != 0;
}








__inline static  uint32_t XORM_GetHmbOffsetInBytes(OBM_BlockType_t opbid)
{
   return XORM_Cb.hmbOffsetInFMUs[opbid] *  sizeof(PS_XOR_FMU_Buf_t) ;
}








__inline static  uint32_t XORM_GetHmbTransferSizeInBytes(BOOL isSLC)
{
   return isSLC ? ( 165760 ) : ( 497280 );
}




typedef enum XORM_SwapChainFlags_e
{
   XORM_SWAP_CHAIN_FLAG_IS_FIRST = 1 << 0,
   XORM_SWAP_CHAIN_FLAG_IS_LAST = 1 << 1,
} XORM_SwapChainFlags_t;

void FTL_XORM_PrepareSwap(OBM_BlockType_t opbid, FTL_XorSwapMode_t swapMode, uint16_t callerCtxtId, uint8_t chainFlags);

#line 40 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api_mp0.h"

#line 43 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"

#line 121 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
typedef enum
{
   COMPLETION_MSG_ON_ENCODE_AND_TRANSFER = 0,
   COMPLETION_MSG_ON_PROGRAM = 1,
   NO_COMPLETION_MSG_NEEDED
} PSR_CompletionType_t;

typedef enum
{
   PSR_BARRIER_CONTROL_SYNCH,
   PSR_BARRIER_XOR_SWAP,
   PSR_BARRIER_XBID_MODE_SWITCH,
   PSR_BARRIER_BMG_PROFILE_SWITCH,
   PSR_BARRIER_DPS_2,
   PSR_BARRIER_REGULAR
} PSR_BarrierAllType_t;

typedef enum
{
   PSR_BARRIER_ID_BKOPS             = 0,
   PSR_BARRIER_ID_BMG               = 1,
   PSR_BARRIER_ID_HWD               = 2,
   PSR_BARRIER_ID_LOG               = 3,
   PSR_BARRIER_ID_PWS               = 4,
   PSR_BARRIER_ID_IDL               = 5,
   PSR_BARRIER_ID_BRLC              = 6,
   PSR_BARRIER_ID_FNVM              = 7,
   PSR_BARRIER_ID_BML_REC           = 8,
   PSR_BARRIER_ID_XOR_RESET_REBUILD = 9,
   PSR_BARRIER_ID_XBID_MODE_SWITCH  = 10,
   PSR_BARRIER_ID_BRLC_MTM          = 11,
   PSR_BARRIER_ID_PEM               = 12,
} PSR_BarrierUidType_t;

typedef enum
{
   PSR_TLC_LOWER  = 0,
   PSR_TLC_MIDDLE = 1,
   PSR_TLC_UPPER  = 2
} PSR_TlcWlPart_t;

#line 176 "d:/gitrepo/fpgcss-vega/source/ftl/psr/inc/ftl_psr_api.h"
typedef struct PSR_Cb_s
{
   uint8_t  rlcNumFmusInPs[ ( 2 ) ][ 256 ];
   uint8_t  fmuOffsetInSession;
   uint8_t  rlcReadIdx;
   uint8_t  rlcWriteIdx;
   uint8_t  rlcHighQueueIndex;
   uint32_t highQueueToggleBit[ ( 2 ) ];
   uint32_t swapQueueToggleBit[ ( 2 ) ];
   uint32_t rlcReadQueueToggleBit[ ( 2 ) ];
} PSR_Cb_t;









void  __attribute__((section("TRW")))  PSR_Init(void);

void  __attribute__((section("CODE_RANDOM")))  PSR_SendPsHostWriteReq(JBA_t jba, HWD_DataAccumulator_t * hwdCtxtAccum, OBM_BlockType_t opbId, uint8_t amountOfHWDToHAndle);

void  __attribute__((section("CODE_RANDOM")))  PSR_SendPsHostReadReq(JBA_t jba, uint8_t sectorOffset, uint32_t sectorLength, uint8_t streamStatus, uint32_t cmdIdx, uint32_t cmdOffset);

void   PSR_SendPsRMWReq (JBA_t jba, uint8_t sectorOffset, uint32_t sectorLength, uint32_t cookie, uint32_t dataAddr, uint32_t headerAddr);

void   PSR_SendLogReadyMsg(uint32_t* cvdRegionOriginArr, uint32_t* cvdRegionLengthArr, BOOL32 ugsdFlag, uint32_t cookie);

void   PSR_SendBkopsMode(uint32_t bkopsMode);

void   PSR_SendPsCtrlReadVBAReqLog(VBA_t vba[], uint32_t vbaIdx, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

void   PSR_SendPsCatCtrlReadReq(JBA_t jba, uint32_t sectorCount, uint8_t sectorOffset, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

void   PSR_SendPsHostMetaDataReq(JBA_t jba, uint32_t fmuCount, uint8_t** headerAddr, uint32_t cookie, BOOL32 isXorProtected);

uint16_t   PSR_SendPsPrmReadReq(JBA_t jba, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, MP_PS_PQD_QueueType_t queueType, uint32_t cookie, uint32_t inheritorType);

void   PSR_SendPsCtrlWriteReq(JBA_t jba, MP_PS_PQD_QueueType_t qType, uint8_t sectrCnt, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);





void   PSR_SendPsMtmCtrlWriteReq(JBA_t jba, MP_PS_PQD_QueueType_t qType, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);


void   PSR_SendPaddingReq(JBA_t jba, OBM_BlockType_t opbId, uint32_t numFmusToPad, OBM_OpenBlock_t* openBlock);

void   PSR_SendPsLogCtrlWriteReq(JBA_t jba, MP_PS_PQD_QueueType_t qType, uint32_t fmuCount, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie, uint32_t isCalledFromLog);

void   PSR_ReadPage0MetaData(uint32_t metaDie, uint32_t metaBlock, uint32_t diePageInMB, uint8_t blockType, uint8_t isHSLC, MP_PS_PQD_QueueType_t qType, uint8_t** headerAddr, uint32_t cookie, uint16_t jbId, BOOL32 forceLongParity);

void   PSR_FlashFillMetaBlock(uint32_t metadieId, uint32_t metablockId, MP_PS_PQD_QueueType_t queueType, uint8_t blockType, BML_SbmType_t sbmType, uint8_t forceFlashWr);

void   PSR_FlashFillPhysicalBlock(uint32_t metadieId, uint32_t metablockId, uint32_t blockInMb, MP_PS_PQD_QueueType_t qType, uint8_t blkType, BML_SbmType_t sbmType, uint8_t forceFlashWr);

void   PSR_EraseDieBlock(uint32_t metadieId, uint32_t metablockId, uint8_t blockInMb, MP_PS_PQD_QueueType_t qType, uint8_t blkType, BML_SbmType_t sbmType, uint32_t pec, uint32_t cookie, uint32_t waitForEraseOfOpbId, uint32_t flags, uint32_t isPecIncByTwo);

void   PSR_EraseMetaBlock(uint32_t metadieId, uint32_t metablockId, MP_PS_PQD_QueueType_t queueType, uint8_t blockType, BML_SbmType_t sbmType, uint32_t pecBeforeErase, uint32_t cookie, uint32_t waitForEraseOfOpbId, uint32_t flags);

void   PSR_EndEraseMarkerToOnePs(MP_MQD_PSType_t psType, BML_JumboBlock_ID_t jbId, BML_SbmType_t sbmType, MP_PS_PQD_QueueType_t qType);

void   PSR_EndEraseMarker(BML_JumboBlock_ID_t jbId, BML_SbmType_t sbmType, MP_PS_PQD_QueueType_t qType);

void   PSR_SecureEraseReq(MP_PS_PQD_QueueType_t qType, uint32_t cookie);

void   PSR_SecureEraseReq(MP_PS_PQD_QueueType_t qType, uint32_t cookie);

void   PSR_SendBarrierSingleQAllPsReq(MP_PS_PQD_QueueType_t qType, uint32_t cookie, PSR_BarrierUidType_t uid);

void   PSR_SendBarrierBothQAllPsReq(uint32_t cookie, PSR_BarrierAllType_t barrierType, PSR_BarrierUidType_t uid, BOOL isUrgentQueue);

void   PSR_SendFLGPbyVbaReq(VBA_t* vbaList, BML_JumboBlock_ID_t jblId, uint8_t opbId, BML_BlockType_t blkType, BML_SbmType_t sbmType, uint32_t pec, uint32_t* bmAdd, uint32_t* respAddr, uint32_t cookie, uint32_t reqIdx, BOOL32 isHSLC, BOOL32 isOnlyFirstVbaInUse, BOOL32 isCalledFromLog);

void   PSR_SendFLGPReq(JBA_t jba, uint8_t opbId, uint32_t pec, uint32_t* bmAdd, uint32_t* respAddr, uint32_t psRespOffset, uint32_t cookie);

void PSR_SendHlthStateChangeReq (uint32_t cookie, uint32_t src, uint32_t oldThrIdx, uint32_t newThrIdx);

void PSR_XorParityRes(JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void   PSR_JBReleaseReq(BML_JumboBlock_ID_t jbid, MP_PS_PQD_QueueType_t qType);

void   PSR_JBXorZoneReleaseReq(uint32_t jbid, uint32_t validXorZoneBmp, MP_PS_PQD_QueueType_t qType);

void   PSR_AdmSwapOBIDReq(uint8_t srcOpid, uint8_t trgOpid);

uint32_t   PSR_RSScanReq(uint32_t jbId, uint8_t isCtrlBlock, uint32_t jwl, uint32_t jwlIdx, BML_BlockType_t blkType, uint32_t nextToWriteFmu, BOOL isOpenBlk, MP_PS_PQD_QueueType_t qType);

void PSR_JBInfoRes(JBA_t jba, uint8_t opbId, uint8_t xbId, uint8_t blkTyp);

void   PSR_SetOpenBlockReq(JBA_t jba, OBM_BlockType_t opbId, MP_PS_PQD_QueueType_t qType, PS_SkipLoad_t skipLoad, BOOL32 isWABlock, uint32_t opbCounter);

void   PSR_CVDRestoreJBReq(JBA_t jba, OBM_BlockType_t opbId, uint32_t cookie);

void   PSR_ScanFwdReq(JBA_t jba, uint32_t fmuCount, uint8_t* pFFLBA, uint32_t cookie);

void   PSR_RlcReadWriteReq(JBA_t* jbaList, uint8_t* fmuCount, RLC_Read_Type_t* rlcReadTypeList, uint16_t reqCnt, JBA_t dstJBA, BOOL32 isXorProtected, OBM_BlockType_t opbId, BOOL32 isPaddingReq);



void   PSR_RelocateMTM(JBA_t srcJBA, JBA_t dstJBA, OBM_BlockType_t dstOpbId, uint32_t cookie);

void PSR_SetDeviceStateHealthChangeRed(uint32_t src, uint32_t oldThsldIdx, uint32_t newThsldIdx, uint32_t cookie);

void   PSR_CtrlSyncDoneIdication(void);

void   PSR_XorZoneEndReq(MP_PS_PQD_QueueType_t qType, OBM_BlockType_t opbId, JBA_t jba, uint32_t cookie);

void PSR_XorZeroFill(MP_PS_PQD_QueueType_t qType, OBM_BlockType_t opbId, JBA_t jba, uint64_t binFailureBitmap, uint32_t cookie, BOOL isUrgentQueue);

void PSR_XorNandFinished(XBID_t xbid, OBM_BlockType_t opbid, uint32_t jbid, uint32_t cookie, BOOL isUrgentQueue, XorLoadStoreType_t xorOperation);

void PSR_XorHmbFinished(XBID_t xbid, OBM_BlockType_t opbid, uint32_t jbid, uint32_t cookie, BOOL isUrgentQueue);

void   PSR_SendDRDReq(uint16_t drdCheckBitmap, uint32_t cookie, PS_CVD_DRD_Resp_t* pDrdResp);

BML_BlockType_t   PSR_GetVbaList(JBA_t jba, VBA_t* vbaList, uint32_t reqSizeInFmus, BOOL32 xorProtected);




void PSR_XorRecPauseForRecoveryReq(MP_MQD_PSType_t destPs, VBA_t failedVba, uint8_t blkType, uint8_t opbId, uint8_t XORZone, uint8_t isOpenZone, PS_XOR_ParityBinComposite_t parBinComposite, uint32_t jbid);
void   PSR_XorRecCompletionReq       (MP_MQD_PSType_t destPs, uint8_t fmusToRecoverBitmap, uint8_t parityFailedBitmap, uint8_t failedFmusBitmapPs0, uint8_t failedFmusBitmapPs1, uint8_t failedPs);
void   PSR_XorRecLoadParityPage(MP_MQD_PSType_t destPs, BOOL isOpenZone, uint8_t failPsId, PS_XOR_ParityBinComposite_t parBinComposite, uint8_t xorZone, uint8_t blkType, uint8_t xbid, VBA_t xorVba, BOOL isDRAM, uint8_t opbID, uint32_t JBLIdx);
void   PSR_XorRecStartRecoveryReq    (MP_MQD_PSType_t destPs, BOOL isOpenZone, uint8_t failPsId, PS_XOR_ParityBinComposite_t parBinComposite, uint8_t xorZone, uint8_t blkType, uint8_t opid, VBA_t failureVba, BML_JumboBlock_ID_t failedJbid, uint8_t fmusToRecover, uint8_t parityFailedBitmap, uint8_t bypassUnroll);
void   PSR_FailureReportAck          (MP_MQD_PSType_t destPs, uint32_t cookie, uint32_t psCookie, uint64_t lba, uint32_t mbPec);
void   PSR_NotifyDecommissionComplete(MP_MQD_PSType_t destPs, uint32_t metablockId, uint32_t logTimeStamp, PS_MB_decomReq_t* originalRequest_p);


void   PSR_SendUpdatePecReq(BML_BlockType_t blockType, uint32_t pec, uint32_t cookie);

void   PSR_XorDummyJwl0WriteReq(JBA_t jba);
void   PSR_XorRlcReadWriteReq(JBA_t srcJBA, JBA_t dstJBA, OBM_BlockType_t dstOpbId, uint32_t cookie);
void   PSR_XorStoreParityReq(XBID_t XBID, OBM_BlockType_t protectedOpbID, uint32_t jbid, JBA_t jba, uint32_t groupId, BOOL isSLC, XorStoreType_t mode, uint32_t cookie, BOOL isUrgentQueue);
void   PSR_XorLoadParityReq(XBID_t XBID, OBM_BlockType_t protectedOpbID, uint32_t protectedJBID, JBA_t xorJBA, uint32_t groupId, BOOL isSLC, XorLoadType_t mode, uint32_t cookie, BOOL isUrgentQueue);
void   PSR_XorRebuildReqSinglePs(MP_MQD_PSType_t destPs, uint32_t jbid, XBID_t xbid, OBM_BlockType_t opbid, VBA_t ugsdFerVba, uint64_t binFailureBitmap, uint8_t rebuildMode, uint32_t cookie, BOOL isUrgentQueue);
void   PSR_XorRebuildReqOnReset(JBA_t jba, XBID_t xbid, OBM_BlockType_t opbid, VBA_t FerVba, uint64_t binFailureBitmap, uint8_t rebuildMode, uint32_t cookie, BOOL isUrgentQueue);
void   PSR_XorRebuildReqSinglePsUgsd(MP_MQD_PSType_t destPs, OBM_BlockType_t opbid, uint64_t binFailureBitmap, uint32_t cookie);
void   PSR_SendCvdRefreshReq(void);

void   PSR_SendDstReq(uint32_t cookie);

void  __attribute__((section("CODE_RANDOM")))  PSR_SendPsHostReadReq4KB(JBA_t jba, uint32_t cmdIdx);
void PSR_SendPsSingleFmuCtrlReadReq(JBA_t jba, uint8_t** dataAddr, uint8_t** headerAddr, uint32_t cookie);

void   PSR_SendMbStatusResp(MP_MQD_PSType_t psType, VBA_t vba, JBA_t jba, Block_Status_t blockStatus,  uint32_t cookie);

#line 28 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"

#line 44 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
uint32_t EI_DISABLE_INT();
void     EI_RESTORE_INT(uint32_t intPosture);




enum EI_ListenerId_e
{
   EI_LISTENER_ID_MP_PQD,
   EI_LISTENER_ID_NONE
};










void EI_Init(void);
void EI_Init_PecGuardThresholds(void);
void EI_Ram_Init(void);
void EI_RlcAllocateCtxs(void);
Status_t EI_FirstMount(void);
void EI_Mount(uint16_t mntCtxtId);

Status_t EI_UserApiConfigure(uint32_t* pRawBuff);
Status_t EI_UserApiDoMetaBlockRevive(void);
void     EI_UserApiGetExtendedStatistics(uint32_t* pBuff, uint32_t buffSize, uint32_t* pTransferedDataSize);
void     EI_UserApiGetBasicStatistics(uint32_t* pBuff, uint32_t buffSize);
void     EI_UserApiGetBacklogStatistics(uint32_t* pBuff, uint32_t buffSize, uint32_t* pTransferedDataSize);
Status_t EI_UserApiDisable(void);
void     EI_UserApiConfigureDirectInjections(void);
void     EI_UserApiDisableDirectInjecions(void);
Status_t EI_UserApiGenericDispatch(uint32_t *pBuff, uint32_t buffSize);


void EI_NotifyMbEraseStart();
void EI_NotifyMbEraseEnd();
void EI_NotifyDecommission(uint32_t psId, FTL_Req_t* pMsg, uint32_t isFake);
void EI_NotifyCsStart(void);
void EI_NotifyCsEnd(void);
void EI_NotifyXorRecStart(PS_XOR_RequestRecoveryReq_t* pRecReq);
void EI_NotifyXorPauseResp(PS_XOR_PauseForXORRecoveryResp_t* pPauseResp);
void EI_NotifyFailureReport(PS_GenericExceptionReq_t* pReport, uint32_t psid);
void EI_NotifyHostUecc(const PS_HostReadExceptionReq_t* pReport, uint32_t psid, uint64_t lba);
void EI_NotifyInfraMailboxIsr(Mail_t cookie);
void EI_NotifyInfraSendWithComp(PS_genericMsg_t *pMsg, uint32_t psId);
void EI_ListenerSetSubCaller(uint32_t caller);

void EI_ListenerSetFFLBAForHostlessRead(uint32_t fflba, uint8_t cmdType);
EI_OpId_t EI_ListenerGetSubCaller(MP_MQD_PSType_t PSType, MP_PS_PQD_QueueType_t QType);
void EI_ListenerMpPqd(MP_MQD_PSType_t psId, MP_PS_PQD_QueueType_t QType, uint8_t* start, uint8_t* end, uint8_t* current, uint32_t length, uint32_t cnt);
void EI_ListenerDirectInjectInfra(MP_MQD_PSType_t psid, MP_PS_PQD_QueueType_t queueType, PS_ReqGeneric_t* psReqCommon, uint8_t failureType);
void EI_ListenerHostTlcProgDetect(BML_BlockType_t blockTyp, uint32_t* hwdCtxtList, uint32_t lstLen);
void EI_MpPqdListenerForPS_UT(MP_MQD_PSType_t psId, MP_PS_PQD_QueueType_t QType, uint8_t* start, uint8_t* end, uint8_t* current, uint32_t length, uint32_t cnt);

#line 111 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_JbRevStart(uint32_t rangeIndex, uint32_t *pHead, uint32_t jumboBlockId, uint16_t FMGCId, uint16_t payload, uint32_t execStatus);


void EI_MbRevUpdateMetaDieDecommissionTable(uint32_t metadie, uint32_t metablock);
BOOL32 EI_UtilCheckDecommission(uint32_t mdId);

#line 127 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_UtilCheckAvoidRoOnMtmUecc();

#line 139 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
BOOL32 EI_UtilCheckEiActive(void);
BOOL32 EI_CheckJbReviveActive(void);

#line 185 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
EI_OpId_t EI_UtilGetOpidForObidForPadding(OBM_BlockType_t obid);
EI_OpId_t EI_UtilGetOpidForObidForBrlc(OBM_BlockType_t obid);

uint32_t EI_bssGetMemorySize();
uint32_t* EI_bssAddressValidationGlobals();
uint32_t* EI_bssAddressValidationControlsPtr();
uint32_t* EI_bssAddressValidationStatisticsPtr();
void EI_PrepareDPS32();
void EI_WriteConfigAndGlobalsToFS();

#line 279 "d:/gitrepo/fpgcss-vega/source/ftl/inc_public/ei_mp_api.h"
extern void EI_PSR_ReEraseDieBlock(uint32_t psType, uint32_t metadieId, uint32_t metablockId, MP_PS_PQD_QueueType_t qType, uint8_t ignoreFailure, uint32_t cookie, uint8_t blockInMb, uint32_t pec, BOOL32 waitForEraseMarker);

#line 31 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"

#line 1 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_statistics.h"

#line 64 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_statistics.h"
enum EI_StatInternalOperation_e
{
   EI_STAT_INTERNAL_OP_ERASE                 = 0,
   EI_STAT_INTERNAL_OP_XOR_LOAD              = 1,
   EI_STAT_INTERNAL_OP_XOR_REC_UNROLL        = 2,

   EI_STAT_NUM_OF_INTERNAL_OP_TYPES          = 3,
};
typedef uint8_t EI_StatInternalOperation_t;

enum EI_StatPlanesInjected_e
{
   EI_STAT_PLANE0                            = 0,
   EI_STAT_PLANE1                            = 1,
   EI_STAT_PLANE2                            = 2,
   EI_STAT_PLANE3                            = 3,
   EI_STAT_PLANES_INJECTED_TOTAL             = 4,
};

enum EI_StatPfEfSecInj_e
{
   EI_STAT_ZERO_PF_EF_SEC_INJ = 0,
   EI_STAT_ONE_PF_EF_SEC_INJ = 1,
   EI_STAT_NUMBER_PF_EF_SEC_INJ = 2
};





typedef struct EI_StatExtendedDispatcherLevelEntry_s
{
   uint64_t                               rejectTerminatingStates;
   uint64_t                               rejectRestrictions;
   uint64_t                               rejectChances;
   uint64_t                               rejectImpossibleToInject;
   uint64_t                               rejectNotInTable;
   uint64_t                               noInjectionsLackOfIvEntries;
   uint64_t                               injecting;
   uint64_t                               verificationFailed;
}EI_StatExtendedDispatcherLevelEntry_t;


typedef struct EI_StatExtendedListenerEntry_s
{
   uint64_t                               mqdOperations;
   uint64_t                               rejectedOperations;
   uint64_t                               acceptedOperations;
   uint64_t                               totalInfraInjections;
   uint64_t                               rfu[4];
}EI_StatExtendedListenerEntry_t;


typedef struct EI_StatExtendedMbReviveEntry_s
{
   uint64_t                               mbReviveCounter;
   uint64_t                               mdReviveCounter;
}EI_StatExtendedMbReviveEntry_t;


typedef struct EI_StatExtendedJbidRevive_s
{
   uint64_t                               jbidReviveCounter;
   uint64_t                               jbReviveCounter;
}EI_StatExtendedJbidRevive_t;


typedef struct EI_StatExtendedStatistics_s
{
   uint32_t                              canaryValStart;
   uint32_t                              rfu0;



   EI_StatExtendedDispatcherLevelEntry_t dispatcherLevel[ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ ( ( 2 ) ) ];
   EI_StatExtendedListenerEntry_t        listenerLevel[ ( ( 2 ) ) ];
   uint64_t                              amountOfVectorInjections[ (16) ][ ( ( 2 ) ) ][ (16) ];
   uint64_t                              decommissionsCount[ (16) ][ ( ( 2 ) ) ];
   EI_StatExtendedMbReviveEntry_t        mbRevives[ (16) ];
   EI_StatExtendedJbidRevive_t           jbidRevives;
   uint64_t                              totalDecommissionsCount;
   uint64_t                              totalMbRevives;
   uint32_t                              rfu1[853];
   uint32_t                              canaryValEnd;
}EI_StatExtendedStatistics_t;






typedef struct EI_StatBasicStatus_s
{
   uint32_t                               eiState;
   uint32_t                               canaryValStart;
   uint64_t                               singleInjectionValidityBitmap;
   uint8_t                                pecGuardCounter[2];
   uint8_t                                rfu0[6];
   uint64_t                               rfu1[5];
}   EI_StatBasicStatus_t;


typedef struct EI_StatBasicIvEntryStatus_s
{
   uint8_t ivState;
   uint8_t rfu[7];
}   EI_StatBasicIvEntryStatus_t;

typedef struct EI_PFBasicStatistics_s
{
   uint32_t                               PFEFSecInjCounter[EI_STAT_NUMBER_PF_EF_SEC_INJ];
   uint32_t                               numberOfSkippedPfInjections;
   uint32_t                               numOfDecommissionHookSkip;
   uint32_t                               numberOfSkippedPfInjectionsGuard;
}   EI_PFBasicStatistics_t;

typedef struct EI_UeccBasicStatistics_s
{
   uint8_t                                intendedUeccRecoverableByDram[ ( (40)  - 10) ];
   uint8_t                                intendedUeccRecoverableByXram[ ( (40)  - 10) ];
   uint8_t                                intendedUeccUnrecoverable    [ ( (40)  - 10) ];
   uint8_t                                actualUeccPsReadLevelInjected[ ( (40)  - 10) ];
   uint64_t                               totalExpectedXorRecoveriesDram;
   uint64_t                               totalExpectedXorRecoveriesXram;
}   EI_UeccBasicStatistics_t;

typedef struct EI_PatternBasicStatistics_s
{
   uint32_t                               readPatterns  [ (10) ];
   uint32_t                               progPatterns  [ (10)  * 2];
   uint32_t                               erasePatterns [ (10)  - EI_NUM_OF_BLOCK_TYPES - EI_STAT_PLANES_INJECTED_TOTAL];
   uint32_t                               slcTlcInjected[EI_NUM_OF_BLOCK_TYPES];
   uint32_t                               planesInjected[EI_STAT_PLANES_INJECTED_TOTAL];
}   EI_PatternBasicStatistics_t;



typedef struct EI_StatBasicStatistics_s
{
   EI_StatBasicStatus_t                   basicStatus;
   uint64_t                               injectionsCounter               [ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ (2) ];
   uint16_t                               verificationFailuresCounter     [ (40) ][EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS][ (2) ];
   uint64_t                               totalInjectionsPerFlashAcessType[EI_NUM_OF_FLASH_ACCESS_TYPES_FOR_STATISTICS];
   uint64_t                               internalOpInjectionsCounter     [EI_STAT_NUM_OF_INTERNAL_OP_TYPES][ (2) ];
   EI_StatBasicIvEntryStatus_t            ivStatus                        [ (2) ][ (16) ];
   EI_PFBasicStatistics_t                 PFBasicStatistics;
   EI_UeccBasicStatistics_t               ueccBasicStatistics;
   EI_PatternBasicStatistics_t            patternBasicStatistics;
   uint32_t                               eraseStatisticsPerEraseType[EI_ERASE_TYPE_COUNT];
   uint32_t                               eraseStatisticsPerEraseTypeRfu[4];
   uint64_t                               totalInjectionsAllFlowIDs[ (2) ];
   uint32_t                               rfu[32];
   uint32_t                               canaryValEnd;
}   EI_StatBasicStatistics_t;






typedef struct EI_StatBacklogHeader_s
{
   uint32_t                               canaryValStart;
   uint32_t                               rfu;
   uint64_t                               firstEntrySerialNumber;
   uint64_t                               entriesAmountInLog;
}   EI_StatBacklogHeader_t;


typedef struct EI_StatBacklogEntry_s
{

   VBA_t                                  vba;
   uint8_t                                accessType;
   uint8_t                                opid;
   uint8_t                                failureCode;
   uint8_t                                injId8Lsb;
}   EI_StatBacklogEntry_t;


typedef struct EI_StatBacklogStatistics_s
{
   EI_StatBacklogHeader_t                backlogHeader;
   EI_StatBacklogEntry_t                 entries[ (2045) ];
}   EI_StatBacklogStatistics_t;





typedef struct EI_StatStatistics_s
{
   EI_StatExtendedStatistics_t           extendedStatistics;
   EI_StatBacklogStatistics_t            backlogStatistics;
   EI_StatBasicStatistics_t*             pBasicStatistics;
}EI_StatStatistics_t;





extern   EI_StatStatistics_t *pEI_Statistics;




void EI_StatIncreaseInjection(uint32_t opid, uint8_t accessType, uint32_t psid);
Status_t EI_StatValidateCanaries(void);
void EI_StatValidateStructureOffsets(void);
EI_StatBacklogEntry_t* EI_StatBacklogGetNextEntry(void);
void EI_StatBacklogPushEntry(void);
uint32_t EI_StatBacklogFillBuff(void* pBuff, uint32_t buffSize, uint32_t transferedDataSize);

#line 34 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"

#line 164 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"
typedef enum EI_IvResPool_e
{
   EI_IV_RES_POOL_XOR_REC = 0,
   EI_IV_RES_POOL_INFRA,
   EI_IV_RES_POOL_PAR_PAGE,

   EI_IV_RES_POOL_DEFAULT,
   EI_IV_NUM_OF_RES_POOLS
}EI_IvResPool_t;

typedef struct EI_IvResPoolData_s
{
   uint8_t startIdx;
   uint8_t size;
}EI_IvResPoolData_t;





enum EI_XorRecInjMapMask_e
{
   EI_XOR_REC_INJ_MAP_MASK_NONE       = 0x00,
   EI_XOR_REC_INJ_MAP_MASK_LOAD       = 0x01,
   EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS0 = 0x02,

   EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS1 = 0x04,

#line 195 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"
   EI_XOR_REC_INJ_MAP_MASK_MAY_FAIL   = 0x80,

   EI_XOR_REC_INJ_MAP_MASK_NO_LOAD    = (EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS0 | EI_XOR_REC_INJ_MAP_MASK_UNROLL_PS1),
   EI_XOR_REC_INJ_MAP_MASK_FULL       = (EI_XOR_REC_INJ_MAP_MASK_NO_LOAD    | EI_XOR_REC_INJ_MAP_MASK_LOAD),
};
typedef uint8_t EI_XorRecInjMapMask_t;



enum EI_ExecState_e
{
   EI_EXEC_STATE_DISABLED,
   EI_EXEC_STATE_ENABLED,
   EI_EXEC_STATE_TERMINATING,

   EI_EXEC_STATE_TOTAL,
};
typedef uint32_t EI_ExecState_t;

enum EI_JbReviveState_e
{
   EI_JB_REVIVE_STATE_IDLE,
   EI_JB_REVIVE_STATE_MOVING,
   EI_JB_REVIVE_STATE_MOVE_DONE,
   EI_JB_REVIVE_STATE_TOTAL,
};
typedef uint32_t EI_JbReviveState_t;


enum EI_revive_waypoint_e
{
   EI_ADD_MB_TO_REVIVE_LIST,
   EI_MB_LIST_REVIVED,
   EI_ADD_JB_TO_REVIVE_LIST,
   EI_JB_LIST_REVIVED,
};

enum EI_PF_INJECTION_TYPE
{
   EI_PF_INJECTION_TYPE_REGULAR = 0,
   EI_PF_INJECTION_TYPE_ALTERNATE,
   EI_PF_INJECTION_TYPE_NESTED,
   EI_PF_INJECTION_TYPE_TOTAL
};
typedef uint8_t EI_PFInjectionType_t;

enum EI_SgdRelinkCause_e
{
   EI_SGD_RELINK_CAUSE_BIT_ERASE = (1 << 0),
   EI_SGD_RELINK_CAUSE_BIT_PL0_SOFT_PROG_FAILURE = (1 << 1),
   EI_SGD_RELINK_CAUSE_BIT_PL0_OP_DOWNSHIFT = (1 << 2),
   EI_SGD_RELINK_CAUSE_BIT_PL0_EF_AFTER_SOFT_PROG = (1 << 3),
   EI_SGD_RELINK_CAUSE_BIT_PL0_EF_AFTER_OP = (1 << 4),
   EI_SGD_RELINK_CAUSE_BIT_PL1_SOFT_PROG_FAILURE = (1 << 5),
   EI_SGD_RELINK_CAUSE_BIT_PL1_OP_DOWNSHIFT = (1 << 6),
   EI_SGD_RELINK_CAUSE_BIT_PL1_EF_AFTER_SOFT_PROG = (1 << 7),
   EI_SGD_RELINK_CAUSE_BIT_PL1_EF_AFTER_OP = (1 << 8),
};
typedef uint8_t EI_eraseSgdRelinkCause_e;






typedef struct EI_IvEntryIdx_s
{
   uint8_t idx;
   uint8_t psId;
} EI_IvEntryIdx_t;

typedef struct EI_Arg_s
{
   PS_ReqGeneric_t *psReqCommon;
   uint32_t opID;
   uint8_t flashAccessType;
   uint8_t psId;
   uint16_t listenerId;
} EI_Arg_t;

typedef struct EI_OpData_s
{
   uint32_t             opFmuSize;
   uint32_t             opFmuOffset;
   uint32_t             opDiesSize;
   uint32_t             opDiesOffset;
   uint32_t             opPlanesSize;
   uint32_t             opPlanesOffset;
   VBA_t                opVba;
   EI_OpId_t            opid;
   EI_FlashAccessType_t opFlashAccessType;
   uint8_t              opBlkType;
   uint8_t rfu [2];
} EI_OpData_t;

typedef struct EI_reqData_s
{
   PS_Common_D0_t  dw0;
} EI_reqData_t;

typedef struct EI_VER_pageVBAMap_s
{
   VBA_t    pageFirstVBA;
   uint8_t  pageFMUMap;
} EI_VER_pageVBAMap_t;

typedef struct EI_IvEngInt_s
{
   EI_OpData_t  opData;
   EI_reqData_t reqData;
   uint32_t     unrecoverableReadBitmap;
   uint32_t     unrecoverableReadBitmap_DRAM;

   uint32_t     injId;
   EI_VER_pageVBAMap_t PFUnrecoverableMap[ ( (6) )  +  ( (48)  * (4) )  +  ( (4)  * (4)  * (3) ) * 2 ];
   uint8_t numOfPFUnrecoverableMaps;

   uint8_t numOfExpectedXorRequests;

   EI_InjectionDescriptor_t origIvEntry;

   uint8_t ivEntryCrc;
}EI_IvMetadata_t;

typedef struct EI_XorRecCtrl_s
{
   PS_XOR_RequestRecoveryReq_t recReq;
   PS_XOR_PauseForXORRecoveryResp_t pauseResp;
   EI_XorRecInjMapMask_t injMap[ ( (4) ) ];
   BOOL32 hasInjection [ ( ( 2 ) ) ][EI_INT_OP_ID_XOR_REC_TOTAL];
} EI_XorRecCtrl_t;


typedef struct EI_JbRevRlcVcRangeControl_s
{
   uint32_t             *pRlcScanHeaderPointer;
   uint16_t             jumboBlockId;
   uint32_t             currOffset;
   uint16_t             FMGCId;
   uint32_t             execStatus;
   uint16_t             payload;
   EI_JbReviveState_t   rangeState;
}EI_JbRevRlcVcRangeControl_t;

typedef struct EI_GlobalsSavedToFlash_s
{
   uint8_t              injectionsLeftInBurst;
   BOOL8                pecGuardIsOn;
   uint8_t              rfu[2];
}   EI_GlobalsSavedToFlash_t;

typedef struct EI_OPID_Config_s
{
   uint8_t currOPID;
   uint8_t rfu[3];
   uint8_t* EI_OpID_msgQs_p[MP_MQD_PS_TYPE_NUM][MP_PQD_QUEUE_TYPE_NUM];

}EI_OPID_Config_t;

#line 367 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"
typedef struct EI_LogResident_s
{
   EI_MetaDieDecommissionTable_t   metaDieDecommissionTable[ ( (8)  * ( 4 )  / (2) ) ];
   EI_StatBasicStatistics_t        basicStatistics;
   struct EI_LogResidentConfig_s
   {
      BOOL32   badBinRFU: 1;
      uint32_t rfu : 31;
   } configBits;

   uint32_t lastUsedSeed;

   uint32_t rfu[6];

}   EI_LogResident_t;

typedef struct EI_TlcProgInjTableEntry_s
{
   BOOL32                isValid;
   uint32_t              lmuPageVba[ (3) ];
   EI_InjDescProgErase_t progSpecific;
   EI_IvMetadata_t       metadata;
   uint64_t              timeStamp;
   uint8_t               rfu[3];
}EI_TlcProgInjTableEntry_t;

typedef struct EI_FlowParam_s
{
   PS_ReqGeneric_t      *psReqCommon;
   EI_FlashAccessType_t flashAccessType;
   MP_MQD_PSType_t      psid;
   EI_OpId_t            opid;
   uint16_t             listenerId;
   EI_InjDescSpecific_t injSpecific;
   EI_InjEntryType_t    injEntryType;
   EI_IvMetadata_t      metadata;
   uint32_t             JBLIdx;
   EI_VER_pageVBAMap_t PFPagesVBAMap[EI_PF_INJECTION_TYPE_TOTAL][ ((( (((( ( (6) ) )) > (( ( (48) * (4) ) ))) ? (( ( (6) ) )) : (( ( (48) * (4) ) ))) ) > (( ( (4) * (4) * (3) ) * 2 ))) ? ( (((( ( (6) ) )) > (( ( (48) * (4) ) ))) ? (( ( (6) ) )) : (( ( (48) * (4) ) ))) ) : (( ( (4) * (4) * (3) ) * 2 ))) ];
   uint8_t PFNumOfPagesVBAMap[EI_PF_INJECTION_TYPE_TOTAL];
   BOOL32 isHSLC;
} EI_FlowParam_t;
typedef EI_VER_pageVBAMap_t array_of_VBA_map_for_1Type[ ((( (((( ( (6) ) )) > (( ( (48) * (4) ) ))) ? (( ( (6) ) )) : (( ( (48) * (4) ) ))) ) > (( ( (4) * (4) * (3) ) * 2 ))) ? ( (((( ( (6) ) )) > (( ( (48) * (4) ) ))) ? (( ( (6) ) )) : (( ( (48) * (4) ) ))) ) : (( ( (4) * (4) * (3) ) * 2 ))) ];

struct EI_EngGlobals_s
{

   uint32_t canaryValStart;


   EI_ExecState_t execState;
   EI_ExecState_t lastExecState;
   BOOL32         isConfigWriteOngoing;
   BOOL32         isGlobalsWriteOngoing;
   BOOL32         execInternalEnabled;

   EI_IvMetadata_t injMetaData[ ( ( 2 ) ) ][ (16) ];
   EI_State_t      shadowState[ ( ( 2 ) ) ][ (16) ];

   uint64_t maxIvTimeout;
   uint32_t maxb2bDecomAllowed;

   struct
   {

      uint8_t mailboxPsOrig[ (16) ];
   } infra;

   struct
   {
      uint32_t* hwdCtxtList;
      uint32_t  hwdCtxtListLen;

      EI_TlcProgInjTableEntry_t tlcProgTable[ ( (6)  / (3) ) ];
      uint32_t  PFStatus;
   } tlcProg;

   struct
   {
      uint32_t doInjectSgdDownShift:1;
      uint32_t doInjectSgdUpShift:1;
      uint32_t eiNum:6;
      uint32_t sgdRelocationFimMap:8;
      uint32_t rfu:16;
   } sgd;

   struct
   {
      EI_JbRevRlcVcRangeControl_t    jbRevRlcVcRangeControl[ 6 ];
      uint32_t                       jbRevRlcVcRangeOrder[ 6 ];
      uint32_t                       jbRevRlcVcRangeOrderSize;
      BOOL32                         jbRevMoveContextIsScheduled;
      BOOL32                         jbRevMoveDoneContextIsScheduled;
      uint16_t                       jbRevMoveContext;
      uint16_t                       jbRevMoveDoneContext;
   } jbRev;

   uint32_t       randomSeed;
   EI_GlobalsSavedToFlash_t globalsSavedToFlash;




   BOOL32         mbReviveEnableFtl;
   BOOL32         blocksDecommissionSyncPsFlag;

   struct
   {
      EI_OpId_t SubCaller[ (THREAD_ID_ISR + 1) ];
      uint32_t hostlessReadFFLBA;
   } subCallerInfo;

#line 490 "d:/gitrepo/fpgcss-vega/source/ftl/ei/inc/ei_engine.h"
   uint32_t CsStartCount;
   uint32_t CsEndCount;
   uint32_t decommissionCount[ ( (8)  * ( 4 )  / (2) ) ];
   uint32_t injCouner;

   EI_LogResident_t              logResidentDataCopy;
   uint32_t                      isCurrentDecommissionMsgFake;

   EI_IvResPoolData_t ivResPoolData[EI_IV_NUM_OF_RES_POOLS];


   uint8_t wasSolePfDuringBurstInjected;


   struct
   {
      uint64_t cooldownTimestamp;
      uint32_t consecutiveCounter;
      uint32_t lastCsCount;

      uint32_t PecGuardThreshold[BML_NUM_PARTITIONS];
      uint32_t PecGuardExitThreshold[BML_NUM_PARTITIONS];
   } restrictions;


   EI_XorRecCtrl_t xorRec;


   EI_FlowParam_t flowParams;
   EI_FlowParam_t flowParamsInfra;

   struct
   {
      uint8_t  EI_SubcallerID_InfraQ[MP_MQD_PS_TYPE_NUM][ 16 ];
      uint8_t  EI_SubcallerID_AdminQ[MP_MQD_PS_TYPE_NUM][ 5 ];
      uint8_t  EI_SubcallerID_OpbReadQ[MP_MQD_PS_TYPE_NUM][ 256 ];
      uint8_t  EI_SubcallerID_HighReadyQ[MP_MQD_PS_TYPE_NUM][ 356 ];
      uint8_t  EI_SubcallerID_RlcReadyQ[MP_MQD_PS_TYPE_NUM][ 256 ];
      uint8_t  EI_SubcallerID_NormalReadyQ[MP_MQD_PS_TYPE_NUM][ 256 ];
   } FTLOpQueues;


   uint32_t canaryValEnd;
};

struct EI_MP_structures_s
{
   uint32_t                canaryValStart;
   EI_Config_t             config;
   struct EI_EngGlobals_s  engGlobals;
   EI_StatStatistics_t     statistics;
   uint32_t                canaryValEnd;
};

struct EI_GlobalStructs_s
{
   uint32_t                        canaryValStart;
   EI_InjectionVector_t*           injectionVector;
   struct EI_SharedGlobalParams_s* globalSharedParams;
   struct EI_MP_structures_s*      mp;
   uint32_t                        canaryValEnd;
};




extern   struct EI_GlobalStructs_s EI_GlobalStructs;

#line 37 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"




void  __attribute__((section("CODE_EI_RAM")))  EI_i_TraceBadConfig(const char* file, uint32_t line);

#line 82 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
uint8_t gEI_ActiveFlow[ (10) ];




void  __attribute__((section("CODE_EI_RAM")))  EI_i_TraceBadConfig(const char* file, uint32_t line)
{
   printf("[DBG_MSG_INFO]      "); printf("EI_VALIDATE_COND failed, %s, %d", file, line); printf("\n");fflush( (__acrt_iob_func(1)) ); ;
   ;
   ;
}

__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ValidatePercentSum(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize, uint32_t* retSum)
{
   uint32_t sum = 0;
   uint32_t i;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(lst), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 99 , "lst");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(retSum), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 100 , "retSum");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(maxLstSize >= listSize), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 101 , "maxLstSize >= listSize");                         "BullseyeCoverage restore"; } ;

   for(i=0; i < listSize; i++)
   {
      if(!(((lst[i])) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 105 ); return STATUS_ERROR;} ;
      sum += lst[i];
   }

   *retSum = sum;

   for(; i < maxLstSize; i++)
   {
      if(!(lst[i] == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 113 ); return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ValidatePercentSumIsMax(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 123 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   if(!(sum == (100) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 125 ); return STATUS_ERROR;} ;

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ValidatePercentSumIsNotZero(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 134 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   if(!(sum > 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 136 ); return STATUS_ERROR;} ;

   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ValidatePercentNoSum(const EI_Percent_t lst[], const uint32_t listSize, const uint32_t maxLstSize)
{
   uint32_t sum = 0;
   Status_t st = EI_i_ValidatePercentSum(lst, listSize, maxLstSize, &sum);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 145 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   return STATUS_OK;
}

void  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfFillChancesArrayWithMaxChance(EI_Percent_t* array, uint32_t arraySize)
{
   uint32_t i;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(array), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 153 , "array");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(arraySize > 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 154 , "arraySize > 0");                         "BullseyeCoverage restore"; } ;
   for (i = 0; i < arraySize; i++)
   {
      array[i] =  (100) ;
   }
}

void  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfFixLogBackwardCompatibility(EI_Config_t* config)
{
   Status_t st;
   uint32_t psIdx, dieIdx;
   uint32_t sum = 0;
   EI_OpidSpecificChancesTable_t* pLogChances = &config->operations[EI_OP_ID_LOG].opidSpecificChances;
   EI_OpidSpecificChancesTable_t* pRlcChances = &config->operations[EI_OP_ID_RLC_HOST].opidSpecificChances;
   EI_OpidSpecificChancesTable_t* pHostlessChances = &config->operations[EI_OP_ID_HOSTLESS].opidSpecificChances;

   st = EI_i_ValidatePercentSum(pLogChances->logChances.locations, EI_LOG_COPY_LOCATION_TOTAL, EI_LOG_COPY_LOCATION_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pLogChances->logChances.locations, EI_LOG_COPY_LOCATION_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pLogChances->logChances.reasons, EI_LOG_WRITE_REASON_TOTAL, EI_LOG_WRITE_REASON_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pLogChances->logChances.reasons, EI_LOG_WRITE_REASON_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pRlcChances->rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL, EI_RLC_TYPE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pRlcChances->rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL);
   }

   st = EI_i_ValidatePercentSum(pHostlessChances->hostlessChances.hostlessTypes, EI_HOSTLESS_TYPE_TOTAL, EI_HOSTLESS_TYPE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(pHostlessChances->hostlessChances.hostlessTypes, EI_HOSTLESS_TYPE_TOTAL);
   }


   sum = 0;
   for(psIdx = 0; psIdx <  (2) ; psIdx++)
   {
      for(dieIdx = 0; dieIdx <  (8) ; dieIdx++)
      {
         sum +=  config->generalConfig.planeAffinityMask[psIdx][dieIdx] ;
      }
   }

   if (sum == 0)
   {
      for(psIdx = 0; psIdx <  (2) ; psIdx++)
      {
         for(dieIdx = 0; dieIdx <  (8) ; dieIdx++)
         {
            { config->generalConfig.planeAffinityMask[psIdx][dieIdx] = (0xFF) ; } ;
         }
      }
   }
}

void  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfFixOpstBackwardCompatibility(EI_Config_t* config, uint8_t opid)
{
   Status_t st;
   uint32_t sum = 0;

   st = EI_i_ValidatePercentSum(config->operations[opid].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL, &sum);
   if ((st == STATUS_OK) && (sum == 0))
   {
      EI_i_ConfFillChancesArrayWithMaxChance(config->operations[opid].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL);
   }
}

#line 240 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
void EI_i_ConfFixEraseChancesBackwardCompatibility(EI_Config_t* config)
{
   EI_Percent_t chanceEraseFailure = config->allOpsChance.chanceEraseFailure;
   EI_Percent_t chanceEraseFailureDuringFnvm = config->allOpsChance.chanceEraseFailureDuringFnvm;
   EI_Percent_t chanceEraseFailureDuringBurst = config->burstMode.chanceEraseFailureDuringBurst;

   EI_Percent_t blockTypeFailureChances;
   EI_Percent_t blockTypeFailureChancesDuringBurst;

   EI_EraseChances_t* eraseChances = &config->configArraysExtenstion.eraseChances;
   EI_BlockType_t blockType;

   if (chanceEraseFailure > 0 || chanceEraseFailureDuringFnvm > 0)
   {

      eraseChances->eraseFailureChances[EI_ERASE_TYPE_FNVM] = chanceEraseFailureDuringFnvm;
      eraseChances->eraseFailureChances[EI_ERASE_TYPE_NORMAL] =  (((chanceEraseFailure) > (chanceEraseFailureDuringBurst)) ? (chanceEraseFailure) : (chanceEraseFailureDuringBurst)) ;

      if (chanceEraseFailureDuringBurst > chanceEraseFailure)
      {
         blockTypeFailureChances =  chanceEraseFailure != 0 ? (EI_Percent_t)( (100)  / (chanceEraseFailureDuringBurst * 1.0 / chanceEraseFailure)) : 0 ;
         blockTypeFailureChancesDuringBurst =  (100) ;
      }
      else
      {
         if (chanceEraseFailure == 0 && chanceEraseFailure == chanceEraseFailureDuringBurst)
         {
            blockTypeFailureChances = 0;
         }
         else
         {
            blockTypeFailureChances =  (100) ;
         }
         blockTypeFailureChancesDuringBurst =  chanceEraseFailureDuringBurst != 0 ? (EI_Percent_t)( (100)  / (chanceEraseFailure * 1.0 / chanceEraseFailureDuringBurst)) : 0 ;
      }

      for (blockType = EI_BLOCK_TYPE_SLC; blockType < EI_NUM_OF_BLOCK_TYPES; blockType++)
      {
         eraseChances->blockTypeFailureChances[blockType] = blockTypeFailureChances;
         eraseChances->blockTypeFailureChances[ (8)  / 2 + blockType] = blockTypeFailureChancesDuringBurst;
      }
      config->allOpsChance.chanceEraseFailure = 0;
      config->allOpsChance.chanceEraseFailureDuringFnvm = 0;
      config->burstMode.chanceEraseFailureDuringBurst = 0;
   }
   else
   {

      uint32_t sumEraseFailure = 0;
      uint32_t sumBlockTypeFailure = 0;
      EI_i_ValidatePercentSum(eraseChances->eraseFailureChances, EI_ERASE_TYPE_COUNT, EI_ERASE_TYPE_COUNT, &sumEraseFailure);
      EI_i_ValidatePercentSum(eraseChances->blockTypeFailureChances,  (8) ,  (8) , &sumBlockTypeFailure);

      if (sumEraseFailure > 0 && sumBlockTypeFailure == 0)
      {
         for (blockType = EI_BLOCK_TYPE_SLC; blockType < EI_NUM_OF_BLOCK_TYPES; blockType++)
         {
            eraseChances->blockTypeFailureChances[blockType] =  (100) ;
            eraseChances->blockTypeFailureChances[ (8)  / 2 + blockType] =  (100) ;
         }
      }
   }
}

void  __attribute__((section("CODE_EI_RAM")))  EI_ConfFixBackwardCompatibility(EI_Config_t* config)
{
   uint8_t opid;
   EI_i_ConfFixLogBackwardCompatibility(config);
   EI_i_ConfFixEraseChancesBackwardCompatibility(config);
   config->generalConfig.specialOpstBitmap = (config->generalConfig.specialOpstBitmap != 0)
      ? config->generalConfig.specialOpstBitmap
      : EI_SPECIAL_OPST_ALL;

   for(opid = 0; opid <  (40) ; opid++)
   {
      if (config->operations[opid].valid ==  (1)  || config->operations[opid].isParticipantInBurst ==  (1) )
      {
         EI_i_ConfFixOpstBackwardCompatibility(config, opid);
      }
   }


   if (EI_IS_FLOW_CONFIG(config) ==  (0) )
   {

      config->configArraysExtenstion.eiEnConfigFlowID[0] |= (uint8_t)(1 << (EI_DEFAULT_FLOW_COMPATEBILITY));
      gEI_ActiveFlow[0] |= (uint8_t)(1 << (EI_DEFAULT_FLOW_COMPATEBILITY));
   }
   else
   {
      LivetMemset (gEI_ActiveFlow, 0x0, sizeof(gEI_ActiveFlow));
   }
}

Status_t  __attribute__((section("CODE_EI_RAM")))  EI_GetOpSpecRestrictions(const uint32_t opId, BOOL32 *slcOnly, BOOL32 *readOnly, BOOL32 *progOnly, BOOL32 *openZoneOnly)
{
   BOOL32 tmpSlcOnly =  (0) , tmpReadOnly =  (0) , tmpProgOnly =  (0) , tmpOpenZoneOnly =  (0) ;

switch(opId)
   {

      case EI_OP_ID_HOST:
         break;
      case EI_OP_ID_HOSTLESS:
         break;
      case EI_OP_ID_RMW:
         break;
      case EI_OP_ID_FUA:
         tmpProgOnly =  (1) ;
         tmpOpenZoneOnly =  (1) ;
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_DEALLOC:
         break;


      case EI_OP_ID_LOG:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_PRM:
         tmpReadOnly =  (1) ;
         break;
      case EI_OP_ID_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_XOR:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_XOR_ZONE_REBUILD:
         tmpReadOnly =  (1) ;
         tmpOpenZoneOnly =  (1) ;
         break;
      case EI_OP_ID_ACTIVE_RS:
         tmpReadOnly =  (1) ;
         break;


      case EI_OP_ID_FLGP:
         break;
      case EI_OP_ID_SCAN_FWD:
         break;
      case EI_OP_ID_READ_HEADERS:
         tmpReadOnly =  (1) ;
         break;


      case EI_OP_ID_RLC_HOST_VC:
         tmpReadOnly =  (1) ;
         break;
      case EI_OP_ID_RLC_HOST:
         break;
      case EI_OP_ID_RLC_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_RLC_XOR:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_BRLC_HOST:
         break;
      case EI_OP_ID_BRLC_RLC:
         break;
      case EI_OP_ID_BRLC_MTM:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_BRLC_XOR:
         tmpSlcOnly =  (1) ;
         break;


      case EI_OP_ID_INFRA_IFS:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_FADI:
         tmpSlcOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_BOOT:
         tmpSlcOnly =  (1) ;
         tmpProgOnly =  (1) ;
         break;
      case EI_OP_ID_INFRA_DIR:
         tmpSlcOnly =  (1) ;
         tmpProgOnly =  (1) ;
         break;


      default:
         { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 426 , "(0)");                         "BullseyeCoverage restore"; } ;
         return STATUS_ERROR;
   }

   { "BullseyeCoverage save off";                          _AssertImpl((int)((tmpReadOnly && tmpProgOnly) == (0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 430 , "(tmpReadOnly && tmpProgOnly) == (0)");                         "BullseyeCoverage restore"; } ;

   if(slcOnly)
   {
      *slcOnly = tmpSlcOnly;
   }
   if(readOnly)
   {
      *readOnly = tmpReadOnly;
   }
   if(progOnly)
   {
      *progOnly = tmpProgOnly;
   }
   if(openZoneOnly)
   {
      *openZoneOnly = tmpOpenZoneOnly;
   }

   return STATUS_OK;
}


Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidOpSpecParams(const EI_Config_t *pConfig, uint32_t opId)
{
   Status_t st;
   BOOL32 slcOnly, readOnly, progOnly, openZoneOnly;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(pConfig), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 458 , "pConfig");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(opId < EI_NUM_OF_OP_IDS), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 459 , "opId < EI_NUM_OF_OP_IDS");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(pConfig->operations[opId].valid == (1) || pConfig->operations[opId].isParticipantInBurst == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 460 , "pConfig->operations[opId].valid == (1) || pConfig->operations[opId].isParticipantInBurst == (1)");                         "BullseyeCoverage restore"; } ;

   st = EI_GetOpSpecRestrictions(opId, &slcOnly, &readOnly, &progOnly, &openZoneOnly);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 463 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   if(slcOnly ==  (1) )
   {
      if(!(0 < (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_SLC])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 467 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_MLC])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 467 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].blockTypeFailureChances[EI_BLOCK_TYPE_MLC + ( (8)  / 2)])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 467 ); return STATUS_ERROR;} ;
   }
   if(readOnly ==  (1) )
   {
      if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 471 ); return STATUS_ERROR;} ;           if(!(0 < (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 471 ); return STATUS_ERROR;} ;           if(!(0 == (pConfig)->operations[opId].chanceToInitiateBurstOnProg)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 471 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG + ( (8)  / 2)])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 471 ); return STATUS_ERROR;} ;
   }
   if(progOnly ==  (1) )
   {
      if(!(0 < (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_PROG])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 475 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 475 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].chanceToInitiateBurstOnRead)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 475 ); return STATUS_ERROR;} ;          if(!(0 == (pConfig)->operations[opId].opTypeFailureChances[EI_FLASH_READ + ( (8)  / 2)])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 475 ); return STATUS_ERROR;} ;
   }
   if(openZoneOnly ==  (1) )
   {
      if(!(0 == (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 479 ); return STATUS_ERROR;} ;           if(!(0 == (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 479 ); return STATUS_ERROR;} ;             if(!(0 < (pConfig)->operations[opId].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK])) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 479 ); return STATUS_ERROR;} ;
   }


   switch(opId)
   {
      case EI_OP_ID_LOG:
         if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.logChances.locations, EI_LOG_COPY_LOCATION_TOTAL, EI_LOG_COPY_LOCATION_TOTAL))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 486 ); return STATUS_ERROR;} ;
         if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.logChances.reasons, EI_LOG_WRITE_REASON_TOTAL, EI_LOG_WRITE_REASON_TOTAL))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 487 ); return STATUS_ERROR;} ;
         break;
     case EI_OP_ID_RLC_HOST:
        if(!(STATUS_OK == EI_i_ValidatePercentSumIsNotZero(pConfig->operations[opId].opidSpecificChances.rlcChances.rlcTypes, EI_RLC_TYPE_TOTAL, EI_RLC_TYPE_TOTAL))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 490 ); return STATUS_ERROR;} ;
        break;
      case EI_OP_ID_FLGP:
      case EI_OP_ID_SCAN_FWD:
         { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 494 , "(0)");                         "BullseyeCoverage restore"; } ;
         return STATUS_ERROR;
         break;
   }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidAllOpsChancesTable(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 511 , "config");                         "BullseyeCoverage restore"; } ;


   if(!(((config->allOpsChance.chanceEraseFailure)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 514 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceXorRecDuringPfRecFailure)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 515 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedEraseFailureDuringEraseFailure)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 516 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chancePsDecommissionRequests)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 517 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceDstFailure)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 518 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceUnrecXorRecRead)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 519 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceToTriggerRlcAfterReadInj)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 520 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedWriteAbort)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 521 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceNestedEraseAbort)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 522 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceEraseFailureDuringFnvm)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 523 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceDrd)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 524 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceSgdDownShift)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 525 ); return STATUS_ERROR;} ;
   if(!(((config->allOpsChance.chanceSgdUpShift)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 526 ); return STATUS_ERROR;} ;

   if (config->allOpsChance.chanceDrd)
   {
      if(!(config->generalConfig.drdOpbBitmap)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 530 ); return STATUS_ERROR;} ;
   }

   if(!((config->allOpsChance.chanceSgdDownShift == 0) && (config->allOpsChance.chanceSgdUpShift == 0))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 533 ); return STATUS_ERROR;} ;


   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidOperationsTableInput(const EI_Config_t *config)
{
   uint32_t opId;
   BOOL32 haveValidOps =  (0) ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 544 , "config");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(2 * EI_NUM_OF_OP_TBL_ACCESS_TYPES <= (8)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 545 , "2 * EI_NUM_OF_OP_TBL_ACCESS_TYPES <= (8)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(2 * EI_NUM_OF_BLOCK_TYPES <= (8)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 546 , "2 * EI_NUM_OF_BLOCK_TYPES <= (8)");                         "BullseyeCoverage restore"; } ;

   for(opId=0; opId < EI_NUM_OF_OP_IDS; opId++)
   {
      if(!(((config->operations[opId].valid) == (1) ) || ((config->operations[opId].valid) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 550 ); return STATUS_ERROR;} ;
      if(!(((config->operations[opId].isParticipantInBurst) == (1) ) || ((config->operations[opId].isParticipantInBurst) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 551 ); return STATUS_ERROR;} ;

      if(config->operations[opId].valid ==  (1)  || config->operations[opId].isParticipantInBurst ==  (1) )
      {
         if((EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 555 , EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentNoSum(&config->operations[opId].chanceToInitiateBurstOnRead, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 556 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].operationalStateChances, EI_OPERATIONAL_STATE_TOTAL, EI_OPERATIONAL_STATE_TOTAL));} ;
         if((EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 557 , EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentNoSum(config->operations[opId].opTypeFailureChances, (8) , (8) ));} ;
         if((EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 558 , EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentNoSum(config->operations[opId].blockTypeFailureChances, (8) , (8) ));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 559 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].pagePlacementChances, EI_PLACEMENT_PAGE_TOTAL, (8) ));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 560 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].zoneStateChances, EI_ZONE_STATE_TOTAL, (8) ));} ;
         if((EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 561 , EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentNoSum (config->operations[opId].nestedFailuresChances, EI_NESTED_TOTAL, (8) ));} ;


         if(!(STATUS_OK == EI_i_ConfValidOpSpecParams(config, opId))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 564 ); return STATUS_ERROR;} ;
      }

      if (config->operations[opId].valid ==  (1) )
      {
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 569 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].opTypeFailureChances, EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 570 , EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(config->operations[opId].blockTypeFailureChances, EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES));} ;
         haveValidOps =  (1) ;
      }

      if (config->operations[opId].isParticipantInBurst ==  (1) )
      {
         if((EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8)  / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 576 , EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8) / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].opTypeFailureChances[ (8)  / 2], EI_NUM_OF_OP_TBL_ACCESS_TYPES, EI_NUM_OF_OP_TBL_ACCESS_TYPES));} ;
         if((EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8)  / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 577 , EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8) / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsNotZero(&config->operations[opId].blockTypeFailureChances[ (8)  / 2], EI_NUM_OF_BLOCK_TYPES, EI_NUM_OF_BLOCK_TYPES));} ;
         if(!(0 < config->burstMode.minInjectionsPerBurst)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 578 ); return STATUS_ERROR;} ;
      }
   }

  if ((haveValidOps ==  (0) )
      && (config->allOpsChance.chanceDstFailure == 0)
      && (config->allOpsChance.chancePsDecommissionRequests == 0)
      && (STATUS_OK != EI_i_ValidatePercentSumIsNotZero(config->configArraysExtenstion.eraseChances.eraseFailureChances, EI_ERASE_TYPE_COUNT, EI_ERASE_TYPE_COUNT)))
  {

     return STATUS_ERROR;
  }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidChancesTable(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 603 , "config");                         "BullseyeCoverage restore"; } ;

   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 605 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 606 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceXorRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 607 , EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChancePfRecRead, EI_NUM_OF_READ_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 608 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalProg, EI_NUM_OF_PROG_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 609 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceOriginalErase, EI_NUM_OF_ERASE_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 610 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedProg, EI_NUM_OF_NESTED_PROG_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 611 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceNestedErase, EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES, (16) ));} ;
   if((EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 612 , EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentNoSum (config->chances.failChanceSgd, EI_NUM_OF_CFG_SGD_FAILURE_TYPES, (16) ));} ;


   if(config->allOpsChance.chanceDstFailure > 0)
   {
      if((EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) )) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 617 , EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) )); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ValidatePercentSumIsMax(config->chances.failChanceDst, EI_NUM_OF_CFG_DST_FAILURE_TYPES, (16) ));} ;
   }





   if(!(config->chances.failChanceOriginalRead[EI_READ_SW_TH] == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 624 ); return STATUS_ERROR;} ;
   if(!(config->chances.failChancePfRecRead[EI_READ_SW_TH] == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 625 ); return STATUS_ERROR;} ;
   if(!(config->chances.failChanceXorRecRead[EI_READ_SW_TH] == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 626 ); return STATUS_ERROR;} ;


   if(!(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_SKIP_PAR_PAGES] == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 629 ); return STATUS_ERROR;} ;


   if(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WRITE_ABORT] != 0)
   {
      if(!(config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WRITE_ABORT] == (100) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 634 ); return STATUS_ERROR;} ;
   }

   if(config->chances.failChanceOriginalErase[EI_ERASE_WRITE_ABORT] != 0)
   {
      if(!(config->chances.failChanceOriginalErase[EI_ERASE_WRITE_ABORT] == (100) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 639 ); return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidateSingleEntryAddr(const EI_SingleInjTableEntry_t *singleEntry)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(singleEntry), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 647 , "singleEntry");                         "BullseyeCoverage restore"; } ;


   if(!(singleEntry->addrType < EI_NUM_OF_ADDR_TYPES)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 650 ); return STATUS_ERROR;} ;


   if(singleEntry->addr !=  (0xfffffffffffffffeULL) )
   {
      switch (singleEntry->addrType)
      {
         case EI_ADDR_TYPE_VBA:
         case EI_ADDR_TYPE_DEVBA:
            break;
         case EI_ADDR_TYPE_LBA:

            if(!(FE_API_IsLBAValid(singleEntry->nsId, singleEntry->addr) == (1) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 662 ); return STATUS_ERROR;} ;

            if(!(singleEntry->opToInject != EI_INJ_OP_ERASE)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 664 ); return STATUS_ERROR;} ;
            break;
         case EI_ADDR_TYPE_OPID:
            if(!(singleEntry->addr < EI_NUM_OF_OP_IDS)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 667 ); return STATUS_ERROR;} ;
            break;

         default:
            { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 671 , "(0)");                         "BullseyeCoverage restore"; } ;
            return STATUS_ERROR;
      }
   }


   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidSingleTableEntry(const EI_SingleInjTableEntry_t *singleEntry)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(singleEntry), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 689 , "singleEntry");                         "BullseyeCoverage restore"; } ;

   if(!(((singleEntry->isValid) == (1) ) || ((singleEntry->isValid) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 691 ); return STATUS_ERROR;} ;


   if (singleEntry->isValid ==  (1) )
   {
      uint32_t i, j;
      BOOL32 isReadErrorPerFmuConfigured =  (1) ;
      BOOL32 bytemapHasInjection =  (0) ;


      if((EI_i_ConfValidateSingleEntryAddr(singleEntry)) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 701 , EI_i_ConfValidateSingleEntryAddr(singleEntry)); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (EI_i_ConfValidateSingleEntryAddr(singleEntry));} ;


      if(!(singleEntry->opToInject < EI_NUM_OF_INJ_OP_TYPES)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 704 ); return STATUS_ERROR;} ;

      switch (singleEntry->opToInject)
      {
         case EI_INJ_OP_READ:

            if(!(((singleEntry->injParams.read.triggerRlc) == (1) ) || ((singleEntry->injParams.read.triggerRlc) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 710 ); return STATUS_ERROR;} ;


            isReadErrorPerFmuConfigured = EI_Config_IsReadfailurePerFmuMapConfigure(singleEntry->injParams.read.failurePerFmuMap);


            if (!isReadErrorPerFmuConfigured)
            {
               if(!(singleEntry->injParams.read.failureType < EI_READ_FAILURE_LEVEL_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 718 ); return STATUS_ERROR;} ;
               if(!(singleEntry->injParams.read.failureType != EI_READ_FAILURE_LEVEL_NONE)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 719 ); return STATUS_ERROR;} ;

               if(!(singleEntry->injParams.read.failureType != EI_READ_FAILURE_LEVEL_SW_TH)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 721 ); return STATUS_ERROR;} ;

            }
            break;
         case EI_INJ_OP_PROG:
         case EI_INJ_OP_XOR_STORE:
            {
               const EI_SingleProgConfigParams_t* progEntry = &singleEntry->injParams.prog;

               if(!(progEntry->failureType < EI_PROG_FAILURE_PATTERN_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 730 ); return STATUS_ERROR;} ;
               if(!(progEntry->nestedListProgEraseSize <= (4) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 731 ); return STATUS_ERROR;} ;
               if(!(progEntry->nestedListReadSize <= (8) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 732 ); return STATUS_ERROR;} ;
               if(!(progEntry->XORStoreMetaPgOffs < ( ( ( (4)  * (4) ) * ( ( 4 ) / ( 2 ) ) ) / (4) ) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 733 ); return STATUS_ERROR;} ;


               if(!(((progEntry->isParityPage) == (1) ) || ((progEntry->isParityPage) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 736 ); return STATUS_ERROR;} ;

#line 762 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
               for(i=0; i < progEntry->nestedListReadSize; i++)
               {
                  for(j=0; j< (4) ; j++)
                  {
                     if(!(progEntry->nestedInjReadByteMapsList[i][j] < EI_READ_FAILURE_LEVEL_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 766 ); return STATUS_ERROR;} ;
                  }
               }
            }
            break;
         case EI_INJ_OP_ERASE:
            if(!(singleEntry->injParams.erase.failureType < EI_ERASE_FAILURE_PATTERN_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 772 ); return STATUS_ERROR;} ;
            if(!(singleEntry->injParams.erase.numNestedEraseInjections <= (4) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 773 ); return STATUS_ERROR;} ;


            if(!(((singleEntry->injParams.erase.doPowerAbortOnLastNestedInjection) == (1) ) || ((singleEntry->injParams.erase.doPowerAbortOnLastNestedInjection) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 776 ); return STATUS_ERROR;} ;
            break;

         case EI_INJ_OP_XOR_LOAD:
         case EI_INJ_OP_XOR_REBUILD:
            if(!(singleEntry->injParams.xor_rec.size <= (8) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 781 ); return STATUS_ERROR;} ;

            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {
               if(!(singleEntry->injParams.xor_rec.ei[i].binNumber <= 30)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 785 ); return STATUS_ERROR;} ;
               if(!(singleEntry->injParams.xor_rec.ei[i].offsetInBin < (( ( ( ( ( 4 ) / ( 2 ) )  * (1)  * (8) ) )  * (4)  * ( (218) )  * ( (5) ) ) / ( ( ( (16) ) )  * ( ( ( (2)  * ( (5) ) ) ) ) )) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 786 ); return STATUS_ERROR;} ;

               for(j=0; j< ( (4) ) ; j++)
               {
                  if(!(singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] < EI_READ_FAILURE_LEVEL_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 790 ); return STATUS_ERROR;} ;

                  if (singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] != EI_READ_FAILURE_LEVEL_NONE)
                  {
                     bytemapHasInjection =  (1) ;
                  }
               }
               if(!(bytemapHasInjection == (1) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 797 ); return STATUS_ERROR;} ;
            }
            break;

         case EI_INJ_OP_XOR_REC_LOAD:
         case EI_INJ_OP_XOR_REC_UNROLL_PS0:
         case EI_INJ_OP_XOR_REC_UNROLL_PS1:
            if(!(singleEntry->injParams.xor_rec.size <= (8) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 804 ); return STATUS_ERROR;} ;

            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {

               if(!(singleEntry->injParams.xor_rec.ei[i].binNumber == 0)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 809 ); return STATUS_ERROR;} ;

               for(j=0; j< ( (4) ) ; j++)
               {
                  if(!(singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] < EI_READ_FAILURE_LEVEL_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 813 ); return STATUS_ERROR;} ;

                  if (singleEntry->injParams.xor_rec.ei[i].readInjBytemap[j] != EI_READ_FAILURE_LEVEL_NONE)
                  {
                     bytemapHasInjection =  (1) ;
                  }
               }
               if(!(bytemapHasInjection == (1) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 820 ); return STATUS_ERROR;} ;
            }
            break;
         case EI_INJ_OP_DST:
            for(i=0; i < singleEntry->injParams.xor_rec.size; i++)
            {
               if(!(singleEntry->injParams.dst.failureType[i] < EI_DST_FAILURE_TYPE_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 826 ); return STATUS_ERROR;} ;
            }
            break;
         case EI_INJ_OP_DRD:
            if(!(((singleEntry->injParams.drd.opbBitmap) == (1) ) || ((singleEntry->injParams.drd.opbBitmap) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 830 ); return STATUS_ERROR;} ;
            break;
         default:
            { "BullseyeCoverage save off";                          _AssertImpl((int)((0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 833 , "(0)");                         "BullseyeCoverage restore"; } ;
            return STATUS_ERROR;
      }
   }
   return STATUS_OK;
}

__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidBurstModeConfig(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 842 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->burstMode.isBackToBack) == (1) ) || ((config->burstMode.isBackToBack) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 844 ); return STATUS_ERROR;} ;
   if(!(((config->burstMode.isSolePfDuringBurst) == (1) ) || ((config->burstMode.isSolePfDuringBurst) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 845 ); return STATUS_ERROR;} ;
   if(!(config->burstMode.minInjectionsPerBurst <= config->burstMode.maxInjectionsPerBurst)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 846 ); return STATUS_ERROR;} ;
   if(!(((config->burstMode.chanceToInitiateBurstOnErase)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 847 ); return STATUS_ERROR;} ;
   if(!(((config->burstMode.chanceEraseFailureDuringBurst)) <= (( (100) )))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 848 ); return STATUS_ERROR;} ;


   if(config->burstMode.isSolePfDuringBurst)
   {
      uint32_t opId;
      BOOL32   haveProgsOnly =  (1) ;


      if (config->burstMode.chanceEraseFailureDuringBurst)
      {
         haveProgsOnly =  (0) ;
      }

      for (opId = 0; opId <  (40) ; ++opId)
      {

         if (config->operations[opId].isParticipantInBurst &&
             config->operations[opId].opTypeFailureChances[ (8)  / 2])
         {
            haveProgsOnly =  (0) ;
         }
      }

      if(!(haveProgsOnly == (0) )) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 872 ); return STATUS_ERROR;} ;
   }

   return STATUS_OK;
}
__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidRestrictions(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 879 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->restrictions.fullCS) == (1) ) || ((config->restrictions.fullCS) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 881 ); return STATUS_ERROR;} ;
   if(!(((config->restrictions.multyDiesPfEnable) == (1) ) || ((config->restrictions.multyDiesPfEnable) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 882 ); return STATUS_ERROR;} ;
   if(!(((config->restrictions.avoidRoOnMtmUecc) == (1) ) || ((config->restrictions.avoidRoOnMtmUecc) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 883 ); return STATUS_ERROR;} ;

   return STATUS_OK;
}








__inline static  Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidGeneralConfig(const EI_Config_t *config)
{
   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 897 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(((config->generalConfig.errLogEnable) == (1) ) || ((config->generalConfig.errLogEnable) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 899 ); return STATUS_ERROR;} ;
   if(!(((config->generalConfig.mbReviveEnableFull) == (1) ) || ((config->generalConfig.mbReviveEnableFull) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 900 ); return STATUS_ERROR;} ;
   if(!(((config->generalConfig.jbReviveEnable) == (1) ) || ((config->generalConfig.jbReviveEnable) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 901 ); return STATUS_ERROR;} ;
   if(!(((config->generalConfig.doSurvivePowerCycles) == (1) ) || ((config->generalConfig.doSurvivePowerCycles) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 902 ); return STATUS_ERROR;} ;
   if(!(((config->generalConfig.mbReviveDisableFtl) == (1) ) || ((config->generalConfig.mbReviveDisableFtl) == (0) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 903 ); return STATUS_ERROR;} ;

   if(!(config->generalConfig.confType < EI_CONF_TYPE_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 905 ); return STATUS_ERROR;} ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->generalConfig.mbReviveEnableFull ? (config->allOpsChance.chancePsDecommissionRequests ? (0) : (1) ) : (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 906 , "!config->generalConfig.mbReviveEnableFull ? (config->allOpsChance.chancePsDecommissionRequests ? (0):(1)) : (1)");                         "BullseyeCoverage restore"; } ;

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidSingleInjectionTable(const EI_Config_t *config)
{
   uint32_t entry;
   Status_t status;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 923 , "config");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleReadConfigParams_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 924 , "sizeof(EI_SingleReadConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleProgConfigParams_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 925 , "sizeof(EI_SingleProgConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleEraseConfigParams_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 926 , "sizeof(EI_SingleEraseConfigParams_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescXor_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 927 , "sizeof(EI_InjDescXor_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescDst_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 928 , "sizeof(EI_InjDescDst_t) <= (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_InjDescDrd_t) <= (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 929 , "sizeof(EI_InjDescDrd_t) <= (80)");                         "BullseyeCoverage restore"; } ;

   for(entry = 0; entry <  (6) ; entry++)
   {
      status = EI_i_ConfValidSingleTableEntry(&(config->singleInjections[entry]));
      if((status) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 934 , status); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (status);} ;
   }

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidRandInjection(const EI_Config_t *config)
{
   Status_t st;

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 951 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidGeneralConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 954 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidRestrictions(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 957 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidAllOpsChancesTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 960 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidChancesTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 963 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidOperationsTableInput(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 966 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidBurstModeConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 969 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   return STATUS_OK;
}








Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidSingleInjection(const EI_Config_t *config)
{
   Status_t st;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 986 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidGeneralConfig(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 989 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   st = EI_i_ConfValidSingleInjectionTable(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 992 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   return STATUS_OK;
}

Status_t  __attribute__((section("CODE_EI_RAM")))  EI_i_ConfValidHeader(const EI_Config_t *config)
{

   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1000 , "config");                         "BullseyeCoverage restore"; } ;

   if(!(( (2)  <= config->version) && (config->version <= (19) ))) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1002 ); return STATUS_ERROR;} ;

   return STATUS_OK;
}







void  __attribute__((section("CODE_EI_RAM")))  EI_ValidateConfigStructureOffsets(void)
{
   const EI_Config_t *pConfig = &EI_GlobalStructs.mp->config;
   uint32_t offset = 0;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_READ_FAILURE_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1019 , "(16) >= EI_NUM_OF_READ_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_PROG_FAILURE_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1020 , "(16) >= EI_NUM_OF_PROG_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_NESTED_PROG_FAILURE_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1021 , "(16) >= EI_NUM_OF_NESTED_PROG_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_ERASE_FAILURE_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1022 , "(16) >= EI_NUM_OF_ERASE_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((16) >= EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1023 , "(16) >= EI_NUM_OF_NESTED_ERASE_FAILURE_TYPES");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NUM_OF_FLASH_ACCESS_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1026 , "(8) >= EI_NUM_OF_FLASH_ACCESS_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NUM_OF_BLOCK_TYPES), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1027 , "(8) >= EI_NUM_OF_BLOCK_TYPES");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_PLACEMENT_PAGE_TOTAL), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1028 , "(8) >= EI_PLACEMENT_PAGE_TOTAL");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_ZONE_STATE_TOTAL), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1029 , "(8) >= EI_ZONE_STATE_TOTAL");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((8) >= EI_NESTED_TOTAL), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1030 , "(8) >= EI_NESTED_TOTAL");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((40) >= EI_NUM_OF_OP_IDS), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1033 , "(40) >= EI_NUM_OF_OP_IDS");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_Percent_t) == 1), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1036 , "sizeof(EI_Percent_t) == 1");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ConfType_t) == 4), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1037 , "sizeof(EI_ConfType_t) == 4");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(BOOL32) == 4), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1038 , "sizeof(BOOL32) == 4");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_GeneralConfig_t) == (32)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1039 , "sizeof(EI_GeneralConfig_t) == (32)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_GeneralConfig_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1039 , "(sizeof(EI_GeneralConfig_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_RestrictionsConfig_t) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1040 , "sizeof(EI_RestrictionsConfig_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_RestrictionsConfig_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1040 , "(sizeof(EI_RestrictionsConfig_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_AllOpsFailureChances_t) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1041 , "sizeof(EI_AllOpsFailureChances_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_AllOpsFailureChances_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1041 , "(sizeof(EI_AllOpsFailureChances_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ChancesTable_t) == (256)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1042 , "sizeof(EI_ChancesTable_t) == (256)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_ChancesTable_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1042 , "(sizeof(EI_ChancesTable_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_OpTableEntry_t) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1043 , "sizeof(EI_OpTableEntry_t) == (72)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_OpTableEntry_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1043 , "(sizeof(EI_OpTableEntry_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_BurstModeParameters_t) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1044 , "sizeof(EI_BurstModeParameters_t) == (16)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_BurstModeParameters_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1044 , "(sizeof(EI_BurstModeParameters_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_OpidSpecificChancesTable_t) == (24)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1045 , "sizeof(EI_OpidSpecificChancesTable_t) == (24)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_OpidSpecificChancesTable_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1045 , "(sizeof(EI_OpidSpecificChancesTable_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleInjTableEntry_t) == (96)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1046 , "sizeof(EI_SingleInjTableEntry_t) == (96)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleInjTableEntry_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1046 , "(sizeof(EI_SingleInjTableEntry_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleReadConfigParams_t) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1047 , "sizeof(EI_SingleReadConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleReadConfigParams_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1047 , "(sizeof(EI_SingleReadConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleProgConfigParams_t) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1048 , "sizeof(EI_SingleProgConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleProgConfigParams_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1048 , "(sizeof(EI_SingleProgConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleEraseConfigParams_t) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1049 , "sizeof(EI_SingleEraseConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleEraseConfigParams_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1049 , "(sizeof(EI_SingleEraseConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_SingleConfigParams_t) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1050 , "sizeof(EI_SingleConfigParams_t) == (80)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_SingleConfigParams_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1050 , "(sizeof(EI_SingleConfigParams_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_ConfigArraysExtenstion_t) == (280)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1051 , "sizeof(EI_ConfigArraysExtenstion_t) == (280)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_ConfigArraysExtenstion_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1051 , "(sizeof(EI_ConfigArraysExtenstion_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(EI_Config_t) == (4096)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1052 , "sizeof(EI_Config_t) == (4096)");                         "BullseyeCoverage restore"; } ;          { "BullseyeCoverage save off";                          _AssertImpl((int)((sizeof(EI_Config_t) & 7) == 0), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1052 , "(sizeof(EI_Config_t) & 7) == 0");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1055 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValStart) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1055 , "sizeof(pConfig->canaryValStart) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1056 , "(uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->version) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1056 , "sizeof(pConfig->version) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((16))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1057 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig) == (32)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1057 , "sizeof(pConfig->generalConfig) == (32)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((48))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1058 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((48))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1058 , "sizeof(pConfig->restrictions) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((64))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1059 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1059 , "sizeof(pConfig->allOpsChance) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((80))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1060 , "(uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((80))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->chances) == (256)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1060 , "sizeof(pConfig->chances) == (256)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((336))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1061 , "(uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((336))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations) == (2880)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1061 , "sizeof(pConfig->operations) == (2880)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((3216))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1062 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((3216))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections) == (576)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1062 , "sizeof(pConfig->singleInjections) == (576)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((3792))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1063 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((3792))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1063 , "sizeof(pConfig->burstMode) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((3808))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1064 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((3808))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion) == (280)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1064 , "sizeof(pConfig->configArraysExtenstion) == (280)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((4091))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1065 , "(uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((4091))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->isConfigValid) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1065 , "sizeof(pConfig->isConfigValid) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((4092))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1066 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((4092))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValEnd) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1066 , "sizeof(pConfig->canaryValEnd) == (4)");                         "BullseyeCoverage restore"; } ; ;

   offset = 0;
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1069 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValStart))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValStart) == (sizeof(pConfig->canaryValStart))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1069 , "sizeof(pConfig->canaryValStart) == (sizeof(pConfig->canaryValStart))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->canaryValStart);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1071 , "(uint32_t)((uint8_t*)(&((pConfig->version))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->version) == (sizeof(pConfig->version))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1071 , "sizeof(pConfig->version) == (sizeof(pConfig->version))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->version);
   offset += sizeof(pConfig->rfu0);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1074 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig) == (sizeof(pConfig->generalConfig))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1074 , "sizeof(pConfig->generalConfig) == (sizeof(pConfig->generalConfig))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1076 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions) == (sizeof(pConfig->restrictions))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1076 , "sizeof(pConfig->restrictions) == (sizeof(pConfig->restrictions))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->restrictions);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1078 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance) == (sizeof(pConfig->allOpsChance))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1078 , "sizeof(pConfig->allOpsChance) == (sizeof(pConfig->allOpsChance))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->allOpsChance);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1080 , "(uint32_t)((uint8_t*)(&((pConfig->chances))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->chances) == (sizeof(pConfig->chances))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1080 , "sizeof(pConfig->chances) == (sizeof(pConfig->chances))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->chances);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1082 , "(uint32_t)((uint8_t*)(&((pConfig->operations))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations) == (sizeof(pConfig->operations))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1082 , "sizeof(pConfig->operations) == (sizeof(pConfig->operations))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->operations);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1084 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections) == (sizeof(pConfig->singleInjections))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1084 , "sizeof(pConfig->singleInjections) == (sizeof(pConfig->singleInjections))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->singleInjections);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1086 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode) == (sizeof(pConfig->burstMode))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1086 , "sizeof(pConfig->burstMode) == (sizeof(pConfig->burstMode))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->burstMode);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1088 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion) == (sizeof(pConfig->configArraysExtenstion))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1088 , "sizeof(pConfig->configArraysExtenstion) == (sizeof(pConfig->configArraysExtenstion))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->configArraysExtenstion);
   offset += sizeof(pConfig->rfu1);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1091 , "(uint32_t)((uint8_t*)(&((pConfig->isConfigValid))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->isConfigValid) == (sizeof(pConfig->isConfigValid))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1091 , "sizeof(pConfig->isConfigValid) == (sizeof(pConfig->isConfigValid))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->isConfigValid);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1093 , "(uint32_t)((uint8_t*)(&((pConfig->canaryValEnd))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->canaryValEnd) == (sizeof(pConfig->canaryValEnd))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1093 , "sizeof(pConfig->canaryValEnd) == (sizeof(pConfig->canaryValEnd))");                         "BullseyeCoverage restore"; } ; ;


   offset = 16;

   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.confType))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1098 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.confType))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.confType) == (sizeof(pConfig->generalConfig.confType))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1098 , "sizeof(pConfig->generalConfig.confType) == (sizeof(pConfig->generalConfig.confType))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.confType);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.randomSeed))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1100 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.randomSeed))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.randomSeed) == (sizeof(pConfig->generalConfig.randomSeed))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1100 , "sizeof(pConfig->generalConfig.randomSeed) == (sizeof(pConfig->generalConfig.randomSeed))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.randomSeed);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.errLogEnable))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1102 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.errLogEnable))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.errLogEnable) == (sizeof(pConfig->generalConfig.errLogEnable))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1102 , "sizeof(pConfig->generalConfig.errLogEnable) == (sizeof(pConfig->generalConfig.errLogEnable))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.errLogEnable);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveEnableFull))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1104 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveEnableFull))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.mbReviveEnableFull) == (sizeof(pConfig->generalConfig.mbReviveEnableFull))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1104 , "sizeof(pConfig->generalConfig.mbReviveEnableFull) == (sizeof(pConfig->generalConfig.mbReviveEnableFull))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.mbReviveEnableFull);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.jbReviveEnable))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1106 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.jbReviveEnable))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.jbReviveEnable) == (sizeof(pConfig->generalConfig.jbReviveEnable))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1106 , "sizeof(pConfig->generalConfig.jbReviveEnable) == (sizeof(pConfig->generalConfig.jbReviveEnable))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.jbReviveEnable);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.doSurvivePowerCycles))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1108 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.doSurvivePowerCycles))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.doSurvivePowerCycles) == (sizeof(pConfig->generalConfig.doSurvivePowerCycles))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1108 , "sizeof(pConfig->generalConfig.doSurvivePowerCycles) == (sizeof(pConfig->generalConfig.doSurvivePowerCycles))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.doSurvivePowerCycles);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.drdOpbBitmap))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1110 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.drdOpbBitmap))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.drdOpbBitmap) == (sizeof(pConfig->generalConfig.drdOpbBitmap))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1110 , "sizeof(pConfig->generalConfig.drdOpbBitmap) == (sizeof(pConfig->generalConfig.drdOpbBitmap))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.drdOpbBitmap);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveDisableFtl))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1112 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.mbReviveDisableFtl))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.mbReviveDisableFtl) == (sizeof(pConfig->generalConfig.mbReviveDisableFtl))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1112 , "sizeof(pConfig->generalConfig.mbReviveDisableFtl) == (sizeof(pConfig->generalConfig.mbReviveDisableFtl))");                         "BullseyeCoverage restore"; } ; ;
   offset += sizeof(pConfig->generalConfig.mbReviveDisableFtl);
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask[0]))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1114 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask[0]))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.planeAffinityMask[0]) == (sizeof(pConfig->generalConfig.planeAffinityMask[0]))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1114 , "sizeof(pConfig->generalConfig.planeAffinityMask[0]) == (sizeof(pConfig->generalConfig.planeAffinityMask[0]))");                         "BullseyeCoverage restore"; } ; ;
   offset +=  (8) ;
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask[1]))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1116 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.planeAffinityMask[1]))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.planeAffinityMask[1]) == (sizeof(pConfig->generalConfig.planeAffinityMask[1]))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1116 , "sizeof(pConfig->generalConfig.planeAffinityMask[1]) == (sizeof(pConfig->generalConfig.planeAffinityMask[1]))");                         "BullseyeCoverage restore"; } ; ;
   offset +=  (8) ;
   ;    { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->generalConfig.specialOpstBitmap))) - (uint8_t*)(&((*pConfig)))) == ((offset))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1118 , "(uint32_t)((uint8_t*)(&((pConfig->generalConfig.specialOpstBitmap))) - (uint8_t*)(&((*pConfig)))) == ((offset))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->generalConfig.specialOpstBitmap) == (sizeof(pConfig, pConfig->generalConfig.specialOpstBitmap))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1118 , "sizeof(pConfig->generalConfig.specialOpstBitmap) == (sizeof(pConfig, pConfig->generalConfig.specialOpstBitmap))");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addr))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1121 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addr))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].addr) == (8)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1121 , "sizeof(pConfig->singleInjections[0].addr) == (8)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addrType))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1122 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].addrType))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].addrType) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1122 , "sizeof(pConfig->singleInjections[0].addrType) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].nsId))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1123 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].nsId))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].nsId) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1123 , "sizeof(pConfig->singleInjections[0].nsId) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].opToInject))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((10))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1124 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].opToInject))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].opToInject) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1124 , "sizeof(pConfig->singleInjections[0].opToInject) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].isValid))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((11))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1125 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].isValid))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].isValid) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1125 , "sizeof(pConfig->singleInjections[0].isValid) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((16))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1126 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams))) - (uint8_t*)(&((pConfig->singleInjections[0])))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1126 , "sizeof(pConfig->singleInjections[0].injParams) == (80)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.cooldownTime))) - (uint8_t*)(&((*pConfig)))) == ((48))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1129 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.cooldownTime))) - (uint8_t*)(&((*pConfig)))) == ((48))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.cooldownTime) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1129 , "sizeof(pConfig->restrictions.cooldownTime) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.consecutiveGap))) - (uint8_t*)(&((*pConfig)))) == ((52))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1130 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.consecutiveGap))) - (uint8_t*)(&((*pConfig)))) == ((52))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.consecutiveGap) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1130 , "sizeof(pConfig->restrictions.consecutiveGap) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.fullCS))) - (uint8_t*)(&((*pConfig)))) == ((56))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1131 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.fullCS))) - (uint8_t*)(&((*pConfig)))) == ((56))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.fullCS) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1131 , "sizeof(pConfig->restrictions.fullCS) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.multyDiesPfEnable))) - (uint8_t*)(&((*pConfig)))) == ((57))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1132 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.multyDiesPfEnable))) - (uint8_t*)(&((*pConfig)))) == ((57))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.multyDiesPfEnable) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1132 , "sizeof(pConfig->restrictions.multyDiesPfEnable) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->restrictions.avoidRoOnMtmUecc))) - (uint8_t*)(&((*pConfig)))) == ((58))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1133 , "(uint32_t)((uint8_t*)(&((pConfig->restrictions.avoidRoOnMtmUecc))) - (uint8_t*)(&((*pConfig)))) == ((58))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->restrictions.avoidRoOnMtmUecc) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1133 , "sizeof(pConfig->restrictions.avoidRoOnMtmUecc) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1136 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceEraseFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1136 , "sizeof(pConfig->allOpsChance.chanceEraseFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceXorRecDuringPfRecFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1137 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceXorRecDuringPfRecFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceXorRecDuringPfRecFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1137 , "sizeof(pConfig->allOpsChance.chanceXorRecDuringPfRecFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((2))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1138 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1138 , "sizeof(pConfig->allOpsChance.chanceNestedEraseFailureDuringEraseFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chancePsDecommissionRequests))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((3))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1139 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chancePsDecommissionRequests))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chancePsDecommissionRequests) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1139 , "sizeof(pConfig->allOpsChance.chancePsDecommissionRequests) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceProgParityPage))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1140 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceProgParityPage))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceProgParityPage) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1140 , "sizeof(pConfig->allOpsChance.chanceProgParityPage) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDstFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((5))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1141 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDstFailure))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceDstFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1141 , "sizeof(pConfig->allOpsChance.chanceDstFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceUnrecXorRecRead))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1142 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceUnrecXorRecRead))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceUnrecXorRecRead) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1142 , "sizeof(pConfig->allOpsChance.chanceUnrecXorRecRead) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((7))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1143 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1143 , "sizeof(pConfig->allOpsChance.chanceToTriggerRlcAfterReadInj) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedWriteAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1144 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedWriteAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedWriteAbort) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1144 , "sizeof(pConfig->allOpsChance.chanceNestedWriteAbort) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1145 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceNestedEraseAbort))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceNestedEraseAbort) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1145 , "sizeof(pConfig->allOpsChance.chanceNestedEraseAbort) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureDuringFnvm))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((10))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1146 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureDuringFnvm))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceEraseFailureDuringFnvm) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1146 , "sizeof(pConfig->allOpsChance.chanceEraseFailureDuringFnvm) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDrd))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((11))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1147 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceDrd))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceDrd) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1147 , "sizeof(pConfig->allOpsChance.chanceDrd) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdDownShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((12))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1148 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdDownShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceSgdDownShift) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1148 , "sizeof(pConfig->allOpsChance.chanceSgdDownShift) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdUpShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((13))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1149 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceSgdUpShift))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceSgdUpShift) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1149 , "sizeof(pConfig->allOpsChance.chanceSgdUpShift) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceReadDuringSuspendErase))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((14))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1150 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceReadDuringSuspendErase))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((14))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceReadDuringSuspendErase) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1150 , "sizeof(pConfig->allOpsChance.chanceReadDuringSuspendErase) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureFadiJtag))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((15))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1151 , "(uint32_t)((uint8_t*)(&((pConfig->allOpsChance.chanceEraseFailureFadiJtag))) - (uint8_t*)(&((pConfig->allOpsChance)))) == ((15))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->allOpsChance.chanceEraseFailureFadiJtag) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1151 , "sizeof(pConfig->allOpsChance.chanceEraseFailureFadiJtag) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((336))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1154 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((336))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOST]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1154 , "sizeof(pConfig->operations[EI_OP_ID_HOST]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RMW]))) - (uint8_t*)(&((*pConfig)))) == ((408))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1155 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RMW]))) - (uint8_t*)(&((*pConfig)))) == ((408))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RMW]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1155 , "sizeof(pConfig->operations[EI_OP_ID_RMW]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FUA]))) - (uint8_t*)(&((*pConfig)))) == ((480))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1156 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FUA]))) - (uint8_t*)(&((*pConfig)))) == ((480))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_FUA]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1156 , "sizeof(pConfig->operations[EI_OP_ID_FUA]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_DEALLOC]))) - (uint8_t*)(&((*pConfig)))) == ((552))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1157 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_DEALLOC]))) - (uint8_t*)(&((*pConfig)))) == ((552))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_DEALLOC]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1157 , "sizeof(pConfig->operations[EI_OP_ID_DEALLOC]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG]))) - (uint8_t*)(&((*pConfig)))) == ((624))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1158 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG]))) - (uint8_t*)(&((*pConfig)))) == ((624))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1158 , "sizeof(pConfig->operations[EI_OP_ID_LOG]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_PRM]))) - (uint8_t*)(&((*pConfig)))) == ((696))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1159 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_PRM]))) - (uint8_t*)(&((*pConfig)))) == ((696))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_PRM]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1159 , "sizeof(pConfig->operations[EI_OP_ID_PRM]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((768))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1160 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((768))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_MTM]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1160 , "sizeof(pConfig->operations[EI_OP_ID_MTM]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((840))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1161 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((840))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1161 , "sizeof(pConfig->operations[EI_OP_ID_XOR]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]))) - (uint8_t*)(&((*pConfig)))) == ((912))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1162 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]))) - (uint8_t*)(&((*pConfig)))) == ((912))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1162 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_ACTIVE_RS]))) - (uint8_t*)(&((*pConfig)))) == ((984))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1163 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_ACTIVE_RS]))) - (uint8_t*)(&((*pConfig)))) == ((984))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_ACTIVE_RS]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1163 , "sizeof(pConfig->operations[EI_OP_ID_ACTIVE_RS]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FLGP]))) - (uint8_t*)(&((*pConfig)))) == ((1056))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1164 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_FLGP]))) - (uint8_t*)(&((*pConfig)))) == ((1056))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_FLGP]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1164 , "sizeof(pConfig->operations[EI_OP_ID_FLGP]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_SCAN_FWD]))) - (uint8_t*)(&((*pConfig)))) == ((1128))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1165 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_SCAN_FWD]))) - (uint8_t*)(&((*pConfig)))) == ((1128))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_SCAN_FWD]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1165 , "sizeof(pConfig->operations[EI_OP_ID_SCAN_FWD]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_READ_HEADERS]))) - (uint8_t*)(&((*pConfig)))) == ((1200))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1166 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_READ_HEADERS]))) - (uint8_t*)(&((*pConfig)))) == ((1200))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_READ_HEADERS]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1166 , "sizeof(pConfig->operations[EI_OP_ID_READ_HEADERS]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST_VC]))) - (uint8_t*)(&((*pConfig)))) == ((1272))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1167 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST_VC]))) - (uint8_t*)(&((*pConfig)))) == ((1272))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST_VC]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1167 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST_VC]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1344))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1168 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1344))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1168 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1416))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1169 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1416))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_MTM]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1169 , "sizeof(pConfig->operations[EI_OP_ID_RLC_MTM]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1488))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1170 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1488))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_XOR]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1170 , "sizeof(pConfig->operations[EI_OP_ID_RLC_XOR]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1560))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1171 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_HOST]))) - (uint8_t*)(&((*pConfig)))) == ((1560))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_HOST]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1171 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_HOST]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_RLC]))) - (uint8_t*)(&((*pConfig)))) == ((1632))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1172 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_RLC]))) - (uint8_t*)(&((*pConfig)))) == ((1632))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_RLC]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1172 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_RLC]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1704))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1173 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_MTM]))) - (uint8_t*)(&((*pConfig)))) == ((1704))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_MTM]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1173 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_MTM]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1776))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1174 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_BRLC_XOR]))) - (uint8_t*)(&((*pConfig)))) == ((1776))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_BRLC_XOR]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1174 , "sizeof(pConfig->operations[EI_OP_ID_BRLC_XOR]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_IFS]))) - (uint8_t*)(&((*pConfig)))) == ((1848))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1175 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_IFS]))) - (uint8_t*)(&((*pConfig)))) == ((1848))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_IFS]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1175 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_IFS]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI]))) - (uint8_t*)(&((*pConfig)))) == ((1920))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1176 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI]))) - (uint8_t*)(&((*pConfig)))) == ((1920))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1176 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_BOOT]))) - (uint8_t*)(&((*pConfig)))) == ((1992))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1177 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_BOOT]))) - (uint8_t*)(&((*pConfig)))) == ((1992))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_BOOT]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1177 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_BOOT]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_DIR]))) - (uint8_t*)(&((*pConfig)))) == ((2064))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1178 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_DIR]))) - (uint8_t*)(&((*pConfig)))) == ((2064))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_DIR]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1178 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_DIR]) == (72)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS]))) - (uint8_t*)(&((*pConfig)))) == ((2136))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1179 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS]))) - (uint8_t*)(&((*pConfig)))) == ((2136))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS]) == (72)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1179 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS]) == (72)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].valid))) - (uint8_t*)(&((pConfig->operations[0])))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1182 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].valid))) - (uint8_t*)(&((pConfig->operations[0])))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].valid) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1182 , "sizeof(pConfig->operations[0].valid) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].isParticipantInBurst))) - (uint8_t*)(&((pConfig->operations[0])))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1183 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].isParticipantInBurst))) - (uint8_t*)(&((pConfig->operations[0])))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].isParticipantInBurst) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1183 , "sizeof(pConfig->operations[0].isParticipantInBurst) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnRead))) - (uint8_t*)(&((pConfig->operations[0])))) == ((2))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1184 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnRead))) - (uint8_t*)(&((pConfig->operations[0])))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].chanceToInitiateBurstOnRead) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1184 , "sizeof(pConfig->operations[0].chanceToInitiateBurstOnRead) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnProg))) - (uint8_t*)(&((pConfig->operations[0])))) == ((3))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1185 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].chanceToInitiateBurstOnProg))) - (uint8_t*)(&((pConfig->operations[0])))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].chanceToInitiateBurstOnProg) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1185 , "sizeof(pConfig->operations[0].chanceToInitiateBurstOnProg) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1186 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1186 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_SPECIAL]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((5))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1187 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1187 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1188 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1188 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_MOUNT_DPS]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((7))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1189 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1189 , "sizeof(pConfig->operations[0].operationalStateChances[EI_OPERATIONAL_STATE_NORMAL]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1190 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1190 , "sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_READ]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1191 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1191 , "sizeof(pConfig->operations[0].opTypeFailureChances[EI_FLASH_PROG]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((16))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1192 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1192 , "sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_SLC]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((17))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1193 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((17))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1193 , "sizeof(pConfig->operations[0].blockTypeFailureChances[EI_BLOCK_TYPE_MLC]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((24))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1194 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1194 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_0]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((25))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1195 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((25))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1195 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_1]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((26))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1196 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((26))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1196 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_LAST]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((27))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1197 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((27))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1197 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_PRE_LAST]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((28))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1198 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((28))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1198 , "sizeof(pConfig->operations[0].pagePlacementChances[EI_PLACEMENT_PAGE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((32))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1199 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((32))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1199 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_OPEN_ZONE_OPEN_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((33))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1200 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((33))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1200 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_OPEN_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((34))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1201 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((34))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1201 , "sizeof(pConfig->operations[0].zoneStateChances[EI_ZONE_STATE_CLOSED_ZONE_CLOSED_BLOCK]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].opidSpecificChances))) - (uint8_t*)(&((pConfig->operations[0])))) == ((40))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1202 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].opidSpecificChances))) - (uint8_t*)(&((pConfig->operations[0])))) == ((40))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].opidSpecificChances) == (24)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1202 , "sizeof(pConfig->operations[0].opidSpecificChances) == (24)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((64))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1203 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1203 , "sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_PF_EF_DURING_PF]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((65))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1204 , "(uint32_t)((uint8_t*)(&((pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]))) - (uint8_t*)(&((pConfig->operations[0])))) == ((65))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1204 , "sizeof(pConfig->operations[0].nestedFailuresChances[EI_NESTED_READ_DURING_PF]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations) == 6), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1207 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations) == 6");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons) == 16), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1208 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons) == 16");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1209 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1209 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_BEGINNING]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1210 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1210 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_MIDDLE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((2))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1211 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1211 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_0_ENDING]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((3))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1212 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((3))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1212 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_BEGINNING]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1213 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1213 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_MIDDLE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((5))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1214 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1214 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.locations[EI_LOG_COPY_1_ENDING]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1215 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1215 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FIRST_MOUNT]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((7))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1216 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1216 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_GSD_DONE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1217 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1217 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_MOUNT_UGSD_DONE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1218 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1218 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_GSD]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((10))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1219 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1219 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BLOCK_ALLOCATED]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((11))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1220 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1220 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FLASH_FILL]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((12))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1221 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1221 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_PWS]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((13))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1222 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1222 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FNVM]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((14))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1223 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((14))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1223 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_DECOMMISSIONED]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((15))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1224 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((15))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1224 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FE_SMART]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((16))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1225 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((16))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1225 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_INFRA_SMART]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((17))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1226 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((17))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1226 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FTL_SMART]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((18))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1227 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((18))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1227 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_BLOCK_ALLOC_FAILURE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((19))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1228 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((19))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1228 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_BRLC_COMPLETE]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((20))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1229 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((20))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1229 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_FMBL_NOT_FULL]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((21))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1230 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_LOG].opidSpecificChances)))) == ((21))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1230 , "sizeof(pConfig->operations[EI_OP_ID_LOG].opidSpecificChances.logChances.reasons[EI_LOG_WRITE_REASON_READONLY]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes) == 2), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1233 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1234 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1234 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_XRAM]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1235 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1235 , "sizeof(pConfig->operations[EI_OP_ID_XOR].opidSpecificChances.xorChances.xorLoadTypes[EI_XOR_LOAD_TYPE_DRAM]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets) == 2), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1238 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons) == 2), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1239 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1240 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1240 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_XRAM]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1241 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1241 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildTargets[EI_REBUILD_TARGET_DRAM]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1242 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1242 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_UGSD]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1243 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1243 , "sizeof(pConfig->operations[EI_OP_ID_XOR_ZONE_REBUILD].opidSpecificChances.rebuildChances.rebuildReasons[EI_REBUILD_REASON_LOAD_FAILURE]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes) == 2), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1246 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1247 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1247 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1248 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1248 , "sizeof(pConfig->operations[EI_OP_ID_RLC_HOST].opidSpecificChances.rlcChances.rlcTypes[EI_RLC_TYPE_STATIC]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes) == 2), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1251 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes) == 2");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1252 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1252 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1253 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1253 , "sizeof(pConfig->operations[EI_OP_ID_INFRA_FADI].opidSpecificChances.fadiChances.fadiTypes[EI_FADI_TYPE_JTAG]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes) == 3), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1256 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes) == 3");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1257 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1257 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_OTHER]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((1))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1258 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((1))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1258 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_RPMB]) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((2))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1259 , "(uint32_t)((uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]))) - (uint8_t*)(&((pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1259 , "sizeof(pConfig->operations[EI_OP_ID_HOSTLESS].opidSpecificChances.hostlessChances.hostlessTypes[EI_HOSTLESS_TYPE_BOOTPARTITION]) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalRead)) - (uint8_t*)(&(pConfig->chances))) == (0)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1262 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalRead)) - (uint8_t*)(&(pConfig->chances))) == (0)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceXorRecRead)) - (uint8_t*)(&(pConfig->chances))) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1263 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceXorRecRead)) - (uint8_t*)(&(pConfig->chances))) == (16)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChancePfRecRead)) - (uint8_t*)(&(pConfig->chances))) == (32)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1264 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChancePfRecRead)) - (uint8_t*)(&(pConfig->chances))) == (32)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalProg)) - (uint8_t*)(&(pConfig->chances))) == (48)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1265 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalProg)) - (uint8_t*)(&(pConfig->chances))) == (48)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedProg)) - (uint8_t*)(&(pConfig->chances))) == (64)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1266 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedProg)) - (uint8_t*)(&(pConfig->chances))) == (64)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalErase)) - (uint8_t*)(&(pConfig->chances))) == (80)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1267 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceOriginalErase)) - (uint8_t*)(&(pConfig->chances))) == (80)");                         "BullseyeCoverage restore"; } ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedErase)) - (uint8_t*)(&(pConfig->chances))) == (96)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1268 , "(uint32_t)((uint8_t*)(&(pConfig->chances.failChanceNestedErase)) - (uint8_t*)(&(pConfig->chances))) == (96)");                         "BullseyeCoverage restore"; } ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.cooldownTimeBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1271 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.cooldownTimeBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.cooldownTimeBurst) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1271 , "sizeof(pConfig->burstMode.cooldownTimeBurst) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.consecutiveGapBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1272 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.consecutiveGapBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.consecutiveGapBurst) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1272 , "sizeof(pConfig->burstMode.consecutiveGapBurst) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.maxInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1273 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.maxInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.maxInjectionsPerBurst) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1273 , "sizeof(pConfig->burstMode.maxInjectionsPerBurst) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.minInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((9))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1274 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.minInjectionsPerBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((9))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.minInjectionsPerBurst) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1274 , "sizeof(pConfig->burstMode.minInjectionsPerBurst) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.isBackToBack))) - (uint8_t*)(&((pConfig->burstMode)))) == ((10))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1275 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.isBackToBack))) - (uint8_t*)(&((pConfig->burstMode)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.isBackToBack) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1275 , "sizeof(pConfig->burstMode.isBackToBack) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceToInitiateBurstOnErase))) - (uint8_t*)(&((pConfig->burstMode)))) == ((11))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1276 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceToInitiateBurstOnErase))) - (uint8_t*)(&((pConfig->burstMode)))) == ((11))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.chanceToInitiateBurstOnErase) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1276 , "sizeof(pConfig->burstMode.chanceToInitiateBurstOnErase) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceEraseFailureDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((12))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1277 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.chanceEraseFailureDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((12))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.chanceEraseFailureDuringBurst) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1277 , "sizeof(pConfig->burstMode.chanceEraseFailureDuringBurst) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->burstMode.isSolePfDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((13))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1278 , "(uint32_t)((uint8_t*)(&((pConfig->burstMode.isSolePfDuringBurst))) - (uint8_t*)(&((pConfig->burstMode)))) == ((13))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->burstMode.isSolePfDuringBurst) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1278 , "sizeof(pConfig->burstMode.isSolePfDuringBurst) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1279 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1279 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chanceCapTestFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((36))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1280 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chanceCapTestFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((36))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.chanceCapTestFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1280 , "sizeof(pConfig->configArraysExtenstion.chanceCapTestFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chancePlpProcessFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((37))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1281 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.chancePlpProcessFailure))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((37))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.chancePlpProcessFailure) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1281 , "sizeof(pConfig->configArraysExtenstion.chancePlpProcessFailure) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1282 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eraseChances) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1282 , "sizeof(pConfig->configArraysExtenstion.eraseChances) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eiEnConfigFlowID))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((54))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1283 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eiEnConfigFlowID))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((54))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eiEnConfigFlowID) == ( (10) )), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1283 , "sizeof(pConfig->configArraysExtenstion.eiEnConfigFlowID) == ((10))");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.eraseFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1284 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.eraseChances.eraseFailureChances))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((38))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.eraseChances.eraseFailureChances) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1284 , "sizeof(pConfig->configArraysExtenstion.eraseChances.eraseFailureChances) == (4)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1287 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId) == (2)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1287 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpFirstTriggerId) == (2)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((2))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1288 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((2))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId) == (2)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1288 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpSecondTriggerId) == (2)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpChance))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1289 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpChance))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpChance) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1289 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpChance) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((5))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1290 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1290 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpActionDpa) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1291 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1291 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpUsingWaitingLoop) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((7))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1292 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((7))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1292 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPlpAllowedDuringMount) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1293 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds) == (2)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1293 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.plpMaxDelayInMilliSeconds) == (2)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((10))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1294 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp))) - (uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters)))) == ((10))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1294 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters.isPfEfAllowedDuringPlp) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1297 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.failureType) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1297 , "sizeof(pConfig->singleInjections[0].injParams.read.failureType) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.triggerRlc))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1298 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.triggerRlc))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.triggerRlc) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1298 , "sizeof(pConfig->singleInjections[0].injParams.read.triggerRlc) == (1)");                         "BullseyeCoverage restore"; } ; ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failurePerFmuMap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((8))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1300 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.read.failurePerFmuMap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((8))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.read.failurePerFmuMap) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1300 , "sizeof(pConfig->singleInjections[0].injParams.read.failurePerFmuMap) == (16)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1303 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.failureType) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1303 , "sizeof(pConfig->singleInjections[0].injParams.prog.failureType) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1304 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1304 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadPagesList) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((20))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1305 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((20))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList) == (32)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1305 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjReadByteMapsList) == (32)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((52))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1306 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((52))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList) == (16)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1306 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedInjProgEraseList) == (16)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((68))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1307 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((68))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1307 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedListProgEraseSize) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListReadSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((69))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1308 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.nestedListReadSize))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((69))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.nestedListReadSize) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1308 , "sizeof(pConfig->singleInjections[0].injParams.prog.nestedListReadSize) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((70))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1309 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((70))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.doInjectMultiplane) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1309 , "sizeof(pConfig->singleInjections[0].injParams.prog.doInjectMultiplane) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.isParityPage))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((71))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1310 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.isParityPage))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((71))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.isParityPage) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1310 , "sizeof(pConfig->singleInjections[0].injParams.prog.isParityPage) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.EPWRbitmap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((72))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1311 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.EPWRbitmap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((72))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.EPWRbitmap) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1311 , "sizeof(pConfig->singleInjections[0].injParams.prog.EPWRbitmap) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((76))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1312 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((76))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1312 , "sizeof(pConfig->singleInjections[0].injParams.prog.XORStoreMetaPgOffs) == (1)");                         "BullseyeCoverage restore"; } ; ;


   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1315 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.failureType))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.failureType) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1315 , "sizeof(pConfig->singleInjections[0].injParams.erase.failureType) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1316 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1316 , "sizeof(pConfig->singleInjections[0].injParams.erase.numNestedEraseInjections) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((5))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1317 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doInjectMultiplane))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((5))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.doInjectMultiplane) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1317 , "sizeof(pConfig->singleInjections[0].injParams.erase.doInjectMultiplane) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1318 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1318 , "sizeof(pConfig->singleInjections[0].injParams.erase.doPowerAbortOnLastNestedInjection) == (1)");                         "BullseyeCoverage restore"; } ; ;

#line 1324 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1324 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((0))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1324 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].readInjBytemap) == (4)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1325 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((4))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin) == (2)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1325 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].offsetInBin) == (2)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1326 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((6))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber) == (1)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1326 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.ei[0].binNumber) == (1)");                         "BullseyeCoverage restore"; } ; ;
   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.size))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((64))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1327 , "(uint32_t)((uint8_t*)(&((pConfig->singleInjections[0].injParams.xor_rec.size))) - (uint8_t*)(&((pConfig->singleInjections[0].injParams)))) == ((64))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->singleInjections[0].injParams.xor_rec.size) == (4)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1327 , "sizeof(pConfig->singleInjections[0].injParams.xor_rec.size) == (4)");                         "BullseyeCoverage restore"; } ; ;

   { "BullseyeCoverage save off";                          _AssertImpl((int)((uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1329 , "(uint32_t)((uint8_t*)(&((pConfig->configArraysExtenstion.plpModeParameters))) - (uint8_t*)(&((pConfig->configArraysExtenstion)))) == ((24))");                         "BullseyeCoverage restore"; } ;                 { "BullseyeCoverage save off";                          _AssertImpl((int)(sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1329 , "sizeof(pConfig->configArraysExtenstion.plpModeParameters) == (12)");                         "BullseyeCoverage restore"; } ; ;
}

Status_t  __attribute__((section("CODE_EI_RAM")))  EI_ConfigInputValidation(const EI_Config_t *config)
{
   Status_t st;


   { "BullseyeCoverage save off";                          _AssertImpl((int)(config), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1337 , "config");                         "BullseyeCoverage restore"; } ;

   st = EI_i_ConfValidHeader(config);
   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1340 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;


   switch (config->generalConfig.confType)
   {
      case EI_CONF_TYPE_RANDOM:
         st = EI_i_ConfValidRandInjection(config);
         break;
      case EI_CONF_TYPE_SINGLE:
         st = EI_i_ConfValidSingleInjection(config);
         break;
      default:
         st = STATUS_ERROR;
         break;
   }

   if((st) != STATUS_OK) { printf("[DBG_MSG_INFO]      "); printf("%s:%d: EI status check failur: returned status 0x%x", "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1356 , st); printf("\n");fflush( (__acrt_iob_func(1)) ); ; return (st);} ;

   return STATUS_OK;
}









BOOL32  __attribute__((section("CODE_EI_RAM")))  EI_Config_IsReadfailurePerFmuMapConfigure(const uint8_t* pFReadFailurePerFmuMap)
{
   uint8_t i;
   BOOL32 errorConfigured =  (0) ;

   for (i = 0; i <  ( (4)  * (4) ) ; i++)
   {
      if(!(pFReadFailurePerFmuMap[i] < EI_READ_FAILURE_LEVEL_TOTAL)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1376 ); return STATUS_ERROR;} ;

      if(!(pFReadFailurePerFmuMap[i] != EI_READ_FAILURE_LEVEL_SW_TH)) { EI_i_TraceBadConfig( "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1378 ); return STATUS_ERROR;} ;


      if (pFReadFailurePerFmuMap[i] > EI_READ_FAILURE_LEVEL_NONE)
      {
         errorConfigured =  (1) ;
      }

   }

   return errorConfigured;
}

#line 1483 "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c"
BOOL32 isFailureTypeInP2PPattern(EI_ProgFailureType_t failureType)
{
   return failureType == EI_PROG_FAILURE_TYPE_1WL_2PLANES ||
      failureType == EI_PROG_FAILURE_TYPE_2PLANES_WL2WL ||
      failureType == EI_PROG_FAILURE_TYPE_WL2WL_P2P;
}








void  __attribute__((section("CODE_EI_RAM")))  EI_ConfDisableP2PPatternInjections(EI_Config_t* config)
{

   if (config->generalConfig.confType == EI_CONF_TYPE_RANDOM)
   {
      config->chances.failChanceOriginalProg[EI_PROG_FAILURE_PATTERN_1WL] += (EI_Percent_t)
         (config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES] +
         config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL] +
         config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P]);
      config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES] = 0;
      config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL] = 0;
      config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P] = 0;
   }
   else
   {
      { "BullseyeCoverage save off";                          _AssertImpl((int)(config->generalConfig.confType == EI_CONF_TYPE_SINGLE), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1512 , "config->generalConfig.confType == EI_CONF_TYPE_SINGLE");                         "BullseyeCoverage restore"; } ;
      for (int i = 0; i <  (6) ; i++)
      {
         if (config->singleInjections[i].isValid &&
            config->singleInjections[i].opToInject == EI_INJ_OP_PROG &&
            isFailureTypeInP2PPattern(config->singleInjections[i].injParams.prog.failureType))
         {
            config->singleInjections[i].injParams.prog.failureType = EI_PROG_FAILURE_PATTERN_1WL;
         }
      }
   }

   if (config->generalConfig.confType == EI_CONF_TYPE_RANDOM)
   {
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES]), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1526 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_1WL_2PLANES]");                         "BullseyeCoverage restore"; } ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL]), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1527 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_2PLANES_WL2WL]");                         "BullseyeCoverage restore"; } ;
      { "BullseyeCoverage save off";                          _AssertImpl((int)(!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P]), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1528 , "!config->chances.failChanceOriginalProg[EI_PROG_FAILURE_TYPE_WL2WL_P2P]");                         "BullseyeCoverage restore"; } ;
   }
   else
   {
      { "BullseyeCoverage save off";                          _AssertImpl((int)(config->generalConfig.confType == EI_CONF_TYPE_SINGLE), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1532 , "config->generalConfig.confType == EI_CONF_TYPE_SINGLE");                         "BullseyeCoverage restore"; } ;
      for (int i = 0; i <  (6) ; i++)
      {
         if (config->singleInjections[i].isValid &&
            config->singleInjections[i].opToInject == EI_INJ_OP_PROG)
         {
            { "BullseyeCoverage save off";                          _AssertImpl((int)(!isFailureTypeInP2PPattern(config->singleInjections[i].injParams.prog.failureType)), "d:/gitrepo/fpgcss-vega/source/ftl/ei/src/ei_config.c" , 1538 , "!isFailureTypeInP2PPattern(config->singleInjections[i].injParams.prog.failureType)");                         "BullseyeCoverage restore"; } ;
         }
      }
   }
}



uint8_t EI_IS_FLOW_CONFIG(EI_Config_t* config)
{
   uint8_t res =  (0) ;
   uint8_t* pByteConfigFlow =  ((void *)0) ;
   uint8_t* pByteActiveFlow =  ((void *)0) ;
   uint32_t byteIdx = 0;
   pByteConfigFlow = config->configArraysExtenstion.eiEnConfigFlowID;

   for (byteIdx = 0; byteIdx <  (10) ; byteIdx++)
   {
      if (*pByteConfigFlow)
      {
         res =  (1) ;
         break;
      }
      pByteConfigFlow++;
      pByteActiveFlow++;
   }
   return res;
}



uint8_t EI_IS_FLOW_ACTIVE()
{
   uint8_t res =  (0) ;
   uint8_t* pByteConfigFlow =  ((void *)0) ;
   uint8_t* pByteActiveFlow =  ((void *)0) ;
   uint32_t byteIdx = 0;
   pByteConfigFlow = EI_GlobalStructs.mp->config.configArraysExtenstion.eiEnConfigFlowID;
   pByteActiveFlow = gEI_ActiveFlow;

   for (byteIdx = 0; byteIdx <  (10) ; byteIdx++)
   {
      if (*pByteConfigFlow & *pByteActiveFlow)
      {
         res =  (1) ;
         break;
      }
      pByteConfigFlow++;
      pByteActiveFlow++;
   }
   return res;
}
